(function () {
// Copyright (c) 2009-2012 Turbulenz Limited
/*global Float32Array: false*/
/*global TurbulenzEngine: false*/

//
// Vector math library
//
var VMathArrayConstructor = [].constructor;

// Ensure there is a slice function available for Float32Arrays

if ((typeof Float32Array !== "undefined") &&
    (Float32Array.prototype !== undefined) &&
    (Float32Array.prototype.slice === undefined))
{
    Float32Array.prototype.slice = function Float32ArraySlice(s, e)
    {
        var length = this.length;
        if (s === undefined)
        {
            s = 0;
        }
        else if (s < 0)
        {
            s += length;
        }
        if (e === undefined)
        {
            e = length;
        }
        else if (e < 0)
        {
            e += length;
        }

        length = (e - s);
        if (0 < length)
        {
            var dst = new Float32Array(length);
            var n = 0;
            do
            {
                dst[n] = this[s];
                n += 1;
                s += 1;
            }
            while (s < e);
            return dst;
        }
        else
        {
            return new Float32Array();
        }
    };
}

var VMath =
{
    version : 1,

    // Default precision for equality comparations
    precision : 1e-6,

    FLOAT_MAX : Number.MAX_VALUE,

    select : function selectFn(m, a, b)
    {
        if (m)
        {
            return a;
        }
        else
        {
            return b;
        }
    },

    reciprocal : function reciprocalFn(a)
    {
        if (a !== 0.0)
        {
            return (1.0 / a);
        }
        else
        {
            throw "Division by zero";
        }
    },

    /*jshint bitwise: false*/
    truncate : function truncateFn(value)
    {
        return (value | 0);
    },
    /*jshint bitwise: true*/

    //
    // Vector2
    //
    v2BuildZero : function v2BuildZeroFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = 0.0;
        dst[1] = 0.0;
        return dst;
    },

    v2BuildOne : function v2BuildOneFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = 1.0;
        dst[1] = 1.0;
        return dst;
    },

    v2BuildXAxis : function v2BuildXAxisFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = 1.0;
        dst[1] = 0.0;
        return dst;
    },

    v2BuildYAxis : function v2BuildYAxisFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = 0.0;
        dst[1] = 1.0;
        return dst;
    },

    v2Build : function v2Fn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = a;
        dst[1] = b;
        return dst;
    },

    v2Copy : function v2CopyFn(src, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = src[0];
        dst[1] = src[1];
        return dst;
    },

    v2Set : function v2SetFn(v, a)
    {
        v[0] = a[0];
        v[1] = a[1];
    },

    v2Neg : function v2NegFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = -a[0];
        dst[1] = -a[1];
        return dst;
    },

    v2Add : function v2AddFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = a[0] + b[0];
        dst[1] = a[1] + b[1];
        return dst;
    },

    v2Add3 : function v2Add3Fn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = a[0] + b[0] + c[0];
        dst[1] = a[1] + b[1] + c[1];
        return dst;
    },

    v2Add4 : function v2Add4Fn(a, b, c, d, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = a[0] + b[0] + c[0] + d[0];
        dst[1] = a[1] + b[1] + c[1] + d[1];
        return dst;
    },

    v2Sub : function v2SubFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = (a[0] - b[0]);
        dst[1] = (a[1] - b[1]);
        return dst;
    },

    v2Mul : function v2MulFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = (a[0] * b[0]);
        dst[1] = (a[1] * b[1]);
        return dst;
    },

    v2MulAdd : function v2MulAddFn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = (a[0] * b[0]) + c[0];
        dst[1] = (a[1] * b[1]) + c[1];
        return dst;
    },

    v2Dot : function v2DotFn(a, b)
    {
        return ((a[0] * b[0]) + (a[1] * b[1]));
    },

    v2PerpDot : function v2PerpDot(a, b)
    {
        return ((a[0] * b[1]) - (a[1] * b[0]));
    },

    v2LengthSq : function v2LengthSqFn(a)
    {
        var a0 = a[0];
        var a1 = a[1];
        return ((a0 * a0) + (a1 * a1));
    },

    v2Length : function v2LengthFn(a)
    {
        var a0 = a[0];
        var a1 = a[1];
        return Math.sqrt((a0 * a0) + (a1 * a1));
    },

    v2Reciprocal : function v2ReciprocalFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }

        var rcp = VMath.reciprocal;
        dst[0] = rcp(a[0]);
        dst[1] = rcp(a[1]);
        return dst;
    },

    v2Normalize : function v2NormalizeFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        var a0 = a[0];
        var a1 = a[1];
        var lsq = ((a0 * a0) + (a1 * a1));
        if (lsq > 0.0)
        {
            var lr = 1.0 / Math.sqrt(lsq);
            dst[0] = (a0 * lr);
            dst[1] = (a1 * lr);
        }
        else
        {
            dst[0] = 0;
            dst[1] = 0;
        }
        return dst;
    },

    v2Abs : function v2AbsFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        var abs = Math.abs;
        dst[0] = abs(a[0]);
        dst[1] = abs(a[1]);
        return dst;
    },

    v2Max : function v2MaxFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        var max = Math.max;
        dst[0] = max(a[0], b[0]);
        dst[1] = max(a[1], b[1]);
        return dst;
    },

    v2Min : function v2MinFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        var min = Math.min;
        dst[0] = min(a[0], b[0]);
        dst[1] = min(a[1], b[1]);
        return dst;
    },

    v2Equal : function v2EqualFn(a, b, precision)
    {
        var abs = Math.abs;
        if (precision === undefined)
        {
            precision = this.precision;
        }
        return (abs(a[0] - b[0]) <= precision &&
                abs(a[1] - b[1]) <= precision);
    },

    // Vector2 'masks'
    v2MaskEqual : function v2MaskEqualFn(a, b)
    {
        var abs = Math.abs;
        var precision = VMath.precision;
        return [(abs(a[0] - b[0]) <= precision),
                (abs(a[1] - b[1]) <= precision)];
    },

    v2MaskLess : function v2MaskLessFn(a, b)
    {
        return [(a[0] < b[0]),
                (a[1] < b[1])];
    },

    v2MaskGreater : function v2MaskGreaterFn(a, b)
    {
        return [(a[0] > b[0]),
                (a[1] > b[1])];
    },

    v2MaskGreaterEq : function v2MaskGreaterEqFn(a, b)
    {
        return [(a[0] >= b[0]),
                (a[1] >= b[1])];
    },

    v2MaskNot : function v2MaskNotFn(a)
    {
        return [!a[0],
                !a[1]];
    },

    v2MaskOr : function v2MaskOrFn(a, b)
    {
        return [(a[0] || b[0]),
                (a[1] || b[1])];
    },

    v2MaskAnd : function v2MaskAndFn(a, b)
    {
        return [(a[0] && b[0]),
                (a[1] && b[1])];
    },

    v2Select : function v2SelectFn(m, a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = m[0] ? a[0] : b[0];
        dst[1] = m[1] ? a[1] : b[1];
        return dst;
    },

    // Vector2 operations with scalar
    v2ScalarBuild : function v2ScalarBuildFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }

        dst[0] = a;
        dst[1] = a;

        return dst;
    },

    v2ScalarMax : function v2ScalarMaxFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }

        var max = Math.max;
        dst[0] = max(a[0], b);
        dst[1] = max(a[1], b);

        return dst;
    },

    v2ScalarMin : function v2ScalarMinFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }

        var min = Math.min;
        dst[0] = min(a[0], b);
        dst[1] = min(a[1], b);

        return dst;
    },

    v2ScalarAdd : function v2ScalarAddFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }

        dst[0] = (a[0] + b);
        dst[1] = (a[1] + b);

        return dst;
    },

    v2ScalarSub : function v2ScalarSubFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }

        dst[0] = (a[0] - b);
        dst[1] = (a[1] - b);

        return dst;
    },

    v2ScalarMul : function v2ScalarMulFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        if (b === 0)
        {
            dst[0] = 0;
            dst[1] = 0;
        }
        else
        {
            dst[0] = a[0] * b;
            dst[1] = a[1] * b;
        }
        return dst;
    },

    v2AddScalarMul : function v2AddScalarMulFn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = a[0] + b[0] * c;
        dst[1] = a[1] + b[1] * c;
        return dst;
    },

    // Vector2 'masks' with scalars
    v2EqualScalarMask : function v2EqualScalarMaskFn(a, b)
    {
        var abs = Math.abs;
        var precision = VMath.precision;
        return [(abs(a[0] - b) <= precision),
                (abs(a[1] - b) <= precision)];
    },

    v2LessScalarMask : function v2LessScalarMaskFn(a, b)
    {
        return [(a[0] < b),
                (a[1] < b)];
    },

    v2GreaterScalarMask : function v2GreaterScalarMaskFn(a, b)
    {
        return [(a[0] > b),
                (a[1] > b)];
    },

    v2GreaterEqScalarMask : function v2GreaterEqScalarMaskFn(a, b)
    {
        return [(a[0] >= b),
                (a[1] >= b)];
    },

    v2Lerp : function v2LerpFn(a, b, t, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(2);
        }
        dst[0] = (a[0] + ((b[0] - a[0]) * t));
        dst[1] = (a[1] + ((b[1] - a[1]) * t));
        return dst;
    },

    //
    // Vector3
    //
    v3BuildZero : function v3BuildZeroFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = 0.0;
        dst[1] = 0.0;
        dst[2] = 0.0;
        return dst;
    },

    v3BuildOne  : function v3BuildOneFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = 1.0;
        dst[1] = 1.0;
        dst[2] = 1.0;
        return dst;
    },

    v3BuildXAxis : function v3BuildXAxisFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = 1.0;
        dst[1] = 0.0;
        dst[2] = 0.0;
        return dst;
    },

    v3BuildYAxis : function v3BuildYAxisFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = 0.0;
        dst[1] = 1.0;
        dst[2] = 0.0;
        return dst;
    },

    v3BuildZAxis : function v3BuildZAxisFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = 0.0;
        dst[1] = 0.0;
        dst[2] = 1.0;
        return dst;
    },

    v3Build : function v3Fn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = a;
        dst[1] = b;
        dst[2] = c;
        return dst;
    },

    v3Copy : function v3CopyFn(src, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = src[0];
        dst[1] = src[1];
        dst[2] = src[2];
        return dst;
    },

    v3Set : function v3SetFn(v, a)
    {
        v[0] = a[0];
        v[1] = a[1];
        v[2] = a[2];
    },

    v3Neg : function v3NegFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = -a[0];
        dst[1] = -a[1];
        dst[2] = -a[2];
        return dst;
    },

    v3Add : function v3AddFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = (a[0] + b[0]);
        dst[1] = (a[1] + b[1]);
        dst[2] = (a[2] + b[2]);
        return dst;
    },

    v3Add3 : function v3Add3Fn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = a[0] + b[0] + c[0];
        dst[1] = a[1] + b[1] + c[1];
        dst[2] = a[2] + b[2] + c[2];
        return dst;
    },

    v3Add4 : function v3Add4Fn(a, b, c, d, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = a[0] + b[0] + c[0] + d[0];
        dst[1] = a[1] + b[1] + c[1] + d[1];
        dst[2] = a[2] + b[2] + c[2] + d[2];
        return dst;
    },

    v3Sub : function v3SubFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = (a[0] - b[0]);
        dst[1] = (a[1] - b[1]);
        dst[2] = (a[2] - b[2]);
        return dst;
    },

    v3Mul : function v3MulFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = (a[0] * b[0]);
        dst[1] = (a[1] * b[1]);
        dst[2] = (a[2] * b[2]);
        return dst;
    },

    v3MulAdd : function v3MulAddFn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = (a[0] * b[0]) + c[0];
        dst[1] = (a[1] * b[1]) + c[1];
        dst[2] = (a[2] * b[2]) + c[2];
        return dst;
    },

    v3Dot : function v3DotFn(a, b)
    {
        return ((a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]));
    },

    v3Cross : function v3CrossFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        var b0 = b[0];
        var b1 = b[1];
        var b2 = b[2];
        dst[0] = ((a1 * b2) - (a2 * b1));
        dst[1] = ((a2 * b0) - (a0 * b2));
        dst[2] = ((a0 * b1) - (a1 * b0));
        return dst;
    },

    v3LengthSq : function v3LengthSqFn(a)
    {
        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        return ((a0 * a0) + (a1 * a1) + (a2 * a2));
    },

    v3Length : function v3LengthFn(a)
    {
        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        return Math.sqrt((a0 * a0) + (a1 * a1) + (a2 * a2));
    },

    v3Reciprocal : function v3ReciprocalFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        var rcp = VMath.reciprocal;
        dst[0] = rcp(a[0]);
        dst[1] = rcp(a[1]);
        dst[2] = rcp(a[2]);
        return dst;
    },

    v3Normalize : function v3NormalizeFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        var lsq = ((a0 * a0) + (a1 * a1) + (a2 * a2));
        if (lsq > 0.0)
        {
            var lr = 1.0 / Math.sqrt(lsq);
            dst[0] = (a0 * lr);
            dst[1] = (a1 * lr);
            dst[2] = (a2 * lr);
        }
        else
        {
            dst[0] = 0;
            dst[1] = 0;
            dst[2] = 0;
        }
        return dst;
    },

    v3Abs : function v3AbsFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        var abs = Math.abs;
        dst[0] = abs(a[0]);
        dst[1] = abs(a[1]);
        dst[2] = abs(a[2]);
        return dst;
    },

    v3Max : function v3MaxFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        var max = Math.max;
        dst[0] = max(a[0], b[0]);
        dst[1] = max(a[1], b[1]);
        dst[2] = max(a[2], b[2]);
        return dst;
    },

    v3Min : function v3MinFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        var min = Math.min;
        dst[0] = min(a[0], b[0]);
        dst[1] = min(a[1], b[1]);
        dst[2] = min(a[2], b[2]);
        return dst;
    },

    v3Equal : function v3EqualFn(a, b, precision)
    {
        var abs = Math.abs;
        if (precision === undefined)
        {
            precision = this.precision;
        }
        return (abs(a[0] - b[0]) <= precision &&
                abs(a[1] - b[1]) <= precision &&
                abs(a[2] - b[2]) <= precision);
    },

    // Vector3 'masks'
    v3MaskEqual : function v3MaskEqualFn(a, b)
    {
        var abs = Math.abs;
        var precision = VMath.precision;
        return [(abs(a[0] - b[0]) <= precision),
                (abs(a[1] - b[1]) <= precision),
                (abs(a[2] - b[2]) <= precision)];
    },

    v3MaskLess : function v3MaskLessFn(a, b)
    {
        return [(a[0] < b[0]),
                (a[1] < b[1]),
                (a[2] < b[2])];
    },

    v3MaskGreater : function v3MaskGreaterFn(a, b)
    {
        return [(a[0] > b[0]),
                (a[1] > b[1]),
                (a[2] > b[2])];
    },

    v3MaskGreaterEq : function v3MaskGreaterEqFn(a, b)
    {
        return [(a[0] >= b[0]),
                (a[1] >= b[1]),
                (a[2] >= b[2])];
    },

    v3MaskNot : function v3MaskNotFn(a)
    {
        return [!a[0],
                !a[1],
                !a[2]];
    },

    v3MaskOr : function v3MaskOrFn(a, b)
    {
        return [(a[0] || b[0]),
                (a[1] || b[1]),
                (a[2] || b[2])];
    },

    v3MaskAnd : function v3MaskAndFn(a, b)
    {
        return [(a[0] && b[0]),
                (a[1] && b[1]),
                (a[2] && b[2])];
    },

    v3Select : function v3SelectFn(m, a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[0] ? a[0] : b[0];
        dst[1] = m[1] ? a[1] : b[1];
        dst[2] = m[2] ? a[2] : b[2];
        return dst;
    },

    // Vector3 operations with scalar
    v3ScalarBuild : function v3ScalarBuildFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        dst[0] = a;
        dst[1] = a;
        dst[2] = a;

        return dst;
    },

    v3ScalarMax : function v3ScalarMaxFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        var max = Math.max;
        dst[0] = max(a[0], b);
        dst[1] = max(a[1], b);
        dst[2] = max(a[2], b);

        return dst;
    },

    v3ScalarMin : function v3ScalarMinFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        var min = Math.min;
        dst[0] = min(a[0], b);
        dst[1] = min(a[1], b);
        dst[2] = min(a[2], b);

        return dst;
    },

    v3ScalarAdd : function v3ScalarAddFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        dst[0] = (a[0] + b);
        dst[1] = (a[1] + b);
        dst[2] = (a[2] + b);

        return dst;
    },

    v3ScalarSub : function v3ScalarSubFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        dst[0] = (a[0] - b);
        dst[1] = (a[1] - b);
        dst[2] = (a[2] - b);

        return dst;
    },

    v3ScalarMul : function v3ScalarMulFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        if (b === 0)
        {
            dst[0] = 0;
            dst[1] = 0;
            dst[2] = 0;
        }
        else
        {
            dst[0] = (a[0] * b);
            dst[1] = (a[1] * b);
            dst[2] = (a[2] * b);
        }
        return dst;
    },

    v3AddScalarMul : function v3AddScalarMulFn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        dst[0] = a[0] + b[0] * c;
        dst[1] = a[1] + b[1] * c;
        dst[2] = a[2] + b[2] * c;

        return dst;
    },

    // Vector3 'masks' with scalars
    v3EqualScalarMask : function v3EqualScalarMaskFn(a, b)
    {
        var abs = Math.abs;
        var precision = VMath.precision;
        return [(abs(a[0] - b) <= precision),
                (abs(a[1] - b) <= precision),
                (abs(a[2] - b) <= precision)];
    },

    v3LessScalarMask : function v3LessScalarMaskFn(a, b)
    {
        return [(a[0] < b),
                (a[1] < b),
                (a[2] < b)];
    },

    v3GreaterScalarMask : function v3GreaterScalarMaskFn(a, b)
    {
        return [(a[0] > b),
                (a[1] > b),
                (a[2] > b)];
    },

    v3GreaterEqScalarMask : function v3GreaterEqScalarMaskFn(a, b)
    {
        return [(a[0] >= b),
                (a[1] >= b),
                (a[2] >= b)];
    },

    v3Lerp : function v3LerpFn(a, b, t, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }

        dst[0] =  (a[0] + ((b[0] - a[0]) * t));
        dst[1] =  (a[1] + ((b[1] - a[1]) * t));
        dst[2] =  (a[2] + ((b[2] - a[2]) * t));

        return dst;
    },

    //
    // Vector4
    //
    v4BuildZero : function v4BuildZeroFn(dst) {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = 0.0;
        dst[1] = 0.0;
        dst[2] = 0.0;
        dst[3] = 0.0;
        return dst;
    },

    v4BuildOne  : function v4BuildOneFn(dst) {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = 1.0;
        dst[1] = 1.0;
        dst[2] = 1.0;
        dst[3] = 1.0;
        return dst;
    },

    v4Build : function v4BuildFn(a, b, c, d, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = a;
        dst[1] = b;
        dst[2] = c;
        dst[3] = d;
        return dst;
    },

    v4Copy : function v4CopyFn(src, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = src[0];
        dst[1] = src[1];
        dst[2] = src[2];
        dst[3] = src[3];
        return dst;
    },

    v4Set : function v4SetFn(v, a)
    {
        v[0] = a[0];
        v[1] = a[1];
        v[2] = a[2];
        v[3] = a[3];
    },

    v4Neg : function v4NegFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = -a[0];
        dst[1] = -a[1];
        dst[2] = -a[2];
        dst[3] = -a[3];

        return dst;
    },

    v4Add : function v4AddFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = (a[0] + b[0]);
        dst[1] = (a[1] + b[1]);
        dst[2] = (a[2] + b[2]);
        dst[3] = (a[3] + b[3]);
        return dst;
    },

    v4Add3 : function v4Add3Fn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = a[0] + b[0] + c[0];
        dst[1] = a[1] + b[1] + c[1];
        dst[2] = a[2] + b[2] + c[2];
        dst[3] = a[3] + b[3] + c[3];

        return dst;
    },

    v4Add4 : function v4Add4Fn(a, b, c, d, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = a[0] + b[0] + c[0] + d[0];
        dst[1] = a[1] + b[1] + c[1] + d[1];
        dst[2] = a[2] + b[2] + c[2] + d[2];
        dst[3] = a[3] + b[3] + c[3] + d[3];

        return dst;
    },

    v4Sub : function v4SubFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = (a[0] - b[0]);
        dst[1] = (a[1] - b[1]);
        dst[2] = (a[2] - b[2]);
        dst[3] = (a[3] - b[3]);
        return dst;
    },

    v4Mul : function v4MulFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = (a[0] * b[0]);
        dst[1] = (a[1] * b[1]);
        dst[2] = (a[2] * b[2]);
        dst[3] = (a[3] * b[3]);
        return dst;
    },

    v4MulAdd : function v4MulAddFn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = (a[0] * b[0]) + c[0];
        dst[1] = (a[1] * b[1]) + c[1];
        dst[2] = (a[2] * b[2]) + c[2];
        dst[3] = (a[3] * b[3]) + c[3];

        return dst;
    },

    v4Dot : function v4DotFn(a, b)
    {
        return ((a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]));
    },

    v4LengthSq : function v4LengthSqFn(a)
    {
        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        var a3 = a[3];
        return ((a0 * a0) + (a1 * a1) + (a2 * a2) + (a3 * a3));
    },

    v4Length : function v4LengthFn(a)
    {
        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        var a3 = a[3];
        return Math.sqrt((a0 * a0) + (a1 * a1) + (a2 * a2) + (a3 * a3));
    },

    v4Reciprocal : function v4ReciprocalFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var rcp = VMath.reciprocal;
        dst[0] = rcp(a[0]);
        dst[1] = rcp(a[1]);
        dst[2] = rcp(a[2]);
        dst[3] = rcp(a[3]);

        return dst;
    },

    v4Normalize : function v4NormalizeFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        var a3 = a[3];

        var lsq = ((a0 * a0) + (a1 * a1) + (a2 * a2) + (a3 * a3));
        if (lsq > 0.0)
        {
            var lr = 1.0 / Math.sqrt(lsq);
            dst[0] = a0 * lr;
            dst[1] = a1 * lr;
            dst[2] = a2 * lr;
            dst[3] = a3 * lr;
        }
        else
        {
            dst[0] = 0;
            dst[1] = 0;
            dst[2] = 0;
            dst[3] = 0;
        }
        return dst;
    },

    v4Abs : function v4AbsFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var abs = Math.abs;
        dst[0] = abs(a[0]);
        dst[1] = abs(a[1]);
        dst[2] = abs(a[2]);
        dst[3] = abs(a[3]);

        return dst;
    },

    v4Max : function v4MaxFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var max = Math.max;
        dst[0] = max(a[0], b[0]);
        dst[1] = max(a[1], b[1]);
        dst[2] = max(a[2], b[2]);
        dst[3] = max(a[3], b[3]);

        return dst;
    },

    v4Min : function v4MinFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var min = Math.min;
        dst[0] = min(a[0], b[0]);
        dst[1] = min(a[1], b[1]);
        dst[2] = min(a[2], b[2]);
        dst[3] = min(a[3], b[3]);

        return dst;
    },

    v4Equal : function v4EqualFn(a, b, precision)
    {
        var abs = Math.abs;
        if (precision === undefined)
        {
            precision = this.precision;
        }
        return (abs(a[0] - b[0]) <= precision &&
                abs(a[1] - b[1]) <= precision &&
                abs(a[2] - b[2]) <= precision &&
                abs(a[3] - b[3]) <= precision);
    },

    // Vector3 'masks'
    v4MaskEqual : function v4MaskEqualFn(a, b)
    {
        var abs = Math.abs;
        var precision = VMath.precision;
        return [(abs(a[0] - b[0]) <= precision),
                (abs(a[1] - b[1]) <= precision),
                (abs(a[2] - b[2]) <= precision),
                (abs(a[3] - b[3]) <= precision)];
    },

    v4MaskLess : function v4MaskLessFn(a, b)
    {
        return [(a[0] < b[0]),
                (a[1] < b[1]),
                (a[2] < b[2]),
                (a[3] < b[3])];
    },

    v4MaskGreater : function v4MaskGreaterFn(a, b)
    {
        return [(a[0] > b[0]),
                (a[1] > b[1]),
                (a[2] > b[2]),
                (a[3] > b[3])];
    },

    v4MaskGreaterEq : function v4MaskGreaterEqFn(a, b)
    {
        return [(a[0] >= b[0]),
                (a[1] >= b[1]),
                (a[2] >= b[2]),
                (a[3] >= b[3])];
    },

    v4MaskNot : function v4MaskNotFn(a)
    {
        return [!a[0],
                !a[1],
                !a[2],
                !a[3]];
    },

    v4MaskOr : function v4MaskOrFn(a, b)
    {
        return [(a[0] || b[0]),
                (a[1] || b[1]),
                (a[2] || b[2]),
                (a[3] || b[3])];
    },

    v4MaskAnd : function v4MaskAndFn(a, b)
    {
        return [(a[0] && b[0]),
                (a[1] && b[1]),
                (a[2] && b[2]),
                (a[3] && b[3])];
    },

    v4Many : function v4ManyFn(m)
    {
        return (m[0] || m[1] || m[2] || m[3]);
    },

    v4MaskAll : function v4MaskAllFn(m)
    {
        return (m[0] && m[1] && m[2] && m[3]);
    },

    v4Select : function v4SelectFn(m, a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = m[0] ? a[0] : b[0];
        dst[1] = m[1] ? a[1] : b[1];
        dst[2] = m[2] ? a[2] : b[2];
        dst[3] = m[3] ? a[3] : b[3];

        return dst;
    },

    // Vector4 operations with scalar
    v4ScalarBuild : function v4ScalarBuildFn(a, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = a;
        dst[1] = a;
        dst[2] = a;
        dst[3] = a;

        return dst;
    },

    v4ScalarMax : function v4ScalarMaxFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var max = Math.max;
        dst[0] = max(a[0], b);
        dst[1] = max(a[1], b);
        dst[2] = max(a[2], b);
        dst[3] = max(a[3], b);

        return dst;
    },

    v4ScalarMin : function v4ScalarMinFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var min = Math.min;
        dst[0] = min(a[0], b);
        dst[1] = min(a[1], b);
        dst[2] = min(a[2], b);
        dst[3] = min(a[3], b);

        return dst;
    },

    v4ScalarAdd : function v4ScalarAddFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = (a[0] + b);
        dst[1] = (a[1] + b);
        dst[2] = (a[2] + b);
        dst[3] = (a[3] + b);

        return dst;
    },

    v4ScalarSub : function v4ScalarSubFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = (a[0] - b);
        dst[1] = (a[1] - b);
        dst[2] = (a[2] - b);
        dst[3] = (a[3] - b);

        return dst;
    },

    v4ScalarMul : function v4ScalarMulFn(a, b, dst)
    {
        if (b === 0)
        {
            return VMath.v4BuildZero(dst);
        }
        else
        {
            if (dst === undefined)
            {
                dst = new VMathArrayConstructor(4);
            }

            dst[0] = (a[0] * b);
            dst[1] = (a[1] * b);
            dst[2] = (a[2] * b);
            dst[3] = (a[3] * b);

            return dst;
        }
    },

    v4AddScalarMul : function v4AddScalarMulFn(a, b, c, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = a[0] + b[0] * c;
        dst[1] = a[1] + b[1] * c;
        dst[2] = a[2] + b[2] * c;
        dst[3] = a[3] + b[3] * c;

        return dst;
    },

    v4ScalarEqual : function v4ScalarEqualFn(a, b)
    {
        var abs = Math.abs;
        var precision = VMath.precision;
        return (abs(a[0] - b) <= precision &&
                abs(a[1] - b) <= precision &&
                abs(a[2] - b) <= precision &&
                abs(a[3] - b) <= precision);
    },

    // Vector3 'masks' with scalars
    v4EqualScalarMask : function v4EqualScalarMaskFn(a, b)
    {
        var abs = Math.abs;
        var precision = VMath.precision;
        return [(abs(a[0] - b) <= precision),
                (abs(a[1] - b) <= precision),
                (abs(a[2] - b) <= precision),
                (abs(a[3] - b) <= precision)];
    },

    v4LessScalarMask : function v4LessScalarMaskFn(a, b)
    {
        return [(a[0] < b),
                (a[1] < b),
                (a[2] < b),
                (a[3] < b)];
    },

    v4GreaterScalarMask : function v4GreaterScalarMaskFn(a, b)
    {
        return [(a[0] > b),
                (a[1] > b),
                (a[2] > b),
                (a[3] > b)];
    },

    v4GreaterEqScalarMask : function v4GreaterEqScalarMaskFn(a, b)
    {
        return [(a[0] >= b),
                (a[1] >= b),
                (a[2] >= b),
                (a[3] >= b)];
    },

    v4Lerp : function v4LerpFn(a, b, t, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = (a[0] + ((b[0] - a[0]) * t));
        dst[1] = (a[1] + ((b[1] - a[1]) * t));
        dst[2] = (a[2] + ((b[2] - a[2]) * t));
        dst[3] = (a[3] + ((b[3] - a[3]) * t));
        return dst;
    },

    //
    // AABB
    //

    aabbBuild : function aabbBuildFn(a0, a1, a2, a3, a4, a5, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(6);
        }

        dst[0] = a0;
        dst[1] = a1;
        dst[2] = a2;
        dst[3] = a3;
        dst[4] = a4;
        dst[5] = a5;

        return dst;
    },

    aabbBuildEmpty : function aabbBuildEmptyFn(dst)
    {
        var float_max = this.FLOAT_MAX;

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(6);
        }

        dst[0] = float_max;
        dst[1] = float_max;
        dst[2] = float_max;
        dst[3] = -float_max;
        dst[4] = -float_max;
        dst[5] = -float_max;

        return dst;
    },

    aabbCopy : function aabbCopyFn(aabb, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(6);
        }

        dst[0] = aabb[0];
        dst[1] = aabb[1];
        dst[2] = aabb[2];
        dst[3] = aabb[3];
        dst[4] = aabb[4];
        dst[5] = aabb[5];

        return dst;
    },

    aabbSet : function aabbSet(dst, src)
    {
        dst[0] = src[0];
        dst[1] = src[1];
        dst[2] = src[2];
        dst[3] = src[3];
        dst[4] = src[4];
        dst[5] = src[5];
    },

    aabbIsEmpty : function aabbIsEmptyFn(aabb)
    {
        return aabb[0] > aabb[3];
    },

    aabbMin : function aabbMinFn(aabb, dst)
    {
        if (dst === undefined)
        {
            return aabb.slice(0, 3);
        }
        dst[0] = aabb[0];
        dst[1] = aabb[1];
        dst[2] = aabb[2];
        return dst;
    },

    aabbMax : function aabbMaxFn(aabb, dst)
    {
        if (dst === undefined)
        {
            return aabb.slice(3, 6);
        }
        dst[0] = aabb[3];
        dst[1] = aabb[4];
        dst[2] = aabb[5];
        return dst;
    },

    aabbGetCenterAndHalf : function aabbGetCenterAndHalfFn(aabb, center, half)
    {
        var cX = (aabb[0] + aabb[3]) * 0.5;
        var cY = (aabb[1] + aabb[4]) * 0.5;
        var cZ = (aabb[2] + aabb[5]) * 0.5;

        center[0] = cX;
        center[1] = cY;
        center[2] = cZ;

        half[0] = aabb[3] - cX;
        half[1] = aabb[4] - cY;
        half[2] = aabb[5] - cZ;
    },

    aabbIsInsidePlanes : function aabbIsInsidePlanesFn(aabb, planes)
    {
        var numPlanes = planes.length;
        var n = 0;
        do
        {
            var plane = planes[n];
            var d0 = plane[0];
            var d1 = plane[1];
            var d2 = plane[2];
            if ((d0 * (d0 < 0 ? aabb[0] : aabb[3]) + d1 * (d1 < 0 ? aabb[1] : aabb[4]) + d2 * (d2 < 0 ? aabb[2] : aabb[5])) < plane[3])
            {
                return false;
            }
            n += 1;
        }
        while (n < numPlanes);
        return true;
    },

    aabbIsFullyInsidePlanes : function aabbIsFullyInsidePlanesFn(aabb, planes)
    {
        var numPlanes = planes.length;
        var n = 0;
        do
        {
            var plane = planes[n];
            var d0 = plane[0];
            var d1 = plane[1];
            var d2 = plane[2];
            if ((d0 * (d0 > 0 ? aabb[0] : aabb[3]) + d1 * (d1 > 0 ? aabb[1] : aabb[4]) + d2 * (d2 > 0 ? aabb[2] : aabb[5])) < plane[3])
            {
                return false;
            }
            n += 1;
        }
        while (n < numPlanes);
        return true;
    },

    aabbUnion : function aabbUnionFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(6);
        }

        dst[0] = a[0] < b[0] ? a[0] : b[0];
        dst[1] = a[1] < b[1] ? a[1] : b[1];
        dst[2] = a[2] < b[2] ? a[2] : b[2];
        dst[3] = a[3] > b[3] ? a[3] : b[3];
        dst[4] = a[4] > b[4] ? a[4] : b[4];
        dst[5] = a[5] > b[5] ? a[5] : b[5];

        return dst;
    },

    aabbUnionArray : function aabbUnionArrayFn(aabbArray, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(6);
        }
        VMath.aabbCopy(aabbArray[0], dst);

        var numAABBs = aabbArray.length;
        for (var i = 0; i < numAABBs; i += 1)
        {
            var aabb = aabbArray[i];
            dst[0] = (dst[0] < aabb[0] ? dst[0] : aabb[0]);
            dst[1] = (dst[1] < aabb[1] ? dst[1] : aabb[1]);
            dst[2] = (dst[2] < aabb[2] ? dst[2] : aabb[2]);
            dst[3] = (dst[3] > aabb[3] ? dst[3] : aabb[3]);
            dst[4] = (dst[4] > aabb[4] ? dst[4] : aabb[4]);
            dst[5] = (dst[5] > aabb[5] ? dst[5] : aabb[5]);
        }

        return dst;
    },

    aabbAddPoints : function aabbAddPointFn(aabb, ps)
    {
        var i;
        var numPoints = ps.length;

        var r0 = aabb[0];
        var r1 = aabb[1];
        var r2 = aabb[2];
        var r3 = aabb[3];
        var r4 = aabb[4];
        var r5 = aabb[5];

        var p0, p1, p2;

        for (i = 0; i < numPoints; i += 1)
        {
            p0 = ps[i][0];
            p1 = ps[i][1];
            p2 = ps[i][2];

            r0 = (r0 < p0 ? r0 : p0);
            r1 = (r1 < p1 ? r1 : p1);
            r2 = (r2 < p2 ? r2 : p2);
            r3 = (r3 > p0 ? r3 : p0);
            r4 = (r4 > p1 ? r4 : p1);
            r5 = (r5 > p2 ? r5 : p2);
        }

        aabb[0] = r0;
        aabb[1] = r1;
        aabb[2] = r2;
        aabb[3] = r3;
        aabb[4] = r4;
        aabb[5] = r5;

    },

    aabbTransform : function aabbTransformFn(aabb, matrix, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(6);
        }

        var cX = (aabb[0] + aabb[3]) * 0.5;
        var cY = (aabb[1] + aabb[4]) * 0.5;
        var cZ = (aabb[2] + aabb[5]) * 0.5;

        var hX = aabb[3] - cX;
        var hY = aabb[4] - cY;
        var hZ = aabb[5] - cZ;

        var m0 = matrix[0];
        var m1 = matrix[1];
        var m2 = matrix[2];
        var m3 = matrix[3];
        var m4 = matrix[4];
        var m5 = matrix[5];
        var m6 = matrix[6];
        var m7 = matrix[7];
        var m8 = matrix[8];

        var ctX = matrix[9] +  (m0 * cX + m3 * cY + m6 * cZ);
        var ctY = matrix[10] + (m1 * cX + m4 * cY + m7 * cZ);
        var ctZ = matrix[11] + (m2 * cX + m5 * cY + m8 * cZ);

        var abs = Math.abs;

        var htX = (abs(m0) * hX + abs(m3) * hY + abs(m6) * hZ);
        var htY = (abs(m1) * hX + abs(m4) * hY + abs(m7) * hZ);
        var htZ = (abs(m2) * hX + abs(m5) * hY + abs(m8) * hZ);

        dst[0] = ctX - htX;
        dst[1] = ctY - htY;
        dst[2] = ctZ - htZ;
        dst[3] = ctX + htX;
        dst[4] = ctY + htY;
        dst[5] = ctZ + htZ;

        return dst;
    },

    aabbIntercept : function aabbInterceptFn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(6);
        }

        dst[0] = a[0] > b[0] ? a[0] : b[0];
        dst[1] = a[1] > b[1] ? a[1] : b[1];
        dst[2] = a[2] > b[2] ? a[2] : b[2];
        dst[3] = a[3] < b[3] ? a[3] : b[3];
        dst[4] = a[4] < b[4] ? a[4] : b[4];
        dst[5] = a[5] < b[5] ? a[5] : b[5];

        return dst;
    },

    aabbOverlaps : function aabbOverlapsFn(a, b)
    {
        return ((a[0] <= b[3]) &&
                (a[1] <= b[4]) &&
                (a[2] <= b[5]) &&
                (a[3] >= b[0]) &&
                (a[4] >= b[1]) &&
                (a[5] >= b[2]));
    },

    aabbSphereOverlaps : function aabbSphereOverlapsFn(aabb, center, radius)
    {
        var centerX = center[0];
        var centerY = center[1];
        var centerZ = center[2];
        var radiusSquared = radius * radius;

        var minX = aabb[0];
        var minY = aabb[1];
        var minZ = aabb[2];
        var maxX = aabb[3];
        var maxY = aabb[4];
        var maxZ = aabb[5];
        var totalDistance = 0, sideDistance;

        if (centerX < minX)
        {
            sideDistance = (minX - centerX);
            totalDistance += (sideDistance * sideDistance);
        }
        else if (centerX > maxX)
        {
            sideDistance = (centerX - maxX);
            totalDistance += (sideDistance * sideDistance);
        }
        if (centerY < minY)
        {
            sideDistance = (minY - centerY);
            totalDistance += (sideDistance * sideDistance);
        }
        else if (centerY > maxY)
        {
            sideDistance = (centerY - maxY);
            totalDistance += (sideDistance * sideDistance);
        }
        if (centerZ < minZ)
        {
            sideDistance = (minZ - centerZ);
            totalDistance += (sideDistance * sideDistance);
        }
        else if (centerZ > maxZ)
        {
            sideDistance = (centerZ - maxZ);
            totalDistance += (sideDistance * sideDistance);
        }
        return (totalDistance <= radiusSquared);
    },

    aabbIsInside : function aabbIsInsideFn(a, b)
    {
        return ((a[0] >= b[0]) &&
                (a[1] >= b[1]) &&
                (a[2] >= b[2]) &&
                (a[3] <= b[3]) &&
                (a[4] <= b[4]) &&
                (a[5] <= b[5]));
    },

    aabbTestInside : function aabbTestInsideFn(a, b)
    {
        if ((a[0] <= b[3]) &&
            (a[1] <= b[4]) &&
            (a[2] <= b[5]) &&
            (a[3] >= b[0]) &&
            (a[4] >= b[1]) &&
            (a[5] >= b[2]))
        {

            if ((a[0] >= b[0]) &&
                (a[1] >= b[1]) &&
                (a[2] >= b[2]) &&
                (a[3] <= b[3]) &&
                (a[4] <= b[4]) &&
                (a[5] <= b[5]))
            {
                return 2;
            }
            return 1;
        }

        return 0;
    },

    //
    // Matrix
    //
    m33BuildIdentity : function m33BuildIdentityFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }

        dst[0] = 1.0;
        dst[1] = 0.0;
        dst[2] = 0.0;
        dst[3] = 0.0;
        dst[4] = 1.0;
        dst[5] = 0.0;
        dst[6] = 0.0;
        dst[7] = 0.0;
        dst[8] = 1.0;

        return dst;
    },

    // Matrix33
    m33Build : function m33BuildFn(r, u, a, dst)
    {
        var length = arguments.length;
        if (length >= 9)
        {
            // Can NOT use dst because it will overwrite the input value...
            var res;

            if (length > 9)
            {
                res = arguments[9];
                if (res === undefined)
                {
                    res = new VMathArrayConstructor(9);
                }
            }
            else
            {
                res = new VMathArrayConstructor(9);
            }

            res[0] = arguments[0];
            res[1] = arguments[1];
            res[2] = arguments[2];
            res[3] = arguments[3];
            res[4] = arguments[4];
            res[5] = arguments[5];
            res[6] = arguments[6];
            res[7] = arguments[7];
            res[8] = arguments[8];

            return res;
        }
        else
        {
            if (dst === undefined)
            {
                dst = new VMathArrayConstructor(9);
            }

            dst[0] = r[0];
            dst[1] = r[1];
            dst[2] = r[2];
            dst[3] = u[0];
            dst[4] = u[1];
            dst[5] = u[2];
            dst[6] = a[0];
            dst[7] = a[1];
            dst[8] = a[2];

            return dst;
        }
    },

    m33Copy : function m33CopyFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }

        dst[0] = m[0];
        dst[1] = m[1];
        dst[2] = m[2];
        dst[3] = m[3];
        dst[4] = m[4];
        dst[5] = m[5];
        dst[6] = m[6];
        dst[7] = m[7];
        dst[8] = m[8];

        return dst;
    },

    m33FromAxisRotation : function m33FromAxisRotationFn(axis, angle, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }

        var s = Math.sin(angle);
        var c = Math.cos(angle);
        var t = 1.0 - c;
        var axisX = axis[0];
        var axisY = axis[1];
        var axisZ = axis[2];
        var tx = t * axisX;
        var ty = t * axisY;
        var tz = t * axisZ;
        var sx = s * axisX;
        var sy = s * axisY;
        var sz = s * axisZ;

        dst[0] = tx * axisX + c;
        dst[1] = tx * axisY - sz;
        dst[2] = tx * axisZ + sy;
        dst[3] = ty * axisX + sz;
        dst[4] = ty * axisY + c;
        dst[5] = ty * axisZ - sx;
        dst[6] = tz * axisX - sy;
        dst[7] = tz * axisY + sx;
        dst[8] = tz * axisZ + c;

        return dst;
    },

    m33FromQuat: function m33FromQuatFn(q, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }

        var qx = q[0];
        var qy = q[1];
        var qz = q[2];
        var qw = q[3];

        var xx = 2.0 * qx * qx;
        var yy = 2.0 * qy * qy;
        var zz = 2.0 * qz * qz;
        var xy = 2.0 * qx * qy;
        var zw = 2.0 * qz * qw;
        var xz = 2.0 * qx * qz;
        var yw = 2.0 * qy * qw;
        var yz = 2.0 * qy * qz;
        var xw = 2.0 * qx * qw;

        dst[0] = 1.0 - yy - zz;
        dst[1] = xy - zw;
        dst[2] = xz + yw;
        dst[3] = xy + zw;
        dst[4] = 1.0 - xx - zz;
        dst[5] = yz - xw;
        dst[6] = xz - yw;
        dst[7] = yz + xw;
        dst[8] = 1.0 - xx - yy;

        return dst;
    },

    m33Right : function m33RightFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[0];
        dst[1] = m[1];
        dst[2] = m[2];
        return dst;
    },

    m33Up : function m33UpFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[3];
        dst[1] = m[4];
        dst[2] = m[5];
        return dst;
    },

    m33At : function m33AtFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[6];
        dst[1] = m[7];
        dst[2] = m[8];
        return dst;
    },

    m33SetRight : function m33SetRightFn(m, v)
    {
        m[0] = v[0];
        m[1] = v[1];
        m[2] = v[2];
    },

    m33SetUp : function m33SetUpFn(m, v)
    {
        m[3] = v[0];
        m[4] = v[1];
        m[5] = v[2];
    },

    m33SetAt : function m33SetAtFn(m, v)
    {
        m[6] = v[0];
        m[7] = v[1];
        m[8] = v[2];
    },

    m33Transpose : function m33TransposeFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }
        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        dst[0] = m0;
        dst[1] = m3;
        dst[2] = m6;
        dst[3] = m1;
        dst[4] = m4;
        dst[5] = m7;
        dst[6] = m2;
        dst[7] = m5;
        dst[8] = m8;
        return dst;
    },

    m33Determinant : function m33DeterminantFn(m)
    {
        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        return (m0 * (m4 * m8 - m5 * m7) +
                m1 * (m5 * m6 - m3 * m8) +
                m2 * (m3 * m7 - m4 * m6));
    },

    m33Inverse : function m33InverseFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }

        var det = VMath.m33Determinant(m);
        if (det === 0.0)
        {
            dst[0] = dst[1] = dst[2] = 0.0;
            dst[3] = dst[4] = dst[5] = 0.0;
            dst[6] = dst[7] = dst[8] = 0.0;
            return dst;
        }
        else
        {
            var m0 = m[0];
            var m1 = m[1];
            var m2 = m[2];
            var m3 = m[3];
            var m4 = m[4];
            var m5 = m[5];
            var m6 = m[6];
            var m7 = m[7];
            var m8 = m[8];

            var detrecp = 1.0 / det;
            dst[0] = ((m4 * m8 + m5 * (-m7)) * detrecp);
            dst[1] = ((m7 * m2 + m8 * (-m1)) * detrecp);
            dst[2] = ((m1 * m5 - m2 *   m4)  * detrecp);
            dst[3] = ((m5 * m6 + m3 * (-m8)) * detrecp);
            dst[4] = ((m8 * m0 + m6 * (-m2)) * detrecp);
            dst[5] = ((m3 * m2 - m0 *   m5)  * detrecp);
            dst[6] = ((m3 * m7 + m4 * (-m6)) * detrecp);
            dst[7] = ((m6 * m1 + m7 * (-m0)) * detrecp);
            dst[8] = ((m0 * m4 - m3 *   m1)  * detrecp);
            return dst;
        }
    },

    m33InverseTranspose : function m33InverseTransposeFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }

        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        var det = (m0 * (m4 * m8 - m5 * m7) +
                   m1 * (m5 * m6 - m3 * m8) +
                   m2 * (m3 * m7 - m4 * m6));
        if (det === 0.0)
        {
            dst[0] = dst[1] = dst[2] = 0.0;
            dst[3] = dst[4] = dst[5] = 0.0;
            dst[6] = dst[7] = dst[8] = 0.0;
            return dst;
        }
        else
        {
            var detrecp = 1.0 / det;
            dst[0] = ((m4 * m8 + m5 * (-m7)) * detrecp);
            dst[3] = ((m7 * m2 + m8 * (-m1)) * detrecp);
            dst[6] = ((m1 * m5 - m2 *   m4)  * detrecp);
            dst[1] = ((m5 * m6 + m3 * (-m8)) * detrecp);
            dst[4] = ((m8 * m0 + m6 * (-m2)) * detrecp);
            dst[7] = ((m3 * m2 - m0 *   m5)  * detrecp);
            dst[2] = ((m3 * m7 + m4 * (-m6)) * detrecp);
            dst[5] = ((m6 * m1 + m7 * (-m0)) * detrecp);
            dst[8] = ((m0 * m4 - m3 *   m1)  * detrecp);
            return dst;
        }
    },

    m33Mul : function m33MulFn(a, b, dst)
    {
        var a0  = a[0];
        var a1  = a[1];
        var a2  = a[2];
        var a3  = a[3];
        var a4  = a[4];
        var a5  = a[5];
        var a6  = a[6];
        var a7  = a[7];
        var a8  = a[8];

        var b0  = b[0];
        var b1  = b[1];
        var b2  = b[2];
        var b3  = b[3];
        var b4  = b[4];
        var b5  = b[5];
        var b6  = b[6];
        var b7  = b[7];
        var b8  = b[8];

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }

        dst[0] = (b0 * a0 + b3 * a1 + b6 * a2);
        dst[1] = (b1 * a0 + b4 * a1 + b7 * a2);
        dst[2] = (b2 * a0 + b5 * a1 + b8 * a2);

        dst[3] = (b0 * a3 + b3 * a4 + b6 * a5);
        dst[4] = (b1 * a3 + b4 * a4 + b7 * a5);
        dst[5] = (b2 * a3 + b5 * a4 + b8 * a5);

        dst[6] = (b0 * a6 + b3 * a7 + b6 * a8);
        dst[7] = (b1 * a6 + b4 * a7 + b7 * a8);
        dst[8] = (b2 * a6 + b5 * a7 + b8 * a8);

        return dst;
    },

    m33Transform : function m33TransformFn(m, v, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = (m[0] * v0 + m[3] * v1 + m[6] * v2);
        dst[1] = (m[1] * v0 + m[4] * v1 + m[7] * v2);
        dst[2] = (m[2] * v0 + m[5] * v1 + m[8] * v2);
        return dst;
    },

    m33Equal : function m33EqualFn(a, b, precision)
    {
        var abs = Math.abs;
        if (precision === undefined)
        {
            precision = this.precision;
        }
        return (abs(a[0] - b[0]) <= precision &&
                abs(a[1] - b[1]) <= precision &&
                abs(a[2] - b[2]) <= precision &&
                abs(a[3] - b[3]) <= precision &&
                abs(a[4] - b[4]) <= precision &&
                abs(a[5] - b[5]) <= precision &&
                abs(a[6] - b[6]) <= precision &&
                abs(a[7] - b[7]) <= precision &&
                abs(a[8] - b[8]) <= precision);
    },

    m33MulM43 : function m33MulM43Fn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        var a3 = a[3];
        var a4 = a[4];
        var a5 = a[5];
        var a6 = a[6];
        var a7 = a[7];
        var a8 = a[8];

        var b0 = b[0];
        var b1 = b[1];
        var b2 = b[2];
        var b3 = b[3];
        var b4 = b[4];
        var b5 = b[5];
        var b6 = b[6];
        var b7 = b[7];
        var b8 = b[8];

        dst[0] = b0 * a0 + b3 * a1 + b6 * a2;
        dst[1] = b1 * a0 + b4 * a1 + b7 * a2;
        dst[2] = b2 * a0 + b5 * a1 + b8 * a2;

        dst[3] = b0 * a3 + b3 * a4 + b6 * a5;
        dst[4] = b1 * a3 + b4 * a4 + b7 * a5;
        dst[5] = b2 * a3 + b5 * a4 + b8 * a5;

        dst[6] = b0 * a6 + b3 * a7 + b6 * a8;
        dst[7] = b1 * a6 + b4 * a7 + b7 * a8;
        dst[8] = b2 * a6 + b5 * a7 + b8 * a8;

        dst[9] = b[9];
        dst[10] = b[10];
        dst[11] = b[11];

        return dst;
    },

    m33MulM44 : function m33MulM44Fn(a, b, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }

        var a0  = a[0];
        var a1  = a[1];
        var a2  = a[2];
        var a3  = a[3];
        var a4  = a[4];
        var a5  = a[5];
        var a6  = a[6];
        var a7  = a[7];
        var a8  = a[8];

        var b0  = b[0];
        var b1  = b[1];
        var b2  = b[2];
        var b3  = b[3];
        var b4  = b[4];
        var b5  = b[5];
        var b6  = b[6];
        var b7  = b[7];
        var b8  = b[8];
        var b9  = b[9];
        var b10 = b[10];
        var b11 = b[11];


        dst[0] = b0 * a0 + b4 * a1 + b8  * a2;
        dst[1] = b1 * a0 + b5 * a1 + b9  * a2;
        dst[2] = b2 * a0 + b6 * a1 + b10 * a2;
        dst[3] = b3 * a0 + b7 * a1 + b11 * a2;

        dst[4] = b0 * a3 + b4 * a4 + b8  * a5;
        dst[5] = b1 * a3 + b5 * a4 + b9  * a5;
        dst[6] = b2 * a3 + b6 * a4 + b10 * a5;
        dst[7] = b3 * a3 + b7 * a4 + b11 * a5;

        dst[8] = b0 * a6 + b4 * a7 + b8  * a8;
        dst[9] = b1 * a6 + b5 * a7 + b9  * a8;
        dst[10] = b2 * a6 + b6 * a7 + b10 * a8;
        dst[11] = b3 * a6 + b7 * a7 + b11 * a8;

        dst[12] = b[12];
        dst[13] = b[13];
        dst[14] = b[14];
        dst[15] = b[15];

        return dst;
    },

    // Matrix3 operations with scalar
    m33ScalarAdd : function m33ScalarAddFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }
        for (var n = 0; n < 9; n += 1)
        {
            dst[n] = (m[n] + s);
        }
        return dst;
    },

    m33ScalarSub : function m33ScalarSubFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }
        for (var n = 0; n < 9; n += 1)
        {
            dst[n] = (m[n] - s);
        }
        return dst;
    },

    m33ScalarMul : function m33ScalarMulFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(9);
        }

        for (var n = 0; n < 9; n += 1)
        {
            dst[n] = (m[n] * s);
        }

        return dst;
    },

    // Matrix34
    m34BuildIdentity : function m34BuildIdentityFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }
        dst[0] = 1.0;
        dst[5] = 1.0;
        dst[10] = 1.0;
        return dst;
    },

    m34Pos : function m34PosFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[3];
        dst[1] = m[7];
        dst[2] = m[11];
        return dst;
    },

    m34Scale : function m34ScaleFn(m, scale, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var sx = scale[0];
        var sy = scale[1];
        var sz = scale[2];

        dst[0] = m[0] * sx;
        dst[1] = m[1] * sx;
        dst[2] = m[2] * sx;
        dst[3] = m[3];

        dst[4] = m[4] * sy;
        dst[5] = m[5] * sy;
        dst[6] = m[6] * sy;
        dst[7] = m[7];

        dst[8] = m[8] * sz;
        dst[9] = m[9] * sz;
        dst[10] = m[10] * sz;
        dst[11] = m[11];

        return dst;
    },

    // Matrix43
    m43BuildIdentity : function m43BuildIdentityFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }
        dst[0] = 1.0;
        dst[1] = 0.0;
        dst[2] = 0.0;
        dst[3] = 0.0;
        dst[4] = 1.0;
        dst[5] = 0.0;
        dst[6] = 0.0;
        dst[7] = 0.0;
        dst[8] = 1.0;
        dst[9] = 0.0;
        dst[10] = 0.0;
        dst[11] = 0.0;
        return dst;
    },

    m43Build : function m43BuildFn(r, u, a, p, dst)
    {
        var length = arguments.length;
        if (length >= 12)
        {
            // Can NOT use dst because it will overwrite the input value...
            var res;

            if (length > 12)
            {
                res = arguments[12];
                if (res === undefined)
                {
                    res = new VMathArrayConstructor(12);
                }
            }
            else
            {
                res = new VMathArrayConstructor(12);
            }

            res[0] = arguments[0];
            res[1] = arguments[1];
            res[2] = arguments[2];
            res[3] = arguments[3];
            res[4] = arguments[4];
            res[5] = arguments[5];
            res[6] = arguments[6];
            res[7] = arguments[7];
            res[8] = arguments[8];
            res[9] = arguments[9];
            res[10] = arguments[10];
            res[11] = arguments[11];

            return res;
        }
        else
        {
            if (dst === undefined)
            {
                dst = new VMathArrayConstructor(12);
            }

            dst[0] = r[0];
            dst[1] = r[1];
            dst[2] = r[2];
            dst[3] = u[0];
            dst[4] = u[1];
            dst[5] = u[2];
            dst[6] = a[0];
            dst[7] = a[1];
            dst[8] = a[2];
            dst[9] = p[0];
            dst[10] = p[1];
            dst[11] = p[2];

            return dst;
        }
    },

    m43BuildTranslation : function m43BuildTranslationFn(p, dst)
    {
        // Can NOT use p or dst because it will overwrite the input value...
        var res, a;

        var length = arguments.length;
        if (length >= 3)
        {
            a = arguments;
            if (length === 4)
            {
                res = arguments[3];
            }
        }
        else
        {
            a = p;
            res = dst;
        }

        if (res === undefined)
        {
            res = new VMathArrayConstructor(12);
        }

        res[0] = 1;
        res[1] = 0;
        res[2] = 0;
        res[3] = 0;
        res[4] = 1;
        res[5] = 0;
        res[6] = 0;
        res[7] = 0;
        res[8] = 1;
        res[9] = a[0];
        res[10] = a[1];
        res[11] = a[2];

        return res;
    },

    m43Copy : function m43CopyFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        dst[0] = m[0];
        dst[1] = m[1];
        dst[2] = m[2];
        dst[3] = m[3];
        dst[4] = m[4];
        dst[5] = m[5];
        dst[6] = m[6];
        dst[7] = m[7];
        dst[8] = m[8];
        dst[9] = m[9];
        dst[10] = m[10];
        dst[11] = m[11];

        return dst;
    },

    m43FromM33V3: function m43FromM33V3Fn(m, v, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        dst[0] = m[0];
        dst[1] = m[1];
        dst[2] = m[2];
        dst[3] = m[3];
        dst[4] = m[4];
        dst[5] = m[5];
        dst[6] = m[6];
        dst[7] = m[7];
        dst[8] = m[8];
        dst[9] = v[0];
        dst[10] = v[1];
        dst[11] = v[2];

        return dst;
    },

    m43FromAxisRotation : function m43FromAxisRotationFn(axis, angle, dst)
    {
        var s = Math.sin(angle);
        var c = Math.cos(angle);
        var t = 1.0 - c;
        var axisX = axis[0];
        var axisY = axis[1];
        var axisZ = axis[2];
        var tx = t * axisX;
        var ty = t * axisY;
        var tz = t * axisZ;
        var sx = s * axisX;
        var sy = s * axisY;
        var sz = s * axisZ;

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        dst[0] = tx * axisX + c;
        dst[1] = tx * axisY - sz;
        dst[2] = tx * axisZ + sy;

        dst[3] = ty * axisX + sz;
        dst[4] = ty * axisY + c;
        dst[5] = ty * axisZ - sx;

        dst[6] = tz * axisX - sy;
        dst[7] = tz * axisY + sx;
        dst[8] = tz * axisZ + c;

        dst[9] = 0.0;
        dst[10] = 0.0;
        dst[11] = 0.0;

        return dst;
    },

    m43FromQuatPos : function m43FromQuatPosFn(qp, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var qx = qp[0];
        var qy = qp[1];
        var qz = qp[2];
        var qw = qp[3];
        var px = qp[4];
        var py = qp[5];
        var pz = qp[6];

        var xx = 2.0 * qx * qx;
        var yy = 2.0 * qy * qy;
        var zz = 2.0 * qz * qz;
        var xy = 2.0 * qx * qy;
        var zw = 2.0 * qz * qw;
        var xz = 2.0 * qx * qz;
        var yw = 2.0 * qy * qw;
        var yz = 2.0 * qy * qz;
        var xw = 2.0 * qx * qw;

        dst[0] = 1.0 - yy - zz;
        dst[1] = xy - zw;
        dst[2] = xz + yw;

        dst[3] = xy + zw;
        dst[4] = 1.0 - xx - zz;
        dst[5] = yz - xw;

        dst[6] = xz - yw;
        dst[7] = yz + xw;
        dst[8] = 1.0 - xx - yy;

        dst[9] = px;
        dst[10] = py;
        dst[11] = pz;

        return dst;
    },

    m43FromRTS : function m43FromRTSFn(quat, pos, scale, dst)
    {
        var qx = quat[0];
        var qy = quat[1];
        var qz = quat[2];
        var qw = quat[3];

        var xx = (2.0 * qx * qx);
        var yy = (2.0 * qy * qy);
        var zz = (2.0 * qz * qz);
        var xy = (2.0 * qx * qy);
        var zw = (2.0 * qz * qw);
        var xz = (2.0 * qx * qz);
        var yw = (2.0 * qy * qw);
        var yz = (2.0 * qy * qz);
        var xw = (2.0 * qx * qw);

        var sx = scale[0];
        var sy = scale[1];
        var sz = scale[2];

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        dst[0] = sx * (1.0 - yy - zz);
        dst[1] = sx * (xy - zw);
        dst[2] = sx * (xz + yw);
        dst[3] = sy * (xy + zw);
        dst[4] = sy * (1.0 - xx - zz);
        dst[5] = sy * (yz - xw);
        dst[6] = sz * (xz - yw);
        dst[7] = sz * (yz + xw);
        dst[8] = sz * (1.0 - xx - yy);
        dst[9]  = pos[0];
        dst[10] = pos[1];
        dst[11] = pos[2];

        return dst;
    },

    m43FromRT : function m43FromRTFn(quat, pos, dst)
    {
        var qx = quat[0];
        var qy = quat[1];
        var qz = quat[2];
        var qw = quat[3];

        var xx = (2.0 * qx * qx);
        var yy = (2.0 * qy * qy);
        var zz = (2.0 * qz * qz);
        var xy = (2.0 * qx * qy);
        var zw = (2.0 * qz * qw);
        var xz = (2.0 * qx * qz);
        var yw = (2.0 * qy * qw);
        var yz = (2.0 * qy * qz);
        var xw = (2.0 * qx * qw);

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        dst[0] =  1.0 - yy - zz;
        dst[1] =  xy - zw;
        dst[2] =  xz + yw;
        dst[3] =  xy + zw;
        dst[4] =  1.0 - xx - zz;
        dst[5] =  yz - xw;
        dst[6] =  xz - yw;
        dst[7] =  yz + xw;
        dst[8] =  1.0 - xx - yy;
        dst[9]  = pos[0];
        dst[10] = pos[1];
        dst[11] = pos[2];

        return dst;
    },

    m43Right : function m43RightFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[0];
        dst[1] = m[1];
        dst[2] = m[2];
        return dst;
    },

    m43Up : function m43UpFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[3];
        dst[1] = m[4];
        dst[2] = m[5];
        return dst;
    },

    m43At : function m43AtFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[6];
        dst[1] = m[7];
        dst[2] = m[8];
        return dst;
    },

    m43Pos : function m43PosFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = m[9];
        dst[1] = m[10];
        dst[2] = m[11];
        return dst;
    },

    m43SetRight : function m43SetRightFn(m, v)
    {
        m[0] = v[0];
        m[1] = v[1];
        m[2] = v[2];
    },

    m43SetUp : function m43SetUpFn(m, v)
    {
        m[3] = v[0];
        m[4] = v[1];
        m[5] = v[2];
    },

    m43SetAt : function m43SetAtFn(m, v)
    {
        m[6] = v[0];
        m[7] = v[1];
        m[8] = v[2];
    },

    m43SetPos : function m43SetPosFn(m, v)
    {
        m[9] = v[0];
        m[10] = v[1];
        m[11] = v[2];
    },

    m43SetAxisRotation : function m43SetAxisRotationFn(m, axis, angle)
    {
        var s = Math.sin(angle);
        var c = Math.cos(angle);
        var t = 1.0 - c;
        var axisX = axis[0];
        var axisY = axis[1];
        var axisZ = axis[2];
        var tx = t * axisX;
        var ty = t * axisY;
        var tz = t * axisZ;
        var sx = s * axisX;
        var sy = s * axisY;
        var sz = s * axisZ;
        m[0] = tx * axisX + c;
        m[1] = tx * axisY - sz;
        m[2] = tx * axisZ + sy;
        m[3] = ty * axisX + sz;
        m[4] = ty * axisY + c;
        m[5] = ty * axisZ - sx;
        m[6] = tz * axisX - sy;
        m[7] = tz * axisY + sx;
        m[8] = tz * axisZ + c;
    },

    m43InverseOrthonormal : function m43InverseOrthonormalFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }
        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        var px = m[9];
        var py = m[10];
        var pz = m[11];
        dst[0] = m0;
        dst[1] = m3;
        dst[2] = m6;
        dst[3] = m1;
        dst[4] = m4;
        dst[5] = m7;
        dst[6] = m2;
        dst[7] = m5;
        dst[8] = m8;
        dst[9]  = -((px * m0) + (py * m1) + (pz * m2));
        dst[10] = -((px * m3) + (py * m4) + (pz * m5));
        dst[11] = -((px * m6) + (py * m7) + (pz * m8));
        return dst;
    },

    m43Orthonormalize : function m43OrthonormalizeFn(m, dst)
    {
        var normalize = VMath.v3Normalize;
        var length    = VMath.v3Length;
        var dot       = VMath.v3Dot;
        var cross     = VMath.v3Cross;
        var abs       = Math.abs;

        var right = VMath.m43Right(m);
        var up    = VMath.m43Up(m);
        var at    = VMath.m43At(m);
        var pos   = VMath.m43Pos(m);

        var innerX = length(right);
        var innerY = length(up);
        var innerZ = length(at);

        normalize(right, right);
        normalize(up, up);
        normalize(at, at);

        var vpU, vpV, vpW;
        if (innerX > 0.0)
        {
            if (innerY > 0.0)
            {
                if (innerZ > 0.0)
                {
                    var outerX = abs(dot(up, at));
                    var outerY = abs(dot(at, right));
                    var outerZ = abs(dot(right, up));
                    if (outerX < outerY)
                    {
                        if (outerX < outerZ)
                        {
                            vpU = up;
                            vpV = at;
                            vpW = right;
                        }
                        else
                        {
                            vpU = right;
                            vpV = up;
                            vpW = at;
                        }
                    }
                    else
                    {
                        if (outerY < outerZ)
                        {
                            vpU = at;
                            vpV = right;
                            vpW = up;
                        }
                        else
                        {
                            vpU = right;
                            vpV = up;
                            vpW = at;
                        }
                    }
                }
                else
                {
                    vpU = right;
                    vpV = up;
                    vpW = at;
                }
            }
            else
            {
                vpU = at;
                vpV = right;
                vpW = up;
            }
        }
        else
        {
            vpU = up;
            vpV = at;
            vpW = right;
        }

        cross(vpU, vpV, vpW);
        normalize(vpW, vpW);

        cross(vpW, vpU, vpV);
        normalize(vpV, vpV);

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        dst[0] = right[0];
        dst[1] = right[1];
        dst[2] = right[2];
        dst[3] = up[0];
        dst[4] = up[1];
        dst[5] = up[2];
        dst[6] = at[0];
        dst[7] = at[1];
        dst[8] = at[2];
        dst[9] = pos[0];
        dst[10] = pos[1];
        dst[11] = pos[2];

        return dst;
    },

    m43Determinant : function m43DeterminantFn(m)
    {
        return (m[0] * (m[4] * m[8] - m[5] * m[7]) +
                m[1] * (m[5] * m[6] - m[3] * m[8]) +
                m[2] * (m[3] * m[7] - m[4] * m[6]));
    },

    m43Inverse : function m43InverseFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        var m9 = m[9];
        var m10 = m[10];
        var m11 = m[11];

        var det = (m0 * (m4 * m8 - m5 * m7) +
                   m1 * (m5 * m6 - m3 * m8) +
                   m2 * (m3 * m7 - m4 * m6));
        if (det === 0.0)
        {
            return dst;
        }
        else
        {
            if (dst === undefined)
            {
                dst = new VMathArrayConstructor(12);
            }
            var detrecp = 1.0 / det;
            dst[0] = ((m4 * m8 + m5 * (-m7)) * detrecp);
            dst[1] = ((m7 * m2 + m8 * (-m1)) * detrecp);
            dst[2] = ((m1 * m5 - m2 *   m4)  * detrecp);
            dst[3] = ((m5 * m6 + m3 * (-m8)) * detrecp);
            dst[4] = ((m8 * m0 + m6 * (-m2)) * detrecp);
            dst[5] = ((m3 * m2 - m0 *   m5)  * detrecp);
            dst[6] = ((m3 * m7 + m4 * (-m6)) * detrecp);
            dst[7] = ((m6 * m1 + m7 * (-m0)) * detrecp);
            dst[8] = ((m0 * m4 - m3 *   m1)  * detrecp);
            dst[9]  = ((m3 * (m10 * m8  - m7 * m11) + m4  * (m6 * m11 - m9 * m8) + m5  * (m9 * m7 - m6 * m10)) * detrecp);
            dst[10] = ((m6 * (m2  * m10 - m1 * m11) + m7  * (m0 * m11 - m9 * m2) + m8  * (m9 * m1 - m0 * m10)) * detrecp);
            dst[11] = ((m9 * (m2  * m4  - m1 * m5)  + m10 * (m0 * m5  - m3 * m2) + m11 * (m3 * m1 - m0 * m4))  * detrecp);
            return dst;
        }
    },

    m43Translate : function m43TranslateFn(matrix, pos)
    {
        matrix[9]  += pos[0];
        matrix[10] += pos[1];
        matrix[11] += pos[2];
    },

    m43Scale : function m43ScaleFn(m, scale, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var sx = scale[0];
        var sy = scale[1];
        var sz = scale[2];

        dst[0] = m[0] * sx;
        dst[1] = m[1] * sx;
        dst[2] = m[2] * sx;
        dst[3] = m[3] * sy;
        dst[4] = m[4] * sy;
        dst[5] = m[5] * sy;
        dst[6] = m[6] * sz;
        dst[7] = m[7] * sz;
        dst[8] = m[8] * sz;
        dst[9] = m[9];
        dst[10] = m[10];
        dst[11] = m[11];

        return dst;
    },

    m43TransformVector : function m43TransformVectorFn(m, v, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = (m[0] * v0 + m[3] * v1 + m[6] * v2);
        dst[1] = (m[1] * v0 + m[4] * v1 + m[7] * v2);
        dst[2] = (m[2] * v0 + m[5] * v1 + m[8] * v2);
        return dst;
    },

    m43TransformPoint : function m43TransformPointFn(m, v, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = (m[0] * v0 + m[3] * v1 + m[6] * v2 + m[9]);
        dst[1] = (m[1] * v0 + m[4] * v1 + m[7] * v2 + m[10]);
        dst[2] = (m[2] * v0 + m[5] * v1 + m[8] * v2 + m[11]);
        return dst;
    },

    m43Mul : function m43MulFn(a, b, dst)
    {
        var a0  = a[0];
        var a1  = a[1];
        var a2  = a[2];
        var a3  = a[3];
        var a4  = a[4];
        var a5  = a[5];
        var a6  = a[6];
        var a7  = a[7];
        var a8  = a[8];
        var a9  = a[9];
        var a10 = a[10];
        var a11 = a[11];

        var b0  = b[0];
        var b1  = b[1];
        var b2  = b[2];
        var b3  = b[3];
        var b4  = b[4];
        var b5  = b[5];
        var b6  = b[6];
        var b7  = b[7];
        var b8  = b[8];

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        dst[0] =  (b0 * a0 + b3 * a1 + b6 * a2);
        dst[1] =  (b1 * a0 + b4 * a1 + b7 * a2);
        dst[2] =  (b2 * a0 + b5 * a1 + b8 * a2);
        dst[3] =  (b0 * a3 + b3 * a4 + b6 * a5);
        dst[4] =  (b1 * a3 + b4 * a4 + b7 * a5);
        dst[5] =  (b2 * a3 + b5 * a4 + b8 * a5);
        dst[6] =  (b0 * a6 + b3 * a7 + b6 * a8);
        dst[7] =  (b1 * a6 + b4 * a7 + b7 * a8);
        dst[8] =  (b2 * a6 + b5 * a7 + b8 * a8);
        dst[9]  = (b0 * a9 + b3 * a10 + b6 * a11 + b[9]);
        dst[10] = (b1 * a9 + b4 * a10 + b7 * a11 + b[10]);
        dst[11] = (b2 * a9 + b5 * a10 + b8 * a11 + b[11]);

        return dst;
    },

    m43MulM44 : function m43MulM44Fn(a, b, dst)
    {
        var a0  = a[0];
        var a1  = a[1];
        var a2  = a[2];
        var a3  = a[3];
        var a4  = a[4];
        var a5  = a[5];
        var a6  = a[6];
        var a7  = a[7];
        var a8  = a[8];
        var a9  = a[9];
        var a10 = a[10];
        var a11 = a[11];

        var b0  = b[0];
        var b1  = b[1];
        var b2  = b[2];
        var b3  = b[3];
        var b4  = b[4];
        var b5  = b[5];
        var b6  = b[6];
        var b7  = b[7];
        var b8  = b[8];
        var b9  = b[9];
        var b10 = b[10];
        var b11 = b[11];

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }

        dst[0] =  (b0 * a0 + b4 * a1 + b8  * a2);
        dst[1] =  (b1 * a0 + b5 * a1 + b9  * a2);
        dst[2] =  (b2 * a0 + b6 * a1 + b10 * a2);
        dst[3] =  (b3 * a0 + b7 * a1 + b11 * a2);
        dst[4] =  (b0 * a3 + b4 * a4 + b8  * a5);
        dst[5] =  (b1 * a3 + b5 * a4 + b9  * a5);
        dst[6] =  (b2 * a3 + b6 * a4 + b10 * a5);
        dst[7] =  (b3 * a3 + b7 * a4 + b11 * a5);
        dst[8] =  (b0 * a6 + b4 * a7 + b8  * a8);
        dst[9]  = (b1 * a6 + b5 * a7 + b9  * a8);
        dst[10] = (b2 * a6 + b6 * a7 + b10 * a8);
        dst[11] = (b3 * a6 + b7 * a7 + b11 * a8);
        dst[12] = (b0 * a9 + b4 * a10 + b8  * a11 + b[12]);
        dst[13] = (b1 * a9 + b5 * a10 + b9  * a11 + b[13]);
        dst[14] = (b2 * a9 + b6 * a10 + b10 * a11 + b[14]);
        dst[15] = (b3 * a9 + b7 * a10 + b11 * a11 + b[15]);

        return dst;
    },

    m43Transpose : function m43TransposeFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        var m9 = m[9];
        var m10 = m[10];
        var m11 = m[11];

        dst[0] =  m0;
        dst[1] =  m3;
        dst[2] =  m6;
        dst[3] =  m9;
        dst[4] =  m1;
        dst[5] =  m4;
        dst[6] =  m7;
        dst[7] =  m10;
        dst[8] =  m2;
        dst[9]  = m5;
        dst[10] = m8;
        dst[11] = m11;

        return dst;
    },

    m43MulTranspose: function m43MulTransposeFn(a, b, dst)
    {
        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        var a3 = a[3];
        var a4 = a[4];
        var a5 = a[5];
        var a6 = a[6];
        var a7 = a[7];
        var a8 = a[8];
        var a9 = a[9];
        var a10 = a[10];
        var a11 = a[11];

        var b0 = b[0];
        var b1 = b[1];
        var b2 = b[2];
        var b3 = b[3];
        var b4 = b[4];
        var b5 = b[5];
        var b6 = b[6];
        var b7 = b[7];
        var b8 = b[8];
        var b9 = b[9];
        var b10 = b[10];
        var b11 = b[11];

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        dst[0] =  (b0 * a0 + b3 * a1 + b6 * a2);
        dst[1] =  (b0 * a3 + b3 * a4 + b6 * a5);
        dst[2] =  (b0 * a6 + b3 * a7 + b6 * a8);
        dst[3] =  (b0 * a9 + b3 * a10 + b6 * a11 + b9);
        dst[4] =  (b1 * a0 + b4 * a1 + b7 * a2);
        dst[5] =  (b1 * a3 + b4 * a4 + b7 * a5);
        dst[6] =  (b1 * a6 + b4 * a7 + b7 * a8);
        dst[7] =  (b1 * a9 + b4 * a10 + b7 * a11 + b10);
        dst[8] =  (b2 * a0 + b5 * a1 + b8 * a2);
        dst[9]  = (b2 * a3 + b5 * a4 + b8 * a5);
        dst[10] = (b2 * a6 + b5 * a7 + b8 * a8);
        dst[11] = (b2 * a9 + b5 * a10 + b8 * a11 + b11);

        return dst;
    },

    m43Offset: function m43OffsetFn(m, o, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        var m9 = m[9];
        var m10 = m[10];
        var m11 = m[11];

        var o0 = o[0];
        var o1 = o[1];
        var o2 = o[2];

        dst[0] =  m0;
        dst[1] =  m1;
        dst[2] =  m2;
        dst[3] =  m3;
        dst[4] =  m4;
        dst[5] =  m5;
        dst[6] =  m6;
        dst[7] =  m7;
        dst[8] =  m8;
        dst[9]  = (m0 * o0 + m3 * o1 + m6 * o2 + m9);
        dst[10] = (m1 * o0 + m4 * o1 + m7 * o2 + m10);
        dst[11] = (m2 * o0 + m5 * o1 + m8 * o2 + m11);

        return dst;
    },

    m43NegOffset: function m43NegOffsetFn(m, o, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        var m9 = m[9];
        var m10 = m[10];
        var m11 = m[11];

        var o0 = -o[0];
        var o1 = -o[1];
        var o2 = -o[2];

        dst[0] =  m0;
        dst[1] =  m1;
        dst[2] =  m2;
        dst[3] =  m3;
        dst[4] =  m4;
        dst[5] =  m5;
        dst[6] =  m6;
        dst[7] =  m7;
        dst[8] =  m8;
        dst[9]  = (m0 * o0 + m3 * o1 + m6 * o2 + m9);
        dst[10] = (m1 * o0 + m4 * o1 + m7 * o2 + m10);
        dst[11] = (m2 * o0 + m5 * o1 + m8 * o2 + m11);

        return dst;
    },

    m43InverseTransposeProjection: function m43InverseTransposeProjectionFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }

        var xf = (0.5 / s[0]);
        var yf = (0.5 / s[1]);
        var zf = (0.5 / s[2]);
        var m0 = (m[0] * xf);
        var m1 = (m[1] * xf);
        var m2 = (m[2] * xf);
        var m3 = (m[3] * yf);
        var m4 = (m[4] * yf);
        var m5 = (m[5] * yf);
        var m6 = (m[6] * zf);
        var m7 = (m[7] * zf);
        var m8 = (m[8] * zf);
        var px = m[9];
        var py = m[10];
        var pz = m[11];

        dst[0] =  m0;
        dst[1] =  m1;
        dst[2] =  m2;
        dst[3] =  (0.5 - ((px * m0) + (py * m1) + (pz * m2)));
        dst[4] =  m3;
        dst[5] =  m4;
        dst[6] =  m5;
        dst[7] =  (0.5 - ((px * m3) + (py * m4) + (pz * m5)));
        dst[8] =  m6;
        dst[9]  = m7;
        dst[10] = m8;
        dst[11] = (0.5 - ((px * m6) + (py * m7) + (pz * m8)));

        return dst;
    },

    // Matrix 43 opeations with scalar
    m43ScalarAdd : function m43ScalarAddFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }
        for (var n = 0; n < 12; n += 1)
        {
            dst[n] = (m[n] + s);
        }
        return dst;
    },

    m43ScalarSub : function m43ScalarSubFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }
        for (var n = 0; n < 12; n += 1)
        {
            dst[n] = (m[n] - s);
        }
        return dst;
    },

    m43ScalarMul : function m43ScalarMulFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(12);
        }
        for (var n = 0; n < 12; n += 1)
        {
            dst[n] = (m[n] * s);
        }
        return dst;
    },

    // Matrix44
    m44BuildIdentity : function m44BuildIdentityFn(dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }

        dst[0] =  1.0;
        dst[1] =  0.0;
        dst[2] =  0.0;
        dst[3] =  0.0;
        dst[4] =  0.0;
        dst[5] =  1.0;
        dst[6] =  0.0;
        dst[7] =  0.0;
        dst[8] =  0.0;
        dst[9] =  0.0;
        dst[10] = 1.0;
        dst[11] = 0.0;
        dst[12] = 0.0;
        dst[13] = 0.0;
        dst[14] = 0.0;
        dst[15] = 1.0;

        return dst;
    },

    m44Build : function m44BuildFn(r, u, a, p, dst)
    {
        var length = arguments.length;
        if (length >= 16)
        {
            // Can NOT use dst because it will overwrite the input value...
            var res;

            if (length > 16)
            {
                res = arguments[16];
                if (res === undefined)
                {
                    res = new VMathArrayConstructor(16);
                }
            }
            else
            {
                res = new VMathArrayConstructor(16);
            }

            res[0] =  arguments[0];
            res[1] =  arguments[1];
            res[2] =  arguments[2];
            res[3] =  arguments[3];
            res[4] =  arguments[4];
            res[5] =  arguments[5];
            res[6] =  arguments[6];
            res[7] =  arguments[7];
            res[8] =  arguments[8];
            res[9] =  arguments[9];
            res[10] = arguments[10];
            res[11] = arguments[11];
            res[12] = arguments[12];
            res[13] = arguments[13];
            res[14] = arguments[14];
            res[15] = arguments[15];

            return res;
        }
        else
        {
            if (dst === undefined)
            {
                dst = new VMathArrayConstructor(16);
            }

            dst[0] =  r[0];
            dst[1] =  r[1];
            dst[2] =  r[2];
            dst[3] =  r[3];
            dst[4] =  u[0];
            dst[5] =  u[1];
            dst[6] =  u[2];
            dst[7] =  u[3];
            dst[8] =  a[0];
            dst[9] =  a[1];
            dst[10] = a[2];
            dst[11] = a[3];
            dst[12] = p[0];
            dst[13] = p[1];
            dst[14] = p[2];
            dst[15] = p[3];

            return dst;
        }
    },

    m44Copy : function m44CopyFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }

        dst[0] =  m[0];
        dst[1] =  m[1];
        dst[2] =  m[2];
        dst[3] =  m[3];
        dst[4] =  m[4];
        dst[5] =  m[5];
        dst[6] =  m[6];
        dst[7] =  m[7];
        dst[8] =  m[8];
        dst[9] =  m[9];
        dst[10] = m[10];
        dst[11] = m[11];
        dst[12] = m[12];
        dst[13] = m[13];
        dst[14] = m[14];
        dst[15] = m[15];

        return dst;
    },

    m44Right : function m44RightFn(m, dst)
    {
        if (dst === undefined)
        {
            return m.slice(0, 4);
        }

        dst[0] = m[0];
        dst[1] = m[1];
        dst[2] = m[2];
        dst[3] = m[3];
        return dst;
    },

    m44Up : function m44UpFn(m, dst)
    {
        if (dst === undefined)
        {
            return m.slice(4, 8);
        }

        dst[0] = m[4];
        dst[1] = m[5];
        dst[2] = m[6];
        dst[3] = m[7];
        return dst;
    },

    m44At : function m44AtFn(m, dst)
    {
        if (dst === undefined)
        {
            return m.slice(8, 12);
        }

        dst[0] = m[8];
        dst[1] = m[9];
        dst[2] = m[10];
        dst[3] = m[11];
        return dst;
    },

    m44Pos : function m44PosFn(m, dst)
    {
        if (dst === undefined)
        {
            return m.slice(12);
        }

        dst[0] = m[12];
        dst[1] = m[13];
        dst[2] = m[14];
        dst[3] = m[15];
        return dst;
    },

    m44SetRight : function m44SetRightFn(m, v)
    {
        m[0] = v[0];
        m[1] = v[1];
        m[2] = v[2];
        m[3] = v[3];
    },

    m44SetUp : function m44SetUpFn(m, v)
    {
        m[4] = v[0];
        m[5] = v[1];
        m[6] = v[2];
        m[7] = v[3];
    },

    m44SetAt : function m44SetAtFn(m, v)
    {
        m[8] = v[0];
        m[9] = v[1];
        m[10] = v[2];
        m[11] = v[3];
    },

    m44SetPos : function m44SetPosFn(m, v)
    {
        m[12] = v[0];
        m[13] = v[1];
        m[14] = v[2];
        m[15] = v[3];
    },

    m44Translate : function m44TranslateFn(m, v)
    {
        m[12] += v[0];
        m[13] += v[1];
        m[14] += v[2];
        m[15] += v[3];
    },

    m44Scale : function m44ScaleFn(m, scale, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }

        /*jshint white: false */
        dst[0] =  m[0]  * scale[0];
        dst[1] =  m[1]  * scale[0];
        dst[2] =  m[2]  * scale[0];
        dst[3] =  m[3];
        dst[4] =  m[4]  * scale[1];
        dst[5] =  m[5]  * scale[1];
        dst[6] =  m[6]  * scale[1];
        dst[7] =  m[7];
        dst[8] =  m[8]  * scale[2];
        dst[9] =  m[9]  * scale[2];
        dst[10] = m[10] * scale[2];
        dst[11] = m[11];
        dst[12] = m[12];
        dst[13] = m[13];
        dst[14] = m[14];
        dst[15] = m[15];
        /*jshint white: true */

        return dst;
    },

    m44Transform : function m44TransformFn(m, v, dst)
    {
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        var v3 = v[3];
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        if (v3 !== 1.0)
        {
            dst[0] = ((m[0] * v0) + (m[4] * v1) + (m[8]  * v2) + (m[12] * v3));
            dst[1] = ((m[1] * v0) + (m[5] * v1) + (m[9]  * v2) + (m[13] * v3));
            dst[2] = ((m[2] * v0) + (m[6] * v1) + (m[10] * v2) + (m[14] * v3));
            dst[3] = ((m[3] * v0) + (m[7] * v1) + (m[11] * v2) + (m[15] * v3));
        }
        else
        {
            dst[0] = ((m[0] * v0) + (m[4] * v1) + (m[8]  * v2) + m[12]);
            dst[1] = ((m[1] * v0) + (m[5] * v1) + (m[9]  * v2) + m[13]);
            dst[2] = ((m[2] * v0) + (m[6] * v1) + (m[10] * v2) + m[14]);
            dst[3] = ((m[3] * v0) + (m[7] * v1) + (m[11] * v2) + m[15]);
        }
        return dst;
    },

    m44Mul : function m44MulFn(a, b, dst)
    {
        var a0 = a[0];
        var a1 = a[1];
        var a2 = a[2];
        var a3 = a[3];
        var a4 = a[4];
        var a5 = a[5];
        var a6 = a[6];
        var a7 = a[7];
        var a8 = a[8];
        var a9 = a[9];
        var a10 = a[10];
        var a11 = a[11];
        var a12 = a[12];
        var a13 = a[13];
        var a14 = a[14];
        var a15 = a[15];

        var b0 = b[0];
        var b1 = b[1];
        var b2 = b[2];
        var b3 = b[3];
        var b4 = b[4];
        var b5 = b[5];
        var b6 = b[6];
        var b7 = b[7];
        var b8 = b[8];
        var b9 = b[9];
        var b10 = b[10];
        var b11 = b[11];
        var b12 = b[12];
        var b13 = b[13];
        var b14 = b[14];
        var b15 = b[15];

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }

        dst[0] = (b0 * a0  + b4 * a1  + b8  * a2  + b12 * a3);
        dst[1] = (b1 * a0  + b5 * a1  + b9  * a2  + b13 * a3);
        dst[2] = (b2 * a0  + b6 * a1  + b10 * a2  + b14 * a3);
        dst[3] = (b3 * a0  + b7 * a1  + b11 * a2  + b15 * a3);
        dst[4] = (b0 * a4  + b4 * a5  + b8  * a6  + b12 * a7);
        dst[5] = (b1 * a4  + b5 * a5  + b9  * a6  + b13 * a7);
        dst[6] = (b2 * a4  + b6 * a5  + b10 * a6  + b14 * a7);
        dst[7] = (b3 * a4  + b7 * a5  + b11 * a6  + b15 * a7);
        dst[8] = (b0 * a8  + b4 * a9  + b8  * a10 + b12 * a11);
        dst[9] = (b1 * a8  + b5 * a9  + b9  * a10 + b13 * a11);
        dst[10] = (b2 * a8  + b6 * a9  + b10 * a10 + b14 * a11);
        dst[11] = (b3 * a8  + b7 * a9  + b11 * a10 + b15 * a11);
        dst[12] = (b0 * a12 + b4 * a13 + b8  * a14 + b12 * a15);
        dst[13] = (b1 * a12 + b5 * a13 + b9  * a14 + b13 * a15);
        dst[14] = (b2 * a12 + b6 * a13 + b10 * a14 + b14 * a15);
        dst[15] = (b3 * a12 + b7 * a13 + b11 * a14 + b15 * a15);

        return dst;
    },

    m44Inverse : function m44InverseFn(m, dst)
    {
        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        var m9 = m[9];
        var m10 = m[10];
        var m11 = m[11];
        var m12 = m[12];
        var m13 = m[13];
        var m14 = m[14];
        var m15 = m[15];

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }

        /*jshint white: false */
        var A0 = (( m0 *  m5) - ( m1 *  m4));
        var A1 = (( m0 *  m6) - ( m2 *  m4));
        var A2 = (( m0 *  m7) - ( m3 *  m4));
        var A3 = (( m1 *  m6) - ( m2 *  m5));
        var A4 = (( m1 *  m7) - ( m3 *  m5));
        var A5 = (( m2 *  m7) - ( m3 *  m6));
        var B0 = (( m8 * m13) - ( m9 * m12));
        var B1 = (( m8 * m14) - (m10 * m12));
        var B2 = (( m8 * m15) - (m11 * m12));
        var B3 = (( m9 * m14) - (m10 * m13));
        var B4 = (( m9 * m15) - (m11 * m13));
        var B5 = ((m10 * m15) - (m11 * m14));
        /*jshint white: true */

        var det = ((A0 * B5) - (A1 * B4) + (A2 * B3) + (A3 * B2) - (A4 * B1) + (A5 * B0));
        if (det === 0.0)
        {
            /*jshint white: false */
            dst[ 0] = 0.0;
            dst[ 1] = 0.0;
            dst[ 2] = 0.0;
            dst[ 3] = 0.0;
            dst[ 4] = 0.0;
            dst[ 5] = 0.0;
            dst[ 6] = 0.0;
            dst[ 7] = 0.0;
            dst[ 8] = 0.0;
            dst[ 9] = 0.0;
            dst[10] = 0.0;
            dst[11] = 0.0;
            dst[12] = 0.0;
            dst[13] = 0.0;
            dst[14] = 0.0;
            dst[15] = 0.0;
            /*jshint white: true */
        }
        else
        {
            var detrecp = 1.0 / det;
            /*jshint white: false */
            dst[ 0] = (+ ( m5 * B5) - ( m6 * B4) + ( m7 * B3)) * detrecp;
            dst[ 4] = (- ( m4 * B5) + ( m6 * B2) - ( m7 * B1)) * detrecp;
            dst[ 8] = (+ ( m4 * B4) - ( m5 * B2) + ( m7 * B0)) * detrecp;
            dst[12] = (- ( m4 * B3) + ( m5 * B1) - ( m6 * B0)) * detrecp;
            dst[ 1] = (- ( m1 * B5) + ( m2 * B4) - ( m3 * B3)) * detrecp;
            dst[ 5] = (+ ( m0 * B5) - ( m2 * B2) + ( m3 * B1)) * detrecp;
            dst[ 9] = (- ( m0 * B4) + ( m1 * B2) - ( m3 * B0)) * detrecp;
            dst[13] = (+ ( m0 * B3) - ( m1 * B1) + ( m2 * B0)) * detrecp;
            dst[ 2] = (+ (m13 * A5) - (m14 * A4) + (m15 * A3)) * detrecp;
            dst[ 6] = (- (m12 * A5) + (m14 * A2) - (m15 * A1)) * detrecp;
            dst[10] = (+ (m12 * A4) - (m13 * A2) + (m15 * A0)) * detrecp;
            dst[14] = (- (m12 * A3) + (m13 * A1) - (m14 * A0)) * detrecp;
            dst[ 3] = (- ( m9 * A5) + (m10 * A4) - (m11 * A3)) * detrecp;
            dst[ 7] = (+ ( m8 * A5) - (m10 * A2) + (m11 * A1)) * detrecp;
            dst[11] = (- ( m8 * A4) + ( m9 * A2) - (m11 * A0)) * detrecp;
            dst[15] = (+ ( m8 * A3) - ( m9 * A1) + (m10 * A0)) * detrecp;
            /*jsline white: true */
        }

        return dst;
    },

    m44Transpose : function m44TransposeFn(m, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }

        dst[0] = m[0];
        dst[1] = m[4];
        dst[2] = m[8];
        dst[3] = m[12];
        dst[4] = m[1];
        dst[5] = m[5];
        dst[6] = m[9];
        dst[7] = m[13];
        dst[8] = m[2];
        dst[9] = m[6];
        dst[10] = m[10];
        dst[11] = m[14];
        dst[12] = m[3];
        dst[13] = m[7];
        dst[14] = m[11];
        dst[15] = m[15];

        return dst;
    },

    // Matrix44 operations with scalars
    m44ScalarAdd : function m44ScalarAddFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }
        for (var n = 0; n < 16; n += 1)
        {
            dst[n] = (m[n] + s);
        }
        return dst;
    },

    m44ScalarSub : function m44ScalarSubFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }
        for (var n = 0; n < 16; n += 1)
        {
            dst[n] = (m[n] - s);
        }
        return dst;
    },

    m44ScalarMul : function m44ScalarMulFn(m, s, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(16);
        }
        for (var n = 0; n < 16; n += 1)
        {
            dst[n] = (m[n] * s);
        }
        return dst;
    },

    // Quaternion
    quatBuild : function quatBuildFn(x, y, z, w, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = x;
        dst[1] = y;
        dst[2] = z;
        dst[3] = w;
        return dst;
    },

    quatCopy : function quatCopyFn(src, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }
        dst[0] = src[0];
        dst[1] = src[1];
        dst[2] = src[2];
        dst[3] = src[3];
        return dst;
    },

    quatIsSimilar : function quatIsSimilarFn(q1, q2, precision)
    {
        if (precision === undefined)
        {
            precision = this.precision;
        }
        // this compares for similar rotations not raw data
        var q1temp = q1;

        if (q1[3] * q2[3] < 0.0)
        {
            // quaternions in opposing hemispheres, negate one
            q1temp = VMath.v4Neg(q1);
        }

        var mag_sqrd = VMath.v4LengthSq(VMath.v4Sub(q1temp, q2));
        var epsilon_sqrd = (precision * precision);
        return mag_sqrd < epsilon_sqrd;
    },

    quatLength : function quatLengthFn(q)
    {
        return VMath.v4Length(q);
    },

    quatDot : function quatDotFn(q1, q2)
    {
        return VMath.v4Dot(q1, q2);
    },

    quatMul : function quatMulFn(q1, q2, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        // Note quaternion multiplication is the opposite way around from our matrix multiplication
        //var v1 = q1; // use full quats to avoid copy
        //var v2 = q2;

        /*
        // Calculate the imaginary part
        var quat = VMath.v3Add3(VMath.v3ScalarMul(v2, q1[3]), VMath.v3ScalarMul(v1, q2[3]), VMath.v3Cross(v1, v2));
        // And extend with the real part
        quat[3] = (q1[3] * q2[3]) - VMath.v3Dot(v1, v2);
        */

        // Inlined from above
        var q2x = q1[0];
        var q2y = q1[1];
        var q2z = q1[2];
        var q2w = q1[3];
        var q1x = q2[0];
        var q1y = q2[1];
        var q1z = q2[2];
        var q1w = q2[3];

        var cx = (q1z * q2y) - (q1y * q2z);
        var cy = (q1x * q2z) - (q1z * q2x);
        var cz = (q1y * q2x) - (q1x * q2y);

        dst[0] = (q2x * q1w) + (q1x * q2w) + cx;
        dst[1] = (q2y * q1w) + (q1y * q2w) + cy;
        dst[2] = (q2z * q1w) + (q1z * q2w) + cz;
        dst[3] = (q1w * q2w) - (q1x * q2x + q1y * q2y + q1z * q2z);

        return dst;
    },

    quatMulTranslate : function quatMulTranslateFn(qa, va, qb, vb, qr, vr)
    {
        var qax = qa[0];
        var qay = qa[1];
        var qaz = qa[2];
        var qaw = qa[3];
        var qbx = qb[0];
        var qby = qb[1];
        var qbz = qb[2];
        var qbw = qb[3];

        // Multiply together the two quaternions
        var cx = (qaz * qby) - (qay * qbz);
        var cy = (qax * qbz) - (qaz * qbx);
        var cz = (qay * qbx) - (qax * qby);

        qr[0] = (qbx * qaw) + (qax * qbw) + cx;
        qr[1] = (qby * qaw) + (qay * qbw) + cy;
        qr[2] = (qbz * qaw) + (qaz * qbw) + cz;
        qr[3] = (qaw * qbw) - (qax * qbx + qay * qby + qaz * qbz);

        // Transform the 2nd vector by the first quaternion and add in the first position
        var vax = va[0];
        var vay = va[1];
        var vaz = va[2];
        var vbx = vb[0];
        var vby = vb[1];
        var vbz = vb[2];

        var s = (qaw * qaw) - (qax * qax + qay * qay + qaz * qaz);
        var rx = vbx * s;
        var ry = vby * s;
        var rz = vbz * s;

        s = qax * vbx + qay * vby + qaz * vbz;

        var twoS = s + s;
        rx += qax * twoS;
        ry += qay * twoS;
        rz += qaz * twoS;

        cx = (qaz * vby) - (qay * vbz);
        cy = (qax * vbz) - (qaz * vbx);
        cz = (qay * vbx) - (qax * vby);
        var twoQw = qaw + qaw;
        rx += cx * twoQw;
        ry += cy * twoQw;
        rz += cz * twoQw;

        vr[0] = rx + vax;
        vr[1] = ry + vay;
        vr[2] = rz + vaz;
    },

    quatNormalize : function quatNormalizeFn(q, dst)
    {
        var norme = VMath.quatDot(q, q);
        if (norme === 0.0)
        {
            return VMath.v4BuildZero(dst);
        }
        else
        {
            var recip = 1.0 / Math.sqrt(norme);
            return VMath.v4ScalarMul(q, recip, dst);
        }
    },

    quatConjugate : function quatConjugateFn(q, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = -q[0];
        dst[1] = -q[1];
        dst[2] = -q[2];
        dst[3] =  q[3];

        return dst;
    },

    quatLerp : function quatLerpFn(q1, q2, t, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var q1x = q1[0];
        var q1y = q1[1];
        var q1z = q1[2];
        var q1w = q1[3];
        var q2x = q2[0];
        var q2y = q2[1];
        var q2z = q2[2];
        var q2w = q2[3];

        dst[0] = ((q2x - q1x) * t) + q1x;
        dst[1] = ((q2y - q1y) * t) + q1y;
        dst[2] = ((q2z - q1z) * t) + q1z;
        dst[3] = ((q2w - q1w) * t) + q1w;

        return dst;
    },

    cosMinSlerpAngle : Math.cos(Math.PI / 40.0), // use a lerp for angles <= 4.5 degrees

    quatSlerp : function quatSlerpFn(q1, q2, t, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var q1x = q1[0];
        var q1y = q1[1];
        var q1z = q1[2];
        var q1w = q1[3];
        var q2x = q2[0];
        var q2y = q2[1];
        var q2z = q2[2];
        var q2w = q2[3];
        var dotq1q2 = (q1x * q2x) + (q1y * q2y) + (q1z * q2z) + (q1w * q2w);

        var cosom = dotq1q2;
        if (cosom < 0.0)
        {
            q1x = -q1x;
            q1y = -q1y;
            q1z = -q1z;
            q1w = -q1w;
            cosom = -cosom;
        }

        if (cosom > VMath.cosMinSlerpAngle)
        {
            var delta = t;
            if (dotq1q2 <= 0.0)
            {
                delta = -t;
            }

            var qrx = ((q2x - q1x) * delta) + q1x;
            var qry = ((q2y - q1y) * delta) + q1y;
            var qrz = ((q2z - q1z) * delta) + q1z;
            var qrw = ((q2w - q1w) * delta) + q1w;

            var mag = Math.sqrt((qrx * qrx) + (qry * qry) + (qrz * qrz) + (qrw * qrw));
            var recip = 1.0 / mag;

            dst[0] =  qrx * recip;
            dst[1] =  qry * recip;
            dst[2] =  qrz * recip;
            dst[3] =  qrw * recip;

            return dst;
        }

        var sinFn = Math.sin;
        var omega = Math.acos(cosom);
        var inv_sin_omega = 1.0 / sinFn(omega);

        var scalar = sinFn((1.0 - t) * omega) * inv_sin_omega;
        q1x = q1x * scalar;
        q1y = q1y * scalar;
        q1z = q1z * scalar;
        q1w = q1w * scalar;

        scalar = sinFn(t * omega) * inv_sin_omega;
        q2x = q2x * scalar;
        q2y = q2y * scalar;
        q2z = q2z * scalar;
        q2w = q2w * scalar;

        dst[0] =  q1x + q2x;
        dst[1] =  q1y + q2y;
        dst[2] =  q1z + q2z;
        dst[3] =  q1w + q2w;

        return dst;
    },

    quatFromM43 : function quatFromM43Fn(m, dst)
    {
        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];

        var x, y, z, w, s;
        var trace = m0 + m4 + m8 + 1;
        if (trace > VMath.precision)
        {
            w = Math.sqrt(trace) / 2;
            x = (m5 - m7) / (4 * w);
            y = (m6 - m2) / (4 * w);
            z = (m1 - m3) / (4 * w);
        }
        else
        {
            if ((m0 > m4) && (m0 > m8))
            {
                s = Math.sqrt(1.0 + m0 - m4 - m8) * 2; // S=4*qx
                w = (m5 - m7) / s;
                x = 0.25 * s;
                y = (m3 + m1) / s;
                z = (m6 + m2) / s;
            }
            else if (m4 > m8)
            {
                s = Math.sqrt(1.0 + m4 - m0 - m8) * 2; // S=4*qy
                w = (m6 - m2) / s;
                x = (m3 + m1) / s;
                y = 0.25 * s;
                z = (m7 + m5) / s;
            }
            else
            {
                s = Math.sqrt(1.0 + m8 - m0 - m4) * 2; // S=4*qz
                w = (m1 - m3) / s;
                x = (m6 + m2) / s;
                y = (m7 + m5) / s;
                z = 0.25 * s;
            }
        }

        var q = VMath.quatNormalize([x, y, z, w], dst);

        return VMath.quatConjugate(q, dst);
    },

    quatFromAxisRotation : function quatFromAxisRotationFn(axis, angle, dst)
    {
        var omega = 0.5 * angle;
        var s = Math.sin(omega);
        var c = Math.cos(omega);

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        dst[0] = axis[0] * s;
        dst[1] = axis[1] * s;
        dst[2] = axis[2] * s;
        dst[3] = c;

        return VMath.quatNormalize(dst, dst);
    },

    quatToAxisRotation : function quatToAxisRotation(q, dst)
    {
        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(4);
        }

        var q3 = q[3];
        var angle = Math.acos(q3) * 2.0;
        var sin_sqrd = 1.0 - q3 * q3;

        if (sin_sqrd < VMath.precision)
        {
            // we can return any axis
            dst[0] = 1.0;
            dst[1] = 0.0;
            dst[2] = 0.0;
            dst[3] = angle;
        }
        else
        {
            var scale = 1.0 / Math.sqrt(sin_sqrd);
            dst[0] = q[0] * scale;
            dst[1] = q[1] * scale;
            dst[2] = q[2] * scale;
            dst[3] = angle;
        }
        return dst;
    },

    quatTransformVector : function quatTransformVectorFn(q, v, dst)
    {
        /*
        var qimaginary = q; // Use full quat directly to avoid copy
        var qw = q[3];

        var s = (qw * qw) - VMath.v3Dot(qimaginary, qimaginary);

        var r = VMath.v3ScalarMul(v, s);

        s = VMath.v3Dot(qimaginary, v);
        r = VMath.v3Add(r, VMath.v3ScalarMul(qimaginary, s + s));
        r = VMath.v3Add(r, VMath.v3ScalarMul(VMath.v3Cross(qimaginary, v), qw + qw));
        */

        // Inlined from above
        var qx = q[0];
        var qy = q[1];
        var qz = q[2];
        var qw = q[3];

        var vx = v[0];
        var vy = v[1];
        var vz = v[2];

        //var s = (qw * qw) - VMath.v3Dot(qimaginary, qimaginary);
        var s = (qw * qw) - (qx * qx + qy * qy + qz * qz);

        //var r = VMath.v3ScalarMul(v, s);
        var rx = vx * s;
        var ry = vy * s;
        var rz = vz * s;

        //s = VMath.v3Dot(qimaginary, v);
        s = qx * vx + qy * vy + qz * vz;

        //r = VMath.v3Add(r, VMath.v3ScalarMul(qimaginary, s + s));
        var twoS = s + s;
        rx += qx * twoS;
        ry += qy * twoS;
        rz += qz * twoS;

        //r = VMath.v3Add(r, VMath.v3ScalarMul(VMath.v3Cross(VMath.v3Neg(qimaginary), v), qw + qw));
        var cx = (qz * vy) - (qy * vz);
        var cy = (qx * vz) - (qz * vx);
        var cz = (qy * vx) - (qx * vy);
        var twoQw = qw + qw;
        rx += cx * twoQw;
        ry += cy * twoQw;
        rz += cz * twoQw;

        if (dst === undefined)
        {
            dst = new VMathArrayConstructor(3);
        }
        dst[0] = rx;
        dst[1] = ry;
        dst[2] = rz;

        return dst;
    },

    quatEqual : function quatEqual(q1, q2, precision)
    {
        if (precision === undefined)
        {
            precision = this.precision;
        }
        var abs = Math.abs;
        return (abs(q1[0] - q2[0]) <= precision &&
                abs(q1[1] - q2[1]) <= precision &&
                abs(q1[2] - q2[2]) <= precision &&
                abs(q1[3] - q2[3]) <= precision);
    },

    // quatPos
    quatPosBuild : function quatPosBuildFn(x, y, z, w, px, py, pz, dst)
    {
        if (arguments.length < 7)
        {
            if (z === undefined)
            {
                z = new VMathArrayConstructor(7);
            }
            z[0] = x[0];
            z[1] = x[1];
            z[2] = x[2];
            z[3] = x[3];
            z[4] = y[0];
            z[5] = y[1];
            z[6] = y[2];
            return z;
        }
        else
        {
            if (dst === undefined)
            {
                dst = new VMathArrayConstructor(7);
            }
            dst[0] = x;
            dst[1] = y;
            dst[2] = z;
            dst[3] = w;
            dst[4] = px;
            dst[5] = py;
            dst[6] = pz;
            return dst;
        }
    },

    quatPosTransformVector : function quatPosTransformVectorFn(qp, n, dst)
    {
        return VMath.quatTransformVector(qp, n, dst);
    },

    quatPosTransformPoint : function quatPosTransformPointFn(qp, p)
    {
        var offset = qp.slice(4, 7);

        var rotatedp = VMath.quatTransformVector(qp, p);
        return VMath.v3Add(rotatedp, offset);
    },

    quatPosMul : function quatPosMulFn(qp1, qp2)
    {
        var v2 = qp2.slice(4, 7);

        var qr = VMath.quatMul(qp1, qp2);
        var pr = VMath.quatPosTransformPoint(qp1, v2);
        qr[4] = pr[0];
        qr[5] = pr[1];
        qr[6] = pr[2];

        return qr;
    },

    //
    // Visibility queries
    //
    isVisibleBox : function isVisibleBoxFn(center, halfDimensions, vpm)
    {
        var abs = Math.abs;

        var c0 = center[0];
        var c1 = center[1];
        var c2 = center[2];

        var h0 = halfDimensions[0];
        var h1 = halfDimensions[1];
        var h2 = halfDimensions[2];

        var m0  = vpm[0];
        var m1  = vpm[1];
        var m2  = vpm[2];
        var m3  = vpm[3];
        var m4  = vpm[4];
        var m5  = vpm[5];
        var m6  = vpm[6];
        var m7  = vpm[7];
        var m8  = vpm[8];
        var m9  = vpm[9];
        var m10 = vpm[10];
        var m11 = vpm[11];

        var I0 = (m0  * h0);
        var I1 = (m1  * h0);
        var I2 = (m2  * h0);
        var I3 = (m3  * h0);
        var J0 = (m4  * h1);
        var J1 = (m5  * h1);
        var J2 = (m6  * h1);
        var J3 = (m7  * h1);
        var K0 = (m8  * h2);
        var K1 = (m9  * h2);
        var K2 = (m10 * h2);
        var K3 = (m11 * h2);

        var T0 = (m0 * c0 + m4 * c1 + m8  * c2 + vpm[12]);
        var T1 = (m1 * c0 + m5 * c1 + m9  * c2 + vpm[13]);
        var T2 = (m2 * c0 + m6 * c1 + m10 * c2 + vpm[14]);
        var T3 = (m3 * c0 + m7 * c1 + m11 * c2 + vpm[15]);

        return !(((T0 - T3) >  (abs(I0 - I3) + abs(J0 - J3) + abs(K0 - K3))) ||
                 ((T0 + T3) < -(abs(I0 + I3) + abs(J0 + J3) + abs(K0 + K3))) ||
                 ((T1 - T3) >  (abs(I1 - I3) + abs(J1 - J3) + abs(K1 - K3))) ||
                 ((T1 + T3) < -(abs(I1 + I3) + abs(J1 + J3) + abs(K1 + K3))) ||
                 ((T2 - T3) >  (abs(I2 - I3) + abs(J2 - J3) + abs(K2 - K3))) ||
                 ((T2 + T3) < -(abs(I2 + I3) + abs(J2 + J3) + abs(K2 + K3))) ||
               //((T3 - T3) >  (abs(I3 - I3) + abs(J3 - J3) + abs(K3 - K3))) ||
                 ((T3 + T3) < -(abs(I3 + I3) + abs(J3 + J3) + abs(K3 + K3))));
    },

    isVisibleBoxOrigin : function isVisibleBoxOriginFn(halfDimensions, vpm)
    {
        var abs = Math.abs;

        var h0 = halfDimensions[0];
        var h1 = halfDimensions[1];
        var h2 = halfDimensions[2];

        var I0 = (vpm[0]  * h0);
        var I1 = (vpm[1]  * h0);
        var I2 = (vpm[2]  * h0);
        var I3 = (vpm[3]  * h0);
        var J0 = (vpm[4]  * h1);
        var J1 = (vpm[5]  * h1);
        var J2 = (vpm[6]  * h1);
        var J3 = (vpm[7]  * h1);
        var K0 = (vpm[8]  * h2);
        var K1 = (vpm[9]  * h2);
        var K2 = (vpm[10] * h2);
        var K3 = (vpm[11] * h2);
        var T0 = vpm[12];
        var T1 = vpm[13];
        var T2 = vpm[14];
        var T3 = vpm[15];

        return !(((T0 - T3) >  (abs(I0 - I3) + abs(J0 - J3) + abs(K0 - K3))) ||
                 ((T0 + T3) < -(abs(I0 + I3) + abs(J0 + J3) + abs(K0 + K3))) ||
                 ((T1 - T3) >  (abs(I1 - I3) + abs(J1 - J3) + abs(K1 - K3))) ||
                 ((T1 + T3) < -(abs(I1 + I3) + abs(J1 + J3) + abs(K1 + K3))) ||
                 ((T2 - T3) >  (abs(I2 - I3) + abs(J2 - J3) + abs(K2 - K3))) ||
                 ((T2 + T3) < -(abs(I2 + I3) + abs(J2 + J3) + abs(K2 + K3))) ||
               //((T3 - T3) >  (abs(I3 - I3) + abs(J3 - J3) + abs(K3 - K3))) ||
                 ((T3 + T3) < -(abs(I3 + I3) + abs(J3 + J3) + abs(K3 + K3))));
    },

    isVisibleSphere : function isVisibleSphereFn(center, radius, vpm)
    {
        var abs = Math.abs;

        var c0 = center[0];
        var c1 = center[1];
        var c2 = center[2];

        var m0  = vpm[0];
        var m1  = vpm[1];
        var m2  = vpm[2];
        var m3  = vpm[3];
        var m4  = vpm[4];
        var m5  = vpm[5];
        var m6  = vpm[6];
        var m7  = vpm[7];
        var m8  = vpm[8];
        var m9  = vpm[9];
        var m10 = vpm[10];
        var m11 = vpm[11];

        var I0 = m0;
        var I1 = m1;
        var I2 = m2;
        var I3 = m3;
        var J0 = m4;
        var J1 = m5;
        var J2 = m6;
        var J3 = m7;
        var K0 = m8;
        var K1 = m9;
        var K2 = m10;
        var K3 = m11;

        var T0 = (m0 * c0 + m4 * c1 + m8  * c2 + vpm[12]);
        var T1 = (m1 * c0 + m5 * c1 + m9  * c2 + vpm[13]);
        var T2 = (m2 * c0 + m6 * c1 + m10 * c2 + vpm[14]);
        var T3 = (m3 * c0 + m7 * c1 + m11 * c2 + vpm[15]);

        var nradius = -radius;

        return !(((T0 - T3) >  radius * (abs(I0 - I3) + abs(J0 - J3) + abs(K0 - K3))) ||
                 ((T0 + T3) < nradius * (abs(I0 + I3) + abs(J0 + J3) + abs(K0 + K3))) ||
                 ((T1 - T3) >  radius * (abs(I1 - I3) + abs(J1 - J3) + abs(K1 - K3))) ||
                 ((T1 + T3) < nradius * (abs(I1 + I3) + abs(J1 + J3) + abs(K1 + K3))) ||
                 ((T2 - T3) >  radius * (abs(I2 - I3) + abs(J2 - J3) + abs(K2 - K3))) ||
                 ((T2 + T3) < nradius * (abs(I2 + I3) + abs(J2 + J3) + abs(K2 + K3))) ||
               //((T3 - T3) >  radius * (abs(I3 - I3) + abs(J3 - J3) + abs(K3 - K3))) ||
                 ((T3 + T3) < nradius * (abs(I3 + I3) + abs(J3 + J3) + abs(K3 + K3))));
    },

    isVisibleSphereOrigin : function isVisibleSphereOriginFn(radius, vpm)
    {
        var abs = Math.abs;

        var I0 = vpm[0];
        var I1 = vpm[1];
        var I2 = vpm[2];
        var I3 = vpm[3];
        var J0 = vpm[4];
        var J1 = vpm[5];
        var J2 = vpm[6];
        var J3 = vpm[7];
        var K0 = vpm[8];
        var K1 = vpm[9];
        var K2 = vpm[10];
        var K3 = vpm[11];
        var T0 = vpm[12];
        var T1 = vpm[13];
        var T2 = vpm[14];
        var T3 = vpm[15];

        var nradius = -radius;

        return !(((T0 - T3) >  radius * (abs(I0 - I3) + abs(J0 - J3) + abs(K0 - K3))) ||
                 ((T0 + T3) < nradius * (abs(I0 + I3) + abs(J0 + J3) + abs(K0 + K3))) ||
                 ((T1 - T3) >  radius * (abs(I1 - I3) + abs(J1 - J3) + abs(K1 - K3))) ||
                 ((T1 + T3) < nradius * (abs(I1 + I3) + abs(J1 + J3) + abs(K1 + K3))) ||
                 ((T2 - T3) >  radius * (abs(I2 - I3) + abs(J2 - J3) + abs(K2 - K3))) ||
                 ((T2 + T3) < nradius * (abs(I2 + I3) + abs(J2 + J3) + abs(K2 + K3))) ||
               //((T3 - T3) >  radius * (abs(I3 - I3) + abs(J3 - J3) + abs(K3 - K3))) ||
                 ((T3 + T3) < nradius * (abs(I3 + I3) + abs(J3 + J3) + abs(K3 + K3))));
    },

    isVisibleSphereUnit : function isVisibleSphereUnitFn(vpm)
    {
        var abs = Math.abs;

        var I0 = vpm[0];
        var I1 = vpm[1];
        var I2 = vpm[2];
        var I3 = vpm[3];
        var J0 = vpm[4];
        var J1 = vpm[5];
        var J2 = vpm[6];
        var J3 = vpm[7];
        var K0 = vpm[8];
        var K1 = vpm[9];
        var K2 = vpm[10];
        var K3 = vpm[11];
        var T0 = vpm[12];
        var T1 = vpm[13];
        var T2 = vpm[14];
        var T3 = vpm[15];

        return !(((T0 - T3) >  (abs(I0 - I3) + abs(J0 - J3) + abs(K0 - K3))) ||
                 ((T0 + T3) < -(abs(I0 + I3) + abs(J0 + J3) + abs(K0 + K3))) ||
                 ((T1 - T3) >  (abs(I1 - I3) + abs(J1 - J3) + abs(K1 - K3))) ||
                 ((T1 + T3) < -(abs(I1 + I3) + abs(J1 + J3) + abs(K1 + K3))) ||
                 ((T2 - T3) >  (abs(I2 - I3) + abs(J2 - J3) + abs(K2 - K3))) ||
                 ((T2 + T3) < -(abs(I2 + I3) + abs(J2 + J3) + abs(K2 + K3))) ||
               //((T3 - T3) >  (abs(I3 - I3) + abs(J3 - J3) + abs(K3 - K3))) ||
                 ((T3 + T3) < -(abs(I3 + I3) + abs(J3 + J3) + abs(K3 + K3))));
    },

    transformBox : function transformBoxFn(center, halfExtents, matrix)
    {
        var abs = Math.abs;
        var m0  = matrix[0];
        var m1  = matrix[1];
        var m2  = matrix[2];
        var m3  = matrix[3];
        var m4  = matrix[4];
        var m5  = matrix[5];
        var m6  = matrix[6];
        var m7  = matrix[7];
        var m8  = matrix[8];
        var c0 = center[0];
        var c1 = center[1];
        var c2 = center[2];
        var h0 = halfExtents[0];
        var h1 = halfExtents[1];
        var h2 = halfExtents[2];

        var out_center = new VMathArrayConstructor(3);
        out_center[0] = m0 * c0 + m3 * c1 + m6 * c2 + matrix[9];
        out_center[1] = m1 * c0 + m4 * c1 + m7 * c2 + matrix[10];
        out_center[2] = m2 * c0 + m5 * c1 + m8 * c2 + matrix[11];

        var out_halfext = new VMathArrayConstructor(3);
        out_halfext[0] = abs(m0) * h0 + abs(m3) * h1 + abs(m6) * h2;
        out_halfext[1] = abs(m1) * h0 + abs(m4) * h1 + abs(m7) * h2;
        out_halfext[2] = abs(m2) * h0 + abs(m5) * h1 + abs(m8) * h2;

        return {
            center : out_center,
            halfExtents : out_center
        };
    },

    //
    // Planes
    //
    planeNormalize : function planeNormalizeFn(plane, output)
    {
        if (output === undefined)
        {
            output = new VMathArrayConstructor(4);
        }

        var a = plane[0];
        var b = plane[1];
        var c = plane[2];
        var lsq = ((a * a) + (b * b) + (c * c));
        if (lsq > 0.0)
        {
            var lr = 1.0 / Math.sqrt(lsq);
            output[0] = (a * lr);
            output[1] = (b * lr);
            output[2] = (c * lr);
            output[3] = (plane[3] * lr);
        }
        else
        {
            output[0] = 0;
            output[1] = 0;
            output[2] = 0;
            output[3] = 0;
        }

        return output;
    },

    extractFrustumPlanes : function extractFrustumPlanesFn(m, p)
    {
        var planeNormalize = VMath.planeNormalize;
        var m0  = m[0];
        var m1  = m[1];
        var m2  = m[2];
        var m3  = m[3];
        var m4  = m[4];
        var m5  = m[5];
        var m6  = m[6];
        var m7  = m[7];
        var m8  = m[8];
        var m9  = m[9];
        var m10 = m[10];
        var m11 = m[11];
        var m12 = m[12];
        var m13 = m[13];
        var m14 = m[14];
        var m15 = m[15];
        var planes = (p || []);

        // Negate 'd' here to avoid doing it on the isVisible functions
        planes[0] = planeNormalize([(m3  + m0), (m7  + m4), (m11 + m8),
                                    -(m15 + m12)], planes[0]); // left
        planes[1] = planeNormalize([(m3  - m0), (m7  - m4), (m11 - m8),
                                    -(m15 - m12)], planes[1]); // right
        planes[2] = planeNormalize([(m3  - m1), (m7  - m5), (m11 - m9),
                                    -(m15 - m13)], planes[2]); // top
        planes[3] = planeNormalize([(m3  + m1), (m7  + m5), (m11 + m9),
                                    -(m15 + m13)], planes[3]); // bottom
        planes[4] = planeNormalize([(m3  + m2), (m7  + m6), (m11 + m10),
                                    -(m15 + m14)], planes[4]);  // near
        planes[5] = planeNormalize([(m3  - m2), (m7  - m6), (m11 - m10),
                                    -(m15 - m14)], planes[5]); // far

        return planes;
    },

    isInsidePlanesPoint : function isInsidePlanesPointFn(p, planes)
    {
        var p0 = p[0];
        var p1 = p[1];
        var p2 = p[2];
        var numPlanes = planes.length;
        var n = 0;
        do
        {
            var plane = planes[n];
            if ((plane[0] * p0 + plane[1] * p1 + plane[2] * p2) < plane[3])
            {
                return false;
            }
            n += 1;
        }
        while (n < numPlanes);
        return true;
    },

    isInsidePlanesSphere : function isInsidePlanesSphereFn(c, r, planes)
    {
        var c0 = c[0];
        var c1 = c[1];
        var c2 = c[2];
        var numPlanes = planes.length;
        var n = 0;
        do
        {
            var plane = planes[n];
            if ((plane[0] * c0 + plane[1] * c1 + plane[2] * c2) < (plane[3] - r))
            {
                return false;
            }
            n += 1;
        }
        while (n < numPlanes);
        return true;
    },

    isInsidePlanesBox : function isInsidePlanesBoxFn(c, h, planes)
    {
        var c0 = c[0];
        var c1 = c[1];
        var c2 = c[2];
        var h0 = h[0];
        var h1 = h[1];
        var h2 = h[2];
        var p0 = (c0 + h0);
        var p1 = (c1 + h1);
        var p2 = (c2 + h2);
        var n0 = (c0 - h0);
        var n1 = (c1 - h1);
        var n2 = (c2 - h2);
        var numPlanes = planes.length;
        var n = 0;
        do
        {
            var plane = planes[n];
            var d0 = plane[0];
            var d1 = plane[1];
            var d2 = plane[2];
            if ((d0 * (d0 < 0 ? n0 : p0) + d1 * (d1 < 0 ? n1 : p1) + d2 * (d2 < 0 ? n2 : p2)) < plane[3])
            {
                return false;
            }
            n += 1;
        }
        while (n < numPlanes);
        return true;
    },


    extractIntersectingPlanes : function extractIntersectingPlanesFn(extents, planes)
    {
        var n0 = extents[0];
        var n1 = extents[1];
        var n2 = extents[2];
        var p0 = extents[3];
        var p1 = extents[4];
        var p2 = extents[5];
        var numPlanes = planes.length;
        var p = [];
        var np = 0;
        var n = 0;
        do
        {
            var plane = planes[n];
            var d0 = plane[0];
            var d1 = plane[1];
            var d2 = plane[2];
            if ((d0 * (d0 > 0 ? n0 : p0) + d1 * (d1 > 0 ? n1 : p1) + d2 * (d2 > 0 ? n2 : p2)) < plane[3])
            {
                p[np] = plane;
                np += 1;
            }
            n += 1;
        }
        while (n < numPlanes);
        return p;
    }
};

if (typeof Float32Array !== "undefined")
{
    var testVector = new Float32Array([1, 2, 3]);

    // Clamp FLOAT_MAX
    testVector[0] = VMath.FLOAT_MAX;

    VMath.FLOAT_MAX = testVector[0];
    VMathArrayConstructor = Float32Array;
}

// If the plugin has a 'getNativeMathDevice' method then VMath should
// replace the standard MathDevice.

if (TurbulenzEngine.hasOwnProperty('VMath'))
{
    TurbulenzEngine.VMath = VMath;
}

// Copyright (c) 2010-2012 Turbulenz Limited

/*global window: false*/
/*global Observer: false*/
/*global TurbulenzEngine: false*/

var Utilities = {};

//
// assert
//
Utilities.skipAsserts = false;
Utilities.assert = function assertFn(test, message)
{
    if (!test)
    {
        if (!this.skipAsserts)
        {
            this.breakInDebugger.doesNotExist(); //Use a function that does not exist. This is caught in the debuggers.
        }
    }
};

//
// beget
//
Utilities.beget = function begetFn(o)
{
    var F = function () { };
    F.prototype = o;
    return new F();
};

//
// log
//
Utilities.log = function logFn()
{
    var console = window.console;
    if (console)
    {
        // "console.log.apply" will crash when using the plugin on Chrome...
        switch (arguments.length)
        {
        case 1:
            console.log(arguments[0]);
            break;
        case 2:
            console.log(arguments[0], arguments[1]);
            break;
        case 3:
            console.log(arguments[0], arguments[1], arguments[2]);
            break;
        case 4:
            console.log(arguments[0], arguments[1], arguments[2], arguments[3]);
            break;
        default:
            // Note: this will fail if using printf-style string formatting
            var args = [].splice.call(arguments, 0);
            console.log(args.join(' '));
            break;
        }
    }
};

Utilities.nearestLowerPow2 = function UtilitiesNearestLowerPow2(num)
{
    /*jshint bitwise: false*/
    num = num | (num >>> 1);
    num = num | (num >>> 2);
    num = num | (num >>> 4);
    num = num | (num >>> 8);
    num = num | (num >>> 16);
    return (num - (num >>> 1));
};

Utilities.nearestUpperPow2 = function UtilitiesNearestUpperPow2(num)
{
    /*jshint bitwise: false*/
    num = num - 1;
    num = num | (num >>> 1);
    num = num | (num >>> 2);
    num = num | (num >>> 4);
    num = num | (num >>> 8);
    num = num | (num >>> 16);
    return (num + 1);
};

var MathDeviceConvert =
{
    v2ToArray : function v2ToJavaScriptArrayFn(v2)
    {
        return [v2[0], v2[1]];
    },

    arrayToV2 : function arrayToV2Fn(mathDevice, v2Array, v2Dest)
    {
        return mathDevice.v2Build(v2Array[0], v2Array[1], v2Dest);
    },

    v3ToArray : function v3ToJavaScriptArrayFn(v3)
    {
        return [v3[0], v3[1], v3[2]];
    },

    arrayToV3 : function arrayToV3Fn(mathDevice, v3Array, v3Dest)
    {
        return mathDevice.v3Build(v3Array[0], v3Array[1], v3Array[2], v3Dest);
    },

    v4ToArray : function v4ToJavaScriptArrayFn(v4)
    {
        return [v4[0], v4[1], v4[2], v4[3]];
    },

    arrayToV4 : function arrayToV4Fn(mathDevice, v4Array, v4Dest)
    {
        return mathDevice.v4Build(v4Array[0], v4Array[1], v4Array[2], v4Array[3], v4Dest);
    },

    quatToArray : function quatToJavaScriptArrayFn(quat)
    {
        return [quat[0], quat[1], quat[2], quat[3]];
    },

    arrayToQuat : function arrayToQuatFn(mathDevice, quatArray, quatDest)
    {
        return mathDevice.quatBuild(quatArray[0], quatArray[1], quatArray[2], quatArray[3], quatDest);
    },

    aabbToArray : function aabbToJavaScriptArrayFn(aabb)
    {
        return [aabb[0], aabb[1], aabb[2],
                aabb[3], aabb[4], aabb[5]];
    },

    arrayToAABB : function arrayToQuatFn(mathDevice, aabbArray, aabbDest)
    {
        return mathDevice.aabbBuild(aabbArray[0], aabbArray[1], aabbArray[2],
                                    aabbArray[3], aabbArray[4], aabbArray[5], aabbDest);
    },

    quatPosToArray : function quatPosToJavaScriptArrayFn(quatPos)
    {
        return [quatPos[0], quatPos[1], quatPos[2], quatPos[3],
                quatPos[4], quatPos[5], quatPos[6]];
    },

    arrayToQuatPos : function arrayToQuatPosFn(mathDevice, quatPosArray, quatPosDest)
    {
        return mathDevice.quatPosBuild(quatPosArray[0], quatPosArray[1], quatPosArray[2], quatPosArray[3],
                                       quatPosArray[4], quatPosArray[5], quatPosArray[6], quatPosDest);
    },

    m33ToArray : function m33ToJavaScriptArrayFn(m33)
    {
        return [m33[0], m33[1], m33[2],
                m33[3], m33[4], m33[5],
                m33[6], m33[7], m33[8]];
    },

    arrayToM33 : function arrayToM33Fn(mathDevice, m33Array, m33Dest)
    {
        return mathDevice.m33Build(m33Array[0], m33Array[1], m33Array[2],
                                   m33Array[3], m33Array[4], m33Array[5],
                                   m33Array[6], m33Array[7], m33Array[8], m33Dest);
    },

    /*jshint white: false*/
    m43ToArray : function m43ToJavaScriptArrayFn(m43)
    {
        return [m43[0], m43[ 1], m43[ 2],
                m43[3], m43[ 4], m43[ 5],
                m43[6], m43[ 7], m43[ 8],
                m43[9], m43[10], m43[11]];
    },

    arrayToM43 : function arrayToM43Fn(mathDevice, m43Array, m43Dest)
    {
        return mathDevice.m43Build(m43Array[0], m43Array[ 1], m43Array[ 2],
                                   m43Array[3], m43Array[ 4], m43Array[ 5],
                                   m43Array[6], m43Array[ 7], m43Array[ 8],
                                   m43Array[9], m43Array[10], m43Array[11], m43Dest);
    },

    m34ToArray : function m34ToJavaScriptArrayFn(m34)
    {
        return [m34[0], m34[1], m34[ 2], m34[ 3],
                m34[4], m34[5], m34[ 6], m34[ 7],
                m34[8], m34[9], m34[10], m34[11]];
    },

    m44ToArray : function m44ToJavaScriptArrayFn(m44)
    {
        return [m44[ 0], m44[ 1], m44[ 2], m44[ 3],
                m44[ 4], m44[ 5], m44[ 6], m44[ 7],
                m44[ 8], m44[ 9], m44[10], m44[11],
                m44[12], m44[13], m44[14], m44[15]];
    },

    arrayToM44 : function arrayToM44Fn(mathDevice, m44Array, m44Dest)
    {
        return mathDevice.m44Build(m44Array[ 0], m44Array[ 1], m44Array[ 2], m44Array[ 3],
                                   m44Array[ 4], m44Array[ 5], m44Array[ 6], m44Array[ 7],
                                   m44Array[ 8], m44Array[ 9], m44Array[10], m44Array[11],
                                   m44Array[12], m44Array[13], m44Array[14], m44Array[15], m44Dest);
    }
    /*jshint white: true*/
};

//
// ajax
//
Utilities.ajax = function utilitiesAjaxFn(params)
{
    // parameters
    var requestText = "";
    var method = params.method;
    var data = params.data || {};
    var encrypted = params.encrypt;
    var signature = null;
    var url = params.url;
    var requestHandler = params.requestHandler;
    var callbackFn = params.callback;

    if (encrypted)
    {
        data.requestUrl = url;

        var str = JSON.stringify(data);

        if (method === "POST")
        {
            str = TurbulenzEngine.encrypt(str);
        }

        requestText += "data=" + encodeURIComponent(str) + "&";

        requestText += "gameSessionId=" + encodeURIComponent(data.gameSessionId);

        signature = TurbulenzEngine.generateSignature(str);
    }
    else if (data)
    {
        var key;
        for (key in data)
        {
            if (data.hasOwnProperty(key))
            {
                if (requestText.length !== 0)
                {
                    requestText += "&";
                }
                if (method === "POST")
                {
                    requestText += key + "=" + data[key];
                }
                else
                {
                    requestText += encodeURIComponent(key) + "=" + encodeURIComponent(data[key]);
                }
            }
        }
    }

    var httpResponseCallback = function httpResponseCallbackFn(xhrResponseText, xhrStatus)
    {
        var sig = this.xhr.getResponseHeader("X-TZ-Signature");

        // break circular reference
        this.xhr.onreadystatechange = null;
        this.xhr = null;

        var response;

        response = JSON.parse(xhrResponseText);
        if (encrypted)
        {
            var validSignature = TurbulenzEngine.verifySignature(xhrResponseText, sig);
            xhrResponseText = null;

            TurbulenzEngine.setTimeout(function () {
                var receivedUrl = response.requestUrl;

                if (validSignature)
                {
                    if (!TurbulenzEngine.encryptionEnabled || receivedUrl === url)
                    {
                        callbackFn(response, xhrStatus);
                        callbackFn = null;
                        return;
                    }
                }

                // If it was a server-side verification fail then pass through the actual message
                if (xhrStatus === 400)
                {
                    callbackFn(response, xhrStatus, "Verification Failed");
                }
                else
                {
                    // Else drop reply
                    callbackFn({msg: "Verification failed", ok: false}, 400, "Verification Failed");
                }
                callbackFn = null;
            }, 0);
        }
        else
        {
            xhrResponseText = null;

            TurbulenzEngine.setTimeout(function () {
                callbackFn(response, xhrStatus);
                callbackFn = null;
            }, 0);
        }
    };

    var httpRequest = function httpRequestFn(url, onload, callContext)
    {
        var xhr;
        if (window.XMLHttpRequest)
        {
            xhr = new window.XMLHttpRequest();
        }
        else if (window.ActiveXObject)
        {
            xhr = new window.ActiveXObject("Microsoft.XMLHTTP");
        }
        else
        {
            if (params.error)
            {
                params.error("No XMLHTTPRequest object could be created");
            }
            return;
        }
        callContext.xhr = xhr;

        var httpCallback = function httpCallbackFn()
        {
            if (xhr.readyState === 4 && TurbulenzEngine && !TurbulenzEngine.isUnloading()) /* 4 == complete */
            {
                var xhrResponseText = xhr.responseText;
                var xhrStatus = xhr.status;
                // Checking xhrStatusText when xhrStatus is 0 causes a silent error!
                var xhrStatusText = (xhrStatus !== 0 && xhr.statusText) || "No connection or cross domain request";

                // Sometimes the browser sets status to 200 OK when the connection is closed
                // before the message is sent (weird!).
                // In order to address this we fail any completely empty responses.
                // Hopefully, nobody will get a valid response with no headers and no body!
                if (xhr.getAllResponseHeaders() === "" && xhrResponseText === "" && xhrStatus === 200 && xhrStatusText === 'OK')
                {
                    onload('', 0);
                    return;
                }

                onload.call(callContext, xhrResponseText, xhrStatus);
            }
        };

        // Send request
        xhr.open(method, ((requestText && (method !== "POST")) ? url + "?" + requestText : url), true);
        if (callbackFn)
        {
            xhr.onreadystatechange = httpCallback;
        }

        if (signature)
        {
            xhr.setRequestHeader("X-TZ-Signature", signature);
        }

        if (method === "POST")
        {
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
            xhr.send(requestText);
        }
        else // method === 'GET'
        {
            xhr.send();
        }
    };

    if (requestHandler)
    {
        requestHandler.request({
            src: url,
            requestFn: httpRequest,
            customErrorHandler: params.customErrorHandler,
            onload: httpResponseCallback
        });
    }
    else
    {
        var callContext = {
            src: url
        };
        httpRequest(url, httpResponseCallback, callContext);
    }
};


//
// ajaxStatusCodes
//

// http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1
Utilities.ajaxStatusCodes = {
    0: "No Connection, Timeout Or Cross Domain Request",
    100: "Continue",
    101: "Switching Protocols",
    200: "OK",
    201: "Created",
    202: "Accepted",
    203: "Non-Authoritative Information",
    204: "No Content",
    205: "Reset Content",
    206: "Partial Content",
    300: "Multiple Choices",
    301: "Moved Permanently",
    302: "Found",
    303: "See Other",
    304: "Not Modified",
    305: "Use Proxy",
    307: "Temporary Redirect",
    400: "Bad Request",
    401: "Unauthorized",
    402: "Payment Required",
    403: "Forbidden",
    404: "Not Found",
    405: "Method Not Allowed",
    406: "Not Acceptable",
    407: "Proxy Authentication Required",
    408: "Request Time-out",
    409: "Conflict",
    410: "Gone",
    411: "Length Required",
    412: "Precondition Failed",
    413: "Request Entity Too Large",
    414: "Request-URI Too Large",
    415: "Unsupported Media Type",
    416: "Requested range not satisfiable",
    417: "Expectation Failed",
    429: "Too Many Requests",
    480: "Temporarily Unavailable",
    500: "Internal Server Error",
    501: "Not Implemented",
    502: "Bad Gateway",
    503: "Service Unavailable",
    504: "Gateway Time-out",
    505: "HTTP Version not supported"
};

//
//Reference
//

// Proxy reference class allowing weak reference to the object
function Reference() {}

Reference.prototype =
{
    version: 1,

    //
    // add
    //
    add: function referenceAddFn()
    {
        this.referenceCount += 1;
    },

    //
    // remove
    //
    remove: function referenceRemovefn()
    {
        this.referenceCount -= 1;
        if (this.referenceCount === 0)
        {
            if (this.destroyedObserver)
            {
                this.destroyedObserver.notify(this.object);
            }
            this.object.destroy();
            this.object = null;
        }
    },

    //
    //subscribeDestroyed
    //
    subscribeDestroyed: function referenceSubscribeDestroyedFn(observerFunction)
    {
        if (!this.destroyedObserver)
        {
            this.destroyedObserver = Observer.create();
        }
        this.destroyedObserver.subscribe(observerFunction);
    },

    //
    //unsubscribeDestroyed
    //
    unsubscribeDestroyed: function referenceDestroyedFn(observerFunction)
    {
        this.destroyedObserver.unsubscribe(observerFunction);
    }
};

//
// create
//
Reference.create = function referenceCreate(object)
{
    var result = new Reference();
    result.object = object;
    result.referenceCount = 0;
    return result;
};


//
// Profile
//
var Profile =
{
    profiles: [],

    sortMode: {alphabetical: 0, duration: 1, max: 2, min: 3, calls: 4},

    //
    // start
    //
    start: function profileStartFn(name)
    {
        var data = this.profiles[name];
        if (!data)
        {
            data = {name: name, calls: 0, duration: 0.0, min: Number.MAX_VALUE, max: 0.0, sumOfSquares: 0.0};
            this.profiles[name] = data;
        }
        data.start = TurbulenzEngine.time;
    },

    //
    // stop
    //
    stop: function profileStopFn(name)
    {
        var end = TurbulenzEngine.time;
        var data = this.profiles[name];
        if (data)
        {
            var duration = end - data.start;
            data.duration += duration;
            data.calls += 1;
            var delta = duration - data.duration / data.calls; // This is an approximation, it should use the mean of all samples (or N random ones) but thats requries samples to be stored
            data.sumOfSquares += delta * delta;

            if (duration > data.max)
            {
                data.max = duration;
            }

            if (duration < data.min)
            {
                data.min = duration;
            }
        }
    },

    //
    // reset
    //
    reset: function profileResetFn()
    {
        this.profiles = [];
    },

    //
    // getReport
    //
    getReport: function profileGetReportFn(sortMode, format)
    {
        var dataArray = [];
        var data;
        var maxDuration = 0.0;
        var name;
        for (name in this.profiles)
        {
            if (this.profiles.hasOwnProperty(name))
            {
                data = this.profiles[name];
                if (maxDuration < data.duration)
                {
                    maxDuration = data.duration;
                }
                dataArray.push(data);
            }
        }

        var compareFunction;

        if (sortMode === Profile.sortMode.alphabetical)
        {
            compareFunction = function compareName(left, right)
                            {
                                return (left.name < right.name) ? -1 : (left.name > right.name) ? 1 : 0;
                            };
        }
        else if (sortMode === Profile.sortMode.max)
        {
            compareFunction = function compareMax(left, right)
                            {
                                return right.max - left.max;
                            };
        }
        else if (sortMode === Profile.sortMode.min)
        {
            compareFunction = function compareMin(left, right)
                            {
                                return right.min - left.min;
                            };
        }
        else if (sortMode === Profile.sortMode.calls)
        {
            compareFunction = function compareCalls(left, right)
                            {
                                return right.calls - left.calls;
                            };
        }
        else // Profile.sortMode.duration or undefined
        {
            compareFunction = function compareDuration(left, right)
                            {
                                return right.duration - left.duration;
                            };
        }

        dataArray.sort(compareFunction);

        var line;
        var text = "";
        var precision = format ? format.precision : 8;
        var percentagePrecision = format ? format.percentagePrecision : 1;
        var seperator = format ? format.seperator : " ";
        var length = dataArray.length;
        var index;
        for (index = 0; index < length; index += 1)
        {
            data = dataArray[index];
            line = data.name;
            line += seperator + data.calls;
            line += seperator + data.duration.toFixed(precision);
            line += seperator + data.max.toFixed(precision);
            line += seperator + data.min.toFixed(precision);
            line += seperator + (data.duration / data.calls).toFixed(precision); // average
            line += seperator + Math.sqrt(data.sumOfSquares / data.calls).toFixed(precision); // approximate standard deviation
            line += seperator + (100 * data.duration / maxDuration).toFixed(percentagePrecision) + "%\n";
            text += line;
        }
        return text;
    }
};

//
// Utilities to use with TurbulenzEngine.stopProfiling() object.
//
var JSProfiling = {};

//
// createArray
//      Creates an array of nodes by merging all duplicate function references in the call profile tree together.
JSProfiling.createArray = function JSProfilingCreateArrayFn(rootNode)
{
    var map = {};
    var array = [];

    if (rootNode.head)
    {
        rootNode = rootNode.head; // Chrome native profiler.
    }

    var processNode = function processNodeFn(node)
    {
        var urlObject = map[node.url];
        if (!urlObject)
        {
            urlObject = {};
            map[node.url] = urlObject;
        }

        var functionName = node.functionName === "" ? "(anonymous)" : node.functionName;

        var functionObject = urlObject[functionName];
        if (!functionObject)
        {
            functionObject = {};
            urlObject[functionName] = functionObject;
        }

        var existingNode = functionObject[node.lineNumber];
        if (!existingNode)
        {
            var newNode = { functionName : functionName,
                            numberOfCalls : node.numberOfCalls,
                            totalTime : node.totalTime,
                            selfTime : node.selfTime,
                            url : node.url,
                            lineNumber : node.lineNumber
                           };

            array[array.length] = newNode;
            functionObject[node.lineNumber] = newNode;
        }
        else
        {
            existingNode.totalTime += node.totalTime;
            existingNode.selfTime += node.selfTime;
            existingNode.numberOfCalls += node.numberOfCalls;
        }

        var children = node.children;
        if (children)
        {
            var numberOfChildren = children.length;
            var childIndex;
            for (childIndex = 0; childIndex < numberOfChildren; childIndex += 1)
            {
                processNode(children[childIndex]);
            }
        }
    };

    processNode(rootNode);

    return array;
};

//
// sort
//
JSProfiling.sort = function JSProfilingSortFn(array, propertyName, descending)
{
    if (!propertyName)
    {
        propertyName = "totalTime";
    }

    var sorterAscending = function (left, right)
    {
        return left[propertyName] - right[propertyName];
    };

    var sorterDescending = function (left, right)
    {
        return right[propertyName] - left[propertyName];
    };

    if (descending === false)
    {
        array.sort(sorterAscending);
    }
    else
    {
        array.sort(sorterDescending);
    }
};

// Copyright (c) 2009-2012 Turbulenz Limited
/*global Float32Array: false*/

//
// AABBTreeNode
//
function AABBTreeNode() {}
AABBTreeNode.prototype =
{
    version : 1,

    isLeaf : function aabbtreeNodeIsLeafFn()
    {
        return !!this.externalNode;
    },

    reset : function aabbtreeNodeResetFn(minX, minY, minZ, maxX, maxY, maxZ,
                                         escapeNodeOffset,
                                         externalNode)
    {
        this.escapeNodeOffset = escapeNodeOffset;
        this.externalNode = externalNode;
        var oldExtents = this.extents;
        oldExtents[0] = minX;
        oldExtents[1] = minY;
        oldExtents[2] = minZ;
        oldExtents[3] = maxX;
        oldExtents[4] = maxY;
        oldExtents[5] = maxZ;
    },

    clear : function aabbtreeNodeClearFn()
    {
        this.escapeNodeOffset = 1;
        this.externalNode = undefined;
        var oldExtents = this.extents;
        var maxNumber = Number.MAX_VALUE;
        oldExtents[0] = maxNumber;
        oldExtents[1] = maxNumber;
        oldExtents[2] = maxNumber;
        oldExtents[3] = -maxNumber;
        oldExtents[4] = -maxNumber;
        oldExtents[5] = -maxNumber;
    }
};

// Constructor function
AABBTreeNode.create = function aabbtreeNodeCreateFn(extents, escapeNodeOffset, externalNode)
{
    var n = new AABBTreeNode();
    n.escapeNodeOffset = escapeNodeOffset;
    n.externalNode = externalNode;
    n.extents = extents;
    return n;
};


//
// AABBTree
//
function AABBTree() {}
AABBTree.prototype =
{
    version : 1,
    numNodesLeaf : 4,

    add : function addFn(externalNode, extents)
    {
        var endNode = this.endNode;
        externalNode.aabbTreeIndex = endNode;
        var copyExtents = new this.arrayConstructor(6);
        copyExtents[0] = extents[0];
        copyExtents[1] = extents[1];
        copyExtents[2] = extents[2];
        copyExtents[3] = extents[3];
        copyExtents[4] = extents[4];
        copyExtents[5] = extents[5];
        this.nodes[endNode] = AABBTreeNode.create(copyExtents, 1, externalNode);
        this.endNode = (endNode + 1);
        this.needsRebuild = true;
        this.numAdds += 1;
        this.numExternalNodes += 1;
    },

    remove : function removeFn(externalNode)
    {
        var index = externalNode.aabbTreeIndex;
        if (index !== undefined)
        {
            if (this.numExternalNodes > 1)
            {
                var nodes = this.nodes;

                nodes[index].clear();

                var endNode = this.endNode;
                if ((index + 1) >= endNode)
                {
                    while (!nodes[endNode - 1].externalNode) // No leaf
                    {
                        endNode -= 1;
                    }
                    this.endNode = endNode;
                }
                else
                {
                    this.needsRebuild = true;
                }
                this.numExternalNodes -= 1;
            }
            else
            {
                this.clear();
            }

            delete externalNode.aabbTreeIndex;
        }
    },

    findParent : function findParentFn(nodeIndex)
    {
        var nodes = this.nodes;
        var parentIndex = nodeIndex;
        var nodeDist = 0;
        var parent;
        do
        {
            parentIndex -= 1;
            nodeDist += 1;
            parent = nodes[parentIndex];
        }
        while (parent.escapeNodeOffset <= nodeDist);
        return parent;
    },

    update : function aabbTreeUpdateFn(externalNode, extents)
    {
        var index = externalNode.aabbTreeIndex;
        if (index !== undefined)
        {
            var min0 = extents[0];
            var min1 = extents[1];
            var min2 = extents[2];
            var max0 = extents[3];
            var max1 = extents[4];
            var max2 = extents[5];

            var needsRebuild = this.needsRebuild;
            var needsRebound = this.needsRebound;
            var nodes = this.nodes;
            var node = nodes[index];
            var nodeExtents = node.extents;

            var doUpdate = (needsRebuild ||
                            needsRebound ||
                            nodeExtents[0] > min0 ||
                            nodeExtents[1] > min1 ||
                            nodeExtents[2] > min2 ||
                            nodeExtents[3] < max0 ||
                            nodeExtents[4] < max1 ||
                            nodeExtents[5] < max2);

            nodeExtents[0] = min0;
            nodeExtents[1] = min1;
            nodeExtents[2] = min2;
            nodeExtents[3] = max0;
            nodeExtents[4] = max1;
            nodeExtents[5] = max2;

            if (doUpdate)
            {
                if (!needsRebuild && 1 < nodes.length)
                {
                    this.numUpdates += 1;
                    if (this.startUpdate > index)
                    {
                        this.startUpdate = index;
                    }
                    if (this.endUpdate < index)
                    {
                        this.endUpdate = index;
                    }
                    if (!needsRebound)
                    {
                        // force a rebound when things change too much
                        if ((2 * this.numUpdates) > this.numExternalNodes)
                        {
                            this.needsRebound = true;
                        }
                        else
                        {
                            var parent = this.findParent(index);
                            var parentExtents = parent.extents;
                            if (parentExtents[0] > min0 ||
                                parentExtents[1] > min1 ||
                                parentExtents[2] > min2 ||
                                parentExtents[3] < max0 ||
                                parentExtents[4] < max1 ||
                                parentExtents[5] < max2)
                            {
                                this.needsRebound = true;
                            }
                        }
                    }
                    else
                    {
                        // force a rebuild when things change too much
                        if (this.numUpdates > (3 * this.numExternalNodes))
                        {
                            this.needsRebuild = true;
                            this.numAdds = this.numUpdates;
                        }
                    }
                }
            }
        }
        else
        {
            this.add(externalNode, extents);
        }
    },

    needsFinalize : function needsFinalizeFn()
    {
        return (this.needsRebuild || this.needsRebound);
    },

    finalize : function finalizeFn()
    {
        if (this.needsRebuild)
        {
            this.rebuild();
        }
        else if (this.needsRebound)
        {
            this.rebound();
        }
    },

    rebound : function reboundFn()
    {
        var nodes = this.nodes;
        if (nodes.length > 1)
        {
            var startUpdateNodeIndex = this.startUpdate;
            var endUpdateNodeIndex   = this.endUpdate;

            var nodesStack = [];
            var numNodesStack = 0;
            var topNodeIndex = 0;
            for (;;)
            {
                var topNode = nodes[topNodeIndex];
                var currentNodeIndex = topNodeIndex;
                var currentEscapeNodeIndex = (topNodeIndex + topNode.escapeNodeOffset);
                var nodeIndex = (topNodeIndex + 1); // First child
                var node;
                do
                {
                    node = nodes[nodeIndex];
                    var escapeNodeIndex = (nodeIndex + node.escapeNodeOffset);
                    if (nodeIndex < endUpdateNodeIndex)
                    {
                        if (!node.externalNode) // No leaf
                        {
                            if (escapeNodeIndex > startUpdateNodeIndex)
                            {
                                nodesStack[numNodesStack] = topNodeIndex;
                                numNodesStack += 1;
                                topNodeIndex = nodeIndex;
                            }
                        }
                    }
                    else
                    {
                        break;
                    }
                    nodeIndex = escapeNodeIndex;
                }
                while (nodeIndex < currentEscapeNodeIndex);

                if (topNodeIndex === currentNodeIndex)
                {
                    nodeIndex = (topNodeIndex + 1); // First child
                    node = nodes[nodeIndex];

                    var extents = node.extents;
                    var minX = extents[0];
                    var minY = extents[1];
                    var minZ = extents[2];
                    var maxX = extents[3];
                    var maxY = extents[4];
                    var maxZ = extents[5];

                    nodeIndex = (nodeIndex + node.escapeNodeOffset);
                    while (nodeIndex < currentEscapeNodeIndex)
                    {
                        node = nodes[nodeIndex];
                        extents = node.extents;
                        /*jshint white: false*/
                        if (minX > extents[0]) { minX = extents[0]; }
                        if (minY > extents[1]) { minY = extents[1]; }
                        if (minZ > extents[2]) { minZ = extents[2]; }
                        if (maxX < extents[3]) { maxX = extents[3]; }
                        if (maxY < extents[4]) { maxY = extents[4]; }
                        if (maxZ < extents[5]) { maxZ = extents[5]; }
                        /*jshint white: true*/
                        nodeIndex = (nodeIndex + node.escapeNodeOffset);
                    }

                    extents = topNode.extents;
                    extents[0] = minX;
                    extents[1] = minY;
                    extents[2] = minZ;
                    extents[3] = maxX;
                    extents[4] = maxY;
                    extents[5] = maxZ;

                    endUpdateNodeIndex = topNodeIndex;

                    if (0 < numNodesStack)
                    {
                        numNodesStack -= 1;
                        topNodeIndex = nodesStack[numNodesStack];
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }

        this.needsRebuild = false;
        this.needsRebound = false;
        this.numAdds = 0;
        //this.numUpdates = 0;
        this.startUpdate = Number.MAX_VALUE;
        this.endUpdate = -Number.MAX_VALUE;
    },

    rebuild : function rebuildFn()
    {
        if (this.numExternalNodes > 0)
        {
            var nodes = this.nodes;

            var buildNodes, numBuildNodes, endNodeIndex;

            if (this.numExternalNodes === nodes.length)
            {
                buildNodes = nodes;
                numBuildNodes = nodes.length;
                nodes = [];
                this.nodes = nodes;
            }
            else
            {
                buildNodes = [];
                buildNodes.length = this.numExternalNodes;
                numBuildNodes = 0;
                endNodeIndex = this.endNode;
                for (var n = 0; n < endNodeIndex; n += 1)
                {
                    var currentNode = nodes[n];
                    if (currentNode.externalNode) // Is leaf
                    {
                        nodes[n] = undefined;
                        buildNodes[numBuildNodes] = currentNode;
                        numBuildNodes += 1;
                    }
                }
                if (buildNodes.length > numBuildNodes)
                {
                    buildNodes.length = numBuildNodes;
                }
            }

            var rootNode;
            if (numBuildNodes > 1)
            {
                if (numBuildNodes > this.numNodesLeaf &&
                    this.numAdds > 0)
                {
                    if (this.highQuality)
                    {
                        this.sortNodesHighQuality(buildNodes);
                    }
                    else if (this.ignoreY)
                    {
                        this.sortNodesNoY(buildNodes);
                    }
                    else
                    {
                        this.sortNodes(buildNodes);
                    }
                }

                this.recursiveBuild(buildNodes, 0, numBuildNodes, 0);

                endNodeIndex = nodes[0].escapeNodeOffset;
                if (nodes.length > endNodeIndex)
                {
                    nodes.length = endNodeIndex;
                }
                this.endNode = endNodeIndex;

                // Check if we should take into account the Y coordinate
                rootNode = nodes[0];
                var extents = rootNode.extents;
                var deltaX = (extents[3] - extents[0]);
                var deltaY = (extents[4] - extents[1]);
                var deltaZ = (extents[5] - extents[2]);
                this.ignoreY = ((4 * deltaY) < (deltaX <= deltaZ ? deltaX : deltaZ));
            }
            else
            {
                rootNode = buildNodes[0];
                rootNode.externalNode.aabbTreeIndex = 0;
                nodes.length = 1;
                nodes[0] = rootNode;
                this.endNode = 1;
            }
            buildNodes = null;
        }

        this.needsRebuild = false;
        this.needsRebound = false;
        this.numAdds = 0;
        this.numUpdates = 0;
        this.startUpdate = Number.MAX_VALUE;
        this.endUpdate = -Number.MAX_VALUE;
    },

    sortNodes : function sortNodesFn(nodes)
    {
        var numNodesLeaf = this.numNodesLeaf;
        var numNodes = nodes.length;

        function getkeyXfn(node)
        {
            var extents = node.extents;
            return (extents[0] + extents[3]);
        }

        function getkeyYfn(node)
        {
            var extents = node.extents;
            return (extents[1] + extents[4]);
        }

        function getkeyZfn(node)
        {
            var extents = node.extents;
            return (extents[2] + extents[5]);
        }

        function getreversekeyXfn(node)
        {
            var extents = node.extents;
            return -(extents[0] + extents[3]);
        }

        function getreversekeyYfn(node)
        {
            var extents = node.extents;
            return -(extents[1] + extents[4]);
        }

        function getreversekeyZfn(node)
        {
            var extents = node.extents;
            return -(extents[2] + extents[5]);
        }

        var nthElement = this.nthElement;
        var reverse = false;
        var axis = 0;

        function sortNodesRecursive(nodes, startIndex, endIndex)
        {
            /*jshint bitwise: false*/
            var splitNodeIndex = ((startIndex + endIndex) >> 1);
            /*jshint bitwise: true*/

            if (axis === 0)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyXfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXfn);
                }
            }
            else if (axis === 2)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyZfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyZfn);
                }
            }
            else //if (axis === 1)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyYfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyYfn);
                }
            }

            if (axis === 0)
            {
                axis = 2;
            }
            else if (axis === 2)
            {
                axis = 1;
            }
            else //if (axis === 1)
            {
                axis = 0;
            }

            reverse = !reverse;

            if ((startIndex + numNodesLeaf) < splitNodeIndex)
            {
                sortNodesRecursive(nodes, startIndex, splitNodeIndex);
            }

            if ((splitNodeIndex + numNodesLeaf) < endIndex)
            {
                sortNodesRecursive(nodes, splitNodeIndex, endIndex);
            }
        }

        sortNodesRecursive(nodes, 0, numNodes);
    },

    sortNodesNoY : function sortNodesNoYFn(nodes)
    {
        var numNodesLeaf = this.numNodesLeaf;
        var numNodes = nodes.length;

        function getkeyXfn(node)
        {
            var extents = node.extents;
            return (extents[0] + extents[3]);
        }

        function getkeyZfn(node)
        {
            var extents = node.extents;
            return (extents[2] + extents[5]);
        }

        function getreversekeyXfn(node)
        {
            var extents = node.extents;
            return -(extents[0] + extents[3]);
        }

        function getreversekeyZfn(node)
        {
            var extents = node.extents;
            return -(extents[2] + extents[5]);
        }

        var nthElement = this.nthElement;
        var reverse = false;
        var axis = 0;

        function sortNodesNoYRecursive(nodes, startIndex, endIndex)
        {
            /*jshint bitwise: false*/
            var splitNodeIndex = ((startIndex + endIndex) >> 1);
            /*jshint bitwise: true*/

            if (axis === 0)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyXfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXfn);
                }
            }
            else //if (axis === 2)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyZfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyZfn);
                }
            }

            if (axis === 0)
            {
                axis = 2;
            }
            else //if (axis === 2)
            {
                axis = 0;
            }

            reverse = !reverse;

            if ((startIndex + numNodesLeaf) < splitNodeIndex)
            {
                sortNodesNoYRecursive(nodes, startIndex, splitNodeIndex);
            }

            if ((splitNodeIndex + numNodesLeaf) < endIndex)
            {
                sortNodesNoYRecursive(nodes, splitNodeIndex, endIndex);
            }
        }

        sortNodesNoYRecursive(nodes, 0, numNodes);
    },

    sortNodesHighQuality : function sortNodesHighQualityFn(nodes)
    {
        var numNodesLeaf = this.numNodesLeaf;
        var numNodes = nodes.length;

        function getkeyXfn(node)
        {
            var extents = node.extents;
            return (extents[0] + extents[3]);
        }

        function getkeyYfn(node)
        {
            var extents = node.extents;
            return (extents[1] + extents[4]);
        }

        function getkeyZfn(node)
        {
            var extents = node.extents;
            return (extents[2] + extents[5]);
        }

        function getkeyXZfn(node)
        {
            var extents = node.extents;
            return (extents[0] + extents[2] + extents[3] + extents[5]);
        }

        function getkeyZXfn(node)
        {
            var extents = node.extents;
            return (extents[0] - extents[2] + extents[3] - extents[5]);
        }

        function getreversekeyXfn(node)
        {
            var extents = node.extents;
            return -(extents[0] + extents[3]);
        }

        function getreversekeyYfn(node)
        {
            var extents = node.extents;
            return -(extents[1] + extents[4]);
        }

        function getreversekeyZfn(node)
        {
            var extents = node.extents;
            return -(extents[2] + extents[5]);
        }

        function getreversekeyXZfn(node)
        {
            var extents = node.extents;
            return -(extents[0] + extents[2] + extents[3] + extents[5]);
        }

        function getreversekeyZXfn(node)
        {
            var extents = node.extents;
            return -(extents[0] - extents[2] + extents[3] - extents[5]);
        }

        var nthElement = this.nthElement;
        var calculateSAH = this.calculateSAH;
        var reverse = false;

        function sortNodesHighQualityRecursive(nodes, startIndex, endIndex)
        {
            /*jshint bitwise: false*/
            var splitNodeIndex = ((startIndex + endIndex) >> 1);
            /*jshint bitwise: true*/

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXfn);
            var sahX = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyYfn);
            var sahY = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyZfn);
            var sahZ = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXZfn);
            var sahXZ = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyZXfn);
            var sahZX = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            if (sahX <= sahY &&
                sahX <= sahZ &&
                sahX <= sahXZ &&
                sahX <= sahZX)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyXfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXfn);
                }
            }
            else if (sahZ <= sahY &&
                     sahZ <= sahXZ &&
                     sahZ <= sahZX)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyZfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyZfn);
                }
            }
            else if (sahY <= sahXZ &&
                     sahY <= sahZX)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyYfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyYfn);
                }
            }
            else if (sahXZ <= sahZX)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyXZfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXZfn);
                }
            }
            else //if (sahZX <= sahXZ)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyZXfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyZXfn);
                }
            }

            reverse = !reverse;

            if ((startIndex + numNodesLeaf) < splitNodeIndex)
            {
                sortNodesHighQualityRecursive(nodes, startIndex, splitNodeIndex);
            }

            if ((splitNodeIndex + numNodesLeaf) < endIndex)
            {
                sortNodesHighQualityRecursive(nodes, splitNodeIndex, endIndex);
            }
        }

        sortNodesHighQualityRecursive(nodes, 0, numNodes);
    },

    calculateSAH : function calculateSAHFn(buildNodes, startIndex, endIndex)
    {
        var buildNode, extents, minX, minY, minZ, maxX, maxY, maxZ;

        buildNode = buildNodes[startIndex];
        extents = buildNode.extents;
        minX = extents[0];
        minY = extents[1];
        minZ = extents[2];
        maxX = extents[3];
        maxY = extents[4];
        maxZ = extents[5];

        for (var n = (startIndex + 1); n < endIndex; n += 1)
        {
            buildNode = buildNodes[n];
            extents = buildNode.extents;
            /*jshint white: false*/
            if (minX > extents[0]) { minX = extents[0]; }
            if (minY > extents[1]) { minY = extents[1]; }
            if (minZ > extents[2]) { minZ = extents[2]; }
            if (maxX < extents[3]) { maxX = extents[3]; }
            if (maxY < extents[4]) { maxY = extents[4]; }
            if (maxZ < extents[5]) { maxZ = extents[5]; }
            /*jshint white: true*/
        }

        return ((maxX - minX) + (maxY - minY) + (maxZ - minZ));
    },

    nthElement : function nthElementFn(nodes, first, nth, last, getkey)
    {
        function medianFn(a, b, c)
        {
            if (a < b)
            {
                if (b < c)
                {
                    return b;
                }
                else if (a < c)
                {
                    return c;
                }
                else
                {
                    return a;
                }
            }
            else if (a < c)
            {
                return a;
            }
            else if (b < c)
            {
                return c;
            }
            return b;
        }

        function insertionSortFn(nodes, first, last, getkey)
        {
            var sorted = (first + 1);
            while (sorted !== last)
            {
                var tempNode = nodes[sorted];
                var tempKey = getkey(tempNode);

                var next = sorted;
                var current = (sorted - 1);

                while (next !== first && tempKey < getkey(nodes[current]))
                {
                    nodes[next] = nodes[current];
                    next -= 1;
                    current -= 1;
                }

                if (next !== sorted)
                {
                    nodes[next] = tempNode;
                }

                sorted += 1;
            }
        }

        while ((last - first) > 8)
        {
            /*jshint bitwise: false*/
            var midValue = medianFn(getkey(nodes[first]),
                                    getkey(nodes[first + ((last - first) >> 1)]),
                                    getkey(nodes[last - 1]));
            /*jshint bitwise: true*/

            var firstPos = first;
            var lastPos  = last;
            var midPos;
            for (; ; firstPos += 1)
            {
                while (getkey(nodes[firstPos]) < midValue)
                {
                    firstPos += 1;
                }

                do
                {
                    lastPos -= 1;
                }
                while (midValue < getkey(nodes[lastPos]));

                if (firstPos >= lastPos)
                {
                    midPos = firstPos;
                    break;
                }
                else
                {
                    var temp = nodes[firstPos];
                    nodes[firstPos] = nodes[lastPos];
                    nodes[lastPos]  = temp;
                }
            }

            if (midPos <= nth)
            {
                first = midPos;
            }
            else
            {
                last = midPos;
            }
        }

        insertionSortFn(nodes, first, last, getkey);
    },

    recursiveBuild : function recursiveBuildFn(buildNodes, startIndex, endIndex, lastNodeIndex)
    {
        var nodes = this.nodes;
        var nodeIndex = lastNodeIndex;
        lastNodeIndex += 1;

        var minX, minY, minZ, maxX, maxY, maxZ, extents;
        var buildNode, lastNode;

        if ((startIndex + this.numNodesLeaf) >= endIndex)
        {
            buildNode = buildNodes[startIndex];
            extents = buildNode.extents;
            minX = extents[0];
            minY = extents[1];
            minZ = extents[2];
            maxX = extents[3];
            maxY = extents[4];
            maxZ = extents[5];

            buildNode.externalNode.aabbTreeIndex = lastNodeIndex;
            nodes[lastNodeIndex] = buildNode;

            for (var n = (startIndex + 1); n < endIndex; n += 1)
            {
                buildNode = buildNodes[n];
                extents = buildNode.extents;
                /*jshint white: false*/
                if (minX > extents[0]) { minX = extents[0]; }
                if (minY > extents[1]) { minY = extents[1]; }
                if (minZ > extents[2]) { minZ = extents[2]; }
                if (maxX < extents[3]) { maxX = extents[3]; }
                if (maxY < extents[4]) { maxY = extents[4]; }
                if (maxZ < extents[5]) { maxZ = extents[5]; }
                /*jshint white: true*/
                lastNodeIndex += 1;
                buildNode.externalNode.aabbTreeIndex = lastNodeIndex;
                nodes[lastNodeIndex] = buildNode;
            }

            lastNode = nodes[lastNodeIndex];
        }
        else
        {
            /*jshint bitwise: false*/
            var splitPosIndex = ((startIndex + endIndex) >> 1);
            /*jshint bitwise: true*/

            if ((startIndex + 1) >= splitPosIndex)
            {
                buildNode = buildNodes[startIndex];
                buildNode.externalNode.aabbTreeIndex = lastNodeIndex;
                nodes[lastNodeIndex] = buildNode;
            }
            else
            {
                this.recursiveBuild(buildNodes, startIndex, splitPosIndex, lastNodeIndex);
            }

            lastNode = nodes[lastNodeIndex];
            extents = lastNode.extents;
            minX = extents[0];
            minY = extents[1];
            minZ = extents[2];
            maxX = extents[3];
            maxY = extents[4];
            maxZ = extents[5];

            lastNodeIndex = (lastNodeIndex + lastNode.escapeNodeOffset);

            if ((splitPosIndex + 1) >= endIndex)
            {
                buildNode = buildNodes[splitPosIndex];
                buildNode.externalNode.aabbTreeIndex = lastNodeIndex;
                nodes[lastNodeIndex] = buildNode;
            }
            else
            {
                this.recursiveBuild(buildNodes, splitPosIndex, endIndex, lastNodeIndex);
            }

            lastNode = nodes[lastNodeIndex];
            extents = lastNode.extents;
            /*jshint white: false*/
            if (minX > extents[0]) { minX = extents[0]; }
            if (minY > extents[1]) { minY = extents[1]; }
            if (minZ > extents[2]) { minZ = extents[2]; }
            if (maxX < extents[3]) { maxX = extents[3]; }
            if (maxY < extents[4]) { maxY = extents[4]; }
            if (maxZ < extents[5]) { maxZ = extents[5]; }
            /*jshint white: true*/
        }

        var node = nodes[nodeIndex];
        if (node !== undefined)
        {
            node.reset(minX, minY, minZ, maxX, maxY, maxZ,
                       (lastNodeIndex + lastNode.escapeNodeOffset - nodeIndex));
        }
        else
        {
            var parentExtents = new this.arrayConstructor(6);
            parentExtents[0] = minX;
            parentExtents[1] = minY;
            parentExtents[2] = minZ;
            parentExtents[3] = maxX;
            parentExtents[4] = maxY;
            parentExtents[5] = maxZ;

            nodes[nodeIndex] = AABBTreeNode.create(parentExtents,
                                                   (lastNodeIndex + lastNode.escapeNodeOffset - nodeIndex));
        }
    },

    getVisibleNodes : function getVisibleNodesFn(planes, visibleNodes)
    {
        if (this.numExternalNodes > 0)
        {
            var nodes = this.nodes;
            var endNodeIndex = this.endNode;
            var numPlanes = planes.length;
            var numVisibleNodes = visibleNodes.length;
            var node, extents, endChildren;
            var n0, n1, n2, p0, p1, p2;
            var isInside, n, plane, d0, d1, d2;
            var nodeIndex = 0;

            for (;;)
            {
                node = nodes[nodeIndex];
                extents = node.extents;
                n0 = extents[0];
                n1 = extents[1];
                n2 = extents[2];
                p0 = extents[3];
                p1 = extents[4];
                p2 = extents[5];
                //isInsidePlanesAABB
                isInside = true;
                n = 0;
                do
                {
                    plane = planes[n];
                    d0 = plane[0];
                    d1 = plane[1];
                    d2 = plane[2];
                    if ((d0 * (d0 < 0 ? n0 : p0) + d1 * (d1 < 0 ? n1 : p1) + d2 * (d2 < 0 ? n2 : p2)) < plane[3])
                    {
                        isInside = false;
                        break;
                    }
                    n += 1;
                }
                while (n < numPlanes);
                if (isInside)
                {
                    if (node.externalNode) // Is leaf
                    {
                        visibleNodes[numVisibleNodes] = node.externalNode;
                        numVisibleNodes += 1;
                        nodeIndex += 1;
                        if (nodeIndex >= endNodeIndex)
                        {
                            break;
                        }
                    }
                    else
                    {
                        //isFullyInsidePlanesAABB
                        isInside = true;
                        n = 0;
                        do
                        {
                            plane = planes[n];
                            d0 = plane[0];
                            d1 = plane[1];
                            d2 = plane[2];
                            if ((d0 * (d0 > 0 ? n0 : p0) + d1 * (d1 > 0 ? n1 : p1) + d2 * (d2 > 0 ? n2 : p2)) < plane[3])
                            {
                                isInside = false;
                                break;
                            }
                            n += 1;
                        }
                        while (n < numPlanes);
                        if (isInside)
                        {
                            endChildren = (nodeIndex + node.escapeNodeOffset);
                            nodeIndex += 1;
                            do
                            {
                                node = nodes[nodeIndex];
                                if (node.externalNode) // Is leaf
                                {
                                    visibleNodes[numVisibleNodes] = node.externalNode;
                                    numVisibleNodes += 1;
                                }
                                nodeIndex += 1;
                            }
                            while (nodeIndex < endChildren);
                            if (nodeIndex >= endNodeIndex)
                            {
                                break;
                            }
                        }
                        else
                        {
                            nodeIndex += 1;
                        }
                    }
                }
                else
                {
                    nodeIndex += node.escapeNodeOffset;
                    if (nodeIndex >= endNodeIndex)
                    {
                        break;
                    }
                }
            }
        }
    },

    getOverlappingNodes : function getOverlappingNodesFn(queryExtents, overlappingNodes, startIndex)
    {
        if (this.numExternalNodes > 0)
        {
            var queryMinX = queryExtents[0];
            var queryMinY = queryExtents[1];
            var queryMinZ = queryExtents[2];
            var queryMaxX = queryExtents[3];
            var queryMaxY = queryExtents[4];
            var queryMaxZ = queryExtents[5];
            var nodes = this.nodes;
            var endNodeIndex = this.endNode;
            var node, extents, endChildren;
            var numOverlappingNodes = 0;
            var storageIndex = (startIndex === undefined) ? overlappingNodes.length : startIndex;
            var nodeIndex = 0;
            for (;;)
            {
                node = nodes[nodeIndex];
                extents = node.extents;
                var minX = extents[0];
                var minY = extents[1];
                var minZ = extents[2];
                var maxX = extents[3];
                var maxY = extents[4];
                var maxZ = extents[5];
                if (queryMinX <= maxX &&
                    queryMinY <= maxY &&
                    queryMinZ <= maxZ &&
                    queryMaxX >= minX &&
                    queryMaxY >= minY &&
                    queryMaxZ >= minZ)
                {
                    if (node.externalNode) // Is leaf
                    {
                        overlappingNodes[storageIndex] = node.externalNode;
                        storageIndex += 1;
                        numOverlappingNodes += 1;
                        nodeIndex += 1;
                        if (nodeIndex >= endNodeIndex)
                        {
                            break;
                        }
                    }
                    else
                    {
                        if (queryMaxX >= maxX &&
                            queryMaxY >= maxY &&
                            queryMaxZ >= maxZ &&
                            queryMinX <= minX &&
                            queryMinY <= minY &&
                            queryMinZ <= minZ)
                        {
                            endChildren = (nodeIndex + node.escapeNodeOffset);
                            nodeIndex += 1;
                            do
                            {
                                node = nodes[nodeIndex];
                                if (node.externalNode) // Is leaf
                                {
                                    overlappingNodes[storageIndex] = node.externalNode;
                                    storageIndex += 1;
                                    numOverlappingNodes += 1;
                                }
                                nodeIndex += 1;
                            }
                            while (nodeIndex < endChildren);
                            if (nodeIndex >= endNodeIndex)
                            {
                                break;
                            }
                        }
                        else
                        {
                            nodeIndex += 1;
                        }
                    }
                }
                else
                {
                    nodeIndex += node.escapeNodeOffset;
                    if (nodeIndex >= endNodeIndex)
                    {
                        break;
                    }
                }
            }
            return numOverlappingNodes;
        }
        else
        {
            return 0;
        }
    },

    getSphereOverlappingNodes : function getSphereOverlappingNodesFn(center, radius, overlappingNodes)
    {
        if (this.numExternalNodes > 0)
        {
            var radiusSquared = (radius * radius);
            var centerX = center[0];
            var centerY = center[1];
            var centerZ = center[2];
            var nodes = this.nodes;
            var endNodeIndex = this.endNode;
            var node, extents;
            var numOverlappingNodes = overlappingNodes.length;
            var nodeIndex = 0;
            for (;;)
            {
                node = nodes[nodeIndex];
                extents = node.extents;
                var minX = extents[0];
                var minY = extents[1];
                var minZ = extents[2];
                var maxX = extents[3];
                var maxY = extents[4];
                var maxZ = extents[5];
                var totalDistance = 0, sideDistance;
                if (centerX < minX)
                {
                    sideDistance = (minX - centerX);
                    totalDistance += (sideDistance * sideDistance);
                }
                else if (centerX > maxX)
                {
                    sideDistance = (centerX - maxX);
                    totalDistance += (sideDistance * sideDistance);
                }
                if (centerY < minY)
                {
                    sideDistance = (minY - centerY);
                    totalDistance += (sideDistance * sideDistance);
                }
                else if (centerY > maxY)
                {
                    sideDistance = (centerY - maxY);
                    totalDistance += (sideDistance * sideDistance);
                }
                if (centerZ < minZ)
                {
                    sideDistance = (minZ - centerZ);
                    totalDistance += (sideDistance * sideDistance);
                }
                else if (centerZ > maxZ)
                {
                    sideDistance = (centerZ - maxZ);
                    totalDistance += (sideDistance * sideDistance);
                }
                if (totalDistance <= radiusSquared)
                {
                    nodeIndex += 1;
                    if (node.externalNode) // Is leaf
                    {
                        overlappingNodes[numOverlappingNodes] = node.externalNode;
                        numOverlappingNodes += 1;
                        if (nodeIndex >= endNodeIndex)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    nodeIndex += node.escapeNodeOffset;
                    if (nodeIndex >= endNodeIndex)
                    {
                        break;
                    }
                }
            }
        }
    },

    getOverlappingPairs : function getOverlappingPairsFn(overlappingPairs, startIndex)
    {
        if (this.numExternalNodes > 0)
        {
            var nodes = this.nodes;
            var endNodeIndex = this.endNode;
            var currentNode, currentExternalNode, node, extents;
            var numInsertions = 0;
            var storageIndex = (startIndex === undefined) ? overlappingPairs.length : startIndex;
            var currentNodeIndex = 0, nodeIndex;
            for (;;)
            {
                currentNode = nodes[currentNodeIndex];
                while (!currentNode.externalNode) // No leaf
                {
                    currentNodeIndex += 1;
                    currentNode = nodes[currentNodeIndex];
                }

                currentNodeIndex += 1;
                if (currentNodeIndex < endNodeIndex)
                {
                    currentExternalNode = currentNode.externalNode;
                    extents = currentNode.extents;
                    var minX = extents[0];
                    var minY = extents[1];
                    var minZ = extents[2];
                    var maxX = extents[3];
                    var maxY = extents[4];
                    var maxZ = extents[5];

                    nodeIndex = currentNodeIndex;
                    for (;;)
                    {
                        node = nodes[nodeIndex];
                        extents = node.extents;
                        if (minX <= extents[3] &&
                            minY <= extents[4] &&
                            minZ <= extents[5] &&
                            maxX >= extents[0] &&
                            maxY >= extents[1] &&
                            maxZ >= extents[2])
                        {
                            nodeIndex += 1;
                            if (node.externalNode) // Is leaf
                            {
                                overlappingPairs[storageIndex] = currentExternalNode;
                                overlappingPairs[storageIndex + 1] = node.externalNode;
                                storageIndex += 2;
                                numInsertions += 2;
                                if (nodeIndex >= endNodeIndex)
                                {
                                    break;
                                }
                            }
                        }
                        else
                        {
                            nodeIndex += node.escapeNodeOffset;
                            if (nodeIndex >= endNodeIndex)
                            {
                                break;
                            }
                        }
                    }
                }
                else
                {
                    break;
                }
            }
            return numInsertions;
        }
        else
        {
            return 0;
        }
    },

    getRootNode : function getRootNodeFn()
    {
        return this.nodes[0];
    },

    getNodes : function getNodesFn()
    {
        return this.nodes;
    },

    getEndNodeIndex : function getEndNodeIndexFn()
    {
        return this.endNode;
    },

    clear : function clearFn()
    {
        this.nodes = [];
        this.endNode = 0;
        this.needsRebuild = false;
        this.needsRebound = false;
        this.numAdds = 0;
        this.numUpdates = 0;
        this.numExternalNodes = 0;
        this.startUpdate = Number.MAX_VALUE;
        this.endUpdate = -Number.MAX_VALUE;
    }
};

AABBTree.rayTest = function aabbtreeRayTestFn(trees, ray, callback)
{
    // convert ray to parametric form
    var origin = ray.origin;
    var direction = ray.direction;

    // values used throughout calculations.
    var o0 = origin[0];
    var o1 = origin[1];
    var o2 = origin[2];
    var d0 = direction[0];
    var d1 = direction[1];
    var d2 = direction[2];
    var id0 = 1 / d0;
    var id1 = 1 / d1;
    var id2 = 1 / d2;

    // evaluate distance factor to a node's extents from ray origin, along direction
    // use this to induce an ordering on which nodes to check.
    function distanceExtents(extents, upperBound)
    {
        var min0 = extents[0];
        var min1 = extents[1];
        var min2 = extents[2];
        var max0 = extents[3];
        var max1 = extents[4];
        var max2 = extents[5];

        // treat origin internal to extents as 0 distance.
        if (min0 <= o0 && o0 <= max0 &&
            min1 <= o1 && o1 <= max1 &&
            min2 <= o2 && o2 <= max2)
        {
            return 0.0;
        }

        var tmin, tmax;
        var tymin, tymax;
        var del;
        if (d0 >= 0)
        {
            // Deal with cases where d0 == 0
            del = (min0 - o0);
            tmin = ((del === 0) ? 0 : (del * id0));
            del = (max0 - o0);
            tmax = ((del === 0) ? 0 : (del * id0));
        }
        else
        {
            tmin = ((max0 - o0) * id0);
            tmax = ((min0 - o0) * id0);
        }

        if (d1 >= 0)
        {
            // Deal with cases where d1 == 0
            del = (min1 - o1);
            tymin = ((del === 0) ? 0 : (del * id1));
            del = (max1 - o1);
            tymax = ((del === 0) ? 0 : (del * id1));
        }
        else
        {
            tymin = ((max1 - o1) * id1);
            tymax = ((min1 - o1) * id1);
        }

        if ((tmin > tymax) || (tymin > tmax))
        {
            return undefined;
        }

        if (tymin > tmin)
        {
            tmin = tymin;
        }

        if (tymax < tmax)
        {
            tmax = tymax;
        }

        var tzmin, tzmax;
        if (d2 >= 0)
        {
            // Deal with cases where d2 == 0
            del = (min2 - o2);
            tzmin = ((del === 0) ? 0 : (del * id2));
            del = (max2 - o2);
            tzmax = ((del === 0) ? 0 : (del * id2));
        }
        else
        {
            tzmin = ((max2 - o2) * id2);
            tzmax = ((min2 - o2) * id2);
        }

        if ((tmin > tzmax) || (tzmin > tmax))
        {
            return undefined;
        }

        if (tzmin > tmin)
        {
            tmin = tzmin;
        }

        if (tzmax < tmax)
        {
            tmax = tzmax;
        }

        if (tmin < 0)
        {
            tmin = tmax;
        }

        return (0 <= tmin && tmin < upperBound) ? tmin : undefined;
    }

    // we traverse both trees at once
    // keeping a priority list of nodes to check next.

    // TODO: possibly implement priority list more effeciently?
    //       binary heap probably too much overhead in typical case.
    var priorityList = [];
    //current upperBound on distance to first intersection
    //and current closest object properties
    var minimumResult = null;

    //if node is a leaf, intersect ray with shape
    // otherwise insert node into priority list.
    function processNode(tree, nodeIndex, upperBound)
    {
        var nodes = tree.getNodes();
        var node = nodes[nodeIndex];
        var distance = distanceExtents(node.extents, upperBound);
        if (distance === undefined)
        {
            return upperBound;
        }

        if (node.externalNode)
        {
            var result = callback(tree, node.externalNode, ray, distance, upperBound);
            if (result)
            {
                minimumResult = result;
                upperBound = result.factor;
            }
        }
        else
        {
            // TODO: change to binary search?
            var length = priorityList.length;
            var i;
            for (i = 0; i < length; i += 1)
            {
                var curObj = priorityList[i];
                if (distance > curObj.distance)
                {
                    break;
                }
            }

            //insert node at index i
            priorityList.splice(i - 1, 0, {
                    tree: tree,
                    nodeIndex: nodeIndex,
                    distance: distance
                });
        }

        return upperBound;
    }

    var upperBound = ray.maxFactor;

    var tree;
    var i;
    for (i = 0; i < trees.length; i += 1)
    {
        tree = trees[i];
        if (tree.endNode !== 0)
        {
            upperBound = processNode(tree, 0, upperBound);
        }
    }

    while (priorityList.length !== 0)
    {
        var nodeObj = priorityList.pop();
        // A node inserted into priority list after this one may have
        // moved the upper bound.
        if (nodeObj.distance >= upperBound)
        {
            continue;
        }

        var nodeIndex = nodeObj.nodeIndex;
        tree = nodeObj.tree;
        var nodes = tree.getNodes();

        var node = nodes[nodeIndex];
        var maxIndex = nodeIndex + node.escapeNodeOffset;

        var childIndex = nodeIndex + 1;
        do
        {
            upperBound = processNode(tree, childIndex, upperBound);
            childIndex += nodes[childIndex].escapeNodeOffset;
        }
        while (childIndex < maxIndex);
    }

    return minimumResult;
};

// Constructor function
AABBTree.create = function aabbtreeCreateFn(highQuality)
{
    var t = new AABBTree();
    t.clear();
    if (highQuality)
    {
        t.highQuality = true;
    }
    return t;
};

// Detect correct typed arrays
(function () {
    AABBTree.prototype.arrayConstructor = Array;
    if (typeof Float32Array !== "undefined")
    {
        var testArray = new Float32Array(4);
        var textDescriptor = Object.prototype.toString.call(testArray);
        if (textDescriptor === '[object Float32Array]')
        {
            AABBTree.prototype.arrayConstructor = Float32Array;
        }
    }
}());

// Copyright (c) 2010-2011 Turbulenz Limited

//
// Observer
//
function Observer() {}

Observer.prototype = {
    subscribe: function observerSubscribeFn(subscriber)
    {
        //Check for duplicates
        var subscribers = this.subscribers;
        var length = subscribers.length;
        for (var index = 0; index < length; index += 1)
        {
            if (subscribers[index] === subscriber)
            {
                return;
            }
        }

        subscribers.push(subscriber);
    },

    unsubscribe: function observerUnsubscribeFn(subscriber)
    {
        var subscribers = this.subscribers;
        var length = subscribers.length;
        for (var index = 0; index < length; index += 1)
        {
            if (subscribers[index] === subscriber)
            {
                subscribers.splice(index, 1);
                break;
            }
        }
    },

    unsubscribeAll: function observerUnsubscribeAllFn(subscriber)
    {
        this.subscribers.length = 0;
    },

    // this function can take any number of arguments
    // they are passed on to the subscribers
    notify: function observerNotifyFn()
    {
        // Note that the callbacks might unsubscribe
        var subscribers = this.subscribers;
        var length = this.subscribers.length;
        var index = 0;

        while (index < length)
        {
            subscribers[index].apply(null, arguments);
            if (subscribers.length === length)
            {
                index += 1;
            }
            else
            {
                length = subscribers.length;
            }
        }
    }
};

Observer.create = function observerCreateFn()
{
    var observer = new Observer();
    observer.subscribers = [];
    return observer;
};

// Copyright (c) 2011-2012 Turbulenz Limited
/*global TurbulenzEngine*/
/*global Uint8Array*/
/*global Uint16Array*/
/*global window*/


//
// DDSLoader
//
function DDSLoader() {}
DDSLoader.prototype = {

    version : 1,

    // surface description flags
    DDSF_CAPS           : 0x00000001,
    DDSF_HEIGHT         : 0x00000002,
    DDSF_WIDTH          : 0x00000004,
    DDSF_PITCH          : 0x00000008,
    DDSF_PIXELFORMAT    : 0x00001000,
    DDSF_MIPMAPCOUNT    : 0x00020000,
    DDSF_LINEARSIZE     : 0x00080000,
    DDSF_DEPTH          : 0x00800000,

    // pixel format flags
    DDSF_ALPHAPIXELS    : 0x00000001,
    DDSF_FOURCC         : 0x00000004,
    DDSF_RGB            : 0x00000040,
    DDSF_RGBA           : 0x00000041,

    // dwCaps1 flags
    DDSF_COMPLEX         : 0x00000008,
    DDSF_TEXTURE         : 0x00001000,
    DDSF_MIPMAP          : 0x00400000,

    // dwCaps2 flags
    DDSF_CUBEMAP            : 0x00000200,
    DDSF_CUBEMAP_POSITIVEX  : 0x00000400,
    DDSF_CUBEMAP_NEGATIVEX  : 0x00000800,
    DDSF_CUBEMAP_POSITIVEY  : 0x00001000,
    DDSF_CUBEMAP_NEGATIVEY  : 0x00002000,
    DDSF_CUBEMAP_POSITIVEZ  : 0x00004000,
    DDSF_CUBEMAP_NEGATIVEZ  : 0x00008000,
    DDSF_CUBEMAP_ALL_FACES  : 0x0000FC00,
    DDSF_VOLUME             : 0x00200000,

    // compressed texture types
    FOURCC_UNKNOWN       : 0,

    FOURCC_R8G8B8        : 20,
    FOURCC_A8R8G8B8      : 21,
    FOURCC_X8R8G8B8      : 22,
    FOURCC_R5G6B5        : 23,
    FOURCC_X1R5G5B5      : 24,
    FOURCC_A1R5G5B5      : 25,
    FOURCC_A4R4G4B4      : 26,
    FOURCC_R3G3B2        : 27,
    FOURCC_A8            : 28,
    FOURCC_A8R3G3B2      : 29,
    FOURCC_X4R4G4B4      : 30,
    FOURCC_A2B10G10R10   : 31,
    FOURCC_A8B8G8R8      : 32,
    FOURCC_X8B8G8R8      : 33,
    FOURCC_G16R16        : 34,
    FOURCC_A2R10G10B10   : 35,
    FOURCC_A16B16G16R16  : 36,

    FOURCC_L8            : 50,
    FOURCC_A8L8          : 51,
    FOURCC_A4L4          : 52,
    FOURCC_DXT1          : 0x31545844, //(MAKEFOURCC('D','X','T','1'))
    FOURCC_DXT2          : 0x32545844, //(MAKEFOURCC('D','X','T','1'))
    FOURCC_DXT3          : 0x33545844, //(MAKEFOURCC('D','X','T','3'))
    FOURCC_DXT4          : 0x34545844, //(MAKEFOURCC('D','X','T','3'))
    FOURCC_DXT5          : 0x35545844, //(MAKEFOURCC('D','X','T','5'))

    FOURCC_D16_LOCKABLE  : 70,
    FOURCC_D32           : 71,
    FOURCC_D24X8         : 77,
    FOURCC_D16           : 80,

    FOURCC_D32F_LOCKABLE : 82,

    FOURCC_L16           : 81,

    // Floating point surface formats

    // s10e5 formats (16-bits per channel)
    FOURCC_R16F          : 111,
    FOURCC_G16R16F       : 112,
    FOURCC_A16B16G16R16F : 113,

    // IEEE s23e8 formats (32-bits per channel)
    FOURCC_R32F          : 114,
    FOURCC_G32R32F       : 115,
    FOURCC_A32B32G32R32F : 116,

    BGRPIXELFORMAT_B5G6R5 : 1,
    BGRPIXELFORMAT_B8G8R8A8 : 2,
    BGRPIXELFORMAT_B8G8R8 : 3,

    processBytes : function processBytesFn(bytes)
    {
        if (!this.isValidHeader(bytes))
        {
            return;
        }

        // Skip signature
        var offset = 4;

        var header = this.parseHeader(bytes, offset);
        offset += 31 * 4;

        this.width = header.dwWidth;
        this.height = header.dwHeight;

        /*jshint bitwise: false*/
        if ((header.dwCaps2 & this.DDSF_VOLUME) && (header.dwDepth > 0))
        {
            this.depth = header.dwDepth;
        }
        else
        {
            this.depth = 1;
        }

        if (header.dwFlags & this.DDSF_MIPMAPCOUNT)
        {
            this.numLevels = header.dwMipMapCount;
        }
        else
        {
            this.numLevels = 1;
        }

        if (header.dwCaps2 & this.DDSF_CUBEMAP)
        {
            var numFaces = 0;
            numFaces += ((header.dwCaps2 & this.DDSF_CUBEMAP_POSITIVEX) ? 1 : 0);
            numFaces += ((header.dwCaps2 & this.DDSF_CUBEMAP_NEGATIVEX) ? 1 : 0);
            numFaces += ((header.dwCaps2 & this.DDSF_CUBEMAP_POSITIVEY) ? 1 : 0);
            numFaces += ((header.dwCaps2 & this.DDSF_CUBEMAP_NEGATIVEY) ? 1 : 0);
            numFaces += ((header.dwCaps2 & this.DDSF_CUBEMAP_POSITIVEZ) ? 1 : 0);
            numFaces += ((header.dwCaps2 & this.DDSF_CUBEMAP_NEGATIVEZ) ? 1 : 0);

            if (numFaces !== 6 || this.width !== this.height)
            {
                return;
            }

            this.numFaces = numFaces;
        }
        else
        {
            this.numFaces = 1;
        }

        var compressed = false;
        var bpe = 0;

        // figure out what the image format is
        var gd = this.gd;
        if (header.ddspf.dwFlags & this.DDSF_FOURCC)
        {
            switch (header.ddspf.dwFourCC)
            {
            case this.FOURCC_DXT1:
                this.format = gd.PIXELFORMAT_DXT1;
                bpe = 8;
                compressed = true;
                break;

            case this.FOURCC_DXT2:
            case this.FOURCC_DXT3:
                this.format = gd.PIXELFORMAT_DXT3;
                bpe = 16;
                compressed = true;
                break;

            case this.FOURCC_DXT4:
            case this.FOURCC_DXT5:
            case this.FOURCC_RXGB:
                this.format = gd.PIXELFORMAT_DXT5;
                bpe = 16;
                compressed = true;
                break;

            case this.FOURCC_R8G8B8:
                this.bgrFormat = this.BGRPIXELFORMAT_B8G8R8;
                bpe = 3;
                break;

            case this.FOURCC_A8R8G8B8:
                this.bgrFormat = this.BGRPIXELFORMAT_B8G8R8A8;
                bpe = 4;
                break;

            case this.FOURCC_R5G6B5:
                this.bgrFormat = this.BGRPIXELFORMAT_B5G6R5;
                bpe = 2;
                break;

            case this.FOURCC_A8:
                this.format = gd.PIXELFORMAT_A8;
                bpe = 1;
                break;

            case this.FOURCC_A8B8G8R8:
                this.format = gd.PIXELFORMAT_R8G8B8A8;
                bpe = 4;
                break;

            case this.FOURCC_L8:
                this.format = gd.PIXELFORMAT_L8;
                bpe = 1;
                break;

            case this.FOURCC_A8L8:
                this.format = gd.PIXELFORMAT_L8A8;
                bpe = 2;
                break;

                //these are unsupported for now
            case this.FOURCC_UNKNOWN:
            case this.FOURCC_ATI1:
            case this.FOURCC_ATI2:
            case this.FOURCC_X8R8G8B8:
            case this.FOURCC_X8B8G8R8:
            case this.FOURCC_A2B10G10R10:
            case this.FOURCC_A2R10G10B10:
            case this.FOURCC_A16B16G16R16:
            case this.FOURCC_R16F:
            case this.FOURCC_A16B16G16R16F:
            case this.FOURCC_R32F:
            case this.FOURCC_A32B32G32R32F:
            case this.FOURCC_L16:
            case this.FOURCC_X1R5G5B5:
            case this.FOURCC_A1R5G5B5:
            case this.FOURCC_A4R4G4B4:
            case this.FOURCC_R3G3B2:
            case this.FOURCC_A8R3G3B2:
            case this.FOURCC_X4R4G4B4:
            case this.FOURCC_A4L4:
            case this.FOURCC_D16_LOCKABLE:
            case this.FOURCC_D32:
            case this.FOURCC_D24X8:
            case this.FOURCC_D16:
            case this.FOURCC_D32F_LOCKABLE:
            case this.FOURCC_G16R16:
            case this.FOURCC_G16R16F:
            case this.FOURCC_G32R32F:
                break;

            default:
                return;
            }
        }
        else if (header.ddspf.dwFlags === this.DDSF_RGBA && header.ddspf.dwRGBBitCount === 32)
        {
            if (header.ddspf.dwRBitMask === 0x000000FF &&
                header.ddspf.dwGBitMask === 0x0000FF00 &&
                header.ddspf.dwBBitMask === 0x00FF0000 &&
                header.ddspf.dwABitMask === 0xFF000000)
            {
                this.format = gd.PIXELFORMAT_R8G8B8A8;
            }
            else
            {
                this.bgrFormat = this.BGRPIXELFORMAT_B8G8R8A8;
            }
            bpe = 4;
        }
        else if (header.ddspf.dwFlags === this.DDSF_RGB && header.ddspf.dwRGBBitCount === 32)
        {
            if (header.ddspf.dwRBitMask === 0x000000FF &&
                header.ddspf.dwGBitMask === 0x0000FF00 &&
                header.ddspf.dwBBitMask === 0x00FF0000)
            {
                this.format = gd.PIXELFORMAT_R8G8B8A8;
            }
            else
            {
                this.bgrFormat = this.BGRPIXELFORMAT_B8G8R8A8;
            }
            bpe = 4;
        }
        else if (header.ddspf.dwFlags === this.DDSF_RGB && header.ddspf.dwRGBBitCount === 24)
        {
            if (header.ddspf.dwRBitMask === 0x000000FF &&
                header.ddspf.dwGBitMask === 0x0000FF00 &&
                header.ddspf.dwBBitMask === 0x00FF0000)
            {
                this.format = gd.PIXELFORMAT_R8G8B8;
            }
            else
            {
                this.bgrFormat = this.BGRPIXELFORMAT_B8G8R8;
            }
            bpe = 3;
        }
        else if (header.ddspf.dwFlags === this.DDSF_RGB && header.ddspf.dwRGBBitCount === 16)
        {
            if (header.ddspf.dwRBitMask === 0x0000F800 &&
                header.ddspf.dwGBitMask === 0x000007E0 &&
                header.ddspf.dwBBitMask === 0x0000001F)
            {
                this.format = gd.PIXELFORMAT_R5G6B5;
            }
            else
            {
                this.bgrFormat = this.BGRPIXELFORMAT_B5G6R5;
            }
            bpe = 2;
        }
        else if (header.ddspf.dwRGBBitCount === 8)
        {
            this.format = gd.PIXELFORMAT_L8;
            bpe = 1;
        }
        else
        {
            return;
        }

        var size = 0;
        for (var face = 0; face < this.numFaces; face += 1)
        {
            var w = this.width, h = this.height, d = this.depth;
            for (var level = 0; level < this.numLevels; level += 1)
            {
                var ew = (compressed ? Math.floor((w + 3) / 4) : w);
                var eh = (compressed ? Math.floor((h + 3) / 4) : h);
                size += (ew * eh * d * bpe);

                w = (w > 1 ? (w >> 1) : 1);
                h = (h > 1 ? (h >> 1) : 1);
                d = (d > 1 ? (d >> 1) : 1);
            }
        }
        /*jshint bitwise: true*/

        if (bytes.length < (offset + size))
        {
            return;
        }

        this.bytesPerPixel = bpe;

        var data = bytes.subarray(offset);
        bytes = null;

        var swapBytes = false;
        switch (this.bgrFormat)
        {
        case this.BGRPIXELFORMAT_B8G8R8:
            this.format = gd.PIXELFORMAT_R8G8B8;
            swapBytes = true;
            break;
        case this.BGRPIXELFORMAT_B8G8R8A8:
            this.format = gd.PIXELFORMAT_R8G8B8A8;
            swapBytes = true;
            break;
        case this.BGRPIXELFORMAT_B5G6R5:
            this.format = gd.PIXELFORMAT_R5G6B5;
            swapBytes = true;
            break;
        default:
            break;
        }

        if (swapBytes)
        {
            data = this.convertBGR2RGB(data);
        }

        if (this.format === gd.PIXELFORMAT_DXT1)
        {
            if (!gd.isSupported('TEXTURE_DXT1'))
            {
                data = this.convertDXT1ToRGBA(data);
            }
        }
        else if (this.format === gd.PIXELFORMAT_DXT3)
        {
            if (!gd.isSupported('TEXTURE_DXT3'))
            {
                data = this.convertDXT3ToRGBA(data);
            }
        }
        else if (this.format === gd.PIXELFORMAT_DXT5)
        {
            if (!gd.isSupported('TEXTURE_DXT5'))
            {
                data = this.convertDXT5ToRGBA(data);
            }
        }

        this.data = data;
    },

    parseHeader : function parseHeaderFn(bytes, offset)
    {
        function readUInt32()
        {
            var value = ((bytes[offset]) +
                         (bytes[offset + 1] * 256) +
                         (bytes[offset + 2] * 65536) +
                         (bytes[offset + 3] * 16777216));
            offset += 4;
            return value;
        }

        function parsePixelFormatHeader()
        {
            return {
                    dwSize : readUInt32(),
                    dwFlags : readUInt32(),
                    dwFourCC : readUInt32(),
                    dwRGBBitCount : readUInt32(),
                    dwRBitMask : readUInt32(),
                    dwGBitMask : readUInt32(),
                    dwBBitMask : readUInt32(),
                    dwABitMask : readUInt32()
                };
        }

        var header =
        {
            dwSize : readUInt32(),
            dwFlags : readUInt32(),
            dwHeight : readUInt32(),
            dwWidth : readUInt32(),
            dwPitchOrLinearSize : readUInt32(),
            dwDepth : readUInt32(),
            dwMipMapCount : readUInt32(),
            dwReserved1: [readUInt32(), readUInt32(), readUInt32(), readUInt32(), readUInt32(), readUInt32(),
                          readUInt32(), readUInt32(), readUInt32(), readUInt32(), readUInt32()],
            ddspf : parsePixelFormatHeader(),
            dwCaps1 : readUInt32(),
            dwCaps2 : readUInt32(),
            dwReserved2 : [readUInt32(), readUInt32(), readUInt32()]
        };

        return header;
    },

    isValidHeader : function isValidHeaderFn(bytes)
    {
        return (68 === bytes[0] &&
                68 === bytes[1] &&
                83 === bytes[2] &&
                32 === bytes[3]);
    },

    convertBGR2RGB : function convertBGR2RGBFn(data)
    {
        // Rearrange the colors from BGR to RGB
        var bytesPerPixel = this.bytesPerPixel;
        var width = this.width;
        var height = this.height;
        var numLevels = this.numLevels;
        var numFaces = this.numFaces;

        var numPixels = 0;
        for (var level = 0; level < numLevels; level += 1)
        {
            numPixels += (width * height);
            width = (width > 1 ? Math.floor(width / 2) : 1);
            height = (height > 1 ? Math.floor(height / 2) : 1);
        }

        var size = (numPixels * bytesPerPixel * numFaces);
        var offset = 0;
        if (bytesPerPixel === 3 || bytesPerPixel === 4)
        {
            do
            {
                var tmp = data[offset];
                data[offset] = data[offset + 2];
                data[offset + 2] = tmp;
                offset += bytesPerPixel;
            }
            while (offset < size);
        }
        else if (bytesPerPixel === 2)
        {
            var dst = new Uint16Array(numPixels * numFaces);
            var src = 0, dest = 0;
            var r, g, b;

            /*jshint bitwise: false*/
            var mask5bit = ((1 << 5) - 1);
            var midMask6bit = (((1 << 6) - 1) << 5);
            do
            {
                var value = ((data[src + 1] << 8) | data[src]);
                src += 2;
                r = (value & mask5bit) << 11;
                g = (value & midMask6bit);
                b = ((value >> 11) & mask5bit);
                dst[dest] = r | g | b;
                dest += 1;
            }
            while (offset < size);
            /*jshint bitwise: true*/
            return dst;
        }
        return data;
    },

    decode565: function decode565Fn(value, color)
    {
        /*jshint bitwise: false*/
        color[0] = ((value >> 11) & 31) * (255 / 31);
        color[1] = ((value >> 5)  & 63) * (255 / 63);
        color[2] = ((value)       & 31) * (255 / 31);
        color[3] = 255;
        /*jshint bitwise: true*/
        return color;
    },

    decodeColor : function decodeColorFn(data, src, isDXT1, out, scratchpad)
    {
        /*jshint bitwise: false*/
        var cache = scratchpad.cache;
        var decode565 = DDSLoader.prototype.decode565;
        var col0 = ((data[src + 1] << 8) | data[src]);
        src += 2;
        var col1 = ((data[src + 1] << 8) | data[src]);
        src += 2;

        var c0, c1, c2, c3, i;
        if (col0 !== col1)
        {
            c0 = decode565(col0, cache[0]);
            c1 = decode565(col1, cache[1]);
            c2 = cache[2];
            c3 = cache[3];

            if (!isDXT1 || col0 > col1)
            {
                for (i = 0; i < 3; i += 1)
                {
                    var c0i = c0[i];
                    var c1i = c1[i];
                    c2[i] = ((((c0i * 2) + c1i) / 3) | 0);
                    c3[i] = (((c0i + (c1i * 2)) / 3) | 0);
                }
                c2[3] = 255;
                c3[3] = 255;
            }
            else
            {
                for (i = 0; i < 3; i += 1)
                {
                    c2[i] = ((c0[i] + c1[i]) >> 1);
                    c3[i] = 0;
                }
                c2[3] = 255;
                c3[3] = 0;
            }
        }
        else
        {
            c0 = decode565(col0, cache[0]);
            c1 = c0;
            c2 = c0;
            c3 = cache[1];
            for (i = 0; i < 4; i += 1)
            {
                c3[i] = 0;
            }
        }

        var c = scratchpad.colorArray;
        c[0] = c0;
        c[1] = c1;
        c[2] = c2;
        c[3] = c3;

        // ((1 << 2) - 1) === 3;
        var row, dest, color;
        if (isDXT1)
        {
            for (i = 0; i < 4; i += 1)
            {
                row = data[src + i];
                dest = out[i];
                dest[0] = c[(row)      & 3];
                dest[1] = c[(row >> 2) & 3];
                dest[2] = c[(row >> 4) & 3];
                dest[3] = c[(row >> 6) & 3];
            }
        }
        else
        {
            for (i = 0; i < 4; i += 1)
            {
                row = data[src + i];
                dest = out[i];

                color = c[(row)      & 3];
                dest[0][0] = color[0];
                dest[0][1] = color[1];
                dest[0][2] = color[2];
                dest[0][3] = color[3];

                color = c[(row >> 2) & 3];
                dest[1][0] = color[0];
                dest[1][1] = color[1];
                dest[1][2] = color[2];
                dest[1][3] = color[3];

                color = c[(row >> 4) & 3];
                dest[2][0] = color[0];
                dest[2][1] = color[1];
                dest[2][2] = color[2];
                dest[2][3] = color[3];

                color = c[(row >> 6) & 3];
                dest[3][0] = color[0];
                dest[3][1] = color[1];
                dest[3][2] = color[2];
                dest[3][3] = color[3];
            }
        }
        /*jshint bitwise: true*/
    },

    decodeDXT3Alpha : function decodeDXT3AlphaFn(data, src, out)
    {
        /*jshint bitwise: false*/
        // ((1 << 4) - 1) === 15;
        for (var i = 0; i < 4; i += 1)
        {
            var row = ((data[src + 1] << 8) | data[src]);
            src += 2;
            var dest = out[i];
            if (row)
            {
                dest[0][3] = ((row)       & 15) * (255 / 15);
                dest[1][3] = ((row >> 4)  & 15) * (255 / 15);
                dest[2][3] = ((row >> 8)  & 15) * (255 / 15);
                dest[3][3] = ((row >> 12) & 15) * (255 / 15);
            }
            else
            {
                dest[0][3] = 0;
                dest[1][3] = 0;
                dest[2][3] = 0;
                dest[3][3] = 0;
            }
        }
        /*jshint bitwise: true*/
    },

    decodeDXT5Alpha : function decodeDXT5AlphaFn(data, src, out, scratchpad)
    {
        var a0 = data[src];
        src += 1;
        var a1 = data[src];
        src += 1;

        /*jshint bitwise: false*/
        var a = scratchpad.alphaArray;

        a[0] = a0;
        a[1] = a1;
        if (a0 > a1)
        {
            a[2] = ((((a0 * 6) + (a1 * 1)) / 7) | 0);
            a[3] = ((((a0 * 5) + (a1 * 2)) / 7) | 0);
            a[4] = ((((a0 * 4) + (a1 * 3)) / 7) | 0);
            a[5] = ((((a0 * 3) + (a1 * 4)) / 7) | 0);
            a[6] = ((((a0 * 2) + (a1 * 5)) / 7) | 0);
            a[7] = ((((a0 * 1) + (a1 * 6)) / 7) | 0);
        }
        else if (a0 < a1)
        {
            a[2] = ((((a0 * 4) + (a1 * 1)) / 5) | 0);
            a[3] = ((((a0 * 3) + (a1 * 2)) / 5) | 0);
            a[4] = ((((a0 * 2) + (a1 * 3)) / 5) | 0);
            a[5] = ((((a0 * 1) + (a1 * 4)) / 5) | 0);
            a[6] = 0;
            a[7] = 255;
        }
        else //if (a0 === a1)
        {
            a[2] = a0;
            a[3] = a0;
            a[4] = a0;
            a[5] = a0;
            a[6] = 0;
            a[7] = 255;
        }

        // ((1 << 3) - 1) === 7
        var dest;
        for (var i = 0; i < 2; i += 1)
        {
            var value = (data[src] | (data[src + 1] << 8) | (data[src +  2] << 16));
            src += 3;
            dest = out[(i * 2)];
            dest[0][3] = a[(value)      & 7];
            dest[1][3] = a[(value >> 3) & 7];
            dest[2][3] = a[(value >> 6) & 7];
            dest[3][3] = a[(value >> 9) & 7];
            dest = out[(i * 2) + 1];
            dest[0][3] = a[(value >> 12) & 7];
            dest[1][3] = a[(value >> 15) & 7];
            dest[2][3] = a[(value >> 18) & 7];
            dest[3][3] = a[(value >> 21) & 7];
        }
        /*jshint bitwise: true*/
    },

    convertDXT1ToRGBA : function convertDXT1ToRGBAFn(data)
    {
        var decodeColor = this.decodeColor;

        var scratchpad = { cache: [new Uint8Array(4), new Uint8Array(4), new Uint8Array(4), new Uint8Array(4)],
                           colorArray: new Array(4)
                         };
        data = this.convertToRGBA(data, function decodeDXT1(data, src, out) {
            decodeColor(data, src, true, out, scratchpad);
        }, 8);
        this.format = this.gd.PIXELFORMAT_R8G8B8A8;
        return data;
    },

    convertDXT3ToRGBA : function convertDXT3ToRGBAFn(data)
    {
        var decodeColor = this.decodeColor;
        var decodeDXT3Alpha = this.decodeDXT3Alpha;
        var scratchpad = { cache: [new Uint8Array(4), new Uint8Array(4), new Uint8Array(4), new Uint8Array(4)],
                           colorArray: new Array(4)
                         };
        data = this.convertToRGBA(data, function decodeDXT3(data, src, out) {
            decodeColor(data, (src + 8), false, out, scratchpad);
            decodeDXT3Alpha(data, src, out);
        }, 16);
        this.format = this.gd.PIXELFORMAT_R8G8B8A8;
        return data;
    },

    convertDXT5ToRGBA : function convertDXT5ToRGBAFn(data)
    {
        var decodeColor = this.decodeColor;
        var decodeDXT5Alpha = this.decodeDXT5Alpha;
        var scratchpad = { cache: [new Uint8Array(4), new Uint8Array(4), new Uint8Array(4), new Uint8Array(4)],
                           colorArray: new Array(4),
                           alphaArray: new Uint8Array(8)
                         };
        data = this.convertToRGBA(data, function decodeDXT5(data, src, out) {
            decodeColor(data, (src + 8), false, out, scratchpad);
            decodeDXT5Alpha(data, src, out, scratchpad);
        }, 16);
        this.format = this.gd.PIXELFORMAT_R8G8B8A8;
        return data;
    },

    convertToRGBA : function convertToRGBAFn(data, decode, srcStride)
    {
        //var bpp = 4;
        var level;
        var width = this.width;
        var height = this.height;
        var numLevels = this.numLevels;
        var numFaces = this.numFaces;

        /*jshint bitwise: false*/
        var numPixels = 0;
        for (level = 0; level < numLevels; level += 1)
        {
            numPixels += (width * height);
            width = (width > 1 ? (width >> 1) : 1);
            height = (height > 1 ? (height >> 1) : 1);
        }

        var dst = new Uint8Array(numPixels * 4 * numFaces);

        var src = 0, dest = 0;

        var color = [[new Uint8Array(4), new Uint8Array(4), new Uint8Array(4), new Uint8Array(4)],
                     [new Uint8Array(4), new Uint8Array(4), new Uint8Array(4), new Uint8Array(4)],
                     [new Uint8Array(4), new Uint8Array(4), new Uint8Array(4), new Uint8Array(4)],
                     [new Uint8Array(4), new Uint8Array(4), new Uint8Array(4), new Uint8Array(4)]
                    ];
        for (var face = 0; face < numFaces; face += 1)
        {
            width = this.width;
            height = this.height;
            for (var n = 0; n < numLevels; n += 1)
            {
                var numColumns = (width > 4 ? 4 : width);
                var numLines = (height > 4 ? 4 : height);
                var heightInBlocks = ((height + 3) >> 2);
                var widthInBlocks = ((width + 3) >> 2);
                var desinationStride = (width * 4);
                var desinationLineStride = (numColumns * 4);
                var desinationBlockStride = (desinationStride * (numLines - 1));
                for (var y = 0; y < heightInBlocks; y += 1)
                {
                    for (var x = 0; x < widthInBlocks; x += 1)
                    {
                        decode(data, src, color);
                        var destLine = dest;
                        for (var line = 0; line < numLines; line += 1)
                        {
                            var colorLine = color[line];
                            var destRGBA = destLine;
                            for (var i = 0 ; i < numColumns; i += 1)
                            {
                                var rgba = colorLine[i];
                                dst[destRGBA]     = rgba[0];
                                dst[destRGBA + 1] = rgba[1];
                                dst[destRGBA + 2] = rgba[2];
                                dst[destRGBA + 3] = rgba[3];
                                destRGBA += 4;
                            }
                            destLine += desinationStride;
                        }
                        src += srcStride;
                        dest += desinationLineStride;
                    }
                    dest += desinationBlockStride;
                }

                width = (width > 1 ? (width >> 1) : 1);
                height = (height > 1 ? (height >> 1) : 1);
            }
        }
        /*jshint bitwise: true*/

        return dst;
    }
};

// Constructor function
DDSLoader.create = function ddsLoaderFn(params)
{
    var loader = new DDSLoader();
    loader.gd = params.gd;
    loader.onload = params.onload;
    loader.onerror = params.onerror;

    /*jshint bitwise: false*/
    function MAKEFOURCC(c0, c1, c2, c3)
    {
        return (c0.charCodeAt(0) +
               (c1.charCodeAt(0) * 256) +
               (c2.charCodeAt(0) * 65536) +
               (c3.charCodeAt(0) * 16777216));
    }
    /*jshint bitwise: true*/
    loader.FOURCC_ATI1 = MAKEFOURCC('A', 'T', 'I', '1');
    loader.FOURCC_ATI2 = MAKEFOURCC('A', 'T', 'I', '2');
    loader.FOURCC_RXGB = MAKEFOURCC('R', 'X', 'G', 'B');

    var src = params.src;
    if (src)
    {
        loader.src = src;
        var xhr;
        if (window.XMLHttpRequest)
        {
            xhr = new window.XMLHttpRequest();
        }
        else if (window.ActiveXObject)
        {
            xhr = new window.ActiveXObject("Microsoft.XMLHTTP");
        }
        else
        {
            if (params.onerror)
            {
                params.onerror("No XMLHTTPRequest object could be created");
            }
            return null;
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4)
            {
                if (!TurbulenzEngine || !TurbulenzEngine.isUnloading())
                {
                    var xhrStatus = xhr.status;
                    var xhrStatusText = xhr.status !== 0 && xhr.statusText || 'No connection';

                    // Sometimes the browser sets status to 200 OK when the connection is closed
                    // before the message is sent (weird!).
                    // In order to address this we fail any completely empty responses.
                    // Hopefully, nobody will get a valid response with no headers and no body!
                    if (xhr.getAllResponseHeaders() === "" && xhr.responseText === "" && xhrStatus === 200 && xhrStatusText === 'OK')
                    {
                        loader.onload('', 0);
                        return;
                    }

                    if (xhrStatus === 200 || xhrStatus === 0)
                    {
                        var buffer;
                        if (xhr.responseType === "arraybuffer")
                        {
                            buffer = xhr.response;
                        }
                        else if (xhr.mozResponseArrayBuffer)
                        {
                            buffer = xhr.mozResponseArrayBuffer;
                        }
                        else //if (xhr.responseText !== null)
                        {
                            /*jshint bitwise: false*/
                            var text = xhr.responseText;
                            var numChars = text.length;
                            buffer = [];
                            buffer.length = numChars;
                            for (var i = 0; i < numChars; i += 1)
                            {
                                buffer[i] = (text.charCodeAt(i) & 0xff);
                            }
                            /*jshint bitwise: true*/
                        }

                        // Fix for loading from file
                        if (xhrStatus === 0 && window.location.protocol === "file:")
                        {
                            xhrStatus = 200;
                        }

                        loader.processBytes(new Uint8Array(buffer));
                        if (loader.data)
                        {
                            if (loader.onload)
                            {
                                loader.onload(loader.data, loader.width, loader.height, loader.format,
                                              loader.numLevels, (loader.numFaces > 1), loader.depth,
                                              xhrStatus);
                            }
                        }
                        else
                        {
                            if (loader.onerror)
                            {
                                loader.onerror();
                            }
                        }
                    }
                    else
                    {
                        if (loader.onerror)
                        {
                            loader.onerror();
                        }
                    }
                }
                // break circular reference
                xhr.onreadystatechange = null;
                xhr = null;
            }
        };
        xhr.open("GET", params.src, true);
        if (xhr.hasOwnProperty && xhr.hasOwnProperty("responseType"))
        {
            xhr.responseType = "arraybuffer";
        }
        else if (xhr.overrideMimeType)
        {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        }
        else
        {
            xhr.setRequestHeader("Content-Type", "text/plain; charset=x-user-defined");
        }
        xhr.send(null);
    }
    else
    {
        loader.processBytes(params.data);
        if (loader.data)
        {
            if (loader.onload)
            {
                loader.onload(loader.data, loader.width, loader.height, loader.format,
                              loader.numLevels, (loader.numFaces > 1), loader.depth);
            }
        }
        else
        {
            if (loader.onerror)
            {
                loader.onerror();
            }
        }
    }

    return loader;
};

// Copyright (c) 2011-2012 Turbulenz Limited
/*global TurbulenzEngine*/
/*global TGALoader*/
/*global DDSLoader*/
/*global TARLoader*/
/*global Int8Array*/
/*global Int16Array*/
/*global Int32Array*/
/*global Uint8Array*/
/*global Uint8ClampedArray*/
/*global Uint16Array*/
/*global Uint32Array*/
/*global Float32Array*/
/*global ArrayBuffer*/
/*global DataView*/
/*global window*/
/*global console*/


//
// WebGLTexture
//
function WebGLTexture() {}
WebGLTexture.prototype =
{
    version : 1,

    setData : function textureSetDataFn(data)
    {
        var gd = this.gd;
        var target = this.target;
        gd.bindTexture(target, this.glTexture);
        this.updateData(data);
        gd.bindTexture(target, null);
    },

    // Internal
    createGLTexture : function createGLTextureFn(data)
    {
        var gd = this.gd;
        var gl = gd.gl;

        var target;
        if (this.cubemap)
        {
            target = gl.TEXTURE_CUBE_MAP;
        }
        else if (this.depth > 1)
        {
            //target = gl.TEXTURE_3D;
            // 3D textures are not supported yet
            return false;
        }
        else
        {
            target = gl.TEXTURE_2D;
        }
        this.target = target;

        var gltex = gl.createTexture();
        this.glTexture = gltex;

        gd.bindTexture(target, gltex);

        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

        if (this.mipmaps || 1 < this.numDataLevels)
        {
            gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
        }
        else
        {
            gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        }

        this.updateData(data);

        gd.bindTexture(target, null);

        return true;
    },

    updateData : function updateDataFn(data)
    {
        var gd = this.gd;
        var gl = gd.gl;

        function log2(a)
        {
            return Math.floor(Math.log(a) / Math.log(2));
        }

        var generateMipMaps = this.mipmaps && (this.numDataLevels !== (1 + Math.max(log2(this.width), log2(this.height))));
        var format = this.format;
        var internalFormat, gltype, srcStep, bufferData = null;
        var compressedTexturesExtension;

        if (format === gd.PIXELFORMAT_A8)
        {
            internalFormat = gl.ALPHA;
            gltype = gl.UNSIGNED_BYTE;
            srcStep = 1;
            if (data && !data.src)
            {
                if (data instanceof Uint8Array)
                {
                    bufferData = data;
                }
                else
                {
                    bufferData = new Uint8Array(data);
                }
            }
        }
        else if (format === gd.PIXELFORMAT_L8)
        {
            internalFormat = gl.LUMINANCE;
            gltype = gl.UNSIGNED_BYTE;
            srcStep = 1;
            if (data && !data.src)
            {
                if (data instanceof Uint8Array)
                {
                    bufferData = data;
                }
                else
                {
                    bufferData = new Uint8Array(data);
                }
            }
        }
        else if (format === gd.PIXELFORMAT_L8A8)
        {
            internalFormat = gl.LUMINANCE_ALPHA;
            gltype = gl.UNSIGNED_BYTE;
            srcStep = 2;
            if (data && !data.src)
            {
                if (data instanceof Uint8Array)
                {
                    bufferData = data;
                }
                else
                {
                    bufferData = new Uint8Array(data);
                }
            }
        }
        else if (format === gd.PIXELFORMAT_R5G5B5A1)
        {
            internalFormat = gl.RGBA;
            gltype = gl.UNSIGNED_SHORT_5_5_5_1;
            srcStep = 1;
            if (data && !data.src)
            {
                if (data instanceof Uint16Array)
                {
                    bufferData = data;
                }
                else
                {
                    bufferData = new Uint16Array(data);
                }
            }
        }
        else if (format === gd.PIXELFORMAT_R5G6B5)
        {
            internalFormat = gl.RGB;
            gltype = gl.UNSIGNED_SHORT_5_6_5;
            srcStep = 1;
            if (data && !data.src)
            {
                if (data instanceof Uint16Array)
                {
                    bufferData = data;
                }
                else
                {
                    bufferData = new Uint16Array(data);
                }
            }
        }
        else if (format === gd.PIXELFORMAT_R8G8B8A8)
        {
            internalFormat = gl.RGBA;
            gltype = gl.UNSIGNED_BYTE;
            srcStep = 4;
            if (data && !data.src)
            {
                if (data instanceof Uint8Array)
                {
                    // Some browsers consider Uint8ClampedArray to be
                    // an instance of Uint8Array (which is correct as
                    // per the spec), yet won't accept a
                    // Uint8ClampedArray as pixel data for a
                    // gl.UNSIGNED_BYTE Texture.  If we have a
                    // Uint8ClampedArray then we can just reuse the
                    // underlying data.

                    if (typeof Uint8ClampedArray !== "undefined" &&
                        data instanceof Uint8ClampedArray)
                    {
                        bufferData = new Uint8Array(data.buffer);
                    }
                    else
                    {
                        bufferData = data;
                    }
                }
                else
                {
                    bufferData = new Uint8Array(data);
                }
            }
        }
        else if (format === gd.PIXELFORMAT_R8G8B8)
        {
            internalFormat = gl.RGB;
            gltype = gl.UNSIGNED_BYTE;
            srcStep = 3;
            if (data && !data.src)
            {
                if (data instanceof Uint8Array)
                {
                    // See comment above about Uint8ClampedArray

                    if (typeof Uint8ClampedArray !== "undefined" &&
                        data instanceof Uint8ClampedArray)
                    {
                        bufferData = new Uint8Array(data.buffer);
                    }
                    else
                    {
                        bufferData = data;
                    }
                }
                else
                {
                    bufferData = new Uint8Array(data);
                }
            }
        }
        else if (format === gd.PIXELFORMAT_D24S8)
        {
            //internalFormat = gl.DEPTH24_STENCIL8_EXT;
            //gltype = gl.UNSIGNED_INT_24_8_EXT;
            //internalFormat = gl.DEPTH_COMPONENT;
            internalFormat = gl.DEPTH_STENCIL;
            gltype = gl.UNSIGNED_INT;
            srcStep = 1;
            if (data && !data.src)
            {
                bufferData = new Uint32Array(data);
            }
        }
        else if (format === gd.PIXELFORMAT_DXT1 ||
                 format === gd.PIXELFORMAT_DXT3 ||
                 format === gd.PIXELFORMAT_DXT5)
        {
            compressedTexturesExtension = gd.compressedTexturesExtension;
            if (compressedTexturesExtension)
            {
                if (format === gd.PIXELFORMAT_DXT1)
                {
                    internalFormat = compressedTexturesExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    srcStep = 8;
                }
                else if (format === gd.PIXELFORMAT_DXT3)
                {
                    internalFormat = compressedTexturesExtension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    srcStep = 16;
                }
                else //if (format === gd.PIXELFORMAT_DXT5)
                {
                    internalFormat = compressedTexturesExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    srcStep = 16;
                }

                if (internalFormat === undefined)
                {
                    return; // Unsupported format
                }

                if (data && !data.src)
                {
                    if (data instanceof Uint8Array)
                    {
                        bufferData = data;
                    }
                    else
                    {
                        bufferData = new Uint8Array(data);
                    }
                }
            }
            else
            {
                return;   // Unsupported format
            }
        }
        else
        {
            return;   //unknown/unsupported format
        }

        var numLevels = (data && 0 < this.numDataLevels ? this.numDataLevels : 1);
        var w = this.width, h = this.height, offset = 0, target, n, levelSize, levelData;
        if (this.cubemap)
        {
            target = gl.TEXTURE_CUBE_MAP;
            gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

            for (var f = 0; f < 6; f += 1)
            {
                var faceTarget = (gl.TEXTURE_CUBE_MAP_POSITIVE_X + f);
                for (n = 0; n < numLevels; n += 1)
                {
                    if (compressedTexturesExtension)
                    {
                        levelSize = (Math.floor((w + 3) / 4) * Math.floor((h + 3) / 4) * srcStep);
                        if (bufferData)
                        {
                            if (numLevels === 1)
                            {
                                levelData = bufferData;
                            }
                            else
                            {
                                levelData = bufferData.subarray(offset, (offset + levelSize));
                            }
                        }
                        else
                        {
                            levelData = new Uint8Array(levelSize);
                        }
                        if (gd.WEBGL_compressed_texture_s3tc)
                        {
                            gl.compressedTexImage2D(faceTarget, n, internalFormat, w, h, 0,
                                                    levelData);
                        }
                        else
                        {
                            compressedTexturesExtension.compressedTexImage2D(faceTarget, n, internalFormat, w, h, 0,
                                                                             levelData);
                        }
                    }
                    else
                    {
                        levelSize = (w * h * srcStep);
                        if (bufferData)
                        {
                            if (numLevels === 1)
                            {
                                levelData = bufferData;
                            }
                            else
                            {
                                levelData = bufferData.subarray(offset, (offset + levelSize));
                            }
                            gl.texImage2D(faceTarget, n, internalFormat, w, h, 0, internalFormat, gltype, levelData);
                        }
                        else if (data)
                        {
                            gl.texImage2D(faceTarget, n, internalFormat, internalFormat, gltype, data);
                        }
                        else
                        {
                            gl.texImage2D(faceTarget, n, internalFormat, w, h, 0, internalFormat, gltype,
                                          new Uint8Array(levelSize));
                        }
                    }
                    offset += levelSize;
                    w = (w > 1 ? Math.floor(w / 2) : 1);
                    h = (h > 1 ? Math.floor(h / 2) : 1);
                }
                w = this.width;
                h = this.height;
            }
        }
        else
        {
            target = gl.TEXTURE_2D;
            gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

            for (n = 0; n < numLevels; n += 1)
            {
                if (compressedTexturesExtension)
                {
                    levelSize = (Math.floor((w + 3) / 4) * Math.floor((h + 3) / 4) * srcStep);
                    if (bufferData)
                    {
                        if (numLevels === 1)
                        {
                            levelData = bufferData;
                        }
                        else
                        {
                            levelData = bufferData.subarray(offset, (offset + levelSize));
                        }
                    }
                    else
                    {
                        levelData = new Uint8Array(levelSize);
                    }
                    if (gd.WEBGL_compressed_texture_s3tc)
                    {
                        gl.compressedTexImage2D(target, n, internalFormat, w, h, 0, levelData);
                    }
                    else
                    {
                        compressedTexturesExtension.compressedTexImage2D(target, n, internalFormat, w, h, 0, levelData);
                    }
                }
                else
                {
                    levelSize = (w * h * srcStep);
                    if (bufferData)
                    {
                        if (numLevels === 1)
                        {
                            levelData = bufferData;
                        }
                        else
                        {
                            levelData = bufferData.subarray(offset, (offset + levelSize));
                        }
                        gl.texImage2D(target, n, internalFormat, w, h, 0, internalFormat, gltype, levelData);
                    }
                    else if (data)
                    {
                        gl.texImage2D(target, n, internalFormat, internalFormat, gltype, data);
                    }
                    else
                    {
                        gl.texImage2D(target, n, internalFormat, w, h, 0, internalFormat, gltype,
                                      new Uint8Array(levelSize));
                    }
                }
                offset += levelSize;
                w = (w > 1 ? Math.floor(w / 2) : 1);
                h = (h > 1 ? Math.floor(h / 2) : 1);
            }
        }

        if (generateMipMaps)
        {
            gl.generateMipmap(target);
        }
    },

    updateMipmaps : function updateMipmapsFn(face)
    {
        if (this.mipmaps)
        {
            if (this.depth > 1)
            {
                TurbulenzEngine.callOnError(
                    "3D texture mipmap generation unsupported");
                return;
            }

            if (this.cubemap && face !== 5)
            {
                return;
            }

            var gd = this.gd;
            var gl = gd.gl;

            var target = this.target;
            gd.bindTexture(target, this.glTexture);
            gl.generateMipmap(target);
            gd.bindTexture(target, null);
        }
    },

    destroy : function textureDestroyFn()
    {
        var gd = this.gd;
        if (gd)
        {
            var glTexture = this.glTexture;
            if (glTexture)
            {
                var gl = gd.gl;
                if (gl)
                {
                    gd.unbindTexture(glTexture);
                    gl.deleteTexture(glTexture);
                }
                delete this.glTexture;
            }

            delete this.sampler;
            delete this.gd;
        }
    },

    typedArrayIsValid : function textureTypedArrayIsValidFn(typedArray)
    {
        var gd = this.gd;
        var format = this.format;

        if (gd)
        {
            if ((format === gd.PIXELFORMAT_A8) ||
                (format === gd.PIXELFORMAT_L8) ||
                (format === gd.PIXELFORMAT_S8))
            {
                return ((typedArray instanceof Uint8Array) ||
                        (typeof Uint8ClampedArray !== "undefined" &&
                         typedArray instanceof Uint8ClampedArray)) &&
                    (typedArray.length ===
                     this.width * this.height * this.depth);
            }
            if (format === gd.PIXELFORMAT_L8A8)
            {
                return ((typedArray instanceof Uint8Array) ||
                        (typeof Uint8ClampedArray !== "undefined" &&
                         typedArray instanceof Uint8ClampedArray)) &&
                    (typedArray.length ===
                     2 * this.width * this.height * this.depth);
            }
            if (format === gd.PIXELFORMAT_R8G8B8)
            {
                return ((typedArray instanceof Uint8Array) ||
                        (typeof Uint8ClampedArray !== "undefined" &&
                         typedArray instanceof Uint8ClampedArray)) &&
                    (typedArray.length ===
                     3 * this.width * this.height * this.depth);
            }
            if (format === gd.PIXELFORMAT_R8G8B8A8)
            {
                return ((typedArray instanceof Uint8Array) ||
                        (typeof Uint8ClampedArray !== "undefined" &&
                         typedArray instanceof Uint8ClampedArray)) &&
                    (typedArray.length ===
                     4 * this.width * this.height * this.depth);
            }
            if ((format === gd.PIXELFORMAT_R5G5B5A1) ||
                (format === gd.PIXELFORMAT_R5G6B5))
            {
                return (typedArray instanceof Uint16Array) &&
                    (typedArray.length ===
                     this.width * this.height * this.depth);
            }
        }
        return false;
    }
};

// Constructor function
WebGLTexture.create = function webGLTextureCreateFn(gd, params)
{
    var tex = new WebGLTexture();
    tex.gd = gd;
    tex.mipmaps = params.mipmaps;
    tex.dynamic = params.dynamic;
    tex.renderable = params.renderable;
    tex.numDataLevels = 0;

    var src = params.src;
    if (src)
    {
        tex.name = params.name || src;
        var extension;
        var data = params.data;
        if (data)
        {
            // do not trust file extensions if we got data...
            if (data[0] === 137 &&
                data[1] === 80 &&
                data[2] === 78 &&
                data[3] === 71)
            {
                extension = '.png';
            }
            else if (data[0] === 255 &&
                     data[1] === 216 &&
                     data[2] === 255 &&
                     (data[3] === 224 || data[3] === 225))
            {
                extension = '.jpg';
            }
            else if (data[0] === 68 &&
                     data[1] === 68 &&
                     data[2] === 83 &&
                     data[3] === 32)
            {
                extension = '.dds';
            }
            else
            {
                extension = src.slice(-4);
            }
        }
        else
        {
            extension = src.slice(-4);
        }

        // DDS and TGA textures require out own image loaders
        if (extension === '.dds' ||
            extension === '.tga')
        {
            if (extension === '.tga' && typeof TGALoader !== 'undefined')
            {
                var tgaParams = {
                    gd: gd,
                    onload : function tgaLoadedFn(data, width, height, format, status)
                    {
                        tex.width = width;
                        tex.height = height;
                        tex.depth = 1;
                        tex.format = format;
                        tex.cubemap = false;
                        var result = tex.createGLTexture(data);
                        if (params.onload)
                        {
                            params.onload(result ? tex : null, status);
                        }
                    },
                    onerror : function tgaFailedFn()
                    {
                        tex.failed = true;
                        if (params.onload)
                        {
                            params.onload(null);
                        }
                    }
                };
                if (data)
                {
                    tgaParams.data = data;
                }
                else
                {
                    tgaParams.src = src;
                }
                TGALoader.create(tgaParams);
                return tex;
            }
            else if (extension === '.dds' && typeof DDSLoader !== 'undefined')
            {
                var ddsParams = {
                    gd: gd,
                    onload : function ddsLoadedFn(data, width, height, format, numLevels, cubemap, depth, status)
                    {
                        tex.width = width;
                        tex.height = height;
                        tex.format = format;
                        tex.cubemap = cubemap;
                        tex.depth = depth;
                        tex.numDataLevels = numLevels;
                        var result = tex.createGLTexture(data);
                        if (params.onload)
                        {
                            params.onload(result ? tex : null, status);
                        }
                    },
                    onerror : function ddsFailedFn()
                    {
                        tex.failed = true;
                        if (params.onload)
                        {
                            params.onload(null);
                        }
                    }
                };
                if (data)
                {
                    ddsParams.data = data;
                }
                else
                {
                    ddsParams.src = src;
                }
                DDSLoader.create(ddsParams);
                return tex;
            }
            else
            {
                TurbulenzEngine.callOnError(
                    'Missing image loader required for ' + src);

                tex = webGLTextureCreateFn(gd, {
                    name    : (params.name || src),
                    width   : 2,
                    height  : 2,
                    depth   : 1,
                    format  : 'R8G8B8A8',
                    cubemap : false,
                    mipmaps : params.mipmaps,
                    dynamic : params.dynamic,
                    renderable : params.renderable,
                    data    : [255,  20, 147, 255,
                               255,   0,   0, 255,
                               255, 255, 255, 255,
                               255,  20, 147, 255]
                });

                if (params.onload)
                {
                    if (TurbulenzEngine)
                    {
                        TurbulenzEngine.setTimeout(function () {
                            params.onload(tex, 200);
                        }, 0);
                    }
                    else
                    {
                        window.setTimeout(function () {
                            params.onload(tex, 200);
                        }, 0);
                    }
                }
                return tex;
            }
        }

        var img = new Image();
        img.onload = function imageLoadedFn()
        {
            tex.width = img.width;
            tex.height = img.height;
            tex.depth = 1;
            tex.format = gd.PIXELFORMAT_R8G8B8A8;
            tex.cubemap = false;
            var result = tex.createGLTexture(img);
            if (params.onload)
            {
                params.onload(result ? tex : null, 200);
            }
        };
        img.onerror = function imageFailedFn()
        {
            tex.failed = true;
            if (params.onload)
            {
                params.onload(null);
            }
        };
        if (data)
        {
            if (extension === '.jpg' || extension === '.jpeg')
            {
                src = 'data:image/jpeg;base64,' + TurbulenzEngine.base64Encode(data);
            }
            else if (extension === '.png')
            {
                src = 'data:image/png;base64,' + TurbulenzEngine.base64Encode(data);
            }
        }
        else
        {
            img.crossOrigin = 'anonymous';
        }
        img.src = src;
    }
    else
    {
        // Invalid src values like "" fall through to here
        if ("" === src && params.onload)
        {
            // Assume the caller intended to pass in a valid url.
            return null;
        }

        var format = params.format;
        if (typeof format === 'string')
        {
            format = gd['PIXELFORMAT_' + format];
        }

        tex.width = params.width;
        tex.height = params.height;
        tex.depth = params.depth;
        tex.format = format;
        tex.cubemap = params.cubemap;
        tex.name = params.name;

        var result = tex.createGLTexture(params.data);
        if (!result)
        {
            tex = null;
        }

        if (params.onload)
        {
            params.onload(tex, 200);
        }
    }

    return tex;
};


//
// WebGLRenderBuffer
//
function WebGLRenderBuffer() {}
WebGLRenderBuffer.prototype =
{
    version : 1,

    destroy : function renderBufferDestroyFn()
    {
        var gd = this.gd;
        if (gd)
        {
            var glBuffer = this.glBuffer;
            if (glBuffer)
            {
                var gl = gd.gl;
                if (gl)
                {
                    gl.deleteRenderbuffer(glBuffer);
                }
                delete this.glBuffer;
            }

            delete this.gd;
        }
    }
};

// Constructor function
WebGLRenderBuffer.create = function webGLRenderBufferFn(gd, params)
{
    var renderBuffer = new WebGLRenderBuffer();

    var width = params.width;
    var height = params.height;
    var format = params.format;
    if (typeof format === 'string')
    {
        format = gd['PIXELFORMAT_' + format];
    }

    if (format !== gd.PIXELFORMAT_D24S8)
    {
        return null;
    }

    var gl = gd.gl;

    var glBuffer = gl.createRenderbuffer();

    gl.bindRenderbuffer(gl.RENDERBUFFER, glBuffer);

    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);

    renderBuffer.width = gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_WIDTH);
    renderBuffer.height = gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_HEIGHT);

    gl.bindRenderbuffer(gl.RENDERBUFFER, null);

    if (renderBuffer.width < width ||
        renderBuffer.height < height)
    {
        gl.deleteRenderbuffer(glBuffer);
        return null;
    }

    renderBuffer.gd = gd;
    renderBuffer.format = format;
    renderBuffer.glBuffer = glBuffer;

    return renderBuffer;
};


//
// WebGLRenderTarget
//
function WebGLRenderTarget() {}
WebGLRenderTarget.prototype =
{
    version : 1,

    // Shared because there can only be one active at a time
    oldViewportBox : [],
    oldScissorBox : [],

    copyBox : function copyBoxFn(dst, src)
    {
        dst[0] = src[0];
        dst[1] = src[1];
        dst[2] = src[2];
        dst[3] = src[3];
    },

    bind : function bindFn()
    {
        var gd = this.gd;
        var gl = gd.gl;

        gd.unbindTexture(this.colorTexture0.glTexture);
        if (this.depthTexture)
        {
            gd.unbindTexture(this.depthTexture.glTexture);
        }

        gl.bindFramebuffer(gl.FRAMEBUFFER, this.glObject);

        var state = gd.state;
        this.copyBox(this.oldViewportBox, state.viewportBox);
        this.copyBox(this.oldScissorBox, state.scissorBox);
        gd.setViewport(0, 0, this.width, this.height);
        gd.setScissor(0, 0, this.width, this.height);

        return true;
    },

    unbind : function unbindFn()
    {
        var gd = this.gd;
        var gl = gd.gl;

        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        gd.setViewport.apply(gd, this.oldViewportBox);
        gd.setScissor.apply(gd, this.oldScissorBox);

        this.colorTexture0.updateMipmaps(this.face);
        if (this.depthTexture)
        {
            this.depthTexture.updateMipmaps(this.face);
        }
    },

    destroy : function renderTargetDestroyFn()
    {
        var gd = this.gd;
        if (gd)
        {
            var glObject = this.glObject;
            if (glObject)
            {
                var gl = gd.gl;
                if (gl)
                {
                    gl.deleteFramebuffer(glObject);
                }
                delete this.glObject;
            }

            delete this.colorTexture0;
            delete this.colorTexture1;
            delete this.colorTexture2;
            delete this.colorTexture3;
            delete this.depthBuffer;
            delete this.depthTexture;
            delete this.gd;
        }
    }
};

// Constructor function
WebGLRenderTarget.create = function webGLRenderTargetFn(gd, params)
{
    var renderTarget = new WebGLRenderTarget();

    var colorTexture0 = params.colorTexture0;
    var colorTexture1 = (colorTexture0 ? (params.colorTexture1 || null) : null);
    var colorTexture2 = (colorTexture1 ? (params.colorTexture2 || null) : null);
    var colorTexture3 = (colorTexture2 ? (params.colorTexture3 || null) : null);
    var depthBuffer = params.depthBuffer || null;
    var depthTexture = params.depthTexture || null;
    var face = params.face;

    var maxSupported  = gd.maxSupported("RENDERTARGET_COLOR_TEXTURES");
    if (colorTexture1 && maxSupported < 2)
    {
        return null;
    }
    if (colorTexture2 && maxSupported < 3)
    {
        return null;
    }
    if (colorTexture3 && maxSupported < 4)
    {
        return null;
    }

    var gl = gd.gl;

    var glObject = gl.createFramebuffer();

    gl.bindFramebuffer(gl.FRAMEBUFFER, glObject);

    var width, height;
    if (colorTexture0)
    {
        width = colorTexture0.width;
        height = colorTexture0.height;

        var glTexture = colorTexture0.glTexture;
        if (glTexture === undefined)
        {
            TurbulenzEngine.callOnError("Color texture is not a Texture");
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.deleteFramebuffer(glObject);
            return null;
        }

        var colorAttachment0 = gl.COLOR_ATTACHMENT0;
        if (colorTexture0.cubemap)
        {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, colorAttachment0, (gl.TEXTURE_CUBE_MAP_POSITIVE_X + face), glTexture, 0);
        }
        else
        {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, colorAttachment0, gl.TEXTURE_2D, glTexture, 0);
        }

        if (colorTexture1)
        {
            glTexture = colorTexture1.glTexture;
            if (colorTexture1.cubemap)
            {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, (colorAttachment0 + 1), (gl.TEXTURE_CUBE_MAP_POSITIVE_X + face), glTexture, 0);
            }
            else
            {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, (colorAttachment0 + 1), gl.TEXTURE_2D, glTexture, 0);
            }

            if (colorTexture2)
            {
                glTexture = colorTexture2.glTexture;
                if (colorTexture1.cubemap)
                {
                    gl.framebufferTexture2D(gl.FRAMEBUFFER, (colorAttachment0 + 2), (gl.TEXTURE_CUBE_MAP_POSITIVE_X + face), glTexture, 0);
                }
                else
                {
                    gl.framebufferTexture2D(gl.FRAMEBUFFER, (colorAttachment0 + 2), gl.TEXTURE_2D, glTexture, 0);
                }

                if (colorTexture3)
                {
                    glTexture = colorTexture3.glTexture;
                    if (colorTexture1.cubemap)
                    {
                        gl.framebufferTexture2D(gl.FRAMEBUFFER, (colorAttachment0 + 3), (gl.TEXTURE_CUBE_MAP_POSITIVE_X + face), glTexture, 0);
                    }
                    else
                    {
                        gl.framebufferTexture2D(gl.FRAMEBUFFER, (colorAttachment0 + 3), gl.TEXTURE_2D, glTexture, 0);
                    }
                }
            }
        }
    }
    else if (depthTexture)
    {
        width = depthTexture.width;
        height = depthTexture.height;
    }
    else if (depthBuffer)
    {
        width = depthBuffer.width;
        height = depthBuffer.height;
    }
    else
    {
        TurbulenzEngine.callOnError(
            "No RenderBuffers or Textures specified for this RenderTarget");
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.deleteFramebuffer(glObject);
        return null;
    }

    if (depthTexture)
    {
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT,
                                gl.TEXTURE_2D, depthTexture.glTexture, 0);
    }
    else if (depthBuffer)
    {
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT,
                                   gl.RENDERBUFFER, depthBuffer.glBuffer);
    }

    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

    gl.bindFramebuffer(gl.FRAMEBUFFER, null);

    if (status !== gl.FRAMEBUFFER_COMPLETE)
    {
        gl.deleteFramebuffer(glObject);
        return null;
    }

    renderTarget.gd = gd;
    renderTarget.glObject = glObject;
    renderTarget.colorTexture0 = colorTexture0;
    renderTarget.colorTexture1 = colorTexture1;
    renderTarget.colorTexture2 = colorTexture2;
    renderTarget.colorTexture3 = colorTexture3;
    renderTarget.depthBuffer = depthBuffer;
    renderTarget.depthTexture = depthTexture;
    renderTarget.width = width;
    renderTarget.height = height;
    renderTarget.face = face;

    return renderTarget;
};


//
// WebGLIndexBuffer
//
function WebGLIndexBuffer() {}
WebGLIndexBuffer.prototype =
{
    version : 1,

    map : function indexBufferMapFn(offset, numIndices)
    {
        if (offset === undefined)
        {
            offset = 0;
        }
        if (numIndices === undefined)
        {
            numIndices = this.numIndices;
        }

        var gd = this.gd;
        var gl = gd.gl;

        var format = this.format;
        var data;
        if (format === gl.UNSIGNED_BYTE)
        {
            data = new Uint8Array(numIndices);
        }
        else if (format === gl.UNSIGNED_SHORT)
        {
            data = new Uint16Array(numIndices);
        }
        else //if (format === gl.UNSIGNED_INT)
        {
            data = new Uint32Array(numIndices);
        }

        var numValues = 0;
        var writer = function indexBufferWriterFn()
        {
            var numArguments = arguments.length;
            for (var n = 0; n < numArguments; n += 1)
            {
                data[numValues] = arguments[n];
                numValues += 1;
            }
        };
        writer.data = data;
        writer.offset = offset;
        writer.getNumWrittenIndices = function getNumWrittenIndicesFn()
        {
            return numValues;
        };
        writer.write = writer;
        return writer;
    },

    unmap : function indexBufferUnmapFn(writer)
    {
        if (writer)
        {
            var gd = this.gd;
            var gl = gd.gl;

            var data = writer.data;
            delete writer.data;

            var offset = writer.offset;

            delete writer.write;

            var numIndices = writer.getNumWrittenIndices();
            if (!numIndices)
            {
                return;
            }

            if (numIndices < data.length)
            {
                data = data.subarray(0, numIndices);
            }

            gd.setIndexBuffer(this);

            if (numIndices < this.numIndices)
            {
                gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, offset, data);
            }
            else
            {
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, this.usage);
            }
        }
    },

    setData : function indexBufferSetDataFn(data, offset, numIndices)
    {
        if (offset === undefined)
        {
            offset = 0;
        }
        if (numIndices === undefined)
        {
            numIndices = this.numIndices;
        }

        var gd = this.gd;
        var gl = gd.gl;

        var bufferData;
        var format = this.format;
        if (format === gl.UNSIGNED_BYTE)
        {
            if (data instanceof Uint8Array)
            {
                bufferData = data;
            }
            else
            {
                bufferData = new Uint8Array(data);
            }
        }
        else if (format === gl.UNSIGNED_SHORT)
        {
            if (data instanceof Uint16Array)
            {
                bufferData = data;
            }
            else
            {
                bufferData = new Uint16Array(data);
            }
            offset *= 2;
        }
        else if (format === gl.UNSIGNED_INT)
        {
            if (data instanceof Uint32Array)
            {
                bufferData = data;
            }
            else
            {
                bufferData = new Uint32Array(data);
            }
            offset *= 4;
        }
        data = undefined;

        if (numIndices < bufferData.length)
        {
            bufferData = bufferData.subarray(0, numIndices);
        }

        gd.setIndexBuffer(this);

        if (numIndices < this.numIndices)
        {
            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, offset, bufferData);
        }
        else
        {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, bufferData, this.usage);
        }
    },

    destroy : function indexBufferDestroyFn()
    {
        var gd = this.gd;
        if (gd)
        {
            var glBuffer = this.glBuffer;
            if (glBuffer)
            {
                var gl = gd.gl;
                if (gl)
                {
                    gd.unsetIndexBuffer(this);
                    gl.deleteBuffer(glBuffer);
                }
                delete this.glBuffer;
            }

            delete this.gd;
        }
    }
};

// Constructor function
WebGLIndexBuffer.create = function webGLIndexBufferCreateFn(gd, params)
{
    var gl = gd.gl;

    var ib = new WebGLIndexBuffer();
    ib.gd = gd;

    var numIndices = params.numIndices;
    ib.numIndices = numIndices;

    var format = params.format;
    if (typeof format === "string")
    {
        format = gd['INDEXFORMAT_' + format];
    }
    ib.format = format;

    var stride;
    if (format === gl.UNSIGNED_BYTE)
    {
        stride = 1;
    }
    else if (format === gl.UNSIGNED_SHORT)
    {
        stride = 2;
    }
    else //if (format === gl.UNSIGNED_INT)
    {
        stride = 4;
    }
    ib.stride = stride;

    /*jshint sub: true*/
    // Avoid dot notation lookup to prevent Google Closure complaining about transient being a keyword
    ib['transient'] = (params['transient'] || false);
    ib.dynamic = (params.dynamic || ib['transient']);
    ib.usage = (ib['transient'] ? gl.STREAM_DRAW : (ib.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW));
    /*jshint sub: false*/

    ib.glBuffer = gl.createBuffer();

    if (params.data)
    {
        ib.setData(params.data, 0, numIndices);
    }
    else
    {
        gd.setIndexBuffer(ib);

        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (numIndices * stride), ib.usage);
    }

    return ib;
};


//
// WebGLSemantics
//
function WebGLSemantics() {}
WebGLSemantics.prototype =
{
    version : 1
};

// Constructor function
WebGLSemantics.create = function webGLSemanticsCreateFn(gd, attributes)
{
    var semantics = new WebGLSemantics();

    var numAttributes = attributes.length;
    semantics.length = numAttributes;
    for (var i = 0; i < numAttributes; i += 1)
    {
        var attribute = attributes[i];
        if (typeof attribute === "string")
        {
            semantics[i] = gd['SEMANTIC_' + attribute];
        }
        else
        {
            semantics[i] = attribute;
        }
    }

    return semantics;
};


//
// WebGLVertexBuffer
//
function WebGLVertexBuffer() {}
WebGLVertexBuffer.prototype =
{
    version : 1,

    map : function vertexBufferMapFn(offset, numVertices)
    {
        if (offset === undefined)
        {
            offset = 0;
        }
        if (numVertices === undefined)
        {
            numVertices = this.numVertices;
        }

        var gd = this.gd;
        var gl = gd.gl;

        var numValuesPerVertex = this.stride;
        var attributes = this.attributes;
        var numAttributes = attributes.length;

        var data, writer;
        var numValues = 0;

        if (this.hasSingleFormat)
        {
            var maxNumValues = (numVertices * numValuesPerVertex);
            var format = attributes[0].format;

            if (format === gl.BYTE)
            {
                data = new Int8Array(maxNumValues);
            }
            else if (format === gl.UNSIGNED_BYTE)
            {
                data = new Uint8Array(maxNumValues);
            }
            else if (format === gl.SHORT)
            {
                data = new Int16Array(maxNumValues);
            }
            else if (format === gl.UNSIGNED_SHORT)
            {
                data = new Uint16Array(maxNumValues);
            }
            else if (format === gl.INT)
            {
                data = new Int32Array(maxNumValues);
            }
            else if (format === gl.UNSIGNED_INT)
            {
                data = new Uint32Array(maxNumValues);
            }
            else if (format === gl.FLOAT)
            {
                data = new Float32Array(maxNumValues);
            }

            writer = function vertexBufferWriterSingleFn()
            {
                var numArguments = arguments.length;
                var currentArgument = 0;
                for (var a = 0; a < numAttributes; a += 1)
                {
                    var attribute = attributes[a];
                    var numComponents = attribute.numComponents;
                    var currentComponent = 0, j;
                    do
                    {
                        if (currentArgument < numArguments)
                        {
                            var value = arguments[currentArgument];
                            currentArgument += 1;
                            if (typeof value === "number")
                            {
                                if (attribute.normalized)
                                {
                                    value *= attribute.normalizationScale;
                                }
                                data[numValues] = value;
                                numValues += 1;
                                currentComponent += 1;
                            }
                            else if (currentComponent === 0)
                            {
                                var numSubArguments = value.length;
                                if (numSubArguments > numComponents)
                                {
                                    numSubArguments = numComponents;
                                }
                                if (attribute.normalized)
                                {
                                    var scale = attribute.normalizationScale;
                                    for (j = 0; j < numSubArguments; j += 1)
                                    {
                                        data[numValues] = (value[j] * scale);
                                        numValues += 1;
                                        currentComponent += 1;
                                    }
                                }
                                else
                                {
                                    for (j = 0; j < numSubArguments; j += 1)
                                    {
                                        data[numValues] = value[j];
                                        numValues += 1;
                                        currentComponent += 1;
                                    }
                                }
                                while (currentComponent < numComponents)
                                {
                                    // No need to clear to zeros
                                    numValues += 1;
                                    currentComponent += 1;
                                }
                                break;
                            }
                            else
                            {
                                TurbulenzEngine.callOnError(
                                    'Missing values for attribute ' + a);
                                return null;
                            }
                        }
                        else
                        {
                            // No need to clear to zeros
                            numValues += 1;
                            currentComponent += 1;
                        }
                    }
                    while (currentComponent < numComponents);
                }
            };
        }
        else
        {
            var destOffset = 0;
            var bufferSize = (numVertices * this.strideInBytes);

            data = new ArrayBuffer(bufferSize);

            if (typeof DataView !== 'undefined' && 'setFloat32' in DataView.prototype)
            {
                var dataView = new DataView(data);

                writer = function vertexBufferWriterDataViewFn()
                {
                    var numArguments = arguments.length;
                    var currentArgument = 0;
                    for (var a = 0; a < numAttributes; a += 1)
                    {
                        var attribute = attributes[a];
                        var numComponents = attribute.numComponents;
                        var setter = attribute.typedSetter;
                        var componentStride = attribute.componentStride;
                        var currentComponent = 0, j;
                        do
                        {
                            if (currentArgument < numArguments)
                            {
                                var value = arguments[currentArgument];
                                currentArgument += 1;
                                if (typeof value === "number")
                                {
                                    if (attribute.normalized)
                                    {
                                        value *= attribute.normalizationScale;
                                    }
                                    setter.call(dataView, destOffset, value, true);
                                    destOffset += componentStride;
                                    currentComponent += 1;
                                    numValues += 1;
                                }
                                else if (currentComponent === 0)
                                {
                                    var numSubArguments = value.length;
                                    if (numSubArguments > numComponents)
                                    {
                                        numSubArguments = numComponents;
                                    }
                                    if (attribute.normalized)
                                    {
                                        var scale = attribute.normalizationScale;
                                        for (j = 0; j < numSubArguments; j += 1)
                                        {
                                            setter.call(dataView, destOffset, (value[j] * scale), true);
                                            destOffset += componentStride;
                                            currentComponent += 1;
                                            numValues += 1;
                                        }
                                    }
                                    else
                                    {
                                        for (j = 0; j < numSubArguments; j += 1)
                                        {
                                            setter.call(dataView, destOffset, value[j], true);
                                            destOffset += componentStride;
                                            currentComponent += 1;
                                            numValues += 1;
                                        }
                                    }
                                    while (currentComponent < numComponents)
                                    {
                                        // No need to clear to zeros
                                        numValues += 1;
                                        currentComponent += 1;
                                    }
                                    break;
                                }
                                else
                                {
                                    TurbulenzEngine.callOnError(
                                        'Missing values for attribute ' + a);
                                    return null;
                                }
                            }
                            else
                            {
                                // No need to clear to zeros
                                numValues += 1;
                                currentComponent += 1;
                            }
                        }
                        while (currentComponent < numComponents);
                    }
                };
            }
            else
            {
                writer = function vertexBufferWriterMultiFn()
                {
                    var numArguments = arguments.length;
                    var currentArgument = 0;
                    var dest;
                    for (var a = 0; a < numAttributes; a += 1)
                    {
                        var attribute = attributes[a];
                        var numComponents = attribute.numComponents;
                        dest = new attribute.typedArray(data, destOffset, numComponents);
                        destOffset += attribute.stride;

                        var currentComponent = 0, j;
                        do
                        {
                            if (currentArgument < numArguments)
                            {
                                var value = arguments[currentArgument];
                                currentArgument += 1;
                                if (typeof value === "number")
                                {
                                    if (attribute.normalized)
                                    {
                                        value *= attribute.normalizationScale;
                                    }
                                    dest[currentComponent] = value;
                                    currentComponent += 1;
                                    numValues += 1;
                                }
                                else if (currentComponent === 0)
                                {
                                    var numSubArguments = value.length;
                                    if (numSubArguments > numComponents)
                                    {
                                        numSubArguments = numComponents;
                                    }
                                    if (attribute.normalized)
                                    {
                                        var scale = attribute.normalizationScale;
                                        for (j = 0; j < numSubArguments; j += 1)
                                        {
                                            dest[currentComponent] = (value[j] * scale);
                                            currentComponent += 1;
                                            numValues += 1;
                                        }
                                    }
                                    else
                                    {
                                        for (j = 0; j < numSubArguments; j += 1)
                                        {
                                            dest[currentComponent] = value[j];
                                            currentComponent += 1;
                                            numValues += 1;
                                        }
                                    }
                                    while (currentComponent < numComponents)
                                    {
                                        // No need to clear to zeros
                                        currentComponent += 1;
                                        numValues += 1;
                                    }
                                    break;
                                }
                                else
                                {
                                    TurbulenzEngine.callOnError(
                                        'Missing values for attribute ' + a);
                                    return null;
                                }
                            }
                            else
                            {
                                // No need to clear to zeros
                                currentComponent += 1;
                                numValues += 1;
                            }
                        }
                        while (currentComponent < numComponents);
                    }
                };
            }
        }

        writer.data = data;
        writer.offset = offset;
        writer.getNumWrittenVertices = function getNumWrittenVerticesFn()
        {
            return Math.floor(numValues / numValuesPerVertex);
        };
        writer.getNumWrittenValues = function getNumWrittenValuesFn()
        {
            return numValues;
        };
        writer.write = writer;
        return writer;
    },

    unmap : function vertexBufferUnmapFn(writer)
    {
        if (writer)
        {
            var data = writer.data;
            delete writer.data;

            delete writer.write;

            var numVertices = writer.getNumWrittenVertices();
            if (!numVertices)
            {
                return;
            }

            var offset = writer.offset;

            var stride = this.strideInBytes;

            if (this.hasSingleFormat)
            {
                var numValues = writer.getNumWrittenValues();
                if (numValues < data.length)
                {
                    data = data.subarray(0, numValues);
                }
            }
            else
            {
                var numBytes = (numVertices * stride);
                if (numBytes < data.byteLength)
                {
                    data = data.slice(0, numBytes);
                }
            }

            var gd = this.gd;
            var gl = gd.gl;

            gd.bindVertexBuffer(this.glBuffer);

            if (numVertices < this.numVertices)
            {
                gl.bufferSubData(gl.ARRAY_BUFFER, (offset * stride), data);
            }
            else
            {
                gl.bufferData(gl.ARRAY_BUFFER, data, this.usage);
            }
        }
    },

    setData : function vertexBufferSetDataFn(data, offset, numVertices)
    {
        if (offset === undefined)
        {
            offset = 0;
        }
        if (numVertices === undefined)
        {
            numVertices = this.numVertices;
        }

        var gd = this.gd;
        var gl = gd.gl;
        var strideInBytes = this.strideInBytes;

        // Fast path for ArrayBuffer data

        if (data.constructor === ArrayBuffer)
        {
            gd.bindVertexBuffer(this.glBuffer);

            if (numVertices < this.numVertices)
            {
                gl.bufferSubData(gl.ARRAY_BUFFER, (offset * strideInBytes), data);
            }
            else
            {
                gl.bufferData(gl.ARRAY_BUFFER, data, this.usage);
            }
            return;
        }

        var attributes = this.attributes;
        var numAttributes = this.numAttributes;
        var attribute, format, bufferData, TypedArrayConstructor;

        if (this.hasSingleFormat)
        {
            attribute = attributes[0];
            format = attribute.format;

            if (format === gl.BYTE)
            {
                if (!(data instanceof Int8Array))
                {
                    TypedArrayConstructor = Int8Array;
                }
            }
            else if (format === gl.UNSIGNED_BYTE)
            {
                if (!(data instanceof Uint8Array))
                {
                    TypedArrayConstructor = Uint8Array;
                }
            }
            else if (format === gl.SHORT)
            {
                if (!(data instanceof Int16Array))
                {
                    TypedArrayConstructor = Int16Array;
                }
            }
            else if (format === gl.UNSIGNED_SHORT)
            {
                if (!(data instanceof Uint16Array))
                {
                    TypedArrayConstructor = Uint16Array;
                }
            }
            else if (format === gl.INT)
            {
                if (!(data instanceof Int32Array))
                {
                    TypedArrayConstructor = Int32Array;
                }
            }
            else if (format === gl.UNSIGNED_INT)
            {
                if (!(data instanceof Uint32Array))
                {
                    TypedArrayConstructor = Uint32Array;
                }
            }
            else if (format === gl.FLOAT)
            {
                if (!(data instanceof Float32Array))
                {
                    TypedArrayConstructor = Float32Array;
                }
            }

            var numValuesPerVertex = this.stride;
            var numValues = (numVertices * numValuesPerVertex);

            if (TypedArrayConstructor)
            {
                // Data has to be put into a Typed Array and
                // potentially normalized.

                if (attribute.normalized)
                {
                    data = this.scaleValues(data, attribute.normalizationScale, numValues);
                }
                bufferData = new TypedArrayConstructor(data);
                if (numValues < bufferData.length)
                {
                    bufferData = bufferData.subarray(0, numValues);
                }
            }
            else
            {
                bufferData = data;
            }

            if (numValues < data.length)
            {
                bufferData = bufferData.subarray(0, numValues);
            }
        }
        else
        {
            var bufferSize = (numVertices * strideInBytes);

            bufferData = new ArrayBuffer(bufferSize);

            var srcOffset = 0, destOffset = 0, v, c, a, numComponents, componentStride, scale;
            if (typeof DataView !== 'undefined' && 'setFloat32' in DataView.prototype)
            {
                var dataView = new DataView(bufferData);

                for (v = 0; v < numVertices; v += 1)
                {
                    for (a = 0; a < numAttributes; a += 1)
                    {
                        attribute = attributes[a];
                        numComponents = attribute.numComponents;
                        componentStride = attribute.componentStride;
                        var setter = attribute.typedSetter;
                        if (attribute.normalized)
                        {
                            scale = attribute.normalizationScale;
                            for (c = 0; c < numComponents; c += 1)
                            {
                                setter.call(dataView, destOffset, (data[srcOffset] * scale), true);
                                destOffset += componentStride;
                                srcOffset += 1;
                            }
                        }
                        else
                        {
                            for (c = 0; c < numComponents; c += 1)
                            {
                                setter.call(dataView, destOffset, data[srcOffset], true);
                                destOffset += componentStride;
                                srcOffset += 1;
                            }
                        }
                    }
                }
            }
            else
            {
                for (v = 0; v < numVertices; v += 1)
                {
                    for (a = 0; a < numAttributes; a += 1)
                    {
                        attribute = attributes[a];
                        numComponents = attribute.numComponents;
                        var dest = new attribute.typedArray(bufferData, destOffset, numComponents);
                        destOffset += attribute.stride;
                        if (attribute.normalized)
                        {
                            scale = attribute.normalizationScale;
                            for (c = 0; c < numComponents; c += 1)
                            {
                                dest[c] = (data[srcOffset] * scale);
                                srcOffset += 1;
                            }
                        }
                        else
                        {
                            for (c = 0; c < numComponents; c += 1)
                            {
                                dest[c] = data[srcOffset];
                                srcOffset += 1;
                            }
                        }
                    }
                }
            }
        }
        data = undefined;

        gd.bindVertexBuffer(this.glBuffer);

        if (numVertices < this.numVertices)
        {
            gl.bufferSubData(gl.ARRAY_BUFFER, (offset * strideInBytes), bufferData);
        }
        else
        {
            gl.bufferData(gl.ARRAY_BUFFER, bufferData, this.usage);
        }
    },

    // Internal
    scaleValues : function scaleValuesFn(values, scale, numValues)
    {
        if (numValues === undefined)
        {
            numValues = values.length;
        }
        var scaledValues = new values.constructor(numValues);
        for (var n = 0; n < numValues; n += 1)
        {
            scaledValues[n] = (values[n] * scale);
        }
        return scaledValues;
    },

    bindAttributes : function bindAttributesFn(numAttributes, attributes, offset)
    {
        var gd = this.gd;
        var gl = gd.gl;
        var vertexAttributes = this.attributes;
        var stride = this.strideInBytes;
        var attributeMask = 0;
        /*jshint bitwise: false*/
        for (var n = 0; n < numAttributes; n += 1)
        {
            var vertexAttribute = vertexAttributes[n];
            var attribute = attributes[n];

            attributeMask |= (1 << attribute);

            gl.vertexAttribPointer(attribute,
                                   vertexAttribute.numComponents,
                                   vertexAttribute.format,
                                   vertexAttribute.normalized,
                                   stride,
                                   offset);

            offset += vertexAttribute.stride;
        }
        /*jshint bitwise: true*/
        return attributeMask;
    },

    setAttributes : function setAttributesFn(attributes)
    {
        var gd = this.gd;

        var numAttributes = attributes.length;
        this.numAttributes = numAttributes;

        this.attributes = [];
        var stride = 0, numValuesPerVertex = 0, hasSingleFormat = true;

        for (var i = 0; i < numAttributes; i += 1)
        {
            var format = attributes[i];
            if (typeof format === "string")
            {
                format = gd['VERTEXFORMAT_' + format];
            }
            this.attributes[i] = format;
            stride += format.stride;
            numValuesPerVertex += format.numComponents;

            if (hasSingleFormat && i)
            {
                if (format.format !== this.attributes[i - 1].format)
                {
                    hasSingleFormat = false;
                }
            }
        }
        this.strideInBytes = stride;
        this.stride = numValuesPerVertex;
        this.hasSingleFormat = hasSingleFormat;

        return stride;
    },

    resize : function resizeFn(size)
    {
        if (size !== (this.strideInBytes * this.numVertices))
        {
            var gd = this.gd;
            var gl = gd.gl;

            gd.bindVertexBuffer(this.glBuffer);

            var bufferType = gl.ARRAY_BUFFER;
            gl.bufferData(bufferType, size, this.usage);

            var bufferSize = gl.getBufferParameter(bufferType, gl.BUFFER_SIZE);
            this.numVertices = Math.floor(bufferSize / this.strideInBytes);
        }
    },

    destroy : function vertexBufferDestroyFn()
    {
        var gd = this.gd;
        if (gd)
        {
            var glBuffer = this.glBuffer;
            if (glBuffer)
            {
                var gl = gd.gl;
                if (gl)
                {
                    gd.unbindVertexBuffer(glBuffer);
                    gl.deleteBuffer(glBuffer);
                }
                delete this.glBuffer;
            }

            delete this.gd;
        }
    }
};

// Constructor function
WebGLVertexBuffer.create = function webGLVertexBufferCreateFn(gd, params)
{
    var gl = gd.gl;

    var vb = new WebGLVertexBuffer();
    vb.gd = gd;

    var numVertices = params.numVertices;
    vb.numVertices = numVertices;

    var strideInBytes = vb.setAttributes(params.attributes);

    /*jshint sub: true*/
    // Avoid dot notation lookup to prevent Google Closure complaining about transient being a keyword
    vb['transient'] = (params['transient'] || false);
    vb.dynamic = (params.dynamic || vb['transient']);
    vb.usage = (vb['transient'] ? gl.STREAM_DRAW : (vb.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW));
    /*jshint sub: false*/
    vb.glBuffer = gl.createBuffer();

    var bufferSize = (numVertices * strideInBytes);

    if (params.data)
    {
        vb.setData(params.data, 0, numVertices);
    }
    else
    {
        gd.bindVertexBuffer(vb.glBuffer);

        gl.bufferData(gl.ARRAY_BUFFER, bufferSize, vb.usage);
    }

    return vb;
};


//
// WebGLPass
//
function WebGLPass() {}
WebGLPass.prototype =
{
    version : 1,

    updateParametersData : function updateParametersDataFn(gd)
    {
        var gl = gd.gl;

        this.dirty = false;

        // Set parameters
        var hasProperty = Object.prototype.hasOwnProperty;
        var parameters = this.parameters;
        for (var p in parameters)
        {
            if (hasProperty.call(parameters, p))
            {
                var parameter = parameters[p];
                if (parameter.dirty)
                {
                    parameter.dirty = 0;

                    var paramInfo = parameter.info;
                    var location = parameter.location;
                    if (paramInfo &&
                        null !== location)
                    {
                        var parameterValues = paramInfo.values;
                        var sampler = parameter.sampler;
                        if (sampler)
                        {
                            gd.setTexture(parameter.textureUnit, parameterValues, sampler);
                        }
                        else if (1 < paramInfo.numValues)
                        {
                            parameter.setter.call(gl, location, parameterValues);
                        }
                        else //if (1 === paramInfo.numValues)
                        {
                            parameter.setter.call(gl, location, parameterValues[0]);
                        }
                    }
                }
            }
        }
    },

    initializeParameters : function passInitializeParametersFn(gd)
    {
        var gl = gd.gl;

        var glProgram = this.glProgram;

        gd.setProgram(glProgram);

        var passParameters = this.parameters;
        for (var p in passParameters)
        {
            if (passParameters.hasOwnProperty(p))
            {
                var parameter = passParameters[p];

                var paramInfo = parameter.info;
                if (paramInfo)
                {
                    var location = gl.getUniformLocation(glProgram, p);
                    if (null !== location)
                    {
                        parameter.location = location;

                        if (parameter.sampler)
                        {
                            gl.uniform1i(location, parameter.textureUnit);
                        }
                        else
                        {
                            if (1 < paramInfo.numValues)
                            {
                                parameter.setter.call(gl, location, paramInfo.values);
                            }
                            else //if (1 === paramInfo.numValues)
                            {
                                parameter.setter.call(gl, location, paramInfo.values[0]);
                            }
                        }
                    }
                }
            }
        }
    },

    destroy : function passDestroyFn()
    {
        delete this.glProgram;
        delete this.semanticsMask;
        delete this.parameters;

        var states = this.states;
        if (states)
        {
            states.length = 0;
            delete this.states;
        }
    }
};

// Constructor function
WebGLPass.create = function webGLPassCreateFn(gd, shader, params)
{
    var gl = gd.gl;

    var pass = new WebGLPass();

    pass.name = (params.name || null);

    var programs = shader.programs;
    var parameters = shader.parameters;

    var parameterNames = params.parameters;
    var programNames = params.programs;
    var semanticNames = params.semantics;
    var states = params.states;

    var compoundProgramName = programNames.join(':');
    var linkedProgram = shader.linkedPrograms[compoundProgramName];
    var glProgram, semanticsMask, p, s;
    if (linkedProgram === undefined)
    {
        // Create GL program
        glProgram = gl.createProgram();

        var numPrograms = programNames.length;
        for (p = 0; p < numPrograms; p += 1)
        {
            var glShader = programs[programNames[p]];
            if (glShader)
            {
                gl.attachShader(glProgram, glShader);
            }
        }

        /*jshint bitwise: false*/
        var numSemantics = semanticNames.length;
        semanticsMask = 0;
        for (s = 0; s < numSemantics; s += 1)
        {
            var semanticName = semanticNames[s];
            var attribute = gd['SEMANTIC_' + semanticName];
            if (attribute !== undefined)
            {
                semanticsMask |= (1 << attribute);
                gl.bindAttribLocation(glProgram, attribute, ("ATTR" + attribute));
            }
        }
        /*jshint bitwise: true*/

        gl.linkProgram(glProgram);

        shader.linkedPrograms[compoundProgramName] = {
                glProgram : glProgram,
                semanticsMask : semanticsMask
            };
    }
    else
    {
        //console.log('Reused program ' + compoundProgramName);
        glProgram = linkedProgram.glProgram;
        semanticsMask = linkedProgram.semanticsMask;
    }

    pass.glProgram = glProgram;
    pass.semanticsMask = semanticsMask;

    // Set parameters
    var numTextureUnits = 0;
    var passParameters = {};
    pass.parameters = passParameters;
    var numParameters = parameterNames ? parameterNames.length : 0;
    for (p = 0; p < numParameters; p += 1)
    {
        var parameterName = parameterNames[p];

        var parameter = {};
        passParameters[parameterName] = parameter;

        var paramInfo = parameters[parameterName];
        parameter.info = paramInfo;
        if (paramInfo)
        {
            parameter.location = null;
            if (paramInfo.sampler)
            {
                parameter.sampler = paramInfo.sampler;
                parameter.textureUnit = numTextureUnits;
                numTextureUnits += 1;
            }
            else
            {
                parameter.sampler = undefined;
                parameter.textureUnit = undefined;
            }
            parameter.setter = paramInfo.setter;
        }
    }
    pass.numTextureUnits = numTextureUnits;
    pass.numParameters = numParameters;

    function equalRenderStates(defaultValues, values)
    {
        var numDefaultValues = defaultValues.length;
        var n;
        for (n = 0; n < numDefaultValues; n += 1)
        {
            if (defaultValues[n] !== values[n])
            {
                return false;
            }
        }
        return true;
    }

    var hasProperty = Object.prototype.hasOwnProperty;
    var stateHandlers = gd.stateHandlers;
    var passStates = [];
    var passStatesSet = {};
    pass.states = passStates;
    pass.statesSet = passStatesSet;
    for (s in states)
    {
        if (hasProperty.call(states, s))
        {
            var stateHandler = stateHandlers[s];
            if (stateHandler)
            {
                var values = stateHandler.parse(states[s]);
                if (values !== null)
                {
                    if (equalRenderStates(stateHandler.defaultValues, values))
                    {
                        continue;
                    }
                    passStates.push({
                        name: s,
                        set: stateHandler.set,
                        reset: stateHandler.reset,
                        values: values
                    });
                    passStatesSet[s] = true;
                }
                else
                {
                    TurbulenzEngine.callOnError('Unknown value for state ' +
                                                s + ': ' + states[s]);
                }
            }
        }
    }

    return pass;
};


//
// WebGLTechnique
//
function WebGLTechnique() {}
WebGLTechnique.prototype =
{
    version : 1,

    getPass : function getPassFn(id)
    {
        var passes = this.passes;
        var numPasses = passes.length;
        if (typeof id === "string")
        {
            for (var n = 0; n < numPasses; n += 1)
            {
                var pass = passes[n];
                if (pass.name === id)
                {
                    return pass;
                }
            }
        }
        else
        {
            /*jshint bitwise: false*/
            id = (id | 0);
            /*jshint bitwise: true*/
            if (id < numPasses)
            {
                return passes[id];
            }
        }
        return null;
    },

    activate : function activateFn(gd)
    {
        this.device = gd;

        if (!this.initialized)
        {
            this.shader.initialize(gd);
            this.initialize(gd);
        }
    },

    deactivate : function deactivateFn()
    {
        this.device = null;
    },

    checkProperties : function checkPropertiesFn(gd)
    {
        // Check for parameters set directly into the technique...
        var fakeTechniqueParameters = {}, p;
        for (p in this)
        {
            if (p !== 'version' &&
                p !== 'name' &&
                p !== 'passes' &&
                p !== 'numPasses' &&
                p !== 'device' &&
                p !== 'numParameters')
            {
                fakeTechniqueParameters[p] = this[p];
            }
        }

        if (fakeTechniqueParameters)
        {
            var passes = this.passes;
            if (passes.length === 1)
            {
                gd.setParametersImmediate(gd, passes, fakeTechniqueParameters);
            }
            else
            {
                gd.setParametersDeferred(gd, passes, fakeTechniqueParameters);
            }

            var hasProperty = Object.prototype.hasOwnProperty;
            for (p in fakeTechniqueParameters)
            {
                if (hasProperty.call(fakeTechniqueParameters, p))
                {
                    delete this[p];
                }
            }
        }
    },

    initialize : function techniqueInitializeFn(gd)
    {
        if (this.initialized)
        {
            return;
        }

        var passes = this.passes;
        if (passes)
        {
            var numPasses = passes.length;
            var n;
            for (n = 0; n < numPasses; n += 1)
            {
                passes[n].initializeParameters(gd);
            }
        }

        if (Object.defineProperty)
        {
            this.initializeParametersSetters(gd);
        }

        this.initialized = true;
    },

    initializeParametersSetters : function initializeParametersSettersFn(gd)
    {
        var gl = gd.gl;

        function make_sampler_setter(pass, parameter) {
            return function (parameterValues) {
                if (this.device)
                {
                    gd.setTexture(parameter.textureUnit, parameterValues, parameter.info.sampler);
                }
                else
                {
                    pass.dirty = true;
                    parameter.dirty = 1;
                    parameter.info.values = parameterValues;
                }
            };
        }

        function make_float_uniform_setter(pass, parameter) {

            var paramInfo = parameter.info;
            var location = parameter.location;

            function setDeferredParameter(parameterValues)
            {
                if (typeof parameterValues !== 'number')
                {
                    var values = paramInfo.values;
                    var numValues = Math.min(paramInfo.numValues, parameterValues.length);
                    for (var v = 0; v < numValues; v += 1)
                    {
                        values[v] = parameterValues[v];
                    }
                    parameter.dirty = Math.max(numValues, (parameter.dirty || 0));
                }
                else
                {
                    paramInfo.values[0] = parameterValues;
                    parameter.dirty = (parameter.dirty || 1);
                }
                pass.dirty = true;
            }

            switch (paramInfo.columns)
            {
            case 1:
                if (1 === paramInfo.numValues)
                {
                    return function (parameterValues)
                    {
                        if (this.device)
                        {
                            gl.uniform1f(location, parameterValues);
                        }
                        else
                        {
                            setDeferredParameter(parameterValues);
                        }
                    };
                }
                return function (parameterValues)
                {
                    if (this.device)
                    {
                        gl.uniform1fv(location, parameterValues);
                    }
                    else
                    {
                        setDeferredParameter(parameterValues);
                    }
                };
            case 2:
                return function (parameterValues)
                {
                    if (this.device)
                    {
                        gl.uniform2fv(location, parameterValues);
                    }
                    else
                    {
                        setDeferredParameter(parameterValues);
                    }
                };
            case 3:
                return function (parameterValues)
                {
                    if (this.device)
                    {
                        gl.uniform3fv(location, parameterValues);
                    }
                    else
                    {
                        setDeferredParameter(parameterValues);
                    }
                };
            case 4:
                return function (parameterValues)
                {
                    if (this.device)
                    {
                        gl.uniform4fv(location, parameterValues);
                    }
                    else
                    {
                        setDeferredParameter(parameterValues);
                    }
                };
            default:
                return null;
            }
        }

        function make_int_uniform_setter(pass, parameter) {
            var paramInfo = parameter.info;
            var location = parameter.location;

            function setDeferredParameter(parameterValues)
            {
                if (typeof parameterValues !== 'number')
                {
                    var values = paramInfo.values;
                    var numValues = Math.min(paramInfo.numValues, parameterValues.length);
                    for (var v = 0; v < numValues; v += 1)
                    {
                        values[v] = parameterValues[v];
                    }
                    parameter.dirty = Math.max(numValues, (parameter.dirty || 0));
                }
                else
                {
                    paramInfo.values[0] = parameterValues;
                    parameter.dirty = (parameter.dirty || 1);
                }
                pass.dirty = true;
            }

            switch (paramInfo.columns)
            {
            case 1:
                if (1 === paramInfo.numValues)
                {
                    return function (parameterValues)
                    {
                        if (this.device)
                        {
                            gl.uniform1i(location, parameterValues);
                        }
                        else
                        {
                            setDeferredParameter(parameterValues);
                        }
                    };
                }
                return function (parameterValues)
                {
                    if (this.device)
                    {
                        gl.uniform1iv(location, parameterValues);
                    }
                    else
                    {
                        setDeferredParameter(parameterValues);
                    }
                };
            case 2:
                return function (parameterValues)
                {
                    if (this.device)
                    {
                        gl.uniform2iv(location, parameterValues);
                    }
                    else
                    {
                        setDeferredParameter(parameterValues);
                    }
                };
            case 3:
                return function (parameterValues)
                {
                    if (this.device)
                    {
                        gl.uniform3iv(location, parameterValues);
                    }
                    else
                    {
                        setDeferredParameter(parameterValues);
                    }
                };
            case 4:
                return function (parameterValues)
                {
                    if (this.device)
                    {
                        gl.uniform4iv(location, parameterValues);
                    }
                    else
                    {
                        setDeferredParameter(parameterValues);
                    }
                };
            default:
                return null;
            }
        }

        var passes = this.passes;
        var numPasses = passes.length;
        var pass, parameters, p, parameter, paramInfo, setter;
        if (numPasses === 1)
        {
            pass = passes[0];
            parameters = pass.parameters;
            for (p in parameters)
            {
                if (parameters.hasOwnProperty(p))
                {
                    parameter = parameters[p];
                    paramInfo = parameter.info;
                    if (paramInfo)
                    {
                        if (undefined !== parameter.location)
                        {
                            if (parameter.sampler)
                            {
                                setter = make_sampler_setter(pass, parameter);
                            }
                            else
                            {
                                if (paramInfo.type === 'float')
                                {
                                    setter = make_float_uniform_setter(pass, parameter);
                                }
                                else
                                {
                                    setter = make_int_uniform_setter(pass, parameter);
                                }
                            }

                            Object.defineProperty(this, p, {
                                    set : setter,
                                    enumerable : false,
                                    configurable : false
                                });
                        }
                    }
                }
            }

            this.checkProperties = function ()
            {
            };
        }
        else
        {
            Object.defineProperty(this, 'device', {
                    writable : true,
                    enumerable : false,
                    configurable : false
                });

            Object.defineProperty(this, 'version', {
                    writable : false,
                    enumerable : false,
                    configurable : false
                });

            Object.defineProperty(this, 'name', {
                    writable : false,
                    enumerable : false,
                    configurable : false
                });

            Object.defineProperty(this, 'passes', {
                    writable : false,
                    enumerable : false,
                    configurable : false
                });

            Object.defineProperty(this, 'numParameters', {
                    writable : false,
                    enumerable : false,
                    configurable : false
                });
        }
    },

    destroy : function techniqueDestroyFn()
    {
        var passes = this.passes;
        if (passes)
        {
            var numPasses = passes.length;
            var n;

            for (n = 0; n < numPasses; n += 1)
            {
                passes[n].destroy();
            }

            passes.length = 0;

            delete this.passes;
        }

        delete this.device;
    }
};

// Constructor function
WebGLTechnique.create = function webGLTechniqueCreateFn(gd, shader, name, passes)
{
    var technique = new WebGLTechnique();

    technique.initialized = false;
    technique.shader = shader;
    technique.name = name;

    var numPasses = passes.length, n;
    var numParameters = 0;
    technique.passes = [];
    technique.numPasses = numPasses;
    for (n = 0; n < numPasses; n += 1)
    {
        var passParams = passes[n];
        if (passParams.parameters)
        {
            numParameters += passParams.parameters.length;
        }
        technique.passes[n] = WebGLPass.create(gd, shader, passParams);
    }

    technique.numParameters = numParameters;

    technique.device = null;


    return technique;
};

//
// WebGLShader
//
function WebGLShader() {}
WebGLShader.prototype =
{
    version : 1,

    getTechnique : function getTechniqueFn(name)
    {
        if (typeof name === "string")
        {
            return this.techniques[name];
        }
        else
        {
            var techniques = this.techniques;
            for (var t in techniques)
            {
                if (techniques.hasOwnProperty(t))
                {
                    if (name === 0)
                    {
                        return techniques[t];
                    }
                    else
                    {
                        name -= 1;
                    }
                }
            }
            return null;
        }
    },

    getParameter : function getParameterFn(name)
    {
        if (typeof name === "string")
        {
            return this.parameters[name];
        }
        else
        {
            /*jshint bitwise: false*/
            name = (name | 0);
            /*jshint bitwise: true*/
            var parameters = this.parameters;
            for (var p in parameters)
            {
                if (parameters.hasOwnProperty(p))
                {
                    if (name === 0)
                    {
                        return parameters[p];
                    }
                    else
                    {
                        name -= 1;
                    }
                }
            }
            return null;
        }
    },

    initialize : function shaderInitializeFn(gd)
    {
        if (this.initialized)
        {
            return;
        }

        var gl = gd.gl;
        var p;

        // Check copmpiled programs as late as possible
        var shaderPrograms = this.programs;
        for (p in shaderPrograms)
        {
            if (shaderPrograms.hasOwnProperty(p))
            {
                var compiledProgram = shaderPrograms[p];
                var compiled = gl.getShaderParameter(compiledProgram, gl.COMPILE_STATUS);
                if (!compiled)
                {
                    var compilerInfo = gl.getShaderInfoLog(compiledProgram);
                    TurbulenzEngine.callOnError(
                        'Program "' + p + '" failed to compile: ' + compilerInfo);
                }
            }
        }

        // Check linked programs as late as possible
        var linkedPrograms = this.linkedPrograms;
        for (p in linkedPrograms)
        {
            if (linkedPrograms.hasOwnProperty(p))
            {
                var linkedProgram = linkedPrograms[p];
                var glProgram = linkedProgram.glProgram;
                if (glProgram)
                {
                    var linked = gl.getProgramParameter(glProgram, gl.LINK_STATUS);
                    if (!linked)
                    {
                        var linkerInfo = gl.getProgramInfoLog(glProgram);
                        TurbulenzEngine.callOnError(
                            'Program "' + p + '" failed to link: ' + linkerInfo);
                    }
                }
            }
        }

        this.initialized = true;
    },

    destroy : function shaderDestroyFn()
    {
        var gd = this.gd;
        if (gd)
        {
            var gl = gd.gl;
            var p;

            var techniques = this.techniques;
            if (techniques)
            {
                for (p in techniques)
                {
                    if (techniques.hasOwnProperty(p))
                    {
                        techniques[p].destroy();
                    }
                }
                delete this.techniques;
            }

            var linkedPrograms = this.linkedPrograms;
            if (linkedPrograms)
            {
                if (gl)
                {
                    for (p in linkedPrograms)
                    {
                        if (linkedPrograms.hasOwnProperty(p))
                        {
                            var linkedProgram = linkedPrograms[p];
                            var glProgram = linkedProgram.glProgram;
                            if (glProgram)
                            {
                                gl.deleteProgram(glProgram);
                                delete linkedProgram.glProgram;
                            }
                        }
                    }
                }
                delete this.linkedPrograms;
            }

            var programs = this.programs;
            if (programs)
            {
                if (gl)
                {
                    for (p in programs)
                    {
                        if (programs.hasOwnProperty(p))
                        {
                            gl.deleteShader(programs[p]);
                        }
                    }
                }
                delete this.programs;
            }

            delete this.samplers;
            delete this.parameters;
            delete this.gd;
        }
    }
};

// Constructor function
WebGLShader.create = function webGLShaderCreateFn(gd, params)
{
    var gl = gd.gl;

    var shader = new WebGLShader();

    shader.initialized = false;

    var techniques = params.techniques;
    var parameters = params.parameters;
    var programs = params.programs;
    var samplers = params.samplers;
    var p;

    shader.gd = gd;
    shader.name = params.name;

    // Compile programs as early as possible
    var shaderPrograms = {};
    shader.programs = shaderPrograms;
    for (p in programs)
    {
        if (programs.hasOwnProperty(p))
        {
            var program = programs[p];

            var glShaderType;
            if (program.type === 'fragment')
            {
                glShaderType = gl.FRAGMENT_SHADER;
            }
            else if (program.type === 'vertex')
            {
                glShaderType = gl.VERTEX_SHADER;
            }
            var glShader = gl.createShader(glShaderType);

            gl.shaderSource(glShader, program.code);

            gl.compileShader(glShader);

            shaderPrograms[p] = glShader;
        }
    }

    var linkedPrograms = {};
    shader.linkedPrograms = linkedPrograms;

    // Samplers
    var defaultSampler = gd.DEFAULT_SAMPLER;
    var maxAnisotropy = gd.maxAnisotropy;

    shader.samplers = {};
    var sampler;
    for (p in samplers)
    {
        if (samplers.hasOwnProperty(p))
        {
            sampler = samplers[p];

            var samplerMaxAnisotropy = sampler.MaxAnisotropy;
            if (samplerMaxAnisotropy)
            {
                if (samplerMaxAnisotropy > maxAnisotropy)
                {
                    samplerMaxAnisotropy = maxAnisotropy;
                }
            }
            else
            {
                samplerMaxAnisotropy = defaultSampler.maxAnisotropy;
            }

            sampler = {
                minFilter : (sampler.MinFilter || defaultSampler.minFilter),
                magFilter : (sampler.MagFilter || defaultSampler.magFilter),
                wrapS : (sampler.WrapS || defaultSampler.wrapS),
                wrapT : (sampler.WrapT || defaultSampler.wrapT),
                wrapR : (sampler.WrapR || defaultSampler.wrapR),
                maxAnisotropy : samplerMaxAnisotropy
            };
            if (sampler.wrapS === 0x2900)
            {
                sampler.wrapS = gl.CLAMP_TO_EDGE;
            }
            if (sampler.wrapT === 0x2900)
            {
                sampler.wrapT = gl.CLAMP_TO_EDGE;
            }
            if (sampler.wrapR === 0x2900)
            {
                sampler.wrapR = gl.CLAMP_TO_EDGE;
            }
            shader.samplers[p] = gd.createSampler(sampler);
        }
    }

    // Parameters
    var numParameters = 0;
    shader.parameters = {};
    for (p in parameters)
    {
        if (parameters.hasOwnProperty(p))
        {
            var parameter = parameters[p];
            if (!parameter.columns)
            {
                parameter.columns = 1;
            }
            if (!parameter.rows)
            {
                parameter.rows = 1;
            }
            parameter.numValues = (parameter.columns * parameter.rows);
            var parameterType = parameter.type;
            if (parameterType === "float" ||
                parameterType === "int" ||
                parameterType === "bool")
            {
                var parameterValues = parameter.values;
                if (parameterValues)
                {
                    if (parameterType === "float")
                    {
                        parameter.values = new Float32Array(parameterValues);
                    }
                    else
                    {
                        parameter.values = new Int32Array(parameterValues);
                    }
                }
                else
                {
                    if (parameterType === "float")
                    {
                        parameter.values = new Float32Array(parameter.numValues);
                    }
                    else
                    {
                        parameter.values = new Int32Array(parameter.numValues);
                    }
                }

                if (parameterType === 'float')
                {
                    switch (parameter.columns)
                    {
                    case 1:
                        if (1 === parameter.numValues)
                        {
                            parameter.setter = gl.uniform1f;
                        }
                        else
                        {
                            parameter.setter = gl.uniform1fv;
                        }
                        break;
                    case 2:
                        parameter.setter = gl.uniform2fv;
                        break;
                    case 3:
                        parameter.setter = gl.uniform3fv;
                        break;
                    case 4:
                        parameter.setter = gl.uniform4fv;
                        break;
                    default:
                        break;
                    }
                }
                else
                {
                    switch (parameter.columns)
                    {
                    case 1:
                        if (1 === parameter.numValues)
                        {
                            parameter.setter = gl.uniform1i;
                        }
                        else
                        {
                            parameter.setter = gl.uniform1iv;
                        }
                        break;
                    case 2:
                        parameter.setter = gl.uniform2iv;
                        break;
                    case 3:
                        parameter.setter = gl.uniform3iv;
                        break;
                    case 4:
                        parameter.setter = gl.uniform4iv;
                        break;
                    default:
                        break;
                    }
                }
            }
            else // Sampler
            {
                sampler = shader.samplers[p];
                if (!sampler)
                {
                    sampler = defaultSampler;
                    shader.samplers[p] = defaultSampler;
                }
                parameter.sampler = sampler;
                parameter.values = null;
            }

            parameter.name = p;

            shader.parameters[p] = parameter;
            numParameters += 1;
        }
    }
    shader.numParameters = numParameters;

    // Techniques and passes
    var shaderTechniques = {};
    var numTechniques = 0;
    shader.techniques = shaderTechniques;
    for (p in techniques)
    {
        if (techniques.hasOwnProperty(p))
        {
            shaderTechniques[p] = WebGLTechnique.create(gd, shader, p, techniques[p]);
            numTechniques += 1;
        }
    }
    shader.numTechniques = numTechniques;

    return shader;
};

//
// WebGLTechniqueParameters
//
function WebGLTechniqueParameters() {}

// Constructor function
WebGLTechniqueParameters.create = function WebGLTechniqueParametersFn(params)
{
    var techniqueParameters = new WebGLTechniqueParameters();

    if (params)
    {
        for (var p in params)
        {
            if (params.hasOwnProperty(p))
            {
                techniqueParameters[p] = params[p];
            }
        }
    }

    return techniqueParameters;
};

//
// WebGLTechniqueParameterBuffer
//
function techniqueParameterBufferSetData(data, offset, numValues)
{
    for (var n = 0, o = offset; n < numValues; n += 1, o += 1)
    {
        this[o] = data[n];
    }
    return o;
}

function techniqueParameterBufferCreate(params)
{
    if (Float32Array.prototype.map === undefined)
    {
        Float32Array.prototype.map = function techniqueParameterBufferMap(offset, numFloats) {
            if (offset === undefined)
            {
                offset = 0;
            }
            var buffer = this;
            if (numFloats === undefined)
            {
                numFloats = this.length;
            }
            function techniqueParameterBufferWriter()
            {
                var numArguments = arguments.length;
                for (var a = 0; a < numArguments; a += 1)
                {
                    var value = arguments[a];
                    if (typeof value === 'number')
                    {
                        buffer[offset] = value;
                        offset += 1;
                    }
                    else
                    {
                        offset = techniqueParameterBufferSetData.call(buffer, value, offset, value.length);
                    }
                }
            }
            return techniqueParameterBufferWriter;
        };

        Float32Array.prototype.unmap = function techniqueParameterBufferUnmap(writer) {
        };
    }

    return new Float32Array(params.numFloats);
}


//
// WebGLDrawParameters
//
function WebGLDrawParameters()
{
    // Streams, TechniqueParameters and Instances are stored as indexed properties
    this.endStreams = 0;
    this.endTechniqueParameters = (16 * 3);
    this.endInstances = ((16 * 3) + 8);
    this.firstIndex = 0;
    this.count = 0;
    this.sortKey = 0;
    this.technique = null;
    this.indexBuffer = null;
    this.primitive = -1;
    this.userData = null;

    // Initialize for 1 Stream, 2 TechniqueParameters and 8 Instances
    this[0] = undefined;
    this[1] = undefined;
    this[2] = undefined;

    this[(16 * 3) + 0] = undefined;
    this[(16 * 3) + 1] = undefined;

    this[((16 * 3) + 8) + 0] = undefined;
    this[((16 * 3) + 8) + 1] = undefined;
    this[((16 * 3) + 8) + 2] = undefined;
    this[((16 * 3) + 8) + 3] = undefined;
    this[((16 * 3) + 8) + 4] = undefined;
    this[((16 * 3) + 8) + 5] = undefined;
    this[((16 * 3) + 8) + 6] = undefined;
    this[((16 * 3) + 8) + 7] = undefined;
}

WebGLDrawParameters.prototype =
{
    version : 1,

    setTechniqueParameters : function setTechniqueParametersFn(indx, techniqueParameters)
    {
        if (indx < 8)
        {
            indx += (16 * 3);

            this[indx] = techniqueParameters;

            var endTechniqueParameters = this.endTechniqueParameters;
            if (techniqueParameters)
            {
                if (endTechniqueParameters <= indx)
                {
                    this.endTechniqueParameters = (indx + 1);
                }
            }
            else
            {
                while ((16 * 3) < endTechniqueParameters &&
                       !this[endTechniqueParameters - 1])
                {
                    endTechniqueParameters -= 1;
                }
                this.endTechniqueParameters = endTechniqueParameters;
            }
        }
    },

    setVertexBuffer : function setVertexBufferFn(indx, vertexBuffer)
    {
        if (indx < 16)
        {
            indx *= 3;

            this[indx] = vertexBuffer;

            var endStreams = this.endStreams;
            if (vertexBuffer)
            {
                if (endStreams <= indx)
                {
                    this.endStreams = (indx + 3);
                }
            }
            else
            {
                while (0 < endStreams &&
                       !this[endStreams - 3])
                {
                    endStreams -= 3;
                }
                this.endStreams = endStreams;
            }
        }
    },

    setSemantics : function setSemanticsFn(indx, semantics)
    {
        if (indx < 16)
        {
            this[(indx * 3) + 1] = semantics;
        }
    },

    setOffset : function setOffsetFn(indx, offset)
    {
        if (indx < 16)
        {
            this[(indx * 3) + 2] = offset;
        }
    },

    getTechniqueParameters : function getTechniqueParametersFn(indx)
    {
        if (indx < 8)
        {
            return this[indx + (16 * 3)];
        }
        else
        {
            return undefined;
        }
    },

    getVertexBuffer : function getVertexBufferFn(indx)
    {
        if (indx < 16)
        {
            return this[(indx * 3) + 0];
        }
        else
        {
            return undefined;
        }
    },

    getSemantics : function getSemanticsFn(indx)
    {
        if (indx < 16)
        {
            return this[(indx * 3) + 1];
        }
        else
        {
            return undefined;
        }
    },

    getOffset : function getOffsetFn(indx)
    {
        if (indx < 16)
        {
            return this[(indx * 3) + 2];
        }
        else
        {
            return undefined;
        }
    },

    addInstance : function drawParametersAddInstanceFn(instanceParameters)
    {
        if (instanceParameters)
        {
            var endInstances = this.endInstances;
            this.endInstances = (endInstances + 1);
            this[endInstances] = instanceParameters;
        }
    },

    removeInstances : function drawParametersRemoveInstancesFn()
    {
        this.endInstances = ((16 * 3) + 8);
    },

    getNumInstances : function drawParametersGetNumInstancesFn()
    {
        return (this.endInstances - ((16 * 3) + 8));
    }
};

// Constructor function
WebGLDrawParameters.create = function webGLDrawParametersFn(params)
{
    return new WebGLDrawParameters();
};


//
// WebGLGraphicsDevice
//
function WebGLGraphicsDevice() {}
WebGLGraphicsDevice.prototype =
{
    version : 1,

    SEMANTIC_POSITION: 0,
    SEMANTIC_POSITION0: 0,
    SEMANTIC_BLENDWEIGHT: 1,
    SEMANTIC_BLENDWEIGHT0: 1,
    SEMANTIC_NORMAL: 2,
    SEMANTIC_NORMAL0: 2,
    SEMANTIC_COLOR: 3,
    SEMANTIC_COLOR0: 3,
    SEMANTIC_COLOR1: 4,
    SEMANTIC_SPECULAR: 4,
    SEMANTIC_FOGCOORD: 5,
    SEMANTIC_TESSFACTOR: 5,
    SEMANTIC_PSIZE0: 6,
    SEMANTIC_BLENDINDICES: 7,
    SEMANTIC_BLENDINDICES0: 7,
    SEMANTIC_TEXCOORD: 8,
    SEMANTIC_TEXCOORD0: 8,
    SEMANTIC_TEXCOORD1: 9,
    SEMANTIC_TEXCOORD2: 10,
    SEMANTIC_TEXCOORD3: 11,
    SEMANTIC_TEXCOORD4: 12,
    SEMANTIC_TEXCOORD5: 13,
    SEMANTIC_TEXCOORD6: 14,
    SEMANTIC_TEXCOORD7: 15,
    SEMANTIC_TANGENT: 14,
    SEMANTIC_TANGENT0: 14,
    SEMANTIC_BINORMAL0: 15,
    SEMANTIC_BINORMAL: 15,
    SEMANTIC_PSIZE: 6,
    SEMANTIC_ATTR0: 0,
    SEMANTIC_ATTR1: 1,
    SEMANTIC_ATTR2: 2,
    SEMANTIC_ATTR3: 3,
    SEMANTIC_ATTR4: 4,
    SEMANTIC_ATTR5: 5,
    SEMANTIC_ATTR6: 6,
    SEMANTIC_ATTR7: 7,
    SEMANTIC_ATTR8: 8,
    SEMANTIC_ATTR9: 9,
    SEMANTIC_ATTR10: 10,
    SEMANTIC_ATTR11: 11,
    SEMANTIC_ATTR12: 12,
    SEMANTIC_ATTR13: 13,
    SEMANTIC_ATTR14: 14,
    SEMANTIC_ATTR15: 15,

    PIXELFORMAT_A8: 0,
    PIXELFORMAT_L8: 1,
    PIXELFORMAT_L8A8: 2,
    PIXELFORMAT_R5G5B5A1: 3,
    PIXELFORMAT_R5G6B5: 4,
    PIXELFORMAT_R8G8B8A8: 5,
    PIXELFORMAT_R8G8B8: 6,
    PIXELFORMAT_D24S8: 7,
    PIXELFORMAT_DXT1: 8,
    PIXELFORMAT_DXT3: 9,
    PIXELFORMAT_DXT5: 10,

    drawIndexed : function drawIndexedFn(primitive, numIndices, first)
    {
        var gl = this.gl;
        var indexBuffer = this.activeIndexBuffer;

        var offset;
        if (first)
        {
            offset = (first * indexBuffer.stride);
        }
        else
        {
            offset = 0;
        }

        var format = indexBuffer.format;

        var attributeMask = this.attributeMask;

        var activeTechnique = this.activeTechnique;
        var passes = activeTechnique.passes;
        var numPasses = passes.length;
        var mask;

        activeTechnique.checkProperties(this);

        /*jshint bitwise: false*/
        if (1 === numPasses)
        {
            mask = (passes[0].semanticsMask & attributeMask);
            if (mask !== this.clientStateMask)
            {
                this.enableClientState(mask);
            }

            gl.drawElements(primitive, numIndices, format, offset);
        }
        else
        {
            for (var p = 0; p < numPasses; p += 1)
            {
                var pass = passes[p];

                mask = (pass.semanticsMask & attributeMask);
                if (mask !== this.clientStateMask)
                {
                    this.enableClientState(mask);
                }

                this.setPass(pass);

                gl.drawElements(primitive, numIndices, format, offset);
            }
        }
        /*jshint bitwise: true*/
    },

    draw : function drawFn(primitive, numVertices, first)
    {
        var gl = this.gl;

        var attributeMask = this.attributeMask;

        var activeTechnique = this.activeTechnique;
        var passes = activeTechnique.passes;
        var numPasses = passes.length;
        var mask;

        activeTechnique.checkProperties(this);

        /*jshint bitwise: false*/
        if (1 === numPasses)
        {
            mask = (passes[0].semanticsMask & attributeMask);
            if (mask !== this.clientStateMask)
            {
                this.enableClientState(mask);
            }

            gl.drawArrays(primitive, first, numVertices);
        }
        else
        {
            for (var p = 0; p < numPasses; p += 1)
            {
                var pass = passes[p];

                mask = (pass.semanticsMask & attributeMask);
                if (mask !== this.clientStateMask)
                {
                    this.enableClientState(mask);
                }

                this.setPass(pass);

                gl.drawArrays(primitive, first, numVertices);
            }
        }
        /*jshint bitwise: true*/
    },

    setTechniqueParameters : function setTechniqueParametersFn()
    {
        var activeTechnique = this.activeTechnique;
        var passes = activeTechnique.passes;
        var setParameters = (1 === passes.length ? this.setParametersImmediate : this.setParametersDeferred);
        var numTechniqueParameters = arguments.length;
        for (var t = 0; t < numTechniqueParameters; t += 1)
        {
            setParameters(this, passes, arguments[t]);
        }
    },

    //Internal

    setParametersImmediate : function setParametersImmediateFn(gd, passes, techniqueParameters)
    {
        var gl = gd.gl;

        var parameters = passes[0].parameters;
        /*jshint forin: true*/
        for (var p in techniqueParameters)
        {
            var parameter = parameters[p];
            if (parameter !== undefined)
            {
                var sampler = parameter.sampler;
                var parameterValues = techniqueParameters[p];
                if (parameterValues !== undefined)
                {
                    if (sampler !== undefined)
                    {
                        gd.setTexture(parameter.textureUnit, parameterValues, sampler);
                    }
                    else
                    {
                        parameter.setter.call(gl, parameter.location, parameterValues);
                    }
                }
                else
                {
                    delete techniqueParameters[p];
                    if (sampler)
                    {
                        gd.setTexture(parameter.textureUnit);
                    }
                }
            }
        }
        /*jshint forin: false*/
    },

    // ONLY USE FOR SINGLE PASS TECHNIQUES ON DRAWARRAY
    setParametersCaching : function setParametersCachingFn(gd, passes, techniqueParameters)
    {
        var gl = gd.gl;

        var parameters = passes[0].parameters;
        /*jshint forin: true*/
        for (var p in techniqueParameters)
        {
            var parameter = parameters[p];
            if (parameter !== undefined)
            {
                var parameterValues = techniqueParameters[p];
                if (parameter.value !== parameterValues)
                {
                    parameter.value = parameterValues;

                    var sampler = parameter.sampler;
                    if (parameterValues !== undefined)
                    {
                        if (sampler !== undefined)
                        {
                            gd.setTexture(parameter.textureUnit, parameterValues, sampler);
                        }
                        else
                        {
                            parameter.setter.call(gl, parameter.location, parameterValues);
                        }
                    }
                    else
                    {
                        delete techniqueParameters[p];
                        if (sampler)
                        {
                            gd.setTexture(parameter.textureUnit);
                        }
                    }
                }
            }
        }
        /*jshint forin: false*/
    },

    setParametersDeferred : function setParametersDeferredFn(gd, passes, techniqueParameters)
    {
        var numPasses = passes.length;
        var min = Math.min;
        var max = Math.max;
        for (var n = 0; n < numPasses; n += 1)
        {
            var pass = passes[n];
            var parameters = pass.parameters;
            pass.dirty = true;

            /*jshint forin: true*/
            for (var p in techniqueParameters)
            {
                var parameter = parameters[p];
                if (parameter)
                {
                    var paramInfo = parameter.info;
                    var parameterValues = techniqueParameters[p];
                    if (parameterValues !== undefined)
                    {
                        if (parameter.sampler)
                        {
                            paramInfo.values = parameterValues;
                            parameter.dirty = 1;
                        }
                        else if (typeof parameterValues !== 'number')
                        {
                            var values = paramInfo.values;
                            var numValues = min(paramInfo.numValues, parameterValues.length);
                            for (var v = 0; v < numValues; v += 1)
                            {
                                values[v] = parameterValues[v];
                            }
                            parameter.dirty = max(numValues, (parameter.dirty || 0));
                        }
                        else
                        {
                            paramInfo.values[0] = parameterValues;
                            parameter.dirty = (parameter.dirty || 1);
                        }
                    }
                    else
                    {
                        delete techniqueParameters[p];
                    }
                }
            }
            /*jshint forin: false*/
        }
    },

    setTechnique : function setTechniqueFn(technique)
    {
        var activeTechnique = this.activeTechnique;
        if (activeTechnique !== technique)
        {
            if (activeTechnique)
            {
                activeTechnique.deactivate();
            }

            this.activeTechnique = technique;

            technique.activate(this);

            var passes = technique.passes;
            if (1 === passes.length)
            {
                this.setPass(passes[0]);
            }
        }
    },

    // ONLY USE FOR SINGLE PASS TECHNIQUES ON DRAWARRAY
    setTechniqueCaching : function setTechniqueCachingFn(technique)
    {
        var pass = technique.passes[0];

        var activeTechnique = this.activeTechnique;
        if (activeTechnique !== technique)
        {
            if (activeTechnique)
            {
                activeTechnique.deactivate();
            }

            this.activeTechnique = technique;

            technique.activate(this);

            this.setPass(pass);
        }

        var parameters = pass.parameters;
        for (var p in parameters)
        {
            if (parameters.hasOwnProperty(p))
            {
                parameters[p].value = null;
            }
        }
    },

    setStream : function setStreamFn(vertexBuffer, semantics, offset)
    {
        if (offset)
        {
            offset *= vertexBuffer.strideInBytes;
        }
        else
        {
            offset = 0;
        }

        this.bindVertexBuffer(vertexBuffer.glBuffer);

        var attributes = semantics;
        var numAttributes = attributes.length;
        if (numAttributes > vertexBuffer.numAttributes)
        {
            numAttributes = vertexBuffer.numAttributes;
        }

        /*jshint bitwise: false*/
        this.attributeMask |= vertexBuffer.bindAttributes(numAttributes, attributes, offset);
        /*jshint bitwise: true*/
    },

    setIndexBuffer : function setIndexBufferFn(indexBuffer)
    {
        if (this.activeIndexBuffer !== indexBuffer)
        {
            this.activeIndexBuffer = indexBuffer;
            var glBuffer;
            if (indexBuffer)
            {
                glBuffer = indexBuffer.glBuffer;
            }
            else
            {
                glBuffer = null;
            }
            var gl = this.gl;
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, glBuffer);
        }
    },

    drawArray : function drawArrayFn(drawParametersArray, globalTechniqueParametersArray, sortMode)
    {
        var gl = this.gl;
        var ELEMENT_ARRAY_BUFFER = gl.ELEMENT_ARRAY_BUFFER;

        var setParametersCaching = this.setParametersCaching;
        var setParametersDeferred = this.setParametersDeferred;

        var setStream = this.setStream;
        var enableClientState = this.enableClientState;

        var numGlobalTechniqueParameters = globalTechniqueParametersArray.length;

        var numDrawParameters = drawParametersArray.length;
        if (numDrawParameters > 1 && sortMode)
        {
            if (sortMode > 0)
            {
                drawParametersArray.sort(function drawArraySortPositive(a, b) {
                    return (b.sortKey - a.sortKey);
                });
            }
            else if (sortMode < 0)
            {
                drawParametersArray.sort(function drawArraySortNegative(a, b) {
                    return (a.sortKey - b.sortKey);
                });
            }
        }


        var activeIndexBuffer = this.activeIndexBuffer;
        var setParameters = null;
        var lastTechnique = null;
        var lastEndStreams = -1;
        var lastDrawParameters = null;
        var techniqueParameters = null;
        var v = 0;
        var streamsMatch = false;
        var vertexBuffer = null;
        var offset = 0;
        var passes = null;
        var p = null;
        var pass = null;
        var format = 0;
        var numPasses = 0;
        var mask = 0;
        var attributeMask = 0;
        var t = 0;

        for (var n = 0; n < numDrawParameters; n += 1)
        {
            var drawParameters = drawParametersArray[n];
            var technique = drawParameters.technique;
            var endTechniqueParameters = drawParameters.endTechniqueParameters;
            var endStreams = drawParameters.endStreams;
            var endInstances = drawParameters.endInstances;
            var indexBuffer = drawParameters.indexBuffer;
            var primitive = drawParameters.primitive;
            var count = drawParameters.count;
            var firstIndex = drawParameters.firstIndex;

            if (lastTechnique !== technique)
            {
                lastTechnique = technique;

                passes = technique.passes;
                numPasses = passes.length;
                if (1 === numPasses)
                {
                    this.setTechniqueCaching(technique);
                    setParameters = setParametersCaching;
                }
                else
                {
                    this.setTechnique(technique);
                    setParameters = setParametersDeferred;
                }

                technique.checkProperties(this);

                for (t = 0; t < numGlobalTechniqueParameters; t += 1)
                {
                    setParameters(this, passes, globalTechniqueParametersArray[t]);
                }
            }

            for (t = (16 * 3); t < endTechniqueParameters; t += 1)
            {
                techniqueParameters = drawParameters[t];
                if (techniqueParameters)
                {
                    setParameters(this, passes, techniqueParameters);
                }
            }

            streamsMatch = (lastEndStreams === endStreams);
            for (v = 0; streamsMatch && v < endStreams; v += 3)
            {
                streamsMatch = (lastDrawParameters[v]     === drawParameters[v]     &&
                                lastDrawParameters[v + 1] === drawParameters[v + 1] &&
                                lastDrawParameters[v + 2] === drawParameters[v + 2]);
            }

            if (!streamsMatch)
            {
                lastEndStreams = endStreams;
                lastDrawParameters = drawParameters;

                for (v = 0; v < endStreams; v += 3)
                {
                    vertexBuffer = drawParameters[v];
                    if (vertexBuffer)
                    {
                        setStream.call(this, vertexBuffer, drawParameters[v + 1], drawParameters[v + 2]);
                    }
                }

                attributeMask = this.attributeMask;
            }

            /*jshint bitwise: false*/
            if (indexBuffer)
            {
                if (activeIndexBuffer !== indexBuffer)
                {
                    activeIndexBuffer = indexBuffer;
                    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indexBuffer.glBuffer);
                }

                offset = firstIndex;
                if (offset)
                {
                    offset *= indexBuffer.stride;
                }

                format = indexBuffer.format;

                if (1 === numPasses)
                {
                    mask = (passes[0].semanticsMask & attributeMask);
                    if (mask !== this.clientStateMask)
                    {
                        enableClientState.call(this, mask);
                    }

                    t = ((16 * 3) + 8);
                    if (t < endInstances)
                    {
                        do
                        {
                            setParameters(this, passes, drawParameters[t]);

                            gl.drawElements(primitive, count, format, offset);

                            t += 1;
                        }
                        while (t < endInstances);
                    }
                    else
                    {
                        gl.drawElements(primitive, count, format, offset);
                    }
                }
                else
                {
                    t = ((16 * 3) + 8);
                    if (t < endInstances)
                    {
                        do
                        {
                            setParameters(this, passes, drawParameters[t]);

                            for (p = 0; p < numPasses; p += 1)
                            {
                                pass = passes[p];

                                mask = (pass.semanticsMask & attributeMask);
                                if (mask !== this.clientStateMask)
                                {
                                    enableClientState.call(this, mask);
                                }

                                this.setPass(pass);

                                gl.drawElements(primitive, count, format, offset);
                            }

                            t += 1;
                        }
                        while (t < endInstances);
                    }
                    else
                    {
                        for (p = 0; p < numPasses; p += 1)
                        {
                            pass = passes[p];

                            mask = (pass.semanticsMask & attributeMask);
                            if (mask !== this.clientStateMask)
                            {
                                enableClientState.call(this, mask);
                            }

                            this.setPass(pass);

                            gl.drawElements(primitive, count, format, offset);
                        }
                    }
                }
            }
            else
            {
                if (1 === numPasses)
                {
                    mask = (passes[0].semanticsMask & attributeMask);
                    if (mask !== this.clientStateMask)
                    {
                        enableClientState.call(this, mask);
                    }

                    t = ((16 * 3) + 8);
                    if (t < endInstances)
                    {
                        do
                        {
                            setParameters(this, passes, drawParameters[t]);

                            gl.drawArrays(primitive, firstIndex, count);

                            t += 1;
                        }
                        while (t < endInstances);
                    }
                    else
                    {
                        gl.drawArrays(primitive, firstIndex, count);
                    }
                }
                else
                {
                    t = ((16 * 3) + 8);
                    if (t < endInstances)
                    {
                        do
                        {
                            setParameters(this, passes, drawParameters[t]);

                            for (p = 0; p < numPasses; p += 1)
                            {
                                pass = passes[p];

                                mask = (pass.semanticsMask & attributeMask);
                                if (mask !== this.clientStateMask)
                                {
                                    enableClientState.call(this, mask);
                                }

                                this.setPass(pass);

                                gl.drawArrays(primitive, firstIndex, count);
                            }

                            t += 1;
                        }
                        while (t < endInstances);
                    }
                    else
                    {
                        for (p = 0; p < numPasses; p += 1)
                        {
                            pass = passes[p];

                            mask = (pass.semanticsMask & attributeMask);
                            if (mask !== this.clientStateMask)
                            {
                                enableClientState.call(this, mask);
                            }

                            this.setPass(pass);

                            gl.drawArrays(primitive, firstIndex, count);
                        }
                    }
                }
            }
            /*jshint bitwise: true*/
        }

        this.activeIndexBuffer = activeIndexBuffer;
    },

    beginDraw : function beginDrawFn(primitive, numVertices, formats, semantics)
    {
        this.immediatePrimitive = primitive;
        if (numVertices)
        {
            var n;
            var immediateSemantics = this.immediateSemantics;
            var attributes = semantics;
            var numAttributes = attributes.length;
            immediateSemantics.length = numAttributes;
            for (n = 0; n < numAttributes; n += 1)
            {
                var attribute = attributes[n];
                if (typeof attribute === "string")
                {
                    attribute = this['SEMANTIC_' + attribute];
                }
                immediateSemantics[n] = attribute;
            }

            var immediateVertexBuffer = this.immediateVertexBuffer;

            var oldStride = immediateVertexBuffer.strideInBytes;
            var oldSize = (oldStride * immediateVertexBuffer.numVertices);

            var stride = immediateVertexBuffer.setAttributes(formats);
            if (stride !== oldStride)
            {
                immediateVertexBuffer.numVertices = Math.floor(oldSize / stride);
            }

            var size = (stride * numVertices);
            if (size > oldSize)
            {
                immediateVertexBuffer.resize(size);
            }

            return immediateVertexBuffer.map(0, numVertices);
        }
        return null;
    },

    endDraw : function endDrawFn(writer)
    {
        var immediateVertexBuffer = this.immediateVertexBuffer;

        var numVerticesWritten = writer.getNumWrittenVertices();

        immediateVertexBuffer.unmap(writer);

        if (numVerticesWritten)
        {
            var gl = this.gl;

            var stride = immediateVertexBuffer.strideInBytes;
            var offset = 0;

            /*jshint bitwise: false*/
            var vertexAttributes = immediateVertexBuffer.attributes;

            var semantics = this.immediateSemantics;
            var numSemantics = semantics.length;
            var deltaAttributeMask = 0;
            for (var n = 0; n < numSemantics; n += 1)
            {
                var vertexAttribute = vertexAttributes[n];

                var attribute = semantics[n];

                deltaAttributeMask |= (1 << attribute);

                gl.vertexAttribPointer(attribute,
                                       vertexAttribute.numComponents,
                                       vertexAttribute.format,
                                       vertexAttribute.normalized,
                                       stride,
                                       offset);

                offset += vertexAttribute.stride;
            }
            this.attributeMask |= deltaAttributeMask;
            /*jshint bitwise: true*/

            this.draw(this.immediatePrimitive, numVerticesWritten, 0);
        }
    },

    setViewport : function setViewportFn(x, y, w, h)
    {
        var currentBox = this.state.viewportBox;
        if (currentBox[0] !== x ||
            currentBox[1] !== y ||
            currentBox[2] !== w ||
            currentBox[3] !== h)
        {
            currentBox[0] = x;
            currentBox[1] = y;
            currentBox[2] = w;
            currentBox[3] = h;
            this.gl.viewport(x, y, w, h);
        }
    },

    setScissor : function setScissorFn(x, y, w, h)
    {
        var currentBox = this.state.scissorBox;
        if (currentBox[0] !== x ||
            currentBox[1] !== y ||
            currentBox[2] !== w ||
            currentBox[3] !== h)
        {
            currentBox[0] = x;
            currentBox[1] = y;
            currentBox[2] = w;
            currentBox[3] = h;
            this.gl.scissor(x, y, w, h);
        }
    },

    clear : function clearFn(color, depth, stencil)
    {
        var gl = this.gl;
        var state = this.state;

        var clearMask = 0;

        if (color)
        {
            clearMask += gl.COLOR_BUFFER_BIT;

            var currentColor = state.clearColor;
            var color0 = color[0];
            var color1 = color[1];
            var color2 = color[2];
            var color3 = color[3];
            if (currentColor[0] !== color0 ||
                currentColor[1] !== color1 ||
                currentColor[2] !== color2 ||
                currentColor[3] !== color3)
            {
                currentColor[0] = color0;
                currentColor[1] = color1;
                currentColor[2] = color2;
                currentColor[3] = color3;
                gl.clearColor(color0, color1, color2, color3);
            }
        }

        if (depth !== undefined)
        {
            clearMask += gl.DEPTH_BUFFER_BIT;

            if (state.clearDepth !== depth)
            {
                state.clearDepth = depth;
                gl.clearDepth(depth);
            }

            if (stencil !== undefined)
            {
                clearMask += gl.STENCIL_BUFFER_BIT;

                if (state.clearStencil !== stencil)
                {
                    state.clearStencil = stencil;
                    gl.clearStencil(stencil);
                }
            }
        }

        if (clearMask)
        {
            var colorMask = state.colorMask;
            var colorMaskEnabled = (colorMask[0] || colorMask[1] || colorMask[2] || colorMask[3]);
            var depthMask = state.depthMask;
            var program = state.program;

            if (color)
            {
                if (!colorMaskEnabled)
                {
                    // This is posibly a mistake, enable it for this call
                    gl.colorMask(true, true, true, true);
                }
            }

            if (depth !== undefined)
            {
                if (!depthMask)
                {
                    // This is posibly a mistake, enable it for this call
                    gl.depthMask(true);
                }
            }

            if (program)
            {
                gl.useProgram(null);    // Work around for Mac crash bug.
            }

            gl.clear(clearMask);

            if (color)
            {
                if (!colorMaskEnabled)
                {
                    gl.colorMask(false, false, false, false);
                }
            }

            if (depth !== undefined)
            {
                if (!depthMask)
                {
                    gl.depthMask(false);
                }
            }

            if (program)
            {
                gl.useProgram(program);
            }
        }
    },

    beginFrame : function beginFrameFn()
    {
        var gl = this.gl;

        this.attributeMask = 0;

        /*jshint bitwise: false*/
        var clientStateMask = this.clientStateMask;
        var n;
        if (clientStateMask)
        {
            for (n = 0; n < 16; n += 1)
            {
                if (clientStateMask & (1 << n))
                {
                    gl.disableVertexAttribArray(n);
                }
            }
            this.clientStateMask = 0;
        }
        /*jshint bitwise: true*/

        this.resetStates();

        this.setScissor(0, 0, this.width, this.height);
        this.setViewport(0, 0, this.width, this.height);

        return true;
    },

    beginRenderTarget : function beginRenderTargetFn(renderTarget)
    {
        this.activeRenderTarget = renderTarget;
        return renderTarget.bind();
    },

    endRenderTarget : function endRenderTargetFn()
    {
        this.activeRenderTarget.unbind();
        this.activeRenderTarget = null;
    },

    beginOcclusionQuery : function beginOcclusionQueryFn()
    {
        return false;
    },

    endOcclusionQuery : function endOcclusionQueryFn()
    {
    },

    endFrame : function endFrameFn()
    {
        var gl = this.gl;
        //gl.flush();

        if (this.activeTechnique)
        {
            this.activeTechnique.deactivate();
            this.activeTechnique = null;
        }

        if (this.activeIndexBuffer)
        {
            this.setIndexBuffer(null);
        }

        var state = this.state;
        if (state.program)
        {
            state.program = null;
            gl.useProgram(null);
        }

        this.numFrames += 1;
        var currentFrameTime = TurbulenzEngine.getTime();
        var diffTime = (currentFrameTime - this.previousFrameTime);
        if (diffTime >= 1000.0)
        {
            this.fps = (this.numFrames / (diffTime * 0.001));
            this.numFrames = 0;
            this.previousFrameTime = currentFrameTime;
        }

        var canvas = gl.canvas;
        var width = (gl.drawingBufferWidth || canvas.width);
        var height = (gl.drawingBufferHeight || canvas.height);
        if (this.width !== width ||
            this.height !== height)
        {
            this.width = width;
            this.height = height;
            this.setViewport(0, 0, width, height);
            this.setScissor(0, 0, width, height);
        }

        this.checkFullScreen();
    },

    createTechniqueParameters : function createTechniqueParametersFn(params)
    {
        return WebGLTechniqueParameters.create(params);
    },

    createSemantics : function createSemanticsFn(attributes)
    {
        return WebGLSemantics.create(this, attributes);
    },

    createVertexBuffer : function createVertexBufferFn(params)
    {
        return WebGLVertexBuffer.create(this, params);
    },

    createIndexBuffer : function createIndexBufferFn(params)
    {
        return WebGLIndexBuffer.create(this, params);
    },

    createTexture : function createTextureFn(params)
    {
        return WebGLTexture.create(this, params);
    },

    createShader : function createShaderFn(params)
    {
        return WebGLShader.create(this, params);
    },

    createTechniqueParameterBuffer : function createTechniqueParameterBufferFn(params)
    {
        return techniqueParameterBufferCreate(params);
    },

    createRenderBuffer : function createRenderBufferFn(params)
    {
        return WebGLRenderBuffer.create(this, params);
    },

    createRenderTarget : function createRenderTargetFn(params)
    {
        return WebGLRenderTarget.create(this, params);
    },

    createOcclusionQuery : function createOcclusionQueryFn(params)
    {
        return null;
    },

    createDrawParameters : function createDrawParametersFn(params)
    {
        return WebGLDrawParameters.create(params);
    },

    isSupported : function isSupportedFn(name)
    {
        var gl = this.gl;
        if ("OCCLUSION_QUERIES" === name)
        {
            return false;
        }
        else if ("NPOT_MIPMAPPED_TEXTURES" === name)
        {
            return false;
        }
        else if ("TEXTURE_DXT1" === name ||
                 "TEXTURE_DXT3" === name ||
                 "TEXTURE_DXT5" === name)
        {
            var compressedTexturesExtension = this.compressedTexturesExtension;
            if (compressedTexturesExtension)
            {
                var compressedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
                if (compressedFormats)
                {
                    var requestedFormat;
                    if ("TEXTURE_DXT1" === name)
                    {
                        requestedFormat = compressedTexturesExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    }
                    else if ("TEXTURE_DXT3" === name)
                    {
                        requestedFormat = compressedTexturesExtension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    }
                    else //if ("TEXTURE_DXT5" === name)
                    {
                        requestedFormat = compressedTexturesExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    }
                    var numCompressedFormats = compressedFormats.length;
                    for (var n = 0; n < numCompressedFormats; n += 1)
                    {
                        if (compressedFormats[n] === requestedFormat)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        else if ("TEXTURE_ETC1" === name)
        {
            return false;
        }
        else if ("INDEXFORMAT_UINT" === name)
        {
            if (gl.getExtension('OES_element_index_uint'))
            {
                return true;
            }
            return false;
        }
        return undefined;
    },

    maxSupported : function maxSupportedFn(name)
    {
        var gl = this.gl;
        if ("ANISOTROPY" === name)
        {
            return this.maxAnisotropy;
        }
        else if ("TEXTURE_SIZE" === name)
        {
            return gl.getParameter(gl.MAX_TEXTURE_SIZE);
        }
        else if ("CUBEMAP_TEXTURE_SIZE" === name)
        {
            return gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
        }
        else if ("3D_TEXTURE_SIZE" === name)
        {
            return 0;
        }
        else if ("RENDERTARGET_COLOR_TEXTURES" === name)
        {
            return 1;
        }
        else if ("RENDERBUFFER_SIZE" === name)
        {
            return gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);
        }
        return 0;
    },

    loadTexturesArchive : function loadTexturesArchiveFn(params)
    {
        var src = params.src;
        if (typeof TARLoader !== 'undefined')
        {
            TARLoader.create({
                gd: this,
                src : src,
                mipmaps : params.mipmaps,
                ontextureload : function tarTextureLoadedFn(texture)
                {
                    params.ontextureload(texture);
                },
                onload : function tarLoadedFn(success, status)
                {
                    if (params.onload)
                    {
                        params.onload(true, status);
                    }
                },
                onerror : function tarFailedFn()
                {
                    if (params.onload)
                    {
                        params.onload(false, status);
                    }
                }
            });
            return true;
        }
        else
        {
            TurbulenzEngine.callOnError(
                'Missing archive loader required for ' + src);
            return false;
        }
    },

    getScreenshot : function getScreenshotFn(compress, x, y, width, height)
    {
        var gl = this.gl;
        var canvas = gl.canvas;

        if (compress)
        {
            return canvas.toDataURL('image/jpeg');
        }
        else
        {
            if (x === undefined)
            {
                x = 0;
            }

            if (y === undefined)
            {
                y = 0;
            }

            var target = this.activeRenderTarget;
            if (!target)
            {
                target = canvas;
            }

            if (width === undefined)
            {
                width = target.width;
            }

            if (height === undefined)
            {
                height = target.height;
            }

            var pixels = new Uint8Array(4 * width * height);

            gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);

            return pixels;
        }
    },

    // private
    checkFullScreen : function checkFullScreenFn()
    {
        var fullscreen = this.fullscreen;
        if (this.oldFullscreen !== fullscreen)
        {
            this.oldFullscreen = fullscreen;

            this.requestFullScreen(fullscreen);
        }
    },

    requestFullScreen : function requestFullScreenFn(fullscreen)
    {
        if (fullscreen)
        {
            var canvas = this.gl.canvas;
            if (canvas.webkitRequestFullScreenWithKeys)
            {
                canvas.webkitRequestFullScreenWithKeys();
            }
            else if (canvas.requestFullScreenWithKeys)
            {
                canvas.requestFullScreenWithKeys();
            }
            else if (canvas.webkitRequestFullScreen)
            {
                canvas.webkitRequestFullScreen(canvas.ALLOW_KEYBOARD_INPUT);
            }
            else if (canvas.mozRequestFullScreen)
            {
                canvas.mozRequestFullScreen();
            }
            else if (canvas.requestFullScreen)
            {
                canvas.requestFullScreen();
            }
            else if (canvas.requestFullscreen)
            {
                canvas.requestFullscreen();
            }
        }
        else
        {
            if (document.webkitCancelFullScreen)
            {
                document.webkitCancelFullScreen();
            }
            else if (document.cancelFullScreen)
            {
                document.cancelFullScreen();
            }
            else if (document.exitFullscreen)
            {
                document.exitFullscreen();
            }
        }
    },

    createSampler : function createSamplerFn(sampler)
    {
        var samplerKey = sampler.minFilter.toString() +
                   ':' + sampler.magFilter.toString() +
                   ':' + sampler.wrapS.toString() +
                   ':' + sampler.wrapT.toString() +
                   ':' + sampler.wrapR.toString() +
                   ':' + sampler.maxAnisotropy.toString();

        var cachedSamplers = this.cachedSamplers;
        var cachedSampler = cachedSamplers[samplerKey];
        if (!cachedSampler)
        {
            cachedSamplers[samplerKey] = sampler;
            return sampler;
        }
        return cachedSampler;
    },

    unsetIndexBuffer : function unsetIndexBufferFn(indexBuffer)
    {
        if (this.activeIndexBuffer === indexBuffer)
        {
            this.activeIndexBuffer = null;
            var gl = this.gl;
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        }
    },

    bindVertexBuffer : function bindVertexBufferFn(buffer)
    {
        if (this.bindedVertexBuffer !== buffer)
        {
            this.bindedVertexBuffer = buffer;
            var gl = this.gl;
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        }
    },

    unbindVertexBuffer : function unbindVertexBufferFn(buffer)
    {
        if (this.bindedVertexBuffer === buffer)
        {
            this.bindedVertexBuffer = null;
            var gl = this.gl;
            gl.bindBuffer(gl.ARRAY_BUFFER, null);
        }
    },

    bindTextureUnit : function bindTextureUnitFn(unit, target, texture)
    {
        var state = this.state;
        var gl = this.gl;

        if (state.activeTextureUnit !== unit)
        {
            state.activeTextureUnit = unit;
            gl.activeTexture(gl.TEXTURE0 + unit);
        }
        gl.bindTexture(target, texture);
    },

    bindTexture : function bindTextureFn(target, texture)
    {
        var state = this.state;
        var gl = this.gl;

        var dummyUnit = (state.maxTextureUnit - 1);
        if (state.activeTextureUnit !== dummyUnit)
        {
            state.activeTextureUnit = dummyUnit;
            gl.activeTexture(gl.TEXTURE0 + dummyUnit);
        }
        gl.bindTexture(target, texture);
    },

    unbindTexture : function unbindTextureFn(texture)
    {
        var state = this.state;
        var lastMaxTextureUnit = state.lastMaxTextureUnit;
        var textureUnits = state.textureUnits;
        for (var u = 0; u < lastMaxTextureUnit; u += 1)
        {
            var textureUnit = textureUnits[u];
            if (textureUnit.texture === texture)
            {
                textureUnit.texture = null;
                this.bindTextureUnit(u, textureUnit.target, null);
            }
        }
    },

    setSampler : function setSamplerFn(sampler, target)
    {
        if (sampler)
        {
            var gl = this.gl;

            gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, sampler.minFilter);
            gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, sampler.magFilter);
            gl.texParameteri(target, gl.TEXTURE_WRAP_S, sampler.wrapS);
            gl.texParameteri(target, gl.TEXTURE_WRAP_T, sampler.wrapT);
            /*
            if (sSupports3DTextures)
            {
                gl.texParameteri(target, gl.TEXTURE_WRAP_R, sampler.wrapR);
            }
            */
            if (this.TEXTURE_MAX_ANISOTROPY_EXT)
            {
                gl.texParameteri(target, this.TEXTURE_MAX_ANISOTROPY_EXT, sampler.maxAnisotropy);
            }
        }
    },

    setPass : function setPassFn(pass)
    {
        var gl = this.gl;
        var state = this.state;

        // Set renderstates
        var renderStatesSet = pass.statesSet;
        var renderStates = pass.states;
        var numRenderStates = renderStates.length;
        var r, renderState;
        for (r = 0; r < numRenderStates; r += 1)
        {
            renderState = renderStates[r];
            renderState.set.apply(renderState, renderState.values);
        }

        // Reset previous renderstates
        var renderStatesToReset = state.renderStatesToReset;
        var numRenderStatesToReset = renderStatesToReset.length;
        for (r = 0; r < numRenderStatesToReset; r += 1)
        {
            renderState = renderStatesToReset[r];
            if (!(renderState.name in renderStatesSet))
            {
                renderState.reset();
            }
        }

        // Copy set renderstates to be reset later
        renderStatesToReset.length = numRenderStates;
        for (r = 0; r < numRenderStates; r += 1)
        {
            renderStatesToReset[r] = renderStates[r];
        }

        // Reset texture units
        var lastMaxTextureUnit = state.lastMaxTextureUnit;
        var textureUnits = state.textureUnits;
        var currentMaxTextureUnit = pass.numTextureUnits;
        if (currentMaxTextureUnit < lastMaxTextureUnit)
        {
            var u = currentMaxTextureUnit;
            do
            {
                var textureUnit = textureUnits[u];
                if (textureUnit.texture)
                {
                    textureUnit.texture = null;
                    this.bindTextureUnit(u, textureUnit.target, null);
                }
                u += 1;
            }
            while (u < lastMaxTextureUnit);
        }
        state.lastMaxTextureUnit = currentMaxTextureUnit;

        var program = pass.glProgram;
        if (state.program !== program)
        {
            state.program = program;
            gl.useProgram(program);
        }

        if (pass.dirty)
        {
            pass.updateParametersData(this);
        }
    },

    enableClientState : function enableClientStateFn(mask)
    {
        var gl = this.gl;

        var oldMask = this.clientStateMask;
        this.clientStateMask = mask;

        /*jshint bitwise: false*/
        var disableMask = (oldMask & (~mask));
        var enableMask  = ((~oldMask) & mask);
        var n;

        if (disableMask)
        {
            if ((disableMask & 0xff) === 0)
            {
                disableMask >>= 8;
                n = 8;
            }
            else
            {
                n = 0;
            }
            do
            {
                if (0 !== (0x01 & disableMask))
                {
                    gl.disableVertexAttribArray(n);
                }
                n += 1;
                disableMask >>= 1;
            }
            while (disableMask);
        }

        if (enableMask)
        {
            if ((enableMask & 0xff) === 0)
            {
                enableMask >>= 8;
                n = 8;
            }
            else
            {
                n = 0;
            }
            do
            {
                if (0 !== (0x01 & enableMask))
                {
                    gl.enableVertexAttribArray(n);
                }
                n += 1;
                enableMask >>= 1;
            }
            while (enableMask);
        }
        /*jshint bitwise: true*/
    },

    setTexture : function setTextureFn(textureUnitIndex, texture, sampler)
    {
        var state = this.state;
        var gl = this.gl;

        var textureUnit = state.textureUnits[textureUnitIndex];
        var oldgltarget = textureUnit.target;
        var oldglobject = textureUnit.texture;

        if (texture)
        {
            var gltarget = texture.target;
            var globject = texture.glTexture;
            if (oldglobject !== globject ||
                oldgltarget !== gltarget)
            {
                textureUnit.target = gltarget;
                textureUnit.texture = globject;

                if (state.activeTextureUnit !== textureUnitIndex)
                {
                    state.activeTextureUnit = textureUnitIndex;
                    gl.activeTexture(gl.TEXTURE0 + textureUnitIndex);
                }

                if (oldgltarget !== gltarget &&
                    oldglobject)
                {
                    gl.bindTexture(oldgltarget, null);
                }

                gl.bindTexture(gltarget, globject);

                if (texture.sampler !== sampler)
                {
                    texture.sampler = sampler;

                    this.setSampler(sampler, gltarget);
                }
            }
        }
        else
        {
            if (oldgltarget &&
                oldglobject)
            {
                textureUnit.target = 0;
                textureUnit.texture = null;

                if (state.activeTextureUnit !== textureUnitIndex)
                {
                    state.activeTextureUnit = textureUnitIndex;
                    gl.activeTexture(gl.TEXTURE0 + textureUnitIndex);
                }

                gl.bindTexture(oldgltarget, null);
            }
        }
    },

    setProgram : function setProgramFn(program)
    {
        var state = this.state;
        if (state.program !== program)
        {
            state.program = program;
            this.gl.useProgram(program);
        }
    },

    syncState : function syncStateFn()
    {
        var state = this.state;
        var gl = this.gl;

        if (state.depthTestEnable)
        {
            gl.enable(gl.DEPTH_TEST);
        }
        else
        {
            gl.disable(gl.DEPTH_TEST);
        }

        gl.depthFunc(state.depthFunc);

        gl.depthMask(state.depthMask);

        if (state.blendEnable)
        {
            gl.enable(gl.BLEND);
        }
        else
        {
            gl.disable(gl.BLEND);
        }

        gl.blendFunc(state.blendSrc, state.blendDst);

        if (state.cullFaceEnable)
        {
            gl.enable(gl.CULL_FACE);
        }
        else
        {
            gl.disable(gl.CULL_FACE);
        }

        gl.cullFace(state.cullFace);

        gl.frontFace(state.frontFace);

        var colorMask = state.colorMask;
        gl.colorMask(colorMask[0], colorMask[1], colorMask[2], colorMask[3]);

        if (state.stencilTestEnable)
        {
            gl.enable(gl.STENCIL_TEST);
        }
        else
        {
            gl.disable(gl.STENCIL_TEST);
        }

        gl.stencilFunc(state.stencilFunc, state.stencilRef, state.stencilMask);

        gl.stencilOp(state.stencilFail, state.stencilZFail, state.stencilZPass);

        if (state.polygonOffsetFillEnable)
        {
            gl.enable(gl.POLYGON_OFFSET_FILL);
        }
        else
        {
            gl.disable(gl.POLYGON_OFFSET_FILL);
        }

        gl.polygonOffset(state.polygonOffsetFactor, state.polygonOffsetUnits);

        gl.lineWidth(state.lineWidth);

        gl.activeTexture(gl.TEXTURE0 + state.activeTextureUnit);

        var currentBox = this.state.viewportBox;
        gl.viewport(currentBox[0], currentBox[1], currentBox[2], currentBox[3]);

        currentBox = this.state.scissorBox;
        gl.scissor(currentBox[0], currentBox[1], currentBox[2], currentBox[3]);

        var currentColor = state.clearColor;
        gl.clearColor(currentColor[0], currentColor[1], currentColor[2], currentColor[3]);

        gl.clearDepth(state.clearDepth);

        gl.clearStencil(state.clearStencil);
    },

    resetStates : function resetStatesFn()
    {
        var state = this.state;

        var lastMaxTextureUnit = state.lastMaxTextureUnit;
        var textureUnits = state.textureUnits;
        for (var u = 0; u < lastMaxTextureUnit; u += 1)
        {
            var textureUnit = textureUnits[u];
            if (textureUnit.texture)
            {
                this.bindTextureUnit(u, textureUnit.target, null);
                textureUnit.texture = null;
                textureUnit.target = 0;
            }
        }
    },

    destroy : function graphicsDeviceDestroyFn()
    {
        delete this.activeTechnique;
        delete this.activeIndexBuffer;
        delete this.bindedVertexBuffer;

        if (this.immediateVertexBuffer)
        {
            this.immediateVertexBuffer.destroy();
            delete this.immediateVertexBuffer;
        }

        delete this.gl;
    }
};

// Constructor function
WebGLGraphicsDevice.create = function webGLGraphicsDeviceCreateFn(canvas, params)
{
    function getAvailableContext(canvas, params, contextList)
    {
        if (canvas.getContext)
        {
            var canvasParams = {
                    alpha: false,
                    stencil: true,
                    antialias: false
                };

            var multisample = params.multisample;
            if (multisample !== undefined && 1 < multisample)
            {
                canvasParams.antialias = true;
            }

            var numContexts = contextList.length, i;
            for (i = 0; i < numContexts; i += 1)
            {
                try
                {
                    var context = canvas.getContext(contextList[i], canvasParams);
                    if (context)
                    {
                        return context;
                    }
                }
                catch (ex)
                {
                }
            }
        }
        return null;
    }

    // TODO: Test if we can also use "webkit-3d" and "moz-webgl"
    var gl = getAvailableContext(canvas, params, ['webgl', 'experimental-webgl']);
    if (!gl)
    {
        return null;
    }

    var width = (gl.drawingBufferWidth || canvas.width);
    var height = (gl.drawingBufferHeight || canvas.height);

    gl.enable(gl.SCISSOR_TEST);
    gl.depthRange(0.0, 1.0);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
    //gl.hint(gl.GENERATE_MIPMAP_HINT, gl.NICEST);

    var gd = new WebGLGraphicsDevice();
    gd.gl = gl;
    gd.width = width;
    gd.height = height;

    var extensions = gl.getSupportedExtensions();
    if (extensions)
    {
        extensions = extensions.join(' ');
    }
    else
    {
        extensions = '';
    }
    gd.extensions = extensions;
    gd.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);
    gd.rendererVersion = gl.getParameter(gl.VERSION);
    gd.renderer = gl.getParameter(gl.RENDERER);
    gd.vendor = gl.getParameter(gl.VENDOR);

    if (extensions.indexOf('WEBGL_compressed_texture_s3tc') !== -1)
    {
        gd.WEBGL_compressed_texture_s3tc = true;
        if (extensions.indexOf('WEBKIT_WEBGL_compressed_texture_s3tc') !== -1)
        {
            gd.compressedTexturesExtension = gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
        }
        else if (extensions.indexOf('MOZ_WEBGL_compressed_texture_s3tc') !== -1)
        {
            gd.compressedTexturesExtension = gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc');
        }
        else
        {
            gd.compressedTexturesExtension = gl.getExtension('WEBGL_compressed_texture_s3tc');
        }
    }
    else if (extensions.indexOf('WEBKIT_WEBGL_compressed_textures') !== -1)
    {
        gd.compressedTexturesExtension = gl.getExtension('WEBKIT_WEBGL_compressed_textures');
    }

    var anisotropyExtension;
    if (extensions.indexOf('EXT_texture_filter_anisotropic') !== -1)
    {
        if (extensions.indexOf('MOZ_EXT_texture_filter_anisotropic') !== -1)
        {
            anisotropyExtension = gl.getExtension('MOZ_EXT_texture_filter_anisotropic');
        }
        else if (extensions.indexOf('WEBKIT_EXT_texture_filter_anisotropic') !== -1)
        {
            anisotropyExtension = gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
        }
        else
        {
            anisotropyExtension = gl.getExtension('EXT_texture_filter_anisotropic');
        }
    }
    if (anisotropyExtension)
    {
        gd.TEXTURE_MAX_ANISOTROPY_EXT = anisotropyExtension.TEXTURE_MAX_ANISOTROPY_EXT;
        gd.maxAnisotropy = gl.getParameter(anisotropyExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    }
    else
    {
        gd.maxAnisotropy = 1;
    }

    gd.PRIMITIVE_POINTS         = gl.POINTS;
    gd.PRIMITIVE_LINES          = gl.LINES;
    gd.PRIMITIVE_LINE_LOOP      = gl.LINE_LOOP;
    gd.PRIMITIVE_LINE_STRIP     = gl.LINE_STRIP;
    gd.PRIMITIVE_TRIANGLES      = gl.TRIANGLES;
    gd.PRIMITIVE_TRIANGLE_STRIP = gl.TRIANGLE_STRIP;
    gd.PRIMITIVE_TRIANGLE_FAN   = gl.TRIANGLE_FAN;

    gd.INDEXFORMAT_UBYTE  = gl.UNSIGNED_BYTE;
    gd.INDEXFORMAT_USHORT = gl.UNSIGNED_SHORT;
    gd.INDEXFORMAT_UINT   = gl.UNSIGNED_INT;

    function getNormalizationScale(format)
    {
        if (format === gl.BYTE)
        {
            return 0x7f;
        }
        else if (format === gl.UNSIGNED_BYTE)
        {
            return 0xff;
        }
        else if (format === gl.SHORT)
        {
            return 0x7fff;
        }
        else if (format === gl.UNSIGNED_SHORT)
        {
            return 0xffff;
        }
        else if (format === gl.INT)
        {
            return 0x7fffffff;
        }
        else if (format === gl.UNSIGNED_INT)
        {
            return 0xffffffff;
        }
        else //if (format === gl.FLOAT)
        {
            return 1;
        }
    }

    function makeVertexformat(n, c, s, f, name)
    {
        var attributeFormat = {
                numComponents: c,
                stride: s,
                componentStride: (s / c),
                format: f,
                name: name
            };
        if (n)
        {
            attributeFormat.normalized = true;
            attributeFormat.normalizationScale = getNormalizationScale(f);
        }
        else
        {
            attributeFormat.normalized = false;
            attributeFormat.normalizationScale = 1;
        }

        if (typeof DataView !== 'undefined' && 'setFloat32' in DataView.prototype)
        {
            if (f === gl.BYTE)
            {
                attributeFormat.typedSetter = DataView.prototype.setInt8;
            }
            else if (f === gl.UNSIGNED_BYTE)
            {
                attributeFormat.typedSetter = DataView.prototype.setUint8;
            }
            else if (f === gl.SHORT)
            {
                attributeFormat.typedSetter = DataView.prototype.setInt16;
            }
            else if (f === gl.UNSIGNED_SHORT)
            {
                attributeFormat.typedSetter = DataView.prototype.setUint16;
            }
            else if (f === gl.INT)
            {
                attributeFormat.typedSetter = DataView.prototype.setInt32;
            }
            else if (f === gl.UNSIGNED_INT)
            {
                attributeFormat.typedSetter = DataView.prototype.setUint32;
            }
            else //if (f === gl.FLOAT)
            {
                attributeFormat.typedSetter = DataView.prototype.setFloat32;
            }
        }
        else
        {
            if (f === gl.BYTE)
            {
                attributeFormat.typedArray = Int8Array;
            }
            else if (f === gl.UNSIGNED_BYTE)
            {
                attributeFormat.typedArray = Uint8Array;
            }
            else if (f === gl.SHORT)
            {
                attributeFormat.typedArray = Int16Array;
            }
            else if (f === gl.UNSIGNED_SHORT)
            {
                attributeFormat.typedArray = Uint16Array;
            }
            else if (f === gl.INT)
            {
                attributeFormat.typedArray = Int32Array;
            }
            else if (f === gl.UNSIGNED_INT)
            {
                attributeFormat.typedArray = Uint32Array;
            }
            else //if (f === gl.FLOAT)
            {
                attributeFormat.typedArray = Float32Array;
            }
        }
        return attributeFormat;
    }

    gd.VERTEXFORMAT_BYTE4    = makeVertexformat(0, 4,  4, gl.BYTE, 'BYTE4');
    gd.VERTEXFORMAT_BYTE4N   = makeVertexformat(1, 4,  4, gl.BYTE, 'BYTE4N');
    gd.VERTEXFORMAT_UBYTE4   = makeVertexformat(0, 4,  4, gl.UNSIGNED_BYTE, 'UBYTE4');
    gd.VERTEXFORMAT_UBYTE4N  = makeVertexformat(1, 4,  4, gl.UNSIGNED_BYTE, 'UBYTE4N');
    gd.VERTEXFORMAT_SHORT2   = makeVertexformat(0, 2,  4, gl.SHORT, 'SHORT2');
    gd.VERTEXFORMAT_SHORT2N  = makeVertexformat(1, 2,  4, gl.SHORT, 'SHORT2N');
    gd.VERTEXFORMAT_SHORT4   = makeVertexformat(0, 4,  8, gl.SHORT, 'SHORT4');
    gd.VERTEXFORMAT_SHORT4N  = makeVertexformat(1, 4,  8, gl.SHORT, 'SHORT4N');
    gd.VERTEXFORMAT_USHORT2  = makeVertexformat(0, 2,  4, gl.UNSIGNED_SHORT, 'USHORT2');
    gd.VERTEXFORMAT_USHORT2N = makeVertexformat(1, 2,  4, gl.UNSIGNED_SHORT, 'USHORT2N');
    gd.VERTEXFORMAT_USHORT4  = makeVertexformat(0, 4,  8, gl.UNSIGNED_SHORT, 'USHORT4');
    gd.VERTEXFORMAT_USHORT4N = makeVertexformat(1, 4,  8, gl.UNSIGNED_SHORT, 'USHORT4N');
    gd.VERTEXFORMAT_FLOAT1   = makeVertexformat(0, 1,  4, gl.FLOAT, 'FLOAT1');
    gd.VERTEXFORMAT_FLOAT2   = makeVertexformat(0, 2,  8, gl.FLOAT, 'FLOAT2');
    gd.VERTEXFORMAT_FLOAT3   = makeVertexformat(0, 3, 12, gl.FLOAT, 'FLOAT3');
    gd.VERTEXFORMAT_FLOAT4   = makeVertexformat(0, 4, 16, gl.FLOAT, 'FLOAT4');

    gd.DEFAULT_SAMPLER = {
        minFilter : gl.LINEAR_MIPMAP_LINEAR,
        magFilter : gl.LINEAR,
        wrapS : gl.REPEAT,
        wrapT : gl.REPEAT,
        wrapR : gl.REPEAT,
        maxAnisotropy : 1
    };

    gd.cachedSamplers = {};

    var maxTextureUnit = 1;
    var maxUnit = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    if (maxTextureUnit < maxUnit)
    {
        maxTextureUnit = maxUnit;
    }
    maxUnit = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    if (maxTextureUnit < maxUnit)
    {
        maxTextureUnit = maxUnit;
    }

    var textureUnits = [];
    textureUnits.length = maxTextureUnit;
    for (var t = 0; t < maxTextureUnit; t += 1)
    {
        textureUnits[t] = {};
    }

    var defaultDepthFunc = gl.LEQUAL;
    var defaultBlendFuncSrc = gl.SRC_ALPHA;
    var defaultBlendFuncDst = gl.ONE_MINUS_SRC_ALPHA;
    var defaultCullFace = gl.BACK;
    var defaultFrontFace = gl.CCW;
    var defaultStencilFunc = gl.ALWAYS;
    var defaultStencilOp = gl.KEEP;

    var currentState = {
            depthTestEnable         : true,
            blendEnable             : false,
            cullFaceEnable          : true,
            stencilTestEnable       : false,
            polygonOffsetFillEnable : false,
            depthMask               : true,
            depthFunc               : defaultDepthFunc,
            blendSrc                : defaultBlendFuncSrc,
            blendDst                : defaultBlendFuncDst,
            cullFace                : defaultCullFace,
            frontFace               : defaultFrontFace,
            colorMask               : [true, true, true, true],
            stencilFunc             : defaultStencilFunc,
            stencilRef              : 0,
            stencilMask             : 0xffffffff,
            stencilFail             : defaultStencilOp,
            stencilZFail            : defaultStencilOp,
            stencilZPass            : defaultStencilOp,
            polygonOffsetFactor     : 0,
            polygonOffsetUnits      : 0,
            lineWidth               : 1,

            renderStatesToReset : [],

            viewportBox : [0, 0, width, height],
            scissorBox  : [0, 0, width, height],

            clearColor   : [0, 0, 0, 1],
            clearDepth   : 1.0,
            clearStencil : 0,

            activeTextureUnit : 0,
            maxTextureUnit    : maxTextureUnit,
            lastMaxTextureUnit: 0,
            textureUnits      : textureUnits,

            program : null
        };
    gd.state = currentState;

    // State handlers
    function setDepthTestEnable(enable)
    {
        if (currentState.depthTestEnable !== enable)
        {
            currentState.depthTestEnable = enable;
            if (enable)
            {
                gl.enable(gl.DEPTH_TEST);
            }
            else
            {
                gl.disable(gl.DEPTH_TEST);
            }
        }
    }

    function setDepthFunc(func)
    {
        if (currentState.depthFunc !== func)
        {
            currentState.depthFunc = func;
            gl.depthFunc(func);
        }
    }

    function setDepthMask(enable)
    {
        if (currentState.depthMask !== enable)
        {
            currentState.depthMask = enable;
            gl.depthMask(enable);
        }
    }

    function setBlendEnable(enable)
    {
        if (currentState.blendEnable !== enable)
        {
            currentState.blendEnable = enable;
            if (enable)
            {
                gl.enable(gl.BLEND);
            }
            else
            {
                gl.disable(gl.BLEND);
            }
        }
    }

    function setBlendFunc(src, dst)
    {
        if (currentState.blendSrc !== src || currentState.blendDst !== dst)
        {
            currentState.blendSrc = src;
            currentState.blendDst = dst;
            gl.blendFunc(src, dst);
        }
    }

    function setCullFaceEnable(enable)
    {
        if (currentState.cullFaceEnable !== enable)
        {
            currentState.cullFaceEnable = enable;
            if (enable)
            {
                gl.enable(gl.CULL_FACE);
            }
            else
            {
                gl.disable(gl.CULL_FACE);
            }
        }
    }

    function setCullFace(face)
    {
        if (currentState.cullFace !== face)
        {
            currentState.cullFace = face;
            gl.cullFace(face);
        }
    }

    function setFrontFace(face)
    {
        if (currentState.frontFace !== face)
        {
            currentState.frontFace = face;
            gl.frontFace(face);
        }
    }

    function setColorMask(mask0, mask1, mask2, mask3)
    {
        var colorMask = currentState.colorMask;
        if (colorMask[0] !== mask0 ||
            colorMask[1] !== mask1 ||
            colorMask[2] !== mask2 ||
            colorMask[3] !== mask3)
        {
            colorMask[0] = mask0;
            colorMask[1] = mask1;
            colorMask[2] = mask2;
            colorMask[3] = mask3;
            gl.colorMask(mask0, mask1, mask2, mask3);
        }
    }

    function setStencilTestEnable(enable)
    {
        if (currentState.stencilTestEnable !== enable)
        {
            currentState.stencilTestEnable = enable;
            if (enable)
            {
                gl.enable(gl.STENCIL_TEST);
            }
            else
            {
                gl.disable(gl.STENCIL_TEST);
            }
        }
    }

    function setStencilFunc(stencilFunc, stencilRef, stencilMask)
    {
        if (currentState.stencilFunc !== stencilFunc ||
            currentState.stencilRef !== stencilRef ||
            currentState.stencilMask !== stencilMask)
        {
            currentState.stencilFunc = stencilFunc;
            currentState.stencilRef = stencilRef;
            currentState.stencilMask = stencilMask;
            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
        }
    }

    function setStencilOp(stencilFail, stencilZfail, stencilZpass)
    {
        if (currentState.stencilFail !== stencilFail ||
            currentState.stencilZFail !== stencilZfail ||
            currentState.stencilZPass !== stencilZpass)
        {
            currentState.stencilFail = stencilFail;
            currentState.stencilZFail = stencilZfail;
            currentState.stencilZPass = stencilZpass;
            gl.stencilOp(stencilFail, stencilZfail, stencilZpass);
        }
    }

    function setPolygonOffsetFillEnable(enable)
    {
        if (currentState.polygonOffsetFillEnable !== enable)
        {
            currentState.polygonOffsetFillEnable = enable;
            if (enable)
            {
                gl.enable(gl.POLYGON_OFFSET_FILL);
            }
            else
            {
                gl.disable(gl.POLYGON_OFFSET_FILL);
            }
        }
    }

    function setPolygonOffset(factor, units)
    {
        if (currentState.polygonOffsetFactor !== factor ||
            currentState.polygonOffsetUnits !== units)
        {
            currentState.polygonOffsetFactor = factor;
            currentState.polygonOffsetUnits = units;
            gl.polygonOffset(factor, units);
        }
    }

    function setLineWidth(lineWidth)
    {
        if (currentState.lineWidth !== lineWidth)
        {
            currentState.lineWidth = lineWidth;
            gl.lineWidth(lineWidth);
        }
    }

    function resetDepthTestEnable()
    {
        //setDepthTestEnable(true);
        if (!currentState.depthTestEnable)
        {
            currentState.depthTestEnable = true;
            gl.enable(gl.DEPTH_TEST);
        }
    }

    function resetDepthFunc()
    {
        //setDepthFunc(defaultDepthFunc);
        var func = defaultDepthFunc;
        if (currentState.depthFunc !== func)
        {
            currentState.depthFunc = func;
            gl.depthFunc(func);
        }
    }

    function resetDepthMask()
    {
        //setDepthMask(true);
        if (!currentState.depthMask)
        {
            currentState.depthMask = true;
            gl.depthMask(true);
        }
    }

    function resetBlendEnable()
    {
        //setBlendEnable(false);
        if (currentState.blendEnable)
        {
            currentState.blendEnable = false;
            gl.disable(gl.BLEND);
        }
    }

    function resetBlendFunc()
    {
        //setBlendFunc(defaultBlendFuncSrc, defaultBlendFuncDst);
        var src = defaultBlendFuncSrc;
        var dst = defaultBlendFuncDst;
        if (currentState.blendSrc !== src || currentState.blendDst !== dst)
        {
            currentState.blendSrc = src;
            currentState.blendDst = dst;
            gl.blendFunc(src, dst);
        }
    }

    function resetCullFaceEnable()
    {
        //setCullFaceEnable(true);
        if (!currentState.cullFaceEnable)
        {
            currentState.cullFaceEnable = true;
            gl.enable(gl.CULL_FACE);
        }
    }

    function resetCullFace()
    {
        //setCullFace(defaultCullFace);
        var face = defaultCullFace;
        if (currentState.cullFace !== face)
        {
            currentState.cullFace = face;
            gl.cullFace(face);
        }
    }

    function resetFrontFace()
    {
        //setFrontFace(defaultFrontFace);
        var face = defaultFrontFace;
        if (currentState.frontFace !== face)
        {
            currentState.frontFace = face;
            gl.frontFace(face);
        }
    }

    function resetColorMask()
    {
        //setColorMask(true, true, true, true);
        var colorMask = currentState.colorMask;
        if (colorMask[0] !== true ||
            colorMask[1] !== true ||
            colorMask[2] !== true ||
            colorMask[3] !== true)
        {
            colorMask[0] = true;
            colorMask[1] = true;
            colorMask[2] = true;
            colorMask[3] = true;
            gl.colorMask(true, true, true, true);
        }
    }

    function resetStencilTestEnable()
    {
        //setStencilTestEnable(false);
        if (currentState.stencilTestEnable)
        {
            currentState.stencilTestEnable = false;
            gl.disable(gl.STENCIL_TEST);
        }
    }

    function resetStencilFunc()
    {
        //setStencilFunc(defaultStencilFunc, 0, 0xffffffff);
        var stencilFunc = defaultStencilFunc;
        if (currentState.stencilFunc !== stencilFunc ||
            currentState.stencilRef !== 0 ||
            currentState.stencilMask !== 0xffffffff)
        {
            currentState.stencilFunc = stencilFunc;
            currentState.stencilRef = 0;
            currentState.stencilMask = 0xffffffff;
            gl.stencilFunc(stencilFunc, 0, 0xffffffff);
        }
    }

    function resetStencilOp()
    {
        //setStencilOp(defaultStencilOp, defaultStencilOp, defaultStencilOp);
        var stencilOp = defaultStencilOp;
        if (currentState.stencilFail !== stencilOp ||
            currentState.stencilZFail !== stencilOp ||
            currentState.stencilZPass !== stencilOp)
        {
            currentState.stencilFail = stencilOp;
            currentState.stencilZFail = stencilOp;
            currentState.stencilZPass = stencilOp;
            gl.stencilOp(stencilOp, stencilOp, stencilOp);
        }
    }

    function resetPolygonOffsetFillEnable()
    {
        //setPolygonOffsetFillEnable(false);
        if (currentState.polygonOffsetFillEnable)
        {
            currentState.polygonOffsetFillEnable = false;
            gl.disable(gl.POLYGON_OFFSET_FILL);
        }
    }

    function resetPolygonOffset()
    {
        //setPolygonOffset(0, 0);
        if (currentState.polygonOffsetFactor !== 0 ||
            currentState.polygonOffsetUnits !== 0)
        {
            currentState.polygonOffsetFactor = 0;
            currentState.polygonOffsetUnits = 0;
            gl.polygonOffset(0, 0);
        }
    }

    function resetLineWidth()
    {
        //setLineWidth(1);
        if (currentState.lineWidth !== 1)
        {
            currentState.lineWidth = 1;
            gl.lineWidth(1);
        }
    }

    function parseBoolean(state)
    {
        if (typeof state === 'number')
        {
            return (state ? true : false);
        }
        if (typeof state !== 'boolean')
        {
            // TODO
            return null;
        }
        return [state];
    }

    function parseEnum(state)
    {
        if (typeof state !== 'number')
        {
            // TODO
            return null;
        }
        return [state];
    }

    function parseEnum2(state)
    {
        if (typeof state === 'object')
        {
            var value0 = state[0], value1 = state[1];
            if (typeof value0 !== 'number')
            {
                // TODO
                return null;
            }
            if (typeof value1 !== 'number')
            {
                // TODO
                return null;
            }
            return [value0, value1];
        }
        return null;
    }

    function parseEnum3(state)
    {
        if (typeof state === 'object')
        {
            var value0 = state[0], value1 = state[1], value2 = state[2];
            if (typeof value0 !== 'number')
            {
                // TODO
                return null;
            }
            if (typeof value1 !== 'number')
            {
                // TODO
                return null;
            }
            if (typeof value2 !== 'number')
            {
                // TODO
                return null;
            }
            return [value0, value1, value2];
        }
        return null;
    }

    function parseFloat(state)
    {
        if (typeof state !== 'number')
        {
            // TODO
            return null;
        }
        return [state];
    }

    function parseFloat2(state)
    {
        if (typeof state === 'object')
        {
            var value0 = state[0], value1 = state[1];
            if (typeof value0 !== 'number')
            {
                // TODO
                return null;
            }
            if (typeof value1 !== 'number')
            {
                // TODO
                return null;
            }
            return [value0, value1];
        }
        return null;
    }

    function parseColorMask(state)
    {
        if (typeof state === 'object')
        {
            var value0 = state[0], value1 = state[1], value2 = state[2], value3 = state[3];
            if (typeof value0 !== 'number')
            {
                // TODO
                return null;
            }
            if (typeof value1 !== 'number')
            {
                // TODO
                return null;
            }
            if (typeof value2 !== 'number')
            {
                // TODO
                return null;
            }
            if (typeof value3 !== 'number')
            {
                // TODO
                return null;
            }
            return [value0, value1, value2, value3];
        }
        return null;
    }

    var stateHandlers = {};
    function addStateHandler(name, sf, rf, pf, dv)
    {
        stateHandlers[name] = {
            set: sf,
            reset: rf,
            parse: pf,
            defaultValues: dv
        };
    }
    addStateHandler("DepthTestEnable", setDepthTestEnable, resetDepthTestEnable, parseBoolean, [true]);
    addStateHandler("DepthFunc", setDepthFunc, resetDepthFunc, parseEnum, [defaultDepthFunc]);
    addStateHandler("DepthMask", setDepthMask, resetDepthMask, parseBoolean, [true]);
    addStateHandler("BlendEnable", setBlendEnable, resetBlendEnable, parseBoolean, [false]);
    addStateHandler("BlendFunc", setBlendFunc, resetBlendFunc, parseEnum2, [defaultBlendFuncSrc, defaultBlendFuncDst]);
    addStateHandler("CullFaceEnable", setCullFaceEnable, resetCullFaceEnable, parseBoolean, [true]);
    addStateHandler("CullFace", setCullFace, resetCullFace, parseEnum, [defaultCullFace]);
    addStateHandler("FrontFace", setFrontFace, resetFrontFace, parseEnum, [defaultFrontFace]);
    addStateHandler("ColorMask", setColorMask, resetColorMask, parseColorMask, [true, true, true, true]);
    addStateHandler("StencilTestEnable", setStencilTestEnable, resetStencilTestEnable, parseBoolean, [false]);
    addStateHandler("StencilFunc", setStencilFunc, resetStencilFunc, parseEnum3, [defaultStencilFunc, 0, 0xffffffff]);
    addStateHandler("StencilOp", setStencilOp, resetStencilOp, parseEnum3, [defaultStencilOp, defaultStencilOp, defaultStencilOp]);
    addStateHandler("PolygonOffsetFillEnable", setPolygonOffsetFillEnable, resetPolygonOffsetFillEnable, parseBoolean, [false]);
    addStateHandler("PolygonOffset", setPolygonOffset, resetPolygonOffset, parseFloat2, [0, 0]);
    addStateHandler("LineWidth", setLineWidth, resetLineWidth, parseFloat, [1]);
    gd.stateHandlers = stateHandlers;

    gd.syncState();

    gd.videoRam = 0;
    gd.desktopWidth = window.screen.width;
    gd.desktopHeight = window.screen.height;

    if (Object.defineProperty)
    {
        Object.defineProperty(gd, "fullscreen", {
                get : function getFullscreenFn() {
                    return (document.fullscreenEnabled ||
                            document.mozFullScreen ||
                            document.webkitIsFullScreen ||
                            false);
                },
                set : function setFullscreenFn(newFullscreen) {
                    gd.requestFullScreen(newFullscreen);
                },
                enumerable : true,
                configurable : false
            });

        gd.checkFullScreen = function dummyCheckFullScreenFn()
        {
        };
    }
    else
    {
        gd.fullscreen = false;
        gd.oldFullscreen = false;
    }

    gd.clientStateMask = 0;
    gd.attributeMask = 0;
    gd.activeTechnique = null;
    gd.activeIndexBuffer = null;
    gd.bindedVertexBuffer = 0;
    gd.activeRenderTarget = null;

    gd.immediateVertexBuffer = gd.createVertexBuffer({
            numVertices: (256 * 1024 / 16),
            attributes: ['FLOAT4'],
            dynamic: true,
            'transient': true
        });
    gd.immediatePrimitive = -1;
    gd.immediateSemantics = [];

    gd.fps = 0;
    gd.numFrames = 0;
    gd.previousFrameTime = TurbulenzEngine.getTime();

    return gd;
};

// Copyright (c) 2011-2012 Turbulenz Limited

/*global window*/
/*global Touch: false*/
/*global TouchEvent: false*/
/*global TurbulenzEngine: false*/

//
// WebGLInputDevice
//
function WebGLInputDevice() {}
WebGLInputDevice.prototype = {

    version : 1,

    // Public API

    update : function inputDeviceUpdateFn()
    {
        if (!this.isWindowFocused)
        {
            return;
        }

        this.updateGamePad();
    },

    addEventListener : function addEventListenerFn(eventType, eventListener)
    {
        var i;
        var length;
        var eventHandlers;

        if (this.handlers.hasOwnProperty(eventType))
        {
            eventHandlers = this.handlers[eventType];

            if (eventListener)
            {
                // Check handler is not already stored
                length = eventHandlers.length;
                for (i = 0; i < length; i += 1)
                {
                    if (eventHandlers[i] === eventListener)
                    {
                        // Event handler has already been added
                        return;
                    }
                }

                eventHandlers.push(eventListener);
            }
        }
    },

    removeEventListener : function removeEventListenerFn(eventType, eventListener)
    {
        var i;
        var length;
        var eventHandlers;

        if (this.handlers.hasOwnProperty(eventType))
        {
            eventHandlers = this.handlers[eventType];

            if (eventListener)
            {
                length = eventHandlers.length;
                for (i = 0; i < length; i += 1)
                {
                    if (eventHandlers[i] === eventListener)
                    {
                        eventHandlers.splice(i, 1);
                        break;
                    }
                }
            }
        }
    },

    lockMouse : function lockMouseFn()
    {
        if (this.isHovering &&
            this.isWindowFocused)
        {
            this.isMouseLocked = true;
            this.hideMouse();

            this.requestBrowserLock();

            this.setEventHandlersLock();

            return true;
        }
        else
        {
            return false;
        }
    },

    unlockMouse : function unlockMouseFn()
    {
        if (this.isMouseLocked)
        {
            this.isMouseLocked = false;
            this.showMouse();

            this.requestBrowserUnlock();

            this.setEventHandlersUnlock();

            if (this.isOutsideEngine)
            {
                this.isOutsideEngine = false;

                this.isHovering = false;

                this.setEventHandlersMouseLeave();

                // Send mouseout event
                this.sendEventToHandlers(this.handlers.mouseleave);
            }

            // Send mouselocklost event
            this.sendEventToHandlers(this.handlers.mouselocklost);

            return true;
        }
        else
        {
            return false;
        }
    },

    isLocked : function isLockedFn()
    {
        return this.isMouseLocked;
    },

    hideMouse : function hideMouseFn()
    {
        if (this.isHovering)
        {
            if (!this.isCursorHidden)
            {
                this.isCursorHidden = true;
                this.previousCursor = document.body.style.cursor;
                document.body.style.cursor = 'none';
            }

            return true;
        }
        else
        {
            return false;
        }
    },

    showMouse : function showMouseFn()
    {
        if (this.isCursorHidden &&
            !this.isMouseLocked)
        {
            this.isCursorHidden = false;
            document.body.style.cursor = this.previousCursor;
            return true;
        }
        else
        {
            return false;
        }
    },

    isHidden : function isHiddenFn()
    {
        return this.isCursorHidden;
    },

    isFocused : function isFocused()
    {
        return this.isWindowFocused;
    },

    // Cannot convert keycodes to unicode in javascript so return empty strings
    convertToUnicode : function convertToUnicodeFn(keyCodeArray)
    {
        var keyCodeToUnicode = this.keyCodeToUnicode;
        var result = {};
        var length = keyCodeArray.length;
        var i;
        var keyCode;

        for (i = 0; i < length; i += 1)
        {
            keyCode = keyCodeArray[i];
            result[keyCode] = keyCodeToUnicode[keyCode] || "";
        }

        return result;
    },

    // KeyCodes: List of key codes and their values

    keyCodes :
    {
        A : 0,
        B : 1,
        C : 2,
        D : 3,
        E : 4,
        F : 5,
        G : 6,
        H : 7,
        I : 8,
        J : 9,
        K : 10,
        L : 11,
        M : 12,
        N : 13,
        O : 14,
        P : 15,
        Q : 16,
        R : 17,
        S : 18,
        T : 19,
        U : 20,
        V : 21,
        W : 22,
        X : 23,
        Y : 24,
        Z : 25,
        NUMBER_0 : 100,
        NUMBER_1 : 101,
        NUMBER_2 : 102,
        NUMBER_3 : 103,
        NUMBER_4 : 104,
        NUMBER_5 : 105,
        NUMBER_6 : 106,
        NUMBER_7 : 107,
        NUMBER_8 : 108,
        NUMBER_9 : 109,
        LEFT : 200,
        RIGHT : 201,
        UP : 202,
        DOWN : 203,
        LEFT_SHIFT : 300,
        RIGHT_SHIFT : 301,
        LEFT_CONTROL : 302,
        RIGHT_CONTROL : 303,
        LEFT_ALT : 304,
        RIGHT_ALT : 305,
        ESCAPE : 400,
        TAB : 401,
        SPACE :    402,
        BACKSPACE : 403,
        RETURN : 404,
        GRAVE : 500,
        MINUS : 501,
        EQUALS : 502,
        LEFT_BRACKET : 503,
        RIGHT_BRACKET : 504,
        SEMI_COLON : 505,
        APOSTROPHE : 506,
        COMMA : 507,
        PERIOD : 508,
        SLASH: 509,
        BACKSLASH: 510,
        F1 : 600,
        F2 : 601,
        F3 : 602,
        F4 : 603,
        F5 : 604,
        F6 : 605,
        F7 : 606,
        F8 : 607,
        F9 : 608,
        F10 : 609,
        F11 : 610,
        F12 : 611,
        NUMPAD_0 : 612,
        NUMPAD_1 : 613,
        NUMPAD_2 : 614,
        NUMPAD_3 : 615,
        NUMPAD_4 : 616,
        NUMPAD_5 : 617,
        NUMPAD_6 : 618,
        NUMPAD_7 : 619,
        NUMPAD_8 : 620,
        NUMPAD_9 : 621,
        NUMPAD_ENTER : 622,
        NUMPAD_DIVIDE : 623,
        NUMPAD_MULTIPLY : 624,
        NUMPAD_ADD : 625,
        NUMPAD_SUBTRACT : 626,
        LEFT_WIN : 627,
        RIGHT_WIN : 628,
        LEFT_OPTION : 629,
        RIGHT_OPTION : 630,
        CAPS_LOCK : 631,
        INSERT : 632,
        DELETE : 633,
        HOME : 634,
        END : 635,
        PAGE_UP: 636,
        PAGE_DOWN: 637
    },

    mouseCodes :
    {
        BUTTON_0 : 0,
        BUTTON_1 : 1,
        BUTTON_2 : 2,
        DELTA_X : 100,
        DELTA_Y : 101,
        MOUSE_WHEEL : 102
    },

    padCodes :
    {
        UP : 0,
        LEFT : 1,
        DOWN : 2,
        RIGHT : 3,
        A : 4,
        B : 5,
        X : 6,
        Y : 7,
        LEFT_TRIGGER : 8,
        RIGHT_TRIGGER : 9,
        LEFT_SHOULDER : 10,
        RIGHT_SHOULDER : 11,
        LEFT_THUMB : 12,
        LEFT_THUMB_X : 13,
        LEFT_THUMB_Y : 14,
        RIGHT_THUMB : 15,
        RIGHT_THUMB_X : 16,
        RIGHT_THUMB_Y : 17,
        START : 18,
        BACK : 19
    },

    // Private API

    sendEventToHandlers :
    function sendEventToHandlersFn(eventHandlers, arg0, arg1, arg2, arg3,
                                   arg4, arg5)
    {
        var i;
        var length = eventHandlers.length;

        if (length)
        {
            for (i = 0; i < length; i += 1)
            {
                eventHandlers[i](arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }
    },

    sendEventToHandlersASync :
    function sendEventToHandlersASyncFn(handlers, a0, a1, a2, a3, a4, a5)
    {
        var sendEvent = WebGLInputDevice.prototype.sendEventToHandlers;
        TurbulenzEngine.setTimeout(function callSendEventToHandlersFn() {
            sendEvent(handlers, a0, a1, a2, a3, a4, a5);
        }, 0);
    },

    updateGamePad : function updateGamePadFn()
    {
        var magnitude;
        var normalizedMagnitude;

        var gamepads = (navigator.gamepads ||
                        navigator.webkitGamepads ||
                        (navigator.webkitGetGamepads && navigator.webkitGetGamepads()));

        if (gamepads)
        {
            var deadZone = this.padAxisDeadZone;
            var maxAxisRange = this.maxAxisRange;
            var sendEvent = this.sendEventToHandlersASync;
            var handlers = this.handlers;
            var padButtons = this.padButtons;
            var padMap = this.padMap;
            var leftThumbX = 0;
            var leftThumbY = 0;
            var rightThumbX = 0;
            var rightThumbY = 0;

            var numGamePads = gamepads.length;
            for (var i = 0; i < numGamePads; i += 1)
            {
                var gamepad = gamepads[i];
                if (gamepad)
                {
                    // Update button states

                    var buttons = gamepad.buttons;

                    if (this.padTimestampUpdate < gamepad.timestamp)
                    {
                        this.padTimestampUpdate = gamepad.timestamp;

                        var numButtons = buttons.length;
                        for (var n = 0; n < numButtons; n += 1)
                        {
                            var value = buttons[n];
                            if (padButtons[n] !== value)
                            {
                                padButtons[n] = value;

                                var padCode = padMap[n];
                                if (padCode !== undefined)
                                {
                                    if (value)
                                    {
                                        sendEvent(handlers.paddown, padCode);
                                    }
                                    else
                                    {
                                        sendEvent(handlers.padup, padCode);
                                    }
                                }
                            }
                        }
                    }

                    // Update axes states

                    var axes = gamepad.axes;
                    if (axes.length <= 4)
                    {
                        // Axis 1 & 2
                        var lX = axes[0];
                        var lY = -axes[1];
                        magnitude = ((lX * lX) + (lY * lY));

                        if (magnitude > (deadZone * deadZone))
                        {
                            magnitude = Math.sqrt(magnitude);

                            // Normalize lX and lY
                            lX = (lX / magnitude);
                            lY = (lY / magnitude);

                            // Clip the magnitude at its max possible value
                            if (magnitude > maxAxisRange)
                            {
                                magnitude = maxAxisRange;
                            }

                            // Adjust magnitude relative to the end of the dead zone
                            magnitude -= deadZone;

                            // Normalize the magnitude
                            normalizedMagnitude = (magnitude / (maxAxisRange - deadZone));

                            leftThumbX = (lX * normalizedMagnitude);
                            leftThumbY = (lY * normalizedMagnitude);
                        }

                        // Axis 3 & 4
                        var rX = axes[2];
                        var rY = -axes[3];
                        magnitude = ((rX * rX) + (rY * rY));

                        if (magnitude > (deadZone * deadZone))
                        {
                            magnitude = Math.sqrt(magnitude);

                            // Normalize lX and lY
                            rX = (rX / magnitude);
                            rY = (rY / magnitude);

                            // Clip the magnitude at its max possible value
                            if (magnitude > maxAxisRange)
                            {
                                magnitude = maxAxisRange;
                            }

                            // Adjust magnitude relative to the end of the dead zone
                            magnitude -= deadZone;

                            // Normalize the magnitude
                            normalizedMagnitude = (magnitude / (maxAxisRange - deadZone));

                            rightThumbX = (rX * normalizedMagnitude);
                            rightThumbY = (rY * normalizedMagnitude);
                        }


                        sendEvent(handlers.padmove,
                                  leftThumbX, leftThumbY, buttons[6],
                                  rightThumbX, rightThumbY, buttons[7]);
                    }

                    // Our API only supports one active pad...
                    break;
                }
            }
        }
    },

    // Cannot detect locale in canvas mode
    getLocale : function getLocaleFn()
    {
        return "";
    },

    // Returns the local coordinates of the event (i.e. position in Canvas coords)
    getCanvasPosition : function getCanvasPositionFn(event, position)
    {
        if (event.offsetX !== undefined)
        {
            position.x = event.offsetX;
            position.y = event.offsetY;
        }
        else if (event.layerX !== undefined)
        {
            position.x = event.layerX;
            position.y = event.layerY;
        }
    },

    // Called when blurring
    resetKeyStates : function resetKeyStatesFn()
    {
        var keyName;
        var pressedKeys = this.pressedKeys;

        for (keyName in pressedKeys)
        {
            if (pressedKeys.hasOwnProperty(keyName))
            {
                pressedKeys[keyName] = false;
            }
        }
    },

    // Private mouse event methods

    onMouseOver : function onMouseOverFn(event)
    {
        var position = {};
        var mouseOverHandlers = this.handlers.mouseover;

        event.stopPropagation();
        event.preventDefault();

        this.getCanvasPosition(event, position);

        this.lastX = event.screenX;
        this.lastY = event.screenY;

        this.sendEventToHandlers(mouseOverHandlers, position.x, position.y);
    },

    onMouseMove : function onMouseMoveFn(event)
    {
        var mouseMoveHandlers = this.handlers.mousemove;

        var deltaX, deltaY;

        event.stopPropagation();
        event.preventDefault();

        if (this.ignoreNextMouseMoves)
        {
            this.ignoreNextMouseMoves -= 1;
            return;
        }

        if (event.movementX !== undefined)
        {
            deltaX = event.movementX;
            deltaY = event.movementY;
        }
        else if (event.mozMovementX !== undefined)
        {
            deltaX = event.mozMovementX;
            deltaY = event.mozMovementY;
        }
        else if (event.webkitMovementX !== undefined)
        {
            deltaX = event.webkitMovementX;
            deltaY = event.webkitMovementY;
        }
        else
        {
            deltaX = (event.screenX - this.lastX);
            deltaY = (event.screenY - this.lastY);
            if (0 === deltaX && 0 === deltaY)
            {
                return;
            }
        }

        this.lastX = event.screenX;
        this.lastY = event.screenY;

        this.sendEventToHandlers(mouseMoveHandlers, deltaX, deltaY);
    },

    onWheel : function onWheelFn(event)
    {
        var mouseWheelHandlers = this.handlers.mousewheel;

        var scrollDelta;

        event.stopPropagation();
        event.preventDefault();

        if (event.wheelDelta)
        {
            if (window.opera)
            {
                scrollDelta = event.wheelDelta < 0 ? 1 : -1;
            }
            else
            {
                scrollDelta = event.wheelDelta > 0 ? 1 : -1;
            }
        }
        else
        {
            scrollDelta = event.detail < 0 ? 1 : -1;
        }

        this.sendEventToHandlers(mouseWheelHandlers, scrollDelta);
    },

    emptyEvent : function emptyEventFn(event)
    {
        event.stopPropagation();
        event.preventDefault();
    },

    onWindowFocus : function onWindowFocusFn()
    {
        if (this.isHovering &&
            window.document.activeElement === this.canvas)
        {
            this.addInternalEventListener(window, 'mousedown', this.onMouseDown);
        }
    },

    onFocus : function onFocusFn()
    {
        var canvas = this.canvas;
        var handlers = this.handlers;
        var focusHandlers = handlers.focus;

        if (!this.isWindowFocused)
        {
            this.isWindowFocused = true;

            window.focus();
            canvas.focus();

            this.setEventHandlersFocus();

            canvas.oncontextmenu = function () {
                return false;
            };

            this.sendEventToHandlers(focusHandlers);
        }
    },

    onBlur : function onBlurFn()
    {
        var canvas = this.canvas;
        var handlers = this.handlers;
        var blurHandlers = handlers.blur;

        if (this.isMouseLocked)
        {
            this.unlockMouse();
        }

        if (this.isWindowFocused)
        {
            this.isWindowFocused = false;

            this.resetKeyStates();
            this.setEventHandlersBlur();
            canvas.oncontextmenu = null;

            this.sendEventToHandlers(blurHandlers);
        }
    },

    onMouseDown : function onMouseDownFn(event)
    {
        var handlers = this.handlers;

        if (this.isHovering)
        {
            var mouseDownHandlers = handlers.mousedown;
            var button = event.button;
            var position = {};

            this.onFocus();

            event.stopPropagation();
            event.preventDefault();

            if (button < 3)
            {
                button = this.mouseMap[button];
            }

            this.getCanvasPosition(event, position);

            this.sendEventToHandlers(mouseDownHandlers, button, position.x, position.y);
        }
        else
        {
            this.onBlur();
        }
    },

    onMouseUp : function onMouseUpFn(event)
    {
        var mouseUpHandlers = this.handlers.mouseup;

        if (this.isHovering)
        {
            var button = event.button;
            var position = {};

            event.stopPropagation();
            event.preventDefault();

            if (button < 3)
            {
                button = this.mouseMap[button];
            }

            this.getCanvasPosition(event, position);

            this.sendEventToHandlers(mouseUpHandlers, button, position.x, position.y);
        }
    },

    // Private key event methods

    onKeyDown : function onKeyDownFn(event)
    {
        var keyDownHandlers = this.handlers.keydown;
        var pressedKeys = this.pressedKeys;
        var keyCodes = this.keyCodes;

        event.stopPropagation();
        event.preventDefault();

        var keyCode = event.keyCode;
        keyCode = this.keyMap[keyCode];

        var keyLocation = event.keyLocation || event.location;

        if (undefined !== keyCode &&
           (keyCodes.ESCAPE !== keyCode))
        {
            // Handle left / right key locations
            //   DOM_KEY_LOCATION_STANDARD = 0x00;
            //   DOM_KEY_LOCATION_LEFT     = 0x01;
            //   DOM_KEY_LOCATION_RIGHT    = 0x02;
            //   DOM_KEY_LOCATION_NUMPAD   = 0x03;
            //   DOM_KEY_LOCATION_MOBILE   = 0x04;
            //   DOM_KEY_LOCATION_JOYSTICK = 0x05;

            if (2 === keyLocation)
            {
                // The Turbulenz KeyCodes are such that CTRL, SHIFT
                // and ALT have their RIGHT versions exactly one above
                // the LEFT versions.
                keyCode = keyCode + 1;
            }
            if (!pressedKeys[keyCode])
            {
                pressedKeys[keyCode] = true;
                this.sendEventToHandlers(keyDownHandlers, keyCode);
            }
        }
    },

    onKeyUp : function onKeyUpFn(event)
    {
        var keyUpHandlers = this.handlers.keyup;
        var pressedKeys = this.pressedKeys;
        var keyCodes = this.keyCodes;

        event.stopPropagation();
        event.preventDefault();

        var keyCode = event.keyCode;
        keyCode = this.keyMap[keyCode];

        var keyLocation = event.keyLocation || event.location;

        if (keyCode === keyCodes.ESCAPE)
        {
            this.unlockMouse();
        }
        else if (undefined !== keyCode)
        {
            // Handle LEFT / RIGHT.  (See OnKeyDown)

            if (2 === keyLocation)
            {
                keyCode = keyCode + 1;
            }
            if (pressedKeys[keyCode])
            {
                pressedKeys[keyCode] = false;
                this.sendEventToHandlers(keyUpHandlers, keyCode);
            }
        }
    },

    // Private touch event methods

    onTouchStart : function onTouchStartFn(event)
    {
        var eventHandlers = this.handlers.touchstart;

        event.preventDefault();

        // Store new touches
        this.addTouches(event.changedTouches);

        event = this.convertW3TouchEventToTurbulenzTouchEvent(event);

        this.sendEventToHandlers(eventHandlers, event);
    },

    onTouchEnd : function onTouchEndFn(event)
    {
        var eventHandlers = this.handlers.touchend;

        event.preventDefault();

        event = this.convertW3TouchEventToTurbulenzTouchEvent(event);

        // Remove ended touches
        this.removeTouches(event.changedTouches);

        this.sendEventToHandlers(eventHandlers, event);
    },

    onTouchMove : function onTouchMoveFn(event)
    {
        var eventHandlers = this.handlers.touchmove;

        event.preventDefault();

        this.addTouches(event.changedTouches);

        event = this.convertW3TouchEventToTurbulenzTouchEvent(event);

        this.sendEventToHandlers(eventHandlers, event);
    },

    onTouchEnter : function onTouchEnterFn(event)
    {
        var eventHandlers = this.handlers.touchenter;

        event.preventDefault();

        event = this.convertW3TouchEventToTurbulenzTouchEvent(event);

        this.sendEventToHandlers(eventHandlers, event);
    },

    onTouchLeave : function onTouchLeaveFn(event)
    {
        var eventHandlers = this.handlers.touchleave;

        event.preventDefault();

        event = this.convertW3TouchEventToTurbulenzTouchEvent(event);

        this.sendEventToHandlers(eventHandlers, event);
    },

    onTouchCancel : function onTouchCancelFn(event)
    {
        var eventHandlers = this.handlers.touchcancel;

        event.preventDefault();

        event = this.convertW3TouchEventToTurbulenzTouchEvent(event);

        // Remove canceled touches
        this.removeTouches(event.changedTouches);

        this.sendEventToHandlers(eventHandlers, event);
    },

    convertW3TouchEventToTurbulenzTouchEvent : function convertW3TouchEventToTurbulenzTouchEventFn(w3TouchEvent)
    {
        // Initialize changedTouches
        var changedTouches = this.convertW3TouchListToTurbulenzTouchList(w3TouchEvent.changedTouches);

        // Initialize gameTouches
        var gameTouches = this.convertW3TouchListToTurbulenzTouchList(w3TouchEvent.targetTouches);

        // Initialize touches
        var touches = this.convertW3TouchListToTurbulenzTouchList(w3TouchEvent.touches);

        var touchEventParams =
        {
            changedTouches  : changedTouches,
            gameTouches     : gameTouches,
            touches         : touches
        };

        return TouchEvent.create(touchEventParams);
    },

    convertW3TouchListToTurbulenzTouchList : function convertW3TouchListToTurbulenzTouchListFn(w3TouchList)
    {
        // Set changedTouches
        var w3TouchListLength = w3TouchList.length;
        var touchList = [];

        var touch;
        var touchIndex;

        touchList.length = w3TouchListLength;

        for (touchIndex = 0; touchIndex < w3TouchListLength; touchIndex += 1)
        {
            touch = this.getTouchById(w3TouchList[touchIndex].identifier);
            touchList[touchIndex] = touch;
        }

        return touchList;
    },

    convertW3TouchToTurbulenzTouch : function convertW3TouchToTurbulenzTouchFn(w3Touch)
    {
        var canvasElement   = this.canvas;
        var canvasRect      = canvasElement.getBoundingClientRect();

        var touchParams =
        {
            force           : (w3Touch.force || w3Touch.webkitForce || 0),
            identifier      : w3Touch.identifier,
            isGameTouch     : (w3Touch.target === canvasElement),
            positionX       : (w3Touch.pageX - canvasRect.left),
            positionY       : (w3Touch.pageY - canvasRect.top),
            radiusX         : (w3Touch.radiusX || w3Touch.webkitRadiusX || 1),
            radiusY         : (w3Touch.radiusY || w3Touch.webkitRadiusY || 1),
            rotationAngle   : (w3Touch.rotationAngle || w3Touch.webkitRotationAngle || 0)
        };

        return Touch.create(touchParams);
    },

    addTouches : function addTouchesFn(w3TouchList)
    {
        var w3TouchListLength = w3TouchList.length;

        var touchIndex;
        var touch;

        for (touchIndex = 0; touchIndex < w3TouchListLength; touchIndex += 1)
        {
            touch = this.convertW3TouchToTurbulenzTouch(w3TouchList[touchIndex]);
            this.addTouch(touch);
        }
    },

    removeTouches : function removeTouchesFn(w3TouchList)
    {
        var w3TouchListLength = w3TouchList.length;

        var touchIndex;
        var touchId;

        for (touchIndex = 0; touchIndex < w3TouchListLength; touchIndex += 1)
        {
            touchId = w3TouchList[touchIndex].identifier;
            this.removeTouchById(touchId);
        }
    },

    addTouch : function addTouchFn(touch)
    {
        this.touches[touch.identifier] = touch;
    },

    getTouchById : function getTouchByIdFn(id)
    {
        return this.touches[id];
    },

    removeTouchById : function removeTouchByIdFn(id)
    {
        delete this.touches[id];
    },

    // Canvas event handlers

    canvasOnMouseOver : function canvasOnMouseOverFn(event)
    {
        var mouseEnterHandlers = this.handlers.mouseenter;

        if (!this.isMouseLocked)
        {
            this.isHovering = true;

            this.lastX = event.screenX;
            this.lastY = event.screenY;

            this.setEventHandlersMouseEnter();

            // Send mouseover event
            this.sendEventToHandlers(mouseEnterHandlers);
        }
        else
        {
            this.isOutsideEngine = false;
        }
    },

    canvasOnMouseOut : function canvasOnMouseOutFn(event)
    {
        var mouseLeaveHandlers = this.handlers.mouseleave;

        if (!this.isMouseLocked)
        {
            this.isHovering = false;

            if (this.isCursorHidden)
            {
                this.showMouse();
            }

            this.setEventHandlersMouseLeave();

            // Send mouseout event
            this.sendEventToHandlers(mouseLeaveHandlers);
        }
        else
        {
            this.isOutsideEngine = true;
        }
    },

    // This is required in order to detect hovering when we missed the initial mouseover event
    canvasOnMouseDown : function canvasOnMouseDownFn(event)
    {
        var mouseEnterHandlers = this.handlers.mouseenter;

        this.canvas.onmousedown = null;

        if (!this.isHovering)
        {
            this.isHovering = true;

            this.lastX = event.screenX;
            this.lastY = event.screenY;

            this.setEventHandlersMouseEnter();

            this.sendEventToHandlers(mouseEnterHandlers);

            this.onMouseDown(event);
        }

        return false;
    },

    // Window event handlers

    onFullscreenChanged : function onFullscreenChangedFn(event)
    {
        if (this.isMouseLocked)
        {
            if (document.fullscreenEnabled || document.mozFullScreen || document.webkitIsFullScreen)
            {
                this.ignoreNextMouseMoves = 2; // Some browsers will send 2 mouse events with a massive delta
                this.requestBrowserLock();
            }
            else
            {
                // Browsers capture the escape key whilst in fullscreen
                this.unlockMouse();
            }
        }
    },

    // Set event handler methods

    setEventHandlersMouseEnter : function setEventHandlersMouseEnterFn()
    {
        // Add event listener to get focus event
        if (!this.isFocused())
        {
            this.addInternalEventListener(window, 'mousedown', this.onMouseDown);
        }

        this.addInternalEventListener(window, 'mouseup', this.onMouseUp);
        this.addInternalEventListener(window, 'mousemove', this.onMouseOver);
        this.addInternalEventListener(window, 'DOMMouseScroll', this.onWheel);
        this.addInternalEventListener(window, 'mousewheel', this.onWheel);
        this.addInternalEventListener(window, 'click', this.emptyEvent);
    },

    setEventHandlersMouseLeave : function setEventHandlersMouseLeaveFn()
    {
        // We do not need a mousedown listener if not focused
        if (!this.isFocused())
        {
            this.removeInternalEventListener(window, 'mousedown', this.onMouseDown);
        }

        // Remove mouse event listeners
        this.removeInternalEventListener(window, 'mouseup', this.onMouseUp);
        this.removeInternalEventListener(window, 'mousemove', this.onMouseOver);
        this.removeInternalEventListener(window, 'DOMMouseScroll', this.onWheel);
        this.removeInternalEventListener(window, 'mousewheel', this.onWheel);
        this.removeInternalEventListener(window, 'click', this.emptyEvent);
    },

    setEventHandlersFocus : function setEventHandlersFocusFn()
    {
        this.addInternalEventListener(window, 'keydown', this.onKeyDown);
        this.addInternalEventListener(window, 'keyup', this.onKeyUp);
    },

    setEventHandlersBlur : function setEventHandlersBlurFn()
    {
        this.removeInternalEventListener(window, 'keydown', this.onKeyDown);
        this.removeInternalEventListener(window, 'keyup', this.onKeyUp);
        this.removeInternalEventListener(window, 'mousedown', this.onMouseDown);
    },

    setEventHandlersLock : function setEventHandlersLockFn()
    {
        this.removeInternalEventListener(window, 'mousemove', this.onMouseOver);

        this.addInternalEventListener(window, 'mousemove', this.onMouseMove);
        this.addInternalEventListener(window, 'fullscreenchange', this.onFullscreenChanged);
        this.addInternalEventListener(window, 'mozfullscreenchange', this.onFullscreenChanged);
        this.addInternalEventListener(window, 'webkitfullscreenchange', this.onFullscreenChanged);
    },

    setEventHandlersUnlock : function setEventHandlersUnlockFn()
    {
        this.removeInternalEventListener(window, 'webkitfullscreenchange', this.onFullscreenChanged);
        this.removeInternalEventListener(window, 'mozfullscreenchange', this.onFullscreenChanged);
        this.removeInternalEventListener(window, 'fullscreenchange', this.onFullscreenChanged);
        this.removeInternalEventListener(window, 'mousemove', this.onMouseMove);

        this.addInternalEventListener(window, 'mousemove', this.onMouseOver);
    },

    setEventHandlersCanvas : function setEventHandlersCanvasFn()
    {
        var canvas = this.canvas;

        this.addInternalEventListener(canvas, 'mouseover', this.canvasOnMouseOver);
        this.addInternalEventListener(canvas, 'mouseout', this.canvasOnMouseOut);
        this.addInternalEventListener(canvas, 'mousedown', this.canvasOnMouseDown);
    },

    setEventHandlersWindow : function setEventHandlersWindowFn()
    {
        this.addInternalEventListener(window, 'blur', this.onBlur);
        this.addInternalEventListener(window, 'focus', this.onWindowFocus);
    },

    removeEventHandlersWindow : function removeEventHandlersWindowFn()
    {
        this.removeInternalEventListener(window, 'blur', this.onBlur);
        this.removeInternalEventListener(window, 'focus', this.onWindowFocus);
    },

    setEventHandlersTouch : function setEventHandlersTouchFn()
    {
        var canvas = this.canvas;

        this.addInternalEventListener(canvas, 'touchstart', this.onTouchStart);
        this.addInternalEventListener(canvas, 'touchend', this.onTouchEnd);
        this.addInternalEventListener(canvas, 'touchenter', this.onTouchEnter);
        this.addInternalEventListener(canvas, 'touchleave', this.onTouchLeave);
        this.addInternalEventListener(canvas, 'touchmove', this.onTouchMove);
        this.addInternalEventListener(canvas, 'touchcancel', this.onTouchCancel);
    },

    // Helper methods

    addInternalEventListener : function addInternalEventListenerFn(element, eventName, eventHandler)
    {
        var elementEventFlag = this.elementEventFlags[element];
        if (!elementEventFlag)
        {
            this.elementEventFlags[element] = elementEventFlag = {};
        }

        if (!elementEventFlag[eventName])
        {
            elementEventFlag[eventName] = true;

            var boundEventHandler = this.boundFunctions[eventHandler];
            if (!boundEventHandler)
            {
                this.boundFunctions[eventHandler] = boundEventHandler = eventHandler.bind(this);
            }

            element.addEventListener(eventName, boundEventHandler, false);
        }
    },

    removeInternalEventListener : function removeInternalEventListenerFn(element, eventName, eventHandler)
    {
        var elementEventFlag = this.elementEventFlags[element];
        if (elementEventFlag)
        {
            if (elementEventFlag[eventName])
            {
                elementEventFlag[eventName] = false;

                var boundEventHandler = this.boundFunctions[eventHandler];

                element.removeEventListener(eventName, boundEventHandler, false);
            }
        }
    },

    destroy : function destroyFn()
    {
        // Remove all event listeners
        if (this.isLocked())
        {
            this.setEventHandlersUnlock();
        }

        if (this.isHovering)
        {
            this.setEventHandlersMouseLeave();
        }

        if (this.isWindowFocused)
        {
            this.setEventHandlersBlur();
        }

        this.removeEventHandlersWindow();

        var canvas = this.canvas;
        canvas.onmouseover = null;
        canvas.onmouseout = null;
        canvas.onmousedown = null;
    }
};

// Constructor function
WebGLInputDevice.create = function webGLInputDeviceFn(canvas, params)
{
    var id = new WebGLInputDevice();

    id.lastX = 0;
    id.lastY = 0;

    id.touches = {};

    id.boundFunctions = {};
    id.elementEventFlags = {};

    id.canvas = canvas;
    id.isMouseLocked = false;
    id.isHovering = false;
    id.isWindowFocused = false;
    id.isCursorHidden = false;
    id.isOutsideEngine = false; // Used for determining where we are when unlocking
    id.previousCursor = '';
    id.ignoreNextMouseMoves = 0;

    // Used to screen out auto-repeats, dictionary from keycode to bool,
    // true for each key currently pressed down
    id.pressedKeys = {};

    // Game event handlers
    id.handlers =
    {
        keydown : [],
        keyup : [],

        mousedown : [],
        mouseup : [],
        mousewheel : [],
        mouseover : [],
        mousemove : [],

        paddown : [],
        padup : [],
        padmove : [],

        mouseenter : [],
        mouseleave : [],
        focus : [],
        blur : [],
        mouselocklost : [],

        touchstart : [],
        touchend : [],
        touchenter : [],
        touchleave : [],
        touchmove : [],
        touchcancel : []
    };

    // Populate the keyCodeToUnicodeTable.  Just use the 'key' part of
    // the keycodes, overriding some special cases.

    var keyCodeToUnicodeTable = {};
    var keyCodes = id.keyCodes;
    for (var k in keyCodes)
    {
        if (keyCodes.hasOwnProperty(k))
        {
            var code = keyCodes[k];
            keyCodeToUnicodeTable[code] = k;
        }
    }
    keyCodeToUnicodeTable[keyCodes.SPACE] = ' ';
    keyCodeToUnicodeTable[keyCodes.NUMBER_0] = '0';
    keyCodeToUnicodeTable[keyCodes.NUMBER_1] = '1';
    keyCodeToUnicodeTable[keyCodes.NUMBER_2] = '2';
    keyCodeToUnicodeTable[keyCodes.NUMBER_3] = '3';
    keyCodeToUnicodeTable[keyCodes.NUMBER_4] = '4';
    keyCodeToUnicodeTable[keyCodes.NUMBER_5] = '5';
    keyCodeToUnicodeTable[keyCodes.NUMBER_6] = '6';
    keyCodeToUnicodeTable[keyCodes.NUMBER_7] = '7';
    keyCodeToUnicodeTable[keyCodes.NUMBER_8] = '8';
    keyCodeToUnicodeTable[keyCodes.NUMBER_9] = '9';
    keyCodeToUnicodeTable[keyCodes.GRAVE] = '`';
    keyCodeToUnicodeTable[keyCodes.MINUS] = '-';
    keyCodeToUnicodeTable[keyCodes.EQUALS] = '=';
    keyCodeToUnicodeTable[keyCodes.LEFT_BRACKET] = '[';
    keyCodeToUnicodeTable[keyCodes.RIGHT_BRACKET] = ']';
    keyCodeToUnicodeTable[keyCodes.SEMI_COLON] = ';';
    keyCodeToUnicodeTable[keyCodes.APOSTROPHE] = "'";
    keyCodeToUnicodeTable[keyCodes.COMMA] = ',';
    keyCodeToUnicodeTable[keyCodes.PERIOD] = '.';
    keyCodeToUnicodeTable[keyCodes.SLASH] = '/';
    keyCodeToUnicodeTable[keyCodes.BACKSLASH] = '\\';

    // KeyMap: Maps JavaScript keycodes to Turbulenz keycodes - some
    // keycodes are consistent across all browsers and some mappings
    // are browser specific.
    var keyMap = {};

    // A-Z
    keyMap[65] = 0; // A
    keyMap[66] = 1; // B
    keyMap[67] = 2; // C
    keyMap[68] = 3; // D
    keyMap[69] = 4; // E
    keyMap[70] = 5; // F
    keyMap[71] = 6; // G
    keyMap[72] = 7; // H
    keyMap[73] = 8; // I
    keyMap[74] = 9; // J
    keyMap[75] = 10; // K
    keyMap[76] = 11; // L
    keyMap[77] = 12; // M
    keyMap[78] = 13; // N
    keyMap[79] = 14; // O
    keyMap[80] = 15; // P
    keyMap[81] = 16; // Q
    keyMap[82] = 17; // R
    keyMap[83] = 18; // S
    keyMap[84] = 19; // T
    keyMap[85] = 20; // U
    keyMap[86] = 21; // V
    keyMap[87] = 22; // X
    keyMap[88] = 23; // W
    keyMap[89] = 24; // Y
    keyMap[90] = 25; // Z

    // 0-9
    keyMap[48] = 100; // 0
    keyMap[49] = 101; // 1
    keyMap[50] = 102; // 2
    keyMap[51] = 103; // 3
    keyMap[52] = 104; // 4
    keyMap[53] = 105; // 5
    keyMap[54] = 106; // 6
    keyMap[55] = 107; // 7
    keyMap[56] = 108; // 8
    keyMap[57] = 109; // 9

    // Arrow keys
    keyMap[37] = 200; // LEFT
    keyMap[39] = 201; // RIGHT
    keyMap[38] = 202; // UP
    keyMap[40] = 203; // DOWN

    // Modifier keys
    keyMap[16] = 300; // LEFT_SHIFT
    //keyMap[16] = 301; // RIGHT_SHIFT
    keyMap[17] = 302; // LEFT_CONTROL
    //keyMap[17] = 303; // RIGHT_CONTROL
    keyMap[18] = 304; // LEFT_ALT
    keyMap[0] = 305; // RIGHT_ALT

    // Special keys
    keyMap[27] = 400; // ESCAPE
    keyMap[9] = 401; // TAB
    keyMap[32] = 402; // SPACE
    keyMap[8] = 403; // BACKSPACE
    keyMap[13] = 404; // RETURN

    // Punctuation keys
    keyMap[223] = 500; // GRAVE
    keyMap[109] = 501; // MINUS (mozilla - gecko)
    keyMap[189] = 501; // MINUS (ie + webkit)
    keyMap[107] = 502; // EQUALS (mozilla - gecko)
    keyMap[187] = 502; // EQUALS (ie + webkit)
    keyMap[219] = 503; // LEFT_BRACKET
    keyMap[221] = 504; // RIGHT_BRACKET
    keyMap[59] = 505; // SEMI_COLON (mozilla - gecko)
    keyMap[186] = 505; // SEMI_COLON (ie + webkit)
    keyMap[192] = 506; // APOSTROPHE
    keyMap[188] = 507; // COMMA
    keyMap[190] = 508; // PERIOD

    // if Mac OS then overwrite apostrophe and grave key-mappings
    if (navigator.appVersion.indexOf("Mac") !== -1)
    {
        keyMap[192] = 500; // GRAVE (mac webkit)
        keyMap[0] = 500; // GRAVE (mac gecko + safari 5.1)
        keyMap[222] = 506; // APOSTROPHE (mac webkit)
    }

    // Non-standard keys
    keyMap[112] = 600; // F1
    keyMap[113] = 601; // F2
    keyMap[114] = 602; // F3
    keyMap[115] = 603; // F4
    keyMap[116] = 604; // F5
    keyMap[117] = 605; // F6
    keyMap[118] = 606; // F7
    keyMap[119] = 607; // F8
    keyMap[120] = 608; // F9
    keyMap[121] = 609; // F10
    keyMap[122] = 610; // F11
    keyMap[123] = 611; // F12
    //keyMap[45 : 612, // NUMPAD_0 (numlock on/off)
    keyMap[96] = 612; // NUMPAD_0 (numlock on/off)
    //keyMap[35] = 613;, // NUMPAD_1 (numlock on/off)
    keyMap[97] = 613; // NUMPAD_1 (numlock on/off)
    //keyMap[40] = 614; // NUMPAD_2 (numlock on/off)
    keyMap[98] = 614; // NUMPAD_2 (numlock on/off)
    //keyMap[34] = 615; // NUMPAD_3 (numlock on/off)
    keyMap[99] = 615; // NUMPAD_3 (numlock on/off)
    //keyMap[37] = 616;, // NUMPAD_4 (numlock on/off)
    keyMap[100] = 616; // NUMPAD_4 (numlock on/off)
    keyMap[12] = 617; // NUMPAD_5 (numlock on/off)
    keyMap[101] = 617; // NUMPAD_5 (numlock on/off)
    keyMap[144] = 617; // NUMPAD_5 (numlock on/off)
    //keyMap[39] = 618; // NUMPAD_6 (numlock on/off)
    keyMap[102] = 618; // NUMPAD_6 (numlock on/off)
    //keyMap[36] = 619; // NUMPAD_7 (numlock on/off)
    keyMap[103] = 619; // NUMPAD_7 (numlock on/off)
    //keyMap[38] = 620; // NUMPAD_8 (numlock on/off)
    keyMap[104] = 620; // NUMPAD_8 (numlock on/off)
    //keyMap[33] = 621; // NUMPAD_9 (numlock on/off)
    keyMap[105] = 621; // NUMPAD_9 (numlock on/off)
    //keyMap[13] = 622; // NUMPAD_ENTER (numlock on/off)
    keyMap[111] = 623; // NUMPAD_DIVIDE (numlock on/off)
    keyMap[191] = 623; // NUMPAD_DIVIDE (numlock on/off), mac chrome
    keyMap[106] = 624; // NUMPAD_MULTIPLY (numlock on/off)
    //keyMap[107] = 625; // NUMPAD_ADD (numlock on/off)
    //keyMap[109] = 626; // NUMPAD_SUBTRACT (numlock on/off)
    keyMap[91] = 627; // LEFT_WIN
    keyMap[224] = 627; // LEFT_WIN (mac, firefox)
    keyMap[92] = 628; // RIGHT_WIN
    keyMap[93] = 628; // RIGHT_WIN (mac, chrome)
    //: 629, // LEFT_OPTION
    //: 630, // RIGHT_OPTION
    keyMap[20] = 631; // CAPS_LOCK
    keyMap[45] = 632; // INSERT
    keyMap[46] = 633; // DELETE
    keyMap[36] = 634; // HOME
    keyMap[35] = 635; // END
    keyMap[33] = 636; // PAGE_UP
    keyMap[34] = 637; // PAGE_DOWN

    id.keyMap = keyMap;

    // MouseMap: Maps current mouse controls to new controls
    var mouseMap =
    {
        0 : 0,
        1 : 2,
        2 : 1
    };

    id.mouseMap = mouseMap;

    // padMap: Maps current pad buttons to new buttons
    var padMap =
    {
        0 : 4, // A
        1 : 5, // B
        2 : 6, // X
        3 : 7, // Y

        4 : 10, // LEFT_SHOULDER
        5 : 11, // RIGHT_SHOULDER

        8 : 19, // BACK
        9 : 18, // START

        10 : 12, // LEFT_THUMB
        11 : 15, // RIGHT_THUMB

        12 : 0, // UP
        13 : 2, // DOWN
        14 : 1, // LEFT
        15 : 3  // RIGHT
    };

    id.padMap = padMap;

    id.keyCodeToUnicode = keyCodeToUnicodeTable;

    id.padButtons = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    id.padMap = padMap;
    id.padAxisDeadZone = 0.26;
    id.maxAxisRange = 1.0;
    id.padTimestampUpdate = 0;

    // Pointer locking
    var requestPointerLock = (canvas.requestPointerLock    ||
                              canvas.mozRequestPointerLock ||
                              canvas.webkitRequestPointerLock);
    if (requestPointerLock)
    {
        var exitPointerLock = (document.exitPointerLock    ||
                               document.mozExitPointerLock ||
                               document.webkitExitPointerLock);

        id.requestBrowserLock = function requestBrowserLockFn()
        {
            var pointerLockElement = (document.pointerLockElement    ||
                                      document.mozPointerLockElement ||
                                      document.webkitPointerLockElement);
            if (pointerLockElement !== canvas)
            {
                requestPointerLock.call(canvas);
            }
        };

        id.requestBrowserUnlock = function requestBrowserUnlockFn()
        {
            var pointerLockElement = (document.pointerLockElement    ||
                                      document.mozPointerLockElement ||
                                      document.webkitPointerLockElement);
            if (pointerLockElement === canvas)
            {
                exitPointerLock.call(document);
            }
        };
    }
    else
    {
        var pointer = (navigator.pointer || navigator.webkitPointer);
        if (pointer)
        {
            id.requestBrowserLock = function requestBrowserLockFn()
            {
                if (!pointer.isLocked)
                {
                    pointer.lock(canvas);
                }
            };

            id.requestBrowserUnlock = function requestBrowserUnlockFn()
            {
                if (pointer.isLocked)
                {
                    pointer.unlock();
                }
            };
        }
        else
        {
            id.requestBrowserLock = function requestBrowserLockFn() {};
            id.requestBrowserUnlock = function requestBrowserUnlockFn() {};
        }
    }

    // Add canvas mouse event listeners
    id.setEventHandlersCanvas();

    // Add window blur event listener
    id.setEventHandlersWindow();

    // Add canvas touch event listeners
    id.setEventHandlersTouch();

    return id;
};

// Copyright (c) 2011-2012 Turbulenz Limited
/*global window*/


//
// WebGLNetworkDevice
//
function WebGLNetworkDevice() {}
WebGLNetworkDevice.prototype = {

    version : 1,

    WebSocketConstructor : (window.WebSocket ? window.WebSocket : window.MozWebSocket),

    createWebSocket : function createWebSocketdFn(url, protocol)
    {
        var WebSocketConstructor = this.WebSocketConstructor;
        if (WebSocketConstructor)
        {
            var ws;
            if (protocol)
            {
                ws = new WebSocketConstructor(url, protocol);
            }
            else
            {
                ws = new WebSocketConstructor(url);
            }
            if (typeof ws.destroy === "undefined")
            {
                ws.destroy = function websocketDestroyFn()
                {
                    this.onopen = null;
                    this.onerror = null;
                    this.onclose = null;
                    this.onmessage = null;
                    this.close();
                };
            }
            return ws;
        }
        else
        {
            return null;
        }
    },

    update : function networkDeviceUpdateFn()
    {
    }
};

WebGLNetworkDevice.create = function networkDeviceCreateFn(params)
{
    var nd = new WebGLNetworkDevice();
    return nd;
};

// Copyright (c) 2011-2012 Turbulenz Limited
/*global Float32Array: false*/
/*global Uint16Array: false*/
/*global Uint32Array: false*/
/*global window: false*/
/*global VMath: false*/
/*global AABBTree: false*/
/*global TurbulenzEngine: false*/


//
// WebGLPhysicsConfig
//
var WebGLPhysicsConfig = {
    // (Contact physics)
    // Amount of slop permitted in contact penetration
    // And percentage of positional error to resolve
    // per simulation step.
    CONTACT_SLOP : 0.015,
    CONTACT_BAUMGRAUTE : 0.35,
    CONTACT_STATIC_BAUMGRAUTE : 0.65, // different coeffecient for static-dynamic case.
    //
    // (Contact persistance)
    // Amount of seperation permitted before contact cache is destroyed
    CONTACT_MAX_Y_SEPERATION : 0.05,
    // Amount of squared tangential seperation permitted before contact cache is destroyed
    CONTACT_MAX_SQ_XZ_SEPERATION : 2 * (0.245 * 0.245),
    // Amount of seperation permitted for a new contact to inherit existing cache's impulse cache
    CONTACT_INHERIT_SQ_SEPERATION : 3 * (0.75 * 0.75), //always inherit closest
    // Amount of seperation to assume another contacts place instead of just inheriting
    CONTACT_EQUAL_SQ_SEPERATION : 3 * (0.001 * 0.001),
    //
    // (Collision detection)
    // seperation distance to assume objects are infact intersecting.
    GJK_EPA_DISTANCE_THRESHOLD : 1e-4,
    // fractional change in computed distance at which we may terminate GJK algorithm.
    GJK_FRACTIONAL_THRESHOLD : 1e-4,
    //
    // Threshold for the square of the ratio of velocity to radius of an object to be considered
    // moving fast enough to be collided continuously against static/sleeping objects.
    // this is multiplied with time step.
    CONTINUOUS_LINEAR_SQ : 0.35,
    // Threshold for square of angular velocity to be considered moving fast enough to be collided
    // continuously against static/sleeping objects.
    // this is multiplied with time step.
    CONTINUOUS_ANGULAR_SQ : 0.25,
    // Threshold for ratio of squared linear speed to radius for object to be considered moving fast enough
    // to be collided continuously against other dynamic objects.
    // This is a 'per-step' ratio.
    CONTINUOUS_LINEAR_BULLET : 0.75,
    // Threshold for squared angular speed to be considered for continuous collisions against other dynamics.
    // This is a 'per-step' value.
    CONTINUOUS_ANGULAR_BULLET : 0.5,
    // Amount of extra slop permitted in continuous collisions.
    // This is added ontop of the usual contact slop.
    CONTINUOUS_SLOP : 0.015,
    //
    // (Sleeping)
    // Threshold for the square of the ratio of velocity to radius of an object to
    // be considered at rest. Eg: if threshold is 1, then in a given second should the object
    // move less than 1x its radius, it will be considered at rest.
    SLEEP_LINEAR_SQ : 0.01,
    // squared angular velocity to be considered 'at rest'.
    // There is no scaling, as we base this on tangentenial velocity of body at radius which means
    // that when computing the ratio w.r.t to radius we end up simply with angular velocity.
    SLEEP_ANGULAR_SQ : 0.1,
    // number of world updates body must be 'at rest' to be allowed to sleep.
    SLEEP_DELAY : 60,
    //
    // (Misc)
    MAX_ANGULAR : Math.PI, //maximum angular velocity per time-step before clamping in integration occurs.
    //
    // (General)
    QUADRATIC_THRESHOLD : 1e-8,
    DONT_NORMALIZE_THRESHOLD : 1e-8,
    COLLINEAR_THRESHOLD : 1e-10,
    COPLANAR_THRESHOLD : 1e-16
};

function webGLPhysicsClone(dst, src)
{
    for (var p in src)
    {
        if (src.hasOwnProperty(p))
        {
            var v = src[p];
            if (v === null || v === undefined)
            {
                continue;
            }

            if (typeof v === "object" &&
                p !== "shape" &&
                p !== "userData" &&
                p !== "world" &&
                p !== "object" &&
                p !== "arbiters" &&
                p !== "islandRoot" &&
                p !== "island" &&
                p !== "bodyA" &&
                p !== "bodyB" &&
                p !== "triangleArray")
            {
                if ("slice" in v)
                {
                    v = v.slice();
                }
                else
                {
                    v = webGLPhysicsClone({}, v);
                }
            }
            dst[p] = v;
        }
    }
    return dst;
}

//
// WebGL Physics Shape (public).
//
function WebGLPhysicsShape() {}
WebGLPhysicsShape.prototype = {

    version : 1

};

function initShapeProperties(s, type, nomargin)
{
    // Capsule/Sphere have this defined differently.
    if (!nomargin)
    {
        Object.defineProperty(s, "margin", {
            get : function shapeGetMargin()
            {
                return this._private.collisionRadius;
            },
            set : function shapeSetMargin(margin)
            {
                var pr = this._private;
                pr.halfExtents[0] += (margin - pr.collisionRadius);
                pr.halfExtents[1] += (margin - pr.collisionRadius);
                pr.halfExtents[2] += (margin - pr.collisionRadius);
                pr.radius += (margin - pr.collisionRadius);

                pr.collisionRadius = margin;
            },
            enumerable : true
        });
    }

    Object.defineProperty(s, "halfExtents", {
        get : function shapeGetHalfExtents()
        {
            return VMath.v3Copy(this._private.halfExtents);
        },
        enumerable : true
    });

    Object.defineProperty(s, "inertia", {
        get : function shapeGetInertia()
        {
            return VMath.v3Copy(this._private.inertia);
        },
        enumerable : true
    });

    Object.defineProperty(s, "radius", {
        get : function shapeGetRadius()
        {
            return this._private.radius;
        },
        enumerable : true
    });

    Object.defineProperty(s, "type", {
        value : type,
        enumerable : true
    });
}

//
// WebGL Physics Plane Shape
//
function WebGLPhysicsPlaneShape() {}
WebGLPhysicsPlaneShape.prototype = {

    version : 1,
    type : "PLANE",

    rayTest : function planeRayTestFn(ray)
    {
        var dir = ray.direction;
        var origin = ray.origin;

        var dir0 = dir[0];
        var dir1 = dir[1];
        var dir2 = dir[2];
        var o0 = origin[0];
        var o1 = origin[1];
        var o2 = origin[2];

        var normal = this.normal;
        var n0 = normal[0];
        var n1 = normal[1];
        var n2 = normal[2];

        //var dot = VMath.v3Dot(ray.direction, this.normal);
        var dot = ((dir0 * n0) + (dir1 * n1) + (dir2 * n2));
        // If ray is parallel to plane we assume it is not
        // intersecting (Do not handle a coplanar ray)
        if ((dot * dot) < WebGLPhysicsConfig.COPLANAR_THRESHOLD)
        {
            return null;
        }

        //var distance = (this.distance - VMath.v3Dot(ray.origin, this.normal)) / dot;
        var distance = ((this.distance - ((o0 * n0) + (o1 * n1) + (o2 * n2))) / dot);
        if (0 <= distance && distance <= ray.maxFactor)
        {
            //var normal = (dot > 0) ? VMath.v3Neg(this.normal) : VMath.v3Copy(this.normal);
            if (dot > 0)
            {
                n0 = -n0;
                n1 = -n1;
                n2 = -n2;
            }
            //    hitPoint: VMath.v3Add(ray.origin, VMath.v3ScalarMul(ray.direction, distance)),
            var hit0 = (o0 + (dir0 * distance));
            var hit1 = (o1 + (dir1 * distance));
            var hit2 = (o2 + (dir2 * distance));
            return {
                factor: distance,
                hitPoint: VMath.v3Build(hit0, hit1, hit2),
                hitNormal: VMath.v3Build(n0, n1, n2)
            };
        }
        else
        {
            return null;
        }
    }
};

WebGLPhysicsPlaneShape.create = function WebGLPhysicsPlaneShapeFn(params)
{
    var retp = new WebGLPhysicsShape();
    var p = new WebGLPhysicsPlaneShape();
    retp._private = p;
    p._public = retp;

    p.collisionRadius = (params.margin !== undefined) ? params.margin : 0.04;
    p.distance = params.distance;
    var normal = p.normal = VMath.v3Copy(params.normal);

    var abs = Math.abs;
    var maxValue = Number.MAX_VALUE;

    p.radius = maxValue;

    if (abs(normal[0]) === 1)
    {
        p.halfExtents = VMath.v3Build(abs(p.distance), maxValue, maxValue);
    }
    else if (abs(normal[1]) === 1)
    {
        p.halfExtents = VMath.v3Build(maxValue, abs(p.distance), maxValue);
    }
    else if (abs(normal[2]) === 1)
    {
        p.halfExtents = VMath.v3Build(maxValue, maxValue, abs(p.distance));
    }

    p.center = undefined;
    p.inertia = VMath.v3BuildZero();

    initShapeProperties(retp, "PLANE");
    return retp;
};

//
// WebGL Physics Capsule Shape
//
function WebGLPhysicsCapsuleShape() {}
WebGLPhysicsCapsuleShape.prototype = {

    version : 1,
    type : "CAPSULE",

    rayTestCap : function rayTestCapFn(ray, height, scale)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var o0 = origin[0];
        var o1 = origin[1];
        var o2 = origin[2];
        var dir0 = direction[0];
        var dir1 = direction[1];
        var dir2 = direction[2];

        var radius = this.capsuleRadius;

        //Quadratic equation at^2 + bt + c = 0
        var a = ((dir0 * dir0) + (dir1 * dir1) + (dir2 * dir2));
        var dy = (o1 - height);
        var b = (2 * ((dir0 * o0) + (dir1 * dy) + (dir2 * o2)));
        var c = ((o0 * o0) + (dy * dy) + (o2 * o2) - (radius * radius));

        //Determinant
        var d = ((b * b) - (4 * a * c));
        if (d < 0)
        {
            return null;
        }

        var distance;
        var normalScale = 1.0;
        var hit1;

        var rec = (1 / (2 * a));
        var rootD = Math.sqrt(d);
        distance = ((-b - rootD) * rec);
        hit1 = (o1 + (dir1 * distance));
        if (distance < 0 || (scale * (hit1 - height) < 0))
        {
            distance += (2 * rootD * rec);
            hit1 = (o1 + (dir1 * distance));
            normalScale = -1.0;
        }

        if ((scale * (hit1 - height) >= 0) &&
            (0 <= distance && distance <= ray.maxFactor))
        {
            var hit0 = (o0 + (dir0 * distance));
            var hit2 = (o2 + (dir2 * distance));
            var nScale = (normalScale / radius);
            return {
                factor: distance,
                hitPoint: VMath.v3Build(hit0, hit1, hit2),
                hitNormal: VMath.v3Build((hit0 * nScale), ((hit1 - height) * nScale), (hit2 * nScale))
            };
        }
        else
        {
            return null;
        }
    },

    rayTest : function capsuleRayTestFn(ray)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var o0 = origin[0];
        var o1 = origin[1];
        var o2 = origin[2];
        var dir0 = direction[0];
        var dir1 = direction[1];
        var dir2 = direction[2];
        var maxFactor = ray.maxFactor;

        var radius = this.capsuleRadius;
        var halfHeight = this.halfHeight;
        var radius2 = (radius * radius);

        var distance;
        var normalScale = 1.0;
        var hit0;
        var hit1;
        var hit2;

        // Attempt to intersect capsule walls
        // Quadratic equation at^2 + bt + c = 0
        var a = ((dir0 * dir0) + (dir2 * dir2));
        if (a >= WebGLPhysicsConfig.QUADRATIC_THRESHOLD)
        {
            var b = (2 * ((o0 * dir0) + (o2 * dir2)));
            var c = ((o0 * o0) + (o2 * o2) - radius2);

            // Determinant
            var d = ((b * b) - (4 * a * c));
            var rec = (1 / (2 * a));

            if (d < WebGLPhysicsConfig.QUADRATIC_THRESHOLD)
            {
                distance = (-b * rec);
            }
            else if (d > 0)
            {
                var rootD = Math.sqrt(d);
                distance = ((-b - rootD) * rec);

                // don't need to check height yet. If ray's first intersection
                // is front face of cylinder, then necessarigly it is not contained
                // within the cylinder and could never hit back face first.
                if (distance < 0)
                {
                    distance += (rootD * 2 * rec);
                    normalScale = -1.0;
                }
            }

            var scale;
            hit1 = (o1 + (dir1 * distance));
            if (-halfHeight <= hit1 && hit1 <= halfHeight)
            {
                if (0 <= distance && distance <= maxFactor)
                {
                    hit0 = (o0 + (dir0 * distance));
                    hit2 = (o2 + (dir2 * distance));
                    scale = (normalScale / radius);
                    return {
                        factor: distance,
                        hitPoint: VMath.v3Build(hit0, hit1, hit2),
                        hitNormal: VMath.v3Build((hit0 * scale), 0.0, (hit2 * scale))
                    };
                }
                else
                {
                    return null;
                }
            }
        }

        // Intersect capsule caps.
        return this.rayTestCap(ray, halfHeight, 1.0) || this.rayTestCap(ray, -halfHeight, -1.0);
    },

    localSupportWithoutMargin : function capsuleLocalSupportWithoutMarginFn(vec, dst)
    {
        dst[0] = 0;
        dst[1] = (vec[1] >= 0) ? this.halfHeight : (-this.halfHeight);
        dst[2] = 0;
    }
};

WebGLPhysicsCapsuleShape.create = function WebGlPhysicsCapsuleShapeFn(params)
{
    var retc = new WebGLPhysicsShape();
    var c = new WebGLPhysicsCapsuleShape();
    retc._private = c;
    c._public = retc;

    var margin = (params.margin !== undefined) ? params.margin : 0.04;
    var radius = params.radius;
    var height = params.height;
    var halfHeight = (0.5 * height);
    var maxRadius = (radius + halfHeight);

    var h0 = (radius + margin);
    var h1 = (maxRadius + margin);
    var h2 = (radius + margin);

    var lx = (2.0 * h0);
    var ly = (2.0 * h1);
    var lz = (2.0 * h2);
    lx *= lx;
    ly *= ly;
    lz *= lz;

    var massRatio = (1.0 / 12.0);

    c.radius = maxRadius + margin;
    c.capsuleRadius = radius;
    c.halfHeight = halfHeight;
    c.halfExtents = VMath.v3Build(h0, h1, h2);
    c.inertia = VMath.v3Build(massRatio * (ly + lz),
                              massRatio * (lx + lz),
                              massRatio * (lx + ly));
    c.collisionRadius = radius + margin;

    c.center = undefined;

    // Defined differently from other shapes.
    Object.defineProperty(retc, "margin", {
        get : function capsuleShapeGetMargin()
        {
            return (this._private.collisionRadius - this._private.capsuleRadius);
        },
        set : function capsuleShapeSetMargin(margin)
        {
            var pr = this._private;
            pr.collisionRadius = (pr.capsuleRadius + margin);
            pr.halfExtents[0] = pr.capsuleRadius + margin;
            pr.halfExtents[1] = (pr.capsuleRadius + pr.halfHeight) + margin;
            pr.halfExtents[2] = pr.capsuleRadius + margin;
            pr.radius = (pr.capsuleRadius + pr.halfHeight) + margin;
        },
        enumerable : true
    });
    initShapeProperties(retc, "CAPSULE", true);
    return retc;
};

//
// WebGL Physics Sphere Shape
//
function WebGLPhysicsSphereShape() {}
WebGLPhysicsSphereShape.prototype = {

    version : 1,
    type : "SPHERE",

    rayTest : function sphereRayTestFn(ray)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var radius = this.sphereRadius;

        var dir0 = direction[0];
        var dir1 = direction[1];
        var dir2 = direction[2];
        var o0 = origin[0];
        var o1 = origin[1];
        var o2 = origin[2];

        // Quadratic coeffecients at^2 + bt + c = 0
        // var a = VMath.v3Dot(direction, direction);
        // var b = 2 * VMath.v3Dot(origin, direction);
        // var c = VMath.v3Dot(origin, origin) - radius * radius;
        var a = ((dir0 * dir0) + (dir1 * dir1) + (dir2 * dir2));
        var b = (2 * ((o0 * dir0) + (o1 * dir1) + (o2 * dir2)));
        var c = (((o0 * o0) + (o1 * o1) + (o2 * o2)) - (radius * radius));

        var distance;
        // Determinant
        var d = ((b * b) - (4 * a * c));
        if (d <= 0)
        {
            return null;
        }

        var normalScale = 1.0;
        var rec = (1 / (2 * a));
        var rootD = Math.sqrt(d);
        distance = ((-b - rootD) * rec);
        if (distance < 0)
        {
            distance += (rootD * 2 * rec);
            normalScale = -1.0;
        }

        if (0 <= distance && distance < ray.maxFactor)
        {
            //hitPoint = VMath.v3Add(ray.origin, VMath.v3ScalarMul(ray.direction, distance));
            //hitNormal = VMath.v3ScalarDiv(hitPoint, radius * normalScale);
            var hit0 = (o0 + (dir0 * distance));
            var hit1 = (o1 + (dir1 * distance));
            var hit2 = (o2 + (dir2 * distance));

            var scale = (normalScale / radius);
            return {
                factor: distance,
                hitPoint: VMath.v3Build(hit0, hit1, hit2),
                hitNormal: VMath.v3Build((hit0 * scale), (hit1 * scale), (hit2 * scale))
            };
        }
        else
        {
            return null;
        }
    },

    localSupportWithoutMargin : function sphereLocalSupportWithoutMarginFn(vec, dst)
    {
        dst[0] = dst[1] = dst[2] = 0;
    }
};

WebGLPhysicsSphereShape.create = function WebGlPhysicsSphereShapeFn(params)
{
    var rets = new WebGLPhysicsShape();
    var s = new WebGLPhysicsSphereShape();
    rets._private = s;
    s._public = rets;

    var margin = (params.margin !== undefined) ? params.margin : 0.04;
    var radius = params.radius;
    var i = (0.4 * radius * radius);

    s.sphereRadius = radius;
    s.radius = s.sphereRadius + margin;
    s.collisionRadius = radius + margin;
    s.halfExtents = VMath.v3Build(radius + margin, radius + margin, radius + margin);
    s.inertia = VMath.v3Build(i, i, i);

    s.center = undefined;

    // Defined differently from other shapes.
    Object.defineProperty(rets, "margin", {
        get : function sphereShapeGetMargin()
        {
            return (this._private.collisionRadius - this._private.radius);
        },
        set : function sphereShapeSetMargin(margin)
        {
            var pr = this._private;
            pr.collisionRadius = (pr.radius + margin);
            pr.halfExtents[0] = pr.collisionRadius;
            pr.halfExtents[1] = pr.collisionRadius;
            pr.halfExtents[2] = pr.collisionRadius;
            pr.radius = pr.collisionRadius;
        },
        enumerable : true
    });
    initShapeProperties(rets, "CAPSULE", true);
    return rets;
};

//
// WebGL Physics Box Shape
//
function WebGLPhysicsBoxShape() {}
WebGLPhysicsBoxShape.prototype = {

    version : 1,
    type : "BOX",

    rayTest : function boxRayTestFn(ray)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var o0 = origin[0];
        var o1 = origin[1];
        var o2 = origin[2];
        var d0 = direction[0];
        var d1 = direction[1];
        var d2 = direction[2];

        var halfExtents = this.halfExtents;
        var h0 = halfExtents[0];
        var h1 = halfExtents[1];
        var h2 = halfExtents[2];

        var minDistance;
        var axis;

        // Code is similar for all pairs of faces.
        // Could be moved to a function, but would have performance penalty.
        //
        // In each case we check (Assuming that ray is not horizontal to plane)
        // That the ray is able to intersect one or both of the faces' planes
        // based on direction, origin and half extents.
        //                        |    |
        // cannot intersect <--o  |    | o--> cannot intersect
        //                        |    |
        //
        // If ray is able to intersect planes, we choose which face to intersect
        // with based on direction, origin and half extents and perform intersection.
        //                           |           |
        //                           | o--> pos. | <--o intersect pos. face
        // intersect neg. face o-->  | neg. <--o |
        //                           |           |
        //

        // intersect with yz faces.
        var t, f, hx, hy;
        if (d0 !== 0 && ((d0 > 0 && o0 <= -h0) || (d0 < 0 && o0 >= h0)))
        {
            f = (d0 > 0 ? (o0 >= -h0 ? h0 : -h0) : (o0 <= h0 ? -h0 : h0));
            t = (f - o0) / d0;
            if (minDistance === undefined || t < minDistance)
            {
                hx = o1 + (d1 * t);
                hy = o2 + (d2 * t);
                if ((-h1 <= hx && hx <= h1) &&
                    (-h2 <= hy && hy <= h2))
                {
                    minDistance = t;
                    axis = 0;
                }
            }
        }

        // intersect with xz faces.
        if (d1 !== 0 && ((d1 > 0 && o1 <= -h1) || (d1 < 0 && o1 >= h1)))
        {
            f = (d1 > 0 ? (o1 >= -h1 ? h1 : -h1) : (o1 <= h1 ? -h1 : h1));
            t = (f - o1) / d1;
            if (minDistance === undefined || t < minDistance)
            {
                hx = o0 + (d0 * t);
                hy = o2 + (d2 * t);
                if ((-h0 <= hx && hx <= h0) &&
                    (-h2 <= hy && hy <= h2))
                {
                    minDistance = t;
                    axis = 1;
                }
            }
        }

        // intersect with xy faces.
        if (d2 !== 0 && ((d2 > 0 && o2 <= -h2) || (d2 < 0 && o2 >= h2)))
        {
            f = (d2 > 0 ? (o2 >= -h2 ? h2 : -h2) : (o2 <= h2 ? -h2 : h2));
            t = (f - o2) / d2;
            if (minDistance === undefined || t < minDistance)
            {
                hx = o1 + (d1 * t);
                hy = o0 + (d0 * t);
                if ((-h1 <= hx && hx <= h1) &&
                    (-h0 <= hy && hy <= h0))
                {
                    minDistance = t;
                    axis = 2;
                }
            }
        }

        if (minDistance !== undefined && minDistance < ray.maxFactor)
        {
            return {
                hitPoint : VMath.v3Build(o0 + d0 * minDistance,
                                         o1 + d1 * minDistance,
                                         o2 + d2 * minDistance),
                hitNormal : VMath.v3Build(axis === 0 ? (d0 > 0 ? -1 : 1) : 0,
                                          axis === 1 ? (d1 > 0 ? -1 : 1) : 0,
                                          axis === 2 ? (d2 > 0 ? -1 : 1) : 0),
                factor : minDistance
            };
        }
        else
        {
            return null;
        }
    },

    localSupportWithoutMargin : function boxLocalSupportWithoutMarginFn(vec, dst)
    {
        var v0 = vec[0];
        var v1 = vec[1];
        var v2 = vec[2];

        var halfExtents = this.halfExtents;
        var h0 = halfExtents[0];
        var h1 = halfExtents[1];
        var h2 = halfExtents[2];

        dst[0] = ((v0 < 0) ? -h0 : h0);
        dst[1] = ((v1 < 0) ? -h1 : h1);
        dst[2] = ((v2 < 0) ? -h2 : h2);
    }
};

WebGLPhysicsBoxShape.create = function WebGLPhysicsBoxShapeFn(params)
{
    var retb = new WebGLPhysicsShape();
    var b = new WebGLPhysicsBoxShape();
    retb._private = b;
    b._public = retb;

    var margin = (params.margin !== undefined) ? params.margin : 0.04;
    var halfExtents = params.halfExtents;

    var h0 = (halfExtents[0] + margin);
    var h1 = (halfExtents[1] + margin);
    var h2 = (halfExtents[2] + margin);

    var lx = (2.0 * h0);
    var ly = (2.0 * h1);
    var lz = (2.0 * h2);
    lx *= lx;
    ly *= ly;
    lz *= lz;

    b.center = undefined;

    b.radius = Math.sqrt((h0 * h0) + (h1 * h1) + (h2 * h2));
    b.halfExtents = VMath.v3Build(h0, h1, h2);
    b.inertia = VMath.v3Build((1.0 / 12.0) * (ly + lz),
                              (1.0 / 12.0) * (lx + lz),
                              (1.0 / 12.0) * (lx + ly));
    b.collisionRadius = margin;

    initShapeProperties(retb, "BOX");
    return retb;
};

//
// WebGL Physics Cylinder Shape
//
function WebGLPhysicsCylinderShape() {}
WebGLPhysicsCylinderShape.prototype = {

    version : 1,
    type : "CYLINDER",

    rayTest : function cylinderRayTestFn(ray)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var o0 = origin[0];
        var o1 = origin[1];
        var o2 = origin[2];
        var dir0 = direction[0];
        var dir1 = direction[1];
        var dir2 = direction[2];
        var maxFactor = ray.maxFactor;

        var radius = this.cylinderRadius;
        var halfHeight = this.halfHeight;
        var radius2 = radius * radius;

        // Attempt to intersect cylinder walls
        // Quadratic equation at^2 + bt + c = 0
        var a = ((dir0 * dir0) + (dir2 * dir2));
        var b = (2 * ((o0 * dir0) + (o2 * dir2)));
        var c = ((o0 * o0) + (o2 * o2) - radius2);

        var distance;
        var normalScale = 1.0;
        var hit0, hit1, hit2;
        var scale, rec;

        // Determinant
        var d = ((b * b) - (4 * a * c));
        if (d >= 0)
        {
            rec = (1 / (2 * a));
            var rootD = Math.sqrt(d);
            distance = ((-b - rootD) * rec);

            // don't need to check height yet. If ray's first intersection
            // is front face of cylinder, then necessarigly it is not contained
            // within the cylinder and could never hit back face first.
            if (distance < 0)
            {
                distance += (rootD * 2 * rec);
                normalScale = -1.0;
            }

            hit1 = (o1 + (dir1 * distance));
            if (-halfHeight <= hit1 && hit1 <= halfHeight)
            {
                if (0 <= distance && distance <= maxFactor)
                {
                    hit0 = (o0 + (dir0 * distance));
                    hit2 = (o2 + (dir2 * distance));
                    scale = (normalScale / radius);
                    return {
                        factor: distance,
                        hitPoint: VMath.v3Build(hit0, hit1, hit2),
                        hitNormal: VMath.v3Build((hit0 * scale), 0.0, (hit2 * scale))
                    };
                }
                else
                {
                    return null;
                }
            }
        }

        //Intersect cylinder caps
        // If ray is perpendicular to caps, we assume
        // It cannot intersect.
        if ((dir1 * dir1) >= WebGLPhysicsConfig.COPLANAR_THRESHOLD)
        {
            scale = ((dir1 < 0) ? -1.0 : 1.0);
            hit1 = (-scale * halfHeight);
            rec = (1 / dir1);
            distance = ((hit1 - o1) * rec);

            // Similarly don't need to check radius yet. If ray's first intersection
            // is back cap, then necesarigly it is not contained within cylinder
            // and could never hit front cap first.
            if (distance < 0)
            {
                hit1 = (scale * halfHeight);
                distance = ((hit1 - o1) * rec);
            }

            if (0 <= distance && distance <= maxFactor)
            {
                hit0 = (o0 + (dir0 * distance));
                hit2 = (o2 + (dir2 * distance));
                if (((hit0 * hit0) + (hit2 * hit2)) <= radius2)
                {
                    return {
                        factor: distance,
                        hitPoint: VMath.v3Build(hit0, hit1, hit2),
                        hitNormal: VMath.v3Build(0.0, -scale, 0.0)
                    };
                }
            }
        }

        return null;
    },

    localSupportWithoutMargin : function cylinderLocalSupportWithoutMarginFn(vec, dst)
    {
        var v0 = vec[0];
        var v2 = vec[2];
        var vmag2 = ((v0 * v0) + (v2 * v2));
        if (vmag2 === 0)
        {
            if (vec[1] > 0)
            {
                dst[0] = this.cylinderRadius;
                dst[1] = this.halfHeight;
                dst[2] = 0;
            }
            else
            {
                dst[0] = 0;
                dst[1] = -this.halfHeight;
                dst[2] = -this.cylinderRadius;
            }
            return;
        }

        var scale = (this.cylinderRadius / Math.sqrt(vmag2));
        dst[0] = (v0 * scale);
        dst[1] = ((vec[1] > 0 ? 1 : -1) * this.halfHeight);
        dst[2] = (v2 * scale);
    }
};

WebGLPhysicsCylinderShape.create = function WebGLPhysicsCylinderShapeFn(params)
{
    var retc = new WebGLPhysicsShape();
    var c = new WebGLPhysicsCylinderShape();
    retc._private = c;
    c._public = retc;

    var margin = (params.margin !== undefined) ? params.margin : 0.04;
    var halfExtents = params.halfExtents;

    var h0 = (halfExtents[0] + margin);
    var h1 = (halfExtents[1] + margin);
    var h2 = (halfExtents[2] + margin);

    var radius2 = (h0 * h0);
    var height2 = (4.0 * h1 * h1);

    var t1 = (((1.0 / 12.0) * height2) + ((1.0 / 4.0) * radius2));
    var t2 = ((1.0 / 2.0) * radius2);

    c.center = undefined;

    c.radius = Math.sqrt((h0 * h0) + (h1 * h1) + (h2 * h2));
    c.halfExtents = VMath.v3Build(h0, h1, h2);
    c.cylinderRadius = halfExtents[0];
    c.halfHeight = halfExtents[1];
    c.inertia = VMath.v3Build(t1, t2, t1);
    c.collisionRadius = margin;

    initShapeProperties(retc, "CYLINDER");
    return retc;
};

//
// WebGL Physics Cone Shape
//
function WebGLPhysicsConeShape() {}
WebGLPhysicsConeShape.prototype = {

    version : 1,
    type : "CONE",

    rayTest : function coneRayTestFn(ray)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var o0 = origin[0];
        var o1 = origin[1];
        var o2 = origin[2];
        var dir0 = direction[0];
        var dir1 = direction[1];
        var dir2 = direction[2];
        var maxFactor = ray.maxFactor;

        var radius = this.coneRadius;
        var halfHeight = this.halfHeight;

        var conicK = (radius / (2 * halfHeight));
        conicK *= conicK;

        // Intersect with conic surface.
        //
        // Quadratic equation at^2 + bt + c = 0
        var d1 = o1 - halfHeight;
        var a = (dir0 * dir0) + (dir2 * dir2) - (conicK * dir1 * dir1);
        var b = 2 * ((o0 * dir0) + (o2 * dir2) - (conicK * d1 * dir1));
        var c = (o0 * o0) + (o2 * o2) - (conicK * d1 * d1);

        var distance;
        var normalScale = 1.0;
        var hit0, hit1, hit2;

        // Determinant
        var d = ((b * b) - (4 * a * c));
        if (d >= 0)
        {
            var rec = (1 / (2 * a));
            var rootD = Math.sqrt(d);
            distance = ((-b - rootD) * rec);
            hit1 = (o1 + (dir1 * distance));
            if (distance < 0 || hit1 < -halfHeight || hit1 > halfHeight)
            {
                distance += (2 * rootD * rec);
                normalScale = -1.0;
                hit1 = (o1 + (dir1 * distance));
                if (distance < 0 || hit1 < -halfHeight || hit1 > halfHeight)
                {
                    distance = undefined;
                }
            }
        }

        // Intersect with cone cap.
        var t;
        if (dir1 !== 0)
        {
            t = (-halfHeight - o1) / dir1;
            hit0 = (o0 + (dir0 * t));
            hit2 = (o2 + (dir2 * t));
            if (t < 0 || ((hit0 * hit0) + (hit2 * hit2)) > (radius * radius))
            {
                t = undefined;
            }
        }

        if (t === undefined && distance === undefined)
        {
            return null;
        }

        if (t === undefined || (distance !== undefined && distance < t))
        {
            // conic surface is hit first in positive distance range
            if (distance >= maxFactor)
            {
                return null;
            }

            hit0 = (o0 + (dir0 * distance));
            hit1 = (o1 + (dir1 * distance));
            hit2 = (o2 + (dir2 * distance));

            var n1 = conicK * (hit1 - halfHeight);
            var scale = normalScale / Math.sqrt((hit0 * hit0) + (n1 * n1) + (hit2 * hit2));

            return {
                hitPoint : VMath.v3Build(hit0, hit1, hit2),
                hitNormal : VMath.v3Build(scale * hit0, scale * n1, scale * hit2),
                factor : distance
            };
        }
        else
        {
            // cone cap is hit first in positive distance range
            if (t >= maxFactor)
            {
                return null;
            }

            hit0 = (o0 + (dir0 * t));
            hit1 = (o1 + (dir1 * t));
            hit2 = (o2 + (dir2 * t));
            return {
                hitPoint : VMath.v3Build(hit0, hit1, hit2),
                hitNormal : VMath.v3Build(0, ((o1 < -halfHeight) ? -1 : 1), 0),
                factor : t
            };
        }
    },

    localSupportWithoutMargin : function coneLocalSupportWithoutMarginFn(vec, dst)
    {
        var v0 = vec[0];
        var v1 = vec[1];
        var v2 = vec[2];

        var vxz = Math.sqrt((v0 * v0) + (v2 * v2));
        if (((-this.coneRadius * vxz) + (2 * this.halfHeight * v1)) > 0)
        {
            dst[0] = dst[2] = 0;
            dst[1] = this.halfHeight;
        }
        else
        {
            if (vxz === 0)
            {
                dst[0] = this.coneRadius;
                dst[2] = 0;
            }
            else
            {
                dst[0] = (v0 * this.coneRadius / vxz);
                dst[2] = (v2 * this.coneRadius / vxz);
            }
            dst[1] = -this.halfHeight;
        }
    }
};

WebGLPhysicsConeShape.create = function WebGLPhysicsConeShapeFn(params)
{
    var retc = new WebGLPhysicsShape();
    var c = new WebGLPhysicsConeShape();
    retc._private = c;
    c._public = retc;

    var margin = (params.margin !== undefined) ? params.margin : 0.04;
    var radius = params.radius;
    var height = params.height;
    var halfHeight = (0.5 * height);

    var h0 = (radius + margin);
    var h1 = (halfHeight + margin);
    var h2 = (radius + margin);

    var lx = (2.0 * h0);
    var ly = (2.0 * h1);
    var lz = (2.0 * h2);
    lx *= lx;
    ly *= ly;
    lz *= lz;

    var massRatio = (1.0 / 12.0);

    c.halfHeight = halfHeight;
    c.coneRadius = radius;
    c.radius = Math.sqrt((h0 * h0) + (h1 * h1) + (h2 * h2));
    c.halfExtents = VMath.v3Build(h0, h1, h2);
    c.inertia = VMath.v3Build(massRatio * (ly + lz),
                              massRatio * (lx + lz),
                              massRatio * (lx + ly));
    c.collisionRadius = margin;

    c.center = undefined;

    initShapeProperties(retc, "CONE");
    return retc;
};

//
// WebGL Physics Triangle Array
//
function WebGLPhysicsTriangleArray() {}
WebGLPhysicsTriangleArray.prototype = {

    version : 1

};

function WebGLPhysicsPrivateTriangleArray() {}
WebGLPhysicsPrivateTriangleArray.prototype = {

    version : 1,

    // Size of each 'triangle' in triangles array.
    TRIANGLE_SIZE : 17,

    rayTest : function triangleArrayRayTestFn(ray)
    {
        var triangles = this.triangles;
        var spatialMap = this.spatialMap;

        function rayCallback(tree, triangle, ray, unusedAABBDistance, upperBound)
        {
            var dir = ray.direction;
            var dir0 = dir[0];
            var dir1 = dir[1];
            var dir2 = dir[2];

            var origin = ray.origin;
            var o0 = origin[0];
            var o1 = origin[1];
            var o2 = origin[2];

            var i = triangle.index;
            var n0 = triangles[i];
            var n1 = triangles[i + 1];
            var n2 = triangles[i + 2];

            //var dot = VMath.v3Dot(ray.direction, normal);
            var dot = ((dir0 * n0) + (dir1 * n1) + (dir2 * n2));
            // If ray is parallel to triangle plane
            // Assume it cannot intersect triangle
            if ((dot * dot) < WebGLPhysicsConfig.COPLANAR_THRESHOLD)
            {
                return null;
            }

            var d = triangles[i + 16];
            var v00 = triangles[i + 3];
            var v01 = triangles[i + 4];
            var v02 = triangles[i + 5];
            //var distance = VMath.v3Dot(VMath.v3Sub(v0, ray.origin), normal) / dot;
            var distance = ((d - ((o0 * n0) + (o1 * n1) + (o2 * n2))) / dot);
            if (distance < 0 || distance >= upperBound)
            {
                return null;
            }

            // Make sure normal points correct direction for ray cast result
            if (dot > 0)
            {
                //normal = VMath.v3Neg(normal);
                n0 = -n0;
                n1 = -n1;
                n2 = -n2;

                dot = -dot;
            }

            //var hitPoint = VMath.v3Add(ray.origin, VMath.v3ScalarMul(ray.direction, distance));
            var hit0 = (o0 + (dir0 * distance));
            var hit1 = (o1 + (dir1 * distance));
            var hit2 = (o2 + (dir2 * distance));

            // Compute barycentric coordinates in triangle.
            //var w = VMath.v3Sub(hitPoint, v0);
            var wx = (hit0 - v00);
            var wy = (hit1 - v01);
            var wz = (hit2 - v02);

            var dotuu = triangles[i + 12];
            var dotvv = triangles[i + 13];
            var dotuv = triangles[i + 14];
            var negLimit = triangles[i + 15];

            var u0 = triangles[i + 6];
            var u1 = triangles[i + 7];
            var u2 = triangles[i + 8];
            var v0 = triangles[i + 9];
            var v1 = triangles[i + 10];
            var v2 = triangles[i + 11];
            //var dotwu = VMath.v3Dot(w, u);
            //var dotwv = VMath.v3Dot(w, v);
            var dotwu = (wx * u0) + (wy * u1) + (wz * u2);
            var dotwv = (wx * v0) + (wy * v1) + (wz * v2);

            var alpha = ((dotuv * dotwv) - (dotvv * dotwu));
            if (alpha > 0 || alpha < negLimit)
            {
                return null;
            }

            var beta  = ((dotuv * dotwu) - (dotuu * dotwv));
            if (beta > 0 || (alpha + beta) < negLimit)
            {
                return null;
            }

            return {
                factor: distance,
                hitPoint: VMath.v3Build(hit0, hit1, hit2),
                hitNormal: VMath.v3Build(n0, n1, n2)
            };
        }

        if (spatialMap)
        {
            return AABBTree.rayTest([spatialMap], ray, rayCallback);
        }
        else
        {
            var minimumResult = null;
            var upperBound = ray.maxFactor;

            var triNode = {
                index: 0
            };
            var i;
            var numTris = this.numTriangles * WebGLPhysicsPrivateTriangleArray.prototype.TRIANGLE_SIZE;
            for (i = 0; i < numTris; i += WebGLPhysicsPrivateTriangleArray.prototype.TRIANGLE_SIZE)
            {
                triNode.index = i;
                var result = rayCallback(null, triNode, ray, 0, upperBound);
                if (result)
                {
                    minimumResult = result;
                    upperBound = minimumResult.factor;
                }
            }

            return minimumResult;
        }
    }
};

WebGLPhysicsTriangleArray.create = function webGLPhysicsTriangleArrayFn(params)
{
    var rett = new WebGLPhysicsTriangleArray();
    var t = new WebGLPhysicsPrivateTriangleArray();
    rett._private = t;
    t._public = rett;

    var vertices = params.vertices;
    var numVertices = (vertices.length / 3);
    var indices = params.indices;
    var numTriangles = (indices.length / 3);

    var minExtent = params.minExtent;
    var maxExtent = params.maxExtent;

    var v0;
    var v1;
    var v2;

    if (!minExtent || !maxExtent)
    {
        var min0 = vertices[0];
        var min1 = vertices[1];
        var min2 = vertices[2];
        var max0 = min0;
        var max1 = min1;
        var max2 = min2;
        var maxN = vertices.length;
        for (var n = 3; n < maxN; n += 3)
        {
            v0 = vertices[n];
            v1 = vertices[n + 1];
            v2 = vertices[n + 2];
            if (min0 > v0)
            {
                min0 = v0;
            }
            else if (max0 < v0)
            {
                max0 = v0;
            }
            if (min1 > v1)
            {
                min1 = v1;
            }
            else if (max1 < v1)
            {
                max1 = v1;
            }
            if (min2 > v2)
            {
                min2 = v2;
            }
            else if (max2 < v2)
            {
                max2 = v2;
            }
        }
        minExtent = [min0, min1, min2];
        maxExtent = [max0, max1, max2];
    }

    var extents = new Float32Array(6);
    extents[0] = minExtent[0];
    extents[1] = minExtent[1];
    extents[2] = minExtent[2];
    extents[3] = maxExtent[0];
    extents[4] = maxExtent[1];
    extents[5] = maxExtent[2];

    t.vertices = (params.dontCopy ? vertices : new Float32Array(vertices));
    t.numVertices = numVertices;
    t.indices = (params.dontCopy ? indices : (numVertices < 65536 ? new Uint16Array(indices) : new Uint32Array(indices)));
    t.numTriangles = numTriangles;
    t.extents = extents;

    // read only, no getter needed.
    Object.defineProperty(rett, "vertices", {
        value : t.vertices,
        enumerable : true
    });
    Object.defineProperty(rett, "indices", {
        value : t.indices,
        enumerable : true
    });

    /*
        store pre-computed triangle information for ray tests

        n0 n1 n2 - triangle normal
        v0 v1 v2 - triangle vertex
        u0 u1 u2 v0 v1 v2  - edge vectors
        dotuu dotvv dotuv negLimit - barycentric constants
        d - triangle plane distance
    */
    var triangles = new Float32Array(WebGLPhysicsPrivateTriangleArray.prototype.TRIANGLE_SIZE * numTriangles);
    var spatialMap = null;

    // Only use spatial map if we do not have a trivial number of triangles.
    if (numTriangles >= 8)
    {
        spatialMap = AABBTree.create(true);
    }

    var i;
    for (i = 0; i < numTriangles; i = i + 1)
    {
        var i3 = (i * 3);
        var itri = (i * WebGLPhysicsPrivateTriangleArray.prototype.TRIANGLE_SIZE);

        var i0 = (indices[i3] * 3);
        var i1 = (indices[i3 + 1] * 3);
        var i2 = (indices[i3 + 2] * 3);

        var v00 = vertices[i0];
        var v01 = vertices[i0 + 1];
        var v02 = vertices[i0 + 2];

        var v10 = vertices[i1];
        var v11 = vertices[i1 + 1];
        var v12 = vertices[i1 + 2];

        var v20 = vertices[i2];
        var v21 = vertices[i2 + 1];
        var v22 = vertices[i2 + 2];

        //var u = VMath.v3Sub(v1, v0);
        //var v = VMath.v3Sub(v2, v0);
        var u0 = (v10 - v00);
        var u1 = (v11 - v01);
        var u2 = (v12 - v02);
        v0 = (v20 - v00);
        v1 = (v21 - v01);
        v2 = (v22 - v02);

        //var normal = VMath.v3Cross(u, v);
        var n0 = ((u1 * v2) - (u2 * v1));
        var n1 = ((u2 * v0) - (u0 * v2));
        var n2 = ((u0 * v1) - (u1 * v0));
        var nn = (1.0 / Math.sqrt((n0 * n0) + (n1 * n1) + (n2 * n2)));

        var distance = (((n0 * v00) + (n1 * v01) + (n2 * v02)) * nn);

        //var dotuv = VMath.v3Dot(u, v);
        //var dotuu = VMath.v3Dot(u, u);
        //var dotvv = VMath.v3Dot(v, v);
        var dotuv = ((u0 * v0) + (u1 * v1) + (u2 * v2));
        var dotuu = ((u0 * u0) + (u1 * u1) + (u2 * u2));
        var dotvv = ((v0 * v0) + (v1 * v1) + (v2 * v2));

        // Always negative
        var negLimit = ((dotuv * dotuv) - (dotuu * dotvv));

        triangles[itri] = (n0 * nn);
        triangles[itri + 1] = (n1 * nn);
        triangles[itri + 2] = (n2 * nn);
        triangles[itri + 3] = v00;
        triangles[itri + 4] = v01;
        triangles[itri + 5] = v02;
        triangles[itri + 6] = u0;
        triangles[itri + 7] = u1;
        triangles[itri + 8] = u2;
        triangles[itri + 9] = v0;
        triangles[itri + 10] = v1;
        triangles[itri + 11] = v2;
        triangles[itri + 12] = dotuu;
        triangles[itri + 13] = dotvv;
        triangles[itri + 14] = dotuv;
        triangles[itri + 15] = negLimit;
        triangles[itri + 16] = distance;

        // If building AABBTree, store node
        if (spatialMap)
        {
            extents = new Float32Array(6);
            extents[0] = Math.min(v00, v10, v20);
            extents[1] = Math.min(v01, v11, v21);
            extents[2] = Math.min(v02, v12, v22);
            extents[3] = Math.max(v00, v10, v20);
            extents[4] = Math.max(v01, v11, v21);
            extents[5] = Math.max(v02, v12, v22);

            var triNode = {
                index: itri
            };
            spatialMap.add(triNode, extents);
        }
    }

    if (spatialMap)
    {
        spatialMap.finalize();
    }

    t.triangles = triangles;
    t.spatialMap = spatialMap;

    return rett;
};

//
// WebGL Physics Convex Hull helpers.
// (Mostly mirrored with turbulenz/tools/mesh.py)
//
var WebGLPhysicsConvexHullHelpers = {
    isPlanar : function isPlanarFn(points)
    {
        // tolerance for distance from plane for a point
        // to be treat as coplanar.
        var tolerance = WebGLPhysicsConfig.COPLANAR_THRESHOLD;

        var p00 = points[0];
        var p01 = points[1];
        var p02 = points[2];

        // Find normal of plane from first 3 vertices.
        var e10 = (points[3] - p00);
        var e11 = (points[4] - p01);
        var e12 = (points[5] - p02);

        var e20 = (points[6] - p00);
        var e21 = (points[7] - p01);
        var e22 = (points[8] - p02);

        var n0 = (e11 * e22) - (e12 * e21);
        var n1 = (e12 * e20) - (e10 * e22);
        var n2 = (e10 * e21) - (e11 * e20);

        // Though normalisation isn't required to determine if point is 'on' the plane
        // We allow a distance tolerance so normalisation should be performed.
        var normalScale = 1 / Math.sqrt((n0 * n0) + (n1 * n1) + (n2 * n2));
        n0 *= normalScale;
        n1 *= normalScale;
        n2 *= normalScale;

        var planeDistance = -((p00 * n0) + (p01 * n1) + (p02 * n2));

        var i;
        var maxN = points.length;
        for (i = 0; i < maxN; i += 3)
        {
            var distance = (points[i] * n0) + (points[i + 1] * n1) + (points[i + 2] * n2) + planeDistance;
            if ((distance * distance) > tolerance)
            {
                return false;
            }
        }

        return true;
    },

    makePlanarConvexHull : function makePlanarConvexHullFn(points)
    {
        var DONT_NORMALIZE_THRESHOLD = 1e-6;

        // Use a 2D graham scan with projections of points onto their maximal plane.
        // Time complexity O(nh) for n points and h out-points.

        // Determine maximal plane for projection as the plane containing points.
        var p00 = points[0];
        var p01 = points[1];
        var p02 = points[2];

        var e10 = (points[3] - p00);
        var e11 = (points[4] - p01);
        var e12 = (points[5] - p02);

        var e20 = (points[6] - p00);
        var e21 = (points[7] - p01);
        var e22 = (points[8] - p02);

        // We do not require normalisation for projection onto plane.
        var normal0 = (e11 * e22) - (e12 * e21);
        var normal1 = (e12 * e20) - (e10 * e22);
        var normal2 = (e10 * e21) - (e11 * e20);

        // Determine tangent vectors.
        var tangent0, tangent1, tangent2;
        if ((normal0 * normal0) + (normal2 * normal2) < DONT_NORMALIZE_THRESHOLD)
        {
            tangent0 = 1;
            tangent1 = tangent2 = 0;
        }
        else
        {
            tangent0 = -normal2;
            tangent1 = 0;
            tangent2 = normal0;
        }
        var bitangent0 = (normal1 * tangent2) - (normal2 * tangent1);
        var bitangent1 = (normal2 * tangent0) - (normal0 * tangent2);
        var bitangent2 = (normal0 * tangent1) - (normal1 * tangent0);

        // Project points.
        var numPoints = points.length / 3;
        var projs = new Float32Array(numPoints * 2);
        var p0, p1, p2;
        var i;
        for (i = 0; i < numPoints; i += 1)
        {
            p0 = points[i * 3];
            p1 = points[(i * 3) + 1];
            p2 = points[(i * 3) + 2];

            projs[i * 2] = (p0 * tangent0) + (p1 * tangent1) + (p2 * tangent2);
            projs[(i * 2) + 1] = (p0 * bitangent0) + (p1 * bitangent1) + (p2 * bitangent2);
        }

        // Find first vertex on projected hull as minimal lexicographically.
        var i0 = 0;
        p00 = projs[0];
        p01 = projs[1];
        for (i = 2; i < (numPoints * 2); i += 2)
        {
            p0 = projs[i];
            p1 = projs[i + 1];
            if (p0 < p00 || (p0 === p00 && p1 < p01))
            {
                i0 = (i / 2);
                p00 = p0;
                p01 = p1;
            }
        }

        // Perform graham scan.
        // hullVertices is a mapping for vertices used by hull from their present indices
        // to new indices in output mesh.
        var hullVertices = {};
        hullVertices[i0] = 0;
        var outVertexCount = 1;

        var hullTriangles = [];

        var fsti = i0;
        for (;;)
        {
            var max0, max1, maxDistance;
            var i1 = -1;

            for (i = 0; i < (numPoints * 2); i += 2)
            {
                if (i === (i0 * 2))
                {
                    continue;
                }

                p0 = projs[i];
                p1 = projs[i + 1];
                var plsq = (((p0 - p00) * (p0 - p00)) + ((p1 - p01) * (p1 - p01)));
                if (i1 === -1)
                {
                    i1 = (i / 2);
                    max0 = p0;
                    max1 = p1;
                    maxDistance = plsq;
                    continue;
                }

                // If this is not first vertex tested, determine if new vertex
                // makes a right turn looking in direction of edge, or is further
                // in same direction.
                var turn = ((max0 - p00) * (p1 - p01)) - ((max1 - p01) * (p0 - p00));
                if (turn < 0 || (turn === 0 && plsq > maxDistance))
                {
                    i1 = (i / 2);
                    max0 = p0;
                    max1 = p1;
                    maxDistance = plsq;
                }
            }

            if (i1 in hullVertices)
            {
                break;
            }

            // Append vertex i1 to hull
            hullVertices[i1] = outVertexCount;
            outVertexCount += 1;

            // Form triangle (fsti, i0, i1)
            if (i0 !== fsti)
            {
                hullTriangles.push(fsti);
                hullTriangles.push(i0);
                hullTriangles.push(i1);
            }

            i0 = i1;
            p00 = projs[i1 * 2];
            p01 = projs[(i1 * 2) + 1];
        }

        // Output triangle array!
        return this.createArray(points, hullTriangles, hullVertices, outVertexCount);
    },

    makeConvexHull : function makeConvexHullFn(points)
    {
        // 3D generalisation of Graham Scan to facilitate triangulation of the hull in generation
        // Time complexity O(nh) for n points, and h out-points.

        // Find first vertex on hull as minimal lexicographically ordered point.
        var i0 = 0;
        var p00 = points[0];
        var p01 = points[1];
        var p02 = points[2];

        var i;
        var p0, p1, p2;
        var numPoints = (points.length / 3);
        for (i = 3; i < (numPoints * 3); i += 3)
        {
            p0 = points[i];
            p1 = points[i + 1];
            p2 = points[i + 2];
            if (p0 < p00 || (p0 === p00 && (p1 < p01 || (p1 === p01 && p2 < p02))))
            {
                i0 = (i / 3);
                p00 = p0;
                p01 = p1;
                p02 = p2;
            }
        }

        // Find second vertex on hull by performing 2D graham scan step on xy-plane projections of positions
        var i1 = -1;
        var cos1 = -2; // Will always be overriden as cos(theta) > -2
        var lsq1 = 0;
        var d0, d1;
        for (i = 0; i < (numPoints * 3); i += 3)
        {
            if (i === (i0 * 3))
            {
                continue;
            }

            p0 = points[i];
            p1 = points[i + 1];
            d0 = p0 - p00;
            d1 = p1 - p01;
            var lsq = ((d0 * d0) + (d1 * d1));
            if (lsq === 0)
            {
                if (i1 === -1)
                {
                    i1 = (i / 3);
                }
                continue;
            }

            var cos = d1 / Math.sqrt(lsq);
            if (cos > cos1 || (cos === cos1 && lsq > lsq1))
            {
                cos1 = cos;
                lsq1 = lsq;
                i1 = (i / 3);
            }
        }

        // Dictionary of visited edges to avoid duplicates
        // List of open edges to be visited by graham scan.
        var closedSet = {};
        var openSet = [i0, i1, i1, i0];

        // Dictionary of vertices used by hull as mapping from old to new indices in mesh.
        // And generated triangles
        var hullVertices = {};
        hullVertices[i0] = 0;
        hullVertices[i1] = 1;
        var outVertexCount = 2;

        var hullTriangles = [];

        while (openSet.length > 0)
        {
            // [ ...., i0, i1 ]
            i1 = openSet.pop();
            i0 = openSet.pop();

            if ((i0 + ":" + i1) in closedSet)
            {
                continue;
            }

            var i2 = -1;
            var maxEdge0, maxEdge1, maxEdge2;
            var maxDistance, maxProjection;

            p00 = points[i0 * 3];
            p01 = points[(i0 * 3) + 1];
            p02 = points[(i0 * 3) + 2];
            var edge0 = (points[i1 * 3] - p00);
            var edge1 = (points[(i1 * 3) + 1] - p01);
            var edge2 = (points[(i1 * 3) + 2] - p02);
            var isq = 1 / ((edge0 * edge0) + (edge1 * edge1) * (edge2 * edge2));

            for (i = 0; i < (numPoints * 3); i += 3)
            {
                if (i === (i0 * 3) || i === (i1 * 3))
                {
                    continue;
                }

                p0 = points[i];
                p1 = points[i + 1];
                p2 = points[i + 2];

                // Find closest point on line containing the edge to determine vector to p
                // perpendicular to edge. This is not necessary for computing the turn
                // since the value of 'turn' computed is actually the same whether we do
                // this or not, however it is needed to be able to sort equal turn vertices
                // by distance.
                var t = (((p0 - p00) * edge0) +
                         ((p1 - p01) * edge1) +
                         ((p2 - p02) * edge2)) * isq;
                var pEdge0 = (p0 - (p00 + (edge0 * t)));
                var pEdge1 = (p1 - (p01 + (edge1 * t)));
                var pEdge2 = (p2 - (p02 + (edge2 * t)));

                // Ignore vertex if |pedge| = 0, thus ignoring vertices on edge itself
                // and so avoiding generating degenerate triangles.
                var plsq = ((pEdge0 * pEdge0) + (pEdge1 * pEdge1) + (pEdge2 * pEdge2));
                if (plsq <= WebGLPhysicsConfig.COLLINEAR_THRESHOLD)
                {
                    continue;
                }

                if (i2 === -1)
                {
                    i2 = (i / 3);
                    maxEdge0 = pEdge0;
                    maxEdge1 = pEdge1;
                    maxEdge2 = pEdge2;
                    maxDistance = plsq;
                    maxProjection = t;
                    continue;
                }

                // If this is not the first vertex tested, determine if new vertex
                // is a right turn looking in direction of edge, or is further in
                // same direction
                //
                // We require a special case when pedge, and maxedge are coplanar
                // with edge as the computed turn will be 0 and we must check
                // if the cross product is facing into the hull or outside to
                // determine left/right instead.
                var axis0 = ((pEdge1 * maxEdge2) - (pEdge2 * maxEdge1));
                var axis1 = ((pEdge2 * maxEdge0) - (pEdge0 * maxEdge2));
                var axis2 = ((pEdge0 * maxEdge1) - (pEdge1 * maxEdge0));

                var coplanar = (pEdge0 * ((edge1 * maxEdge2) - (edge2 * maxEdge1)) +
                                pEdge1 * ((edge2 * maxEdge0) - (edge0 * maxEdge2)) +
                                pEdge2 * ((edge0 * maxEdge1) - (edge1 * maxEdge0)));
                if ((coplanar * coplanar) < WebGLPhysicsConfig.COPLANAR_THRESHOLD)
                {
                    // Special case for coplanar pedge, maxpedge, edge
                    //
                    // If edges are in same direction, base on distance
                    if (((pEdge0 * maxEdge0) + (pEdge1 * maxEdge1) + (pEdge2 * maxEdge2)) >= 0)
                    {
                        if (plsq > maxDistance || (plsq === maxDistance && t > maxProjection))
                        {
                            i2 = (i / 3);
                            maxEdge0 = pEdge0;
                            maxEdge1 = pEdge1;
                            maxEdge2 = pEdge2;
                            maxDistance = plsq;
                            maxProjection = t;
                        }
                    }
                    else
                    {
                        d0 = (p0 - p00);
                        d1 = (p1 - p01);
                        var d2 = (p2 - p02);
                        axis0 = ((d1 * edge2) - (d2 * edge1));
                        axis1 = ((d2 * edge0) - (d0 * edge2));
                        axis2 = ((d0 * edge1) - (d1 * edge0));

                        // Determine if axis points into, or out of the convex hull.
                        var internal = true;
                        var j;
                        for (j = 0; j < (numPoints * 3); j += 3)
                        {
                            if (((axis0 * (points[j] - p00)) +
                                 (axis1 * (points[j + 1] - p01)) +
                                 (axis2 * (points[j + 2] - p02))) < 0)
                            {
                                internal = false;
                                break;
                            }
                        }

                        if (internal)
                        {
                            i2 = (i / 3);
                            maxEdge0 = pEdge0;
                            maxEdge1 = pEdge1;
                            maxEdge2 = pEdge2;
                            maxDistance = plsq;
                            maxProjection = t;
                        }
                    }
                }
                else
                {
                    var turn = (axis0 * edge0) + (axis1 * edge1) + (axis2 * edge2);
                    if (turn < 0 || (turn <= WebGLPhysicsConfig.COLLINEAR_THRESHOLD && plsq > maxDistance))
                    {
                        i2 = (i / 3);
                        maxEdge0 = pEdge0;
                        maxEdge1 = pEdge1;
                        maxEdge2 = pEdge2;
                        maxDistance = plsq;
                        maxProjection = t;
                    }
                }
            }

            // append i2 vertex to hull
            if (!(i2 in hullVertices))
            {
                hullVertices[i2] = outVertexCount;
                outVertexCount += 1;
            }

            // form triangle iff no edge is closed
            if (!((i0 + ":" + i1) in closedSet ||
                  (i1 + ":" + i2) in closedSet ||
                  (i2 + ":" + i0) in closedSet))
            {
                hullTriangles.push(i0);
                hullTriangles.push(i1);
                hullTriangles.push(i2);

                closedSet[i0 + ":" + i1] = true;
                closedSet[i1 + ":" + i2] = true;
                closedSet[i2 + ":" + i0] = true;

                openSet.push(i2);
                openSet.push(i1);
                openSet.push(i0);
                openSet.push(i2);
            }
        }

        // Output triangle array!
        return this.createArray(points, hullTriangles, hullVertices, outVertexCount);
    },

    createArray : function createArrayFn(points, indices, mapping, vertexCount)
    {
        // Port removeRedundantVertices from mesh.py with extra param to specify used vertices.
        // Modified to create a WebGLPhysicsPrivateTriangleArray
        var outPoints = new Float32Array(vertexCount * 3);
        var triangleCount = indices.length;
        var outIndices = (vertexCount < 65536 ? new Uint16Array(triangleCount) : new Uint32Array(triangleCount));

        // Produce outPoints array
        var numPoints = (points.length / 3);
        var i;
        for (i = 0; i < numPoints; i += 1)
        {
            if (!(i in mapping))
            {
                continue;
            }

            var newIndex = (mapping[i] * 3);
            outPoints[newIndex] = points[i * 3];
            outPoints[newIndex + 1] = points[(i * 3) + 1];
            outPoints[newIndex + 2] = points[(i * 3) + 2];
        }

        // Remap triangles.
        for (i = 0; i < triangleCount; i += 1)
        {
            outIndices[i] = mapping[indices[i]];
        }

        return WebGLPhysicsTriangleArray.create({
            vertices : outPoints,
            indices : outIndices,
            dontCopy : true // Inform TriangleArray constructor not to take a copy of mesh.
        })._private;
    }
};


//
// WebGL Physics Triangle Mesh Shape
//
function WebGLPhysicsTriangleMeshShape() {}
WebGLPhysicsTriangleMeshShape.prototype = {

    version : 1,
    type : "TRIANGLE_MESH",

    rayTest : function triangleMeshRayTestFn(ray)
    {
        return this.triangleArray.rayTest(ray);
    }
};

WebGLPhysicsTriangleMeshShape.create = function WebGLPhysicsTriangleMeshShapeFn(params)
{
    var rett = new WebGLPhysicsShape();
    var t = new WebGLPhysicsTriangleMeshShape();
    rett._private = t;
    t._public = rett;

    var margin = (params.margin !== undefined) ? params.margin : 0.04;
    var triangleArray = params.triangleArray._private;

    var extents = triangleArray.extents;
    var e0 = extents[0];
    var e1 = extents[1];
    var e2 = extents[2];
    var e3 = extents[3];
    var e4 = extents[4];
    var e5 = extents[5];

    var h0 = ((0.5 * (e3 - e0)) + margin);
    var h1 = ((0.5 * (e4 - e1)) + margin);
    var h2 = ((0.5 * (e5 - e2)) + margin);
    var c0 = (0.5 * (e0 + e3));
    var c1 = (0.5 * (e1 + e4));
    var c2 = (0.5 * (e2 + e5));

    t.triangleArray = triangleArray;
    t.radius = Math.sqrt((h0 * h0) + (h1 * h1) + (h2 * h2));
    t.halfExtents = VMath.v3Build(h0, h1, h2);
    if (c0 !== 0 || c1 !== 0 || c2 !== 0)
    {
        t.center = VMath.v3Build(c0, c1, c2);
    }
    else
    {
        t.center = undefined;
    }
    t.inertia = VMath.v3Build(0, 0, 0);
    t.collisionRadius = margin;

    initShapeProperties(rett, "TRIANGLE_MESH");
    return rett;
};

//
// WebGL Physics Convex Hull Shape
//
function WebGLPhysicsConvexHullShape() {}
WebGLPhysicsConvexHullShape.prototype = {

    version : 1,
    type : "CONVEX_HULL",

    rayTest : function convexHullRayTestFn(ray)
    {
        var triangleArray = this.triangleArray;
        if (triangleArray === undefined)
        {
            return null;
        }

        return triangleArray.rayTest(ray);
    },

    localSupportWithoutMargin : function convexHullLocalSupportWithoutMarginFn(vec, dst)
    {
        var v0 = vec[0];
        var v1 = vec[1];
        var v2 = vec[2];

        var topology = this.supportTopology;
        var points = this.triangleArray.vertices;
        if (this.lastSupport === undefined)
        {
            this.lastSupport = 0;
        }

        // Start search at last support point.
        var maxv = this.lastSupport;
        var ind = topology[maxv];
        var max = (points[ind] * v0) + (points[ind + 1] * v1) + (points[ind + 2] * v2);

        for (;;)
        {
            // Determine if a vertex linked in topology is a better support point.
            var next = -1;
            var n;
            var maxN = topology[maxv + 1];
            for (n = 0; n < maxN; n += 1)
            {
                var v = topology[maxv + 2 + n];
                ind = topology[v];
                var vdot = (points[ind] * v0) + (points[ind + 1] * v1) + (points[ind + 2] * v2);
                if (vdot > max)
                {
                    max = vdot;
                    next = v;
                }
            }

            // If no better support was found, we are at the maximum support.
            if (next !== -1)
            {
                maxv = next;
                continue;
            }
            else
            {
                break;
            }
        }

        // Cache maximum support to seed next call to method.
        this.lastSupport = maxv;

        ind = topology[maxv];
        dst[0] = points[ind];
        dst[1] = points[ind + 1];
        dst[2] = points[ind + 2];
    }
};

WebGLPhysicsConvexHullShape.create = function WebGLPhysicsConvexHullShapeFn(params)
{
    var retc = new WebGLPhysicsShape();
    var c = new WebGLPhysicsConvexHullShape();
    retc._private = c;
    c._public = retc;

    var margin = (params.margin !== undefined) ? params.margin : 0.04;
    var points = params.points;

    var min0 = points[0];
    var min1 = points[1];
    var min2 = points[2];
    var max0 = min0;
    var max1 = min1;
    var max2 = min2;
    var maxN = points.length;
    var n;
    var v0, v1, v2;
    for (n = 3; n < maxN; n += 3)
    {
        v0 = points[n];
        v1 = points[n + 1];
        v2 = points[n + 2];
        if (min0 > v0)
        {
            min0 = v0;
        }
        else if (max0 < v0)
        {
            max0 = v0;
        }
        if (min1 > v1)
        {
            min1 = v1;
        }
        else if (max1 < v1)
        {
            max1 = v1;
        }
        if (min2 > v2)
        {
            min2 = v2;
        }
        else if (max2 < v2)
        {
            max2 = v2;
        }
    }

    var h0 = ((0.5 * (max0 - min0)) + margin);
    var h1 = ((0.5 * (max1 - min1)) + margin);
    var h2 = ((0.5 * (max2 - min2)) + margin);
    var c0 = (0.5 * (min0 + max0));
    var c1 = (0.5 * (min1 + max1));
    var c2 = (0.5 * (min2 + max2));

    var lx = (2.0 * h0);
    var ly = (2.0 * h1);
    var lz = (2.0 * h2);
    lx *= lx;
    ly *= ly;
    lz *= lz;

    var massRatio = (1.0 / 12.0);

    c.points = new Float32Array(points);
    c.radius = Math.sqrt((h0 * h0) + (h1 * h1) + (h2 * h2));
    c.halfExtents = VMath.v3Build(h0, h1, h2);
    if (c0 !== 0 || c1 !== 0 || c2 !== 0)
    {
        c.center = VMath.v3Build(c0, c1, c2);
    }
    else
    {
        c.center = undefined;
    }
    c.inertia = VMath.v3Build(massRatio * (ly + lz),
                              massRatio * (lx + lz),
                              massRatio * (lx + ly));
    c.collisionRadius = margin;

    // Generate triangle array for ray testing
    if (points.length < 9)
    {
        // Less than 3 points... cannot generate triangles.
        throw "At present time, WebGL PhysicsDevice does not permit a convex hull to contain " +
              "less than 3 vertices";
    }
    else
    {
        var planar = WebGLPhysicsConvexHullHelpers.isPlanar(points);
        if (planar)
        {
            c.triangleArray = WebGLPhysicsConvexHullHelpers.makePlanarConvexHull(points);
        }
        else
        {
            c.triangleArray = WebGLPhysicsConvexHullHelpers.makeConvexHull(points);
        }

        // Produce edge topology for faster support search.
        // Each vertex keeps a reference to each neighbouring vertex on triangulated surface.
        //
        // Experiment showed that even for a planar convex hull of 3 vertices, we only search
        // on average 1.6 vertices instead of all 3 so is better even for this smallest case.
        var supportTopology = [];

        points = c.triangleArray.vertices;
        maxN = points.length;
        for (n = 0; n < maxN; n += 3)
        {
            supportTopology[n / 3] = [];
        }

        var m;
        if (planar)
        {
            for (n = 0; n < (maxN / 3); n += 1)
            {
                m = (n + 1) % (maxN / 3);
                supportTopology[n].push(m);
                supportTopology[m].push(n);
            }
        }
        else
        {
            var triangles = c.triangleArray.indices;
            maxN = triangles.length;
            for (n = 0; n < maxN; n += 3)
            {
                var i0 = triangles[n];
                var i1 = triangles[n + 1];
                var i2 = triangles[n + 2];

                // Create links i0 -> i1 -> i2 -> i0.
                // Adjacent triangles will take care of back links.
                supportTopology[i0].push(i1);
                supportTopology[i1].push(i2);
                supportTopology[i2].push(i0);
            }
        }

        // Additionally each vertex keeps a reference to the vertex on far side of hull.
        // Tests show that this reduces the number of vertices searched in support function.
        //
        // Planar case, only do this for 6 vertices or more, or else includes uneeded edges.
        // Non-planar case, do this for 10 vertices or more. Experiment showed this to be a good
        // threshold.
        maxN = points.length;
        if ((planar && maxN >= (3 * 6)) || (!planar && maxN >= (3 * 10)))
        {
            for (n = 0; n < maxN; n += 3)
            {
                var min = Number.MAX_VALUE;
                v0 = points[n];
                v1 = points[n + 1];
                v2 = points[n + 2];

                var  minm;
                for (m = 0; m < maxN; m += 3)
                {
                    var dot = (v0 * points[m]) + (v1 * points[m + 1]) + (v2 * points[m + 2]);
                    if (dot < min)
                    {
                        min = dot;
                        minm = m;
                    }
                }

                supportTopology[n / 3].push(minm / 3);
            }
        }

        // Flatten supportTopology array of arrays, into a single typed array.
        //
        // We take topology array like: [[1,2],[0],[0,1,3],[0,1,2]]
        // Decorate with index of vertex in triangle array
        // and number of edges: [[0,2|1,2], [3,1|0], [6,3|0,1,3], [9,3|0,1,2]]
        // And then flatten into array: [0,2,4,7, 3,1,0, 6,3,0,4,12, 9,3,0,4,7]
        //

        // Compute size of array, and positions of vertex data.
        var mapping = [];
        var size = 0;
        for (n = 0; n < (maxN / 3); n += 1)
        {
            mapping.push(size);
            size += supportTopology[n].length + 2;
        }

        // Produce flattened array.
        c.supportTopology = (size > 65536) ? new Int32Array(size) : new Int16Array(size);
        var index = 0;
        for (n = 0; n < (maxN / 3); n += 1)
        {
            c.supportTopology[index] = (n * 3);
            index += 1;

            var topology = supportTopology[n];
            c.supportTopology[index] = topology.length;
            index += 1;

            for (m = 0; m < topology.length; m += 1)
            {
                c.supportTopology[index] = mapping[topology[m]];
                index += 1;
            }
        }
    }

    initShapeProperties(retc, "CONVEX_HULL");
    return retc;
};


//
// WebGL Physics Collision Object
//
function WebGLPhysicsCollisionObject() {}
WebGLPhysicsCollisionObject.prototype = {

    version : 1,

    calculateExtents : function collisionObjectCalculateExtentsFn(extents)
    {
        this._private.calculateExtents(extents);
    },

    clone : function collisionObjectCloneFn()
    {
        return WebGLPhysicsCollisionObject.create(this);
    }
};

function WebGLPhysicsPrivateBody() {}
WebGLPhysicsPrivateBody.prototype = {

    version : 1,

    // Used for kinematics.
    // TODO: Should be used for convexSweep to permit non-linear sweeps.
    computeDeltaVelocity : function collisionObjectComputeDeltaVelocityFn(timeStep, from, to, inputVelocity)
    {
        var velocity = inputVelocity || this.velocity;

        var active = false;

        velocity[0] = (to[9]  - from[9]);
        velocity[1] = (to[10] - from[10]);
        velocity[2] = (to[11] - from[11]);
        if (velocity[0] !== 0 ||
            velocity[1] !== 0 ||
            velocity[2] !== 0)
        {
            active = true;
        }

        // do this afterwards so that active is true, even if timeStep is 0
        // for non-equal position transforms.
        velocity[0] /= timeStep;
        velocity[1] /= timeStep;
        velocity[2] /= timeStep;

        //var deltaRotation = VMath.m33Mul(VMath.m33Inverse(from), to);
        var m0 = (from[0] * to[0]) + (from[3] * to[3]) + (from[6] * to[6]);
        var m1 = (from[0] * to[1]) + (from[3] * to[4]) + (from[6] * to[7]);
        var m2 = (from[0] * to[2]) + (from[3] * to[5]) + (from[6] * to[8]);
        var m3 = (from[1] * to[0]) + (from[4] * to[3]) + (from[7] * to[6]);
        var m4 = (from[1] * to[1]) + (from[4] * to[4]) + (from[7] * to[7]);
        var m5 = (from[1] * to[2]) + (from[4] * to[5]) + (from[7] * to[8]);
        var m6 = (from[2] * to[0]) + (from[5] * to[3]) + (from[8] * to[6]);
        var m7 = (from[2] * to[1]) + (from[5] * to[4]) + (from[8] * to[7]);
        var m8 = (from[2] * to[2]) + (from[5] * to[5]) + (from[8] * to[8]);

        //var quat = VMath.quatFromM43(deltaRotation);
        var x, y, z, w, s;
        var trace = m0 + m4 + m8 + 1;
        if (trace > VMath.precision)
        {
            w = Math.sqrt(trace) / 2;
            x = (m5 - m7) / (4 * w);
            y = (m6 - m2) / (4 * w);
            z = (m1 - m3) / (4 * w);
        }
        else
        {
            if ((m0 > m4) && (m0 > m8))
            {
                s = Math.sqrt(1.0 + m0 - m4 - m8) * 2; // S=4*qx
                w = (m5 - m7) / s;
                x = 0.25 * s;
                y = (m3 + m1) / s;
                z = (m6 + m2) / s;
            }
            else if (m4 > m8)
            {
                s = Math.sqrt(1.0 + m4 - m0 - m8) * 2; // S=4*qy
                w = (m6 - m2) / s;
                x = (m3 + m1) / s;
                y = 0.25 * s;
                z = (m7 + m5) / s;
            }
            else
            {
                s = Math.sqrt(1.0 + m8 - m0 - m4) * 2; // S=4*qz
                w = (m1 - m3) / s;
                x = (m6 + m2) / s;
                y = (m7 + m5) / s;
                z = 0.25 * s;
            }
        }

        var angle = Math.acos(w) * 2.0;
        var sin_sqrd = 1.0 - (w * w);
        if (sin_sqrd < VMath.precision || angle === 0)
        {
            velocity[3] = velocity[4] = velocity[5] = 0;
        }
        else
        {
            var scale = angle / (timeStep * Math.sqrt(sin_sqrd));
            velocity[3] = x * scale;
            velocity[4] = y * scale;
            velocity[5] = z * scale;
            active = true;
        }

        return active;
    },

    // Used for kinematic and dynamics.
    calculateSweptExtents : function collisionObjectSweptExtentsFn(extents)
    {
        var shape = this.shape;
        var radius = shape.radius;

        var startTransform = this.startTransform;
        var x0 = startTransform[9];
        var x1 = startTransform[10];
        var x2 = startTransform[11];

        var transform = this.transform;
        var y0 = transform[9];
        var y1 = transform[10];
        var y2 = transform[11];

        var tmp;
        if (x0 > y0)
        {
            tmp = x0;
            x0 = y0;
            y0 = tmp;
        }
        if (x1 > y1)
        {
            tmp = x1;
            x1 = y1;
            y1 = tmp;
        }
        if (x2 > y2)
        {
            tmp = x2;
            x2 = y2;
            y2 = tmp;
        }

        extents[0] = x0 - radius;
        extents[1] = x1 - radius;
        extents[2] = x2 - radius;
        extents[3] = y0 + radius;
        extents[4] = y1 + radius;
        extents[5] = y2 + radius;
    },

    // use for all types.
    calculateExtents : function collisionObjectCalculateExtentsFn(extents)
    {
        var shape = this.shape;
        var center = shape.center;
        var halfExtents = shape.halfExtents;
        var h0 = halfExtents[0];
        var h1 = halfExtents[1];
        var h2 = halfExtents[2];

        var transform = this.transform;
        var m0 = transform[0];
        var m1 = transform[1];
        var m2 = transform[2];
        var m3 = transform[3];
        var m4 = transform[4];
        var m5 = transform[5];
        var m6 = transform[6];
        var m7 = transform[7];
        var m8 = transform[8];

        var ct0 = transform[9];
        var ct1 = transform[10];
        var ct2 = transform[11];
        if (center)
        {
            var c0 = center[0];
            var c1 = center[1];
            var c2 = center[2];

            if (c0 !== 0 ||
                c1 !== 0 ||
                c2 !== 0)
            {
                ct0 += (m0 * c0 + m3 * c1 + m6 * c2);
                ct1 += (m1 * c0 + m4 * c1 + m7 * c2);
                ct2 += (m2 * c0 + m5 * c1 + m8 * c2);
            }
        }

        // fails when h0, h1, h2 are infinite, as JS has 0 * infinity = NaN not 0!!!!
        //var ht0 = ((m0 < 0 ? -m0 : m0) * h0 + (m3 < 0 ? -m3 : m3) * h1 + (m6 < 0 ? -m6 : m6) * h2);
        //var ht1 = ((m1 < 0 ? -m1 : m1) * h0 + (m4 < 0 ? -m4 : m4) * h1 + (m7 < 0 ? -m7 : m7) * h2);
        //var ht2 = ((m2 < 0 ? -m2 : m2) * h0 + (m5 < 0 ? -m5 : m5) * h1 + (m8 < 0 ? -m8 : m8) * h2);
        var ht0 = ((m0 < 0 ? -m0 * h0 : m0 > 0 ? m0 * h0 : 0) +
                   (m3 < 0 ? -m3 * h1 : m3 > 0 ? m3 * h1 : 0) +
                   (m6 < 0 ? -m6 * h2 : m6 > 0 ? m6 * h2 : 0));
        var ht1 = ((m1 < 0 ? -m1 * h0 : m1 > 0 ? m1 * h0 : 0) +
                   (m4 < 0 ? -m4 * h1 : m4 > 0 ? m4 * h1 : 0) +
                   (m7 < 0 ? -m7 * h2 : m7 > 0 ? m7 * h2 : 0));
        var ht2 = ((m2 < 0 ? -m2 * h0 : m2 > 0 ? m2 * h0 : 0) +
                   (m5 < 0 ? -m5 * h1 : m5 > 0 ? m5 * h1 : 0) +
                   (m8 < 0 ? -m8 * h2 : m8 > 0 ? m8 * h2 : 0));

        extents[0] = (ct0 - ht0);
        extents[1] = (ct1 - ht1);
        extents[2] = (ct2 - ht2);
        extents[3] = (ct0 + ht0);
        extents[4] = (ct1 + ht1);
        extents[5] = (ct2 + ht2);
    },

    // used for all types.
    rayTest : function collisionObjectRayTestFn(ray)
    {
        //Transform ray; assuming transform is orthogonal
        var transform = this.transform;
        var rayT = {
            origin: WebGLPrivatePhysicsWorld.prototype.m43InverseOrthonormalTransformPoint(transform, ray.origin),
            direction: WebGLPrivatePhysicsWorld.prototype.m43InverseOrthonormalTransformVector(transform, ray.direction),
            maxFactor: ray.maxFactor
        };

        var result = this.shape.rayTest(rayT);
        if (result !== null)
        {
            result.hitPoint = VMath.m43TransformPoint(transform, result.hitPoint);
            result.hitNormal = VMath.m43TransformVector(transform, result.hitNormal);
        }

        return result;
    },

    // used for kinematics and dynamics
    integratePositionWithVelocities : function intPosWithVelFn(transform, outTransform, timeStep, offset)
    {
        var velocity = this.velocity;
        var sqrt = Math.sqrt;

        // x += h * v
        outTransform[9]  = transform[9]  + (timeStep * velocity[offset]);
        outTransform[10] = transform[10] + (timeStep * velocity[offset + 1]);
        outTransform[11] = transform[11] + (timeStep * velocity[offset + 2]);

        // A += h * skew(w) * A
        var w0 = velocity[offset + 3] * timeStep;
        var w1 = velocity[offset + 4] * timeStep;
        var w2 = velocity[offset + 5] * timeStep;

        var A0 = transform[0];
        var A1 = transform[1];
        var A2 = transform[2];
        var A3 = transform[3];
        var A4 = transform[4];
        var A5 = transform[5];
        var A6 = transform[6];
        var A7 = transform[7];
        var A8 = transform[8];

        var B0 = A0 - (w2 * A1) + (w1 * A2);
        var B1 = A1 + (w2 * A0) - (w0 * A2);
        var B2 = A2 - (w1 * A0) + (w0 * A1);
        var B3 = A3 - (w2 * A4) + (w1 * A5);
        var B4 = A4 + (w2 * A3) - (w0 * A5);
        var B5 = A5 - (w1 * A3) + (w0 * A4);
        var B6 = A6 - (w2 * A7) + (w1 * A8);
        var B7 = A7 + (w2 * A6) - (w0 * A8);
        var B8 = A8 - (w1 * A6) + (w0 * A7);

        // Orthornormalize with modified gram schmidt.
        var scale = 1 / sqrt((B0 * B0) + (B1 * B1) + (B2 * B2));
        B0 *= scale;
        B1 *= scale;
        B2 *= scale;

        scale = -((B0 * B3) + (B1 * B4) + (B2 * B5));
        B3 += B0 * scale;
        B4 += B1 * scale;
        B5 += B2 * scale;

        scale = 1 / sqrt((B3 * B3) + (B4 * B4) + (B5 * B5));
        B3 *= scale;
        B4 *= scale;
        B5 *= scale;

        scale = -((B0 * B6) + (B1 * B7) + (B2 * B8));
        B6 += B0 * scale;
        B7 += B1 * scale;
        B8 += B2 * scale;

        scale = -((B3 * B6) + (B4 * B7) + (B5 * B8));
        B6 += B3 * scale;
        B7 += B4 * scale;
        B8 += B5 * scale;

        scale = 1 / sqrt((B6 * B6) + (B7 * B7) + (B8 * B8));
        B6 *= scale;
        B7 *= scale;
        B8 *= scale;

        outTransform[0] = B0;
        outTransform[1] = B1;
        outTransform[2] = B2;
        outTransform[3] = B3;
        outTransform[4] = B4;
        outTransform[5] = B5;
        outTransform[6] = B6;
        outTransform[7] = B7;
        outTransform[8] = B8;
    },

    // used for dynamics.
    applyBiasVelocities : function applyBiasVelocitiesFn(timeStep)
    {
        var velocity = this.velocity;
        this.integratePositionWithVelocities(this.transform, this.startTransform, timeStep, 6);

        // Set bias velocities back to 0.
        velocity[6] = velocity[7] = velocity[8] = 0;
        velocity[9] = velocity[10] = velocity[11] = 0;
    },

    // used for kinematics and dynamics.
    integratePosition : function integratePositionFn(timeStep)
    {
        this.integratePositionWithVelocities(this.startTransform, this.transform, timeStep, 0);
    },

    // used for dynamics.
    refreshInertiaTensor : function refreshInertiaTensorFn()
    {
        var A = this.transform;
        var inertia = this.inverseInertiaLocal;
        var i0 = inertia[0];
        var i1 = inertia[1];
        var i2 = inertia[2];

        var A0 = A[0];
        var A1 = A[1];
        var A2 = A[2];
        var A3 = A[3];
        var A4 = A[4];
        var A5 = A[5];
        var A6 = A[6];
        var A7 = A[7];
        var A8 = A[8];

        // I = A * 1/I' * A^T
        var I = this.inverseInertia;
        I[0] = (A0 * A0 * i0) + (A3 * A3 * i1) + (A6 * A6 * i2);
        I[1] = (A0 * A1 * i0) + (A3 * A4 * i1) + (A6 * A7 * i2);
        I[2] = (A0 * A2 * i0) + (A3 * A5 * i1) + (A6 * A8 * i2);
        I[3] = (A1 * A0 * i0) + (A4 * A3 * i1) + (A7 * A6 * i2);
        I[4] = (A1 * A1 * i0) + (A4 * A4 * i1) + (A7 * A7 * i2);
        I[5] = (A1 * A2 * i0) + (A4 * A5 * i1) + (A7 * A8 * i2);
        I[6] = (A2 * A0 * i0) + (A5 * A3 * i1) + (A8 * A6 * i2);
        I[7] = (A2 * A1 * i0) + (A5 * A4 * i1) + (A8 * A7 * i2);
        I[8] = (A2 * A2 * i0) + (A5 * A5 * i1) + (A8 * A8 * i2);
    },

    // used for dynamics.
    integrateVelocity : function integrateVelocityFn(gravity, timeStep) {
        var velocity = this.velocity;

        var pow = Math.pow;
        // v += h * F / m. Damping applied directly.
        var linDrag = pow(1 - this.linearDamping, timeStep);
        velocity[0] = (velocity[0] + (timeStep * gravity[0])) * linDrag;
        velocity[1] = (velocity[1] + (timeStep * gravity[1])) * linDrag;
        velocity[2] = (velocity[2] + (timeStep * gravity[2])) * linDrag;

        var angDrag = pow(1 - this.angularDamping, timeStep);
        var w0 = velocity[3] * angDrag;
        var w1 = velocity[4] * angDrag;
        var w2 = velocity[5] * angDrag;

        // Apply clamping to angularVelocity
        var max_angular = WebGLPhysicsConfig.MAX_ANGULAR / timeStep;
        var wlsq = ((w0 * w0) + (w1 * w1) + (w2 * w2));
        if (wlsq > (max_angular * max_angular))
        {
            var scale = max_angular / Math.sqrt(wlsq);
            w0 *= scale;
            w1 *= scale;
            w2 *= scale;
        }

        velocity[3] = w0;
        velocity[4] = w1;
        velocity[5] = w2;
    },

    // Return false if body is (considering purely velocity) able to sleep.
    // used for dynamics.
    isActiveVelocity : function isActiveVelocityFn(linear, angular)
    {
        var r = this.shape.radius;

        var velocity = this.velocity;
        var v0 = velocity[0];
        var v1 = velocity[1];
        var v2 = velocity[2];
        var vmag = ((v0 * v0) + (v1 * v1) + (v2 * v2));
        if (vmag > (linear * r * r))
        {
            return true;
        }

        v0 = velocity[3];
        v1 = velocity[4];
        v2 = velocity[5];
        if (((v0 * v0) + (v1 * v1) + (v2 * v2)) > angular)
        {
            return true;
        }

        return false;
    },

    // Return false if body is (taking into account sleep delay) able to sleep.
    // used for dynamics.
    isActive : function isActiveFn(timeStep)
    {
        if (!this.permitSleep) {
            return true;
        }

        if (this.isActiveVelocity(WebGLPhysicsConfig.SLEEP_LINEAR_SQ, WebGLPhysicsConfig.SLEEP_ANGULAR_SQ))
        {
            this.wakeTimeStamp = this.world.timeStamp;
            return true;
        }

        return ((this.wakeTimeStamp + WebGLPhysicsConfig.SLEEP_DELAY) > this.world.timeStamp);
    }
};

WebGLPhysicsPrivateBody.uniqueId = 0;
function initPrivateBody(r, params)
{
    r.id = WebGLPhysicsPrivateBody.uniqueId;
    WebGLPhysicsPrivateBody.uniqueId += 1;

    r.world = null;
    r.shape = params.shape._private;

    r.friction    = (params.friction    !== undefined) ? params.friction    : 0.5;
    r.restitution = (params.restitution !== undefined) ? params.restitution : 0.0;

    var xform = params.transform;
    r.transform = (xform ? VMath.m43Copy(xform) : VMath.m43BuildIdentity());

    r.arbiters = [];
    // Tracks constraints that are inside of a space, and making use of this object.
    // We only track these constraints to avoid GC issues.
    r.constraints = [];

    // [v0, v1, v2]
    // [w0, w1, w2]
    // [v0, v1, v2] <-- bias velocity
    // [w0, w1, w2] <-- bias velocity
    r.velocity = new Float32Array(12);
    var vel = params.linearVelocity;
    if (vel)
    {
        r.velocity[0] = vel[0];
        r.velocity[1] = vel[1];
        r.velocity[2] = vel[2];
    }
    vel = params.angularVelocity;
    if (vel)
    {
        r.velocity[3] = vel[0];
        r.velocity[4] = vel[1];
        r.velocity[5] = vel[2];
    }

    r.linearDamping  = (params.linearDamping  !== undefined) ? params.linearDamping  : 0.0;
    r.angularDamping = (params.angularDamping !== undefined) ? params.angularDamping : 0.0;

    r.extents = new Float32Array(6);

    // For continous collision detection
    r.startTransform = VMath.m43BuildIdentity();
    r.endTransform = VMath.m43BuildIdentity();

    // For kinematic objects.
    r.prevTransform = VMath.m43Copy(r.transform);
    r.newTransform = VMath.m43BuildIdentity();

    r.island = null;
    r.islandRoot = r;
    r.islandRank = 0;

    // used for kinematics so that it is kept alive for a single
    // step before being sweffed.
    r.delaySleep = true;

    return r;
}

WebGLPhysicsCollisionObject.create = function webGLPhysicsPrivateBodyFn(params)
{
    var rets = new WebGLPhysicsCollisionObject();
    var s = new WebGLPhysicsPrivateBody();
    rets._private = s;
    s._public = rets;

    //read/write, no side effects
    rets.userData = ("userData" in params) ? params.userData : null;

    // read only, no getter needed
    Object.defineProperty(rets, "shape", {
        value : params.shape,
        enumerable : true
    });

    var kinematic = (params.kinematic !== undefined) ? params.kinematic : false;

    // read/write, side effects
    Object.defineProperty(rets, "transform", {
        get : function collisionObjectGetTransform()
        {
            return VMath.m43Copy(this._private.transform);
        },
        set : function collisionObjectSetTransform(transform)
        {
            var pr = this._private;
            // can only set transform if kinematic, or else for non kinematic IF NOT in a world.
            if (pr.kinematic || !pr.world) {
                VMath.m43Copy(transform, pr.transform);
                if (pr.world)
                {
                    pr.world.wakeBody(pr);
                }
            }
        },
        enumerable : true
    });

    var group = (params.group !== undefined) ? params.group : WebGLPhysicsDevice.prototype.FILTER_STATIC;
    // read only, no getter needed
    Object.defineProperty(rets, "group", {
        value : group,
        enumerable : true
    });

    /*jshint bitwise: false*/
    var mask  = (params.mask !== undefined) ? params.mask  :
                (WebGLPhysicsDevice.prototype.FILTER_ALL ^ WebGLPhysicsDevice.prototype.FILTER_STATIC);
    /*jshint bitwise: true*/
    // read only, no getter needed
    Object.defineProperty(rets, "mask", {
        value : mask,
        enumerable : true
    });

    // read/write, side effects needed
    Object.defineProperty(rets, "friction", {
        get : function collisionObjectGetFriction()
        {
            return this._private.friction;
        },
        set : function collisionObjectSetFriction(friction)
        {
            var pr = this._private;
            pr.friction = friction;

            // Invalidate arbiter friction values.
            var arbiters = pr.arbiters;
            var i;
            var limit = arbiters.length;
            for (i = 0; i < limit; i += 1)
            {
                arbiters[i].invalidateParameters();
            }
        },
        enumerable : true
    });

    // read/write, side effects needed
    Object.defineProperty(rets, "restitution", {
        get : function collisionObjectGetFriction()
        {
            return this._private.restitution;
        },
        set : function collisionObjectSetFriction(restitution)
        {
            var pr = this._private;
            pr.restitution = restitution;

            // Invalidate arbiter restitution values.
            var arbiters = pr.arbiters;
            var i;
            var limit = arbiters.length;
            for (i = 0; i < limit; i += 1)
            {
                arbiters[i].invalidateParameters();
            }
        },
        enumerable : true
    });

    // read only, no getter needed
    Object.defineProperty(rets, "kinematic", {
        value : kinematic,
        enumerable : true
    });

    //--------------------------------
    // set private collision object properties

    initPrivateBody(s, params);

    s.group = group;
    s.mask = mask;

    s.kinematic = kinematic;
    s.fixedRotation = !kinematic;

    s.mass = 0;
    s.inverseMass = 0;

    s.inverseInertiaLocal = VMath.v3BuildZero();
    s.inverseInertia = new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0]);

    s.collisionObject = true;

    // Kinematic/Static object is not permitted to sleep in the normal sense.
    s.permitSleep = false;
    // Kinematic/Static objects are not subject to manipulation by continuous
    // collision detection.
    s.sweepFrozen = true;

    // Object default active state is true iff object is kinematic.
    // static object is always 'inactive'
    s.active = kinematic;

    return rets;
};


//
// WebGL Physics Rigid Body
//
function WebGLPhysicsRigidBody() {}
WebGLPhysicsRigidBody.prototype = {

    version : 1,

    calculateExtents : function rigidBodyCalculateExtentsFn(extents)
    {
        this._private.calculateExtents(extents);
    },

    clone : function rigidBodyCloneFn()
    {
        return WebGLPhysicsRigidBody.create(this);
    }
};

WebGLPhysicsRigidBody.create = function webGLPhysicsRigidBodyFn(params)
{
    var retr = new WebGLPhysicsRigidBody();
    var r = new WebGLPhysicsPrivateBody();
    retr._private = r;
    r._public = retr;

    // read/write, no side effects
    retr.userData = ("userData" in params) ? params.userData : null;

    // read only, no getter needed
    Object.defineProperty(retr, "shape", {
        value : params.shape,
        enumerable : true
    });

    // read/write, side effects
    Object.defineProperty(retr, "linearVelocity", {
        get : function rigidBodyGetVelocity()
        {
            var vel = this._private.velocity;
            return VMath.v3Build(vel[0], vel[1], vel[2]);
        },
        set : function rigidBodySetVelocity(linearVelocity)
        {
            var vel = this._private.velocity;
            vel[0] = linearVelocity[0];
            vel[1] = linearVelocity[1];
            vel[2] = linearVelocity[2];
        },
        enumerable : true
    });

    // read/write, side effects
    Object.defineProperty(retr, "angularVelocity", {
        get : function rigidBodyGetVelocity()
        {
            var vel = this._private.velocity;
            return VMath.v3Build(vel[3], vel[4], vel[5]);
        },
        set : function rigidBodySetVelocity(angularVelocity)
        {
            var vel = this._private.velocity;
            vel[3] = angularVelocity[0];
            vel[4] = angularVelocity[1];
            vel[5] = angularVelocity[2];
        },
        enumerable : true
    });

    // read/write, side effects
    Object.defineProperty(retr, "transform", {
        get : function rigidBodyGetTransform()
        {
            return VMath.m43Copy(this._private.transform);
        },
        set : function rigidBodySetTransform(transform)
        {
            var pr = this._private;
            VMath.m43Copy(transform, pr.transform);

            // Ensure any arbiter's have their skipDiscreteCollisions flags set to false as
            // new contacts 'will' be needed.
            var arbiters = pr.arbiters;
            var i;
            var limit = arbiters.length;
            for (i = 0; i < limit; i += 1)
            {
                arbiters[i].skipDiscreteCollisions = false;
            }
        },
        enumerable : true
    });

    // read/write, side effects
    Object.defineProperty(retr, "active", {
        get : function rigidBodyGetActive()
        {
            return this._private.active;
        },
        set : function rigidBodySetActive(active)
        {
            var pr = this._private;
            if (active === pr.active)
            {
                // If already active, and in a world then allow re-settnig to true
                // to update wakeTimeStamp.
                if (pr.world && active)
                {
                    pr.wakeTimeStamp = pr.world.timeStamp;
                }
            }
            else if (pr.world)
            {
                // If in a world, and not already active then wake the body.
                if (active)
                {
                    pr.world.wakeBody(pr);
                }
                // Otherwise force body to go to sleep.
                else
                {
                    var list = pr.world.activeBodies;
                    list[list.indexOf(pr)] = list[list.length - 1];
                    list.pop();
                    pr.active = false;

                    // force any arbiters to be deactivated also.
                    var arbiters = pr.arbiters;
                    var n;
                    var maxN = arbiters.length;
                    for (n = 0; n < maxN; n += 1)
                    {
                        var arb = arbiters[n];
                        if (!arb.active)
                        {
                            continue;
                        }

                        arb.active = false;
                        var worldList = pr.world.activeArbiters;
                        worldList[worldList.indexOf(arb)] = worldList[worldList.length - 1];
                        worldList.pop();
                    }

                    // sync with broadphase
                    pr.world.syncBody(pr);
                }
            }
            else
            {
                pr.active = active;
            }
        },
        enumerable : true
    });

    // read only, no getter needed
    var group = (params.group !== undefined) ? params.group : WebGLPhysicsDevice.prototype.FILTER_DYNAMIC;
    Object.defineProperty(retr, "group", {
        value : group,
        enumerable : true
    });

    // read only, no getter needed
    var mask  = (params.mask  !== undefined) ? params.mask  : WebGLPhysicsDevice.prototype.FILTER_ALL;
    Object.defineProperty(retr, "mask", {
        value : mask,
        enumerable : true
    });

    // read/write, side effects
    Object.defineProperty(retr, "friction", {
        get : function rigidBodyGetFriction()
        {
            return this._private.friction;
        },
        set : function rigidBodySetFriction(friction)
        {
            var pr = this._private;
            pr.friction = friction;

            // Invalidate arbiter friction values.
            var arbiters = pr.arbiters;
            var i;
            var limit = arbiters.length;
            for (i = 0; i < limit; i += 1)
            {
                arbiters[i].invalidateParameters();
            }
        },
        enumerable : true
    });
    Object.defineProperty(retr, "restitution", {
        get : function rigidBodyGetRestitution()
        {
            return this._private.restitution;
        },
        set : function rigidBodySetRestitution(restitution)
        {
            var pr = this._private;
            pr.restitution = restitution;

            // Invalidate arbiter restitution values.
            var arbiters = pr.arbiters;
            var i;
            var limit = arbiters.length;
            for (i = 0; i < limit; i += 1)
            {
                arbiters[i].invalidateParameters();
            }
        },
        enumerable : true
    });

    // read/write, getters needed.
    Object.defineProperty(retr, "linearDamping", {
        get : function rigidBodyGetLinearDamping()
        {
            return this._private.linearDamping;
        },
        set : function rigidBodySetLinearDamping(linearDamping)
        {
            this._private.linearDamping = linearDamping;
        },
        enumerable : true
    });
    Object.defineProperty(retr, "angularDamping", {
        get : function rigidBodyGetLinearDamping()
        {
            return this._private.angularDamping;
        },
        set : function rigidBodySetLinearDamping(angularDamping)
        {
            this._private.angularDamping = angularDamping;
        },
        enumerable : true
    });

    // read only, no getter needed
    var kinematic = (params.kinematic !== undefined) ? params.kinematic : false;
    Object.defineProperty(retr, "kinematic", {
        value : kinematic,
        enumerable : true
    });

    // read only, no getter needed
    var mass = (params.mass !== undefined) ? params.mass : 1.0;
    Object.defineProperty(retr, "mass", {
        value : mass,
        enumerable : true
    });

    // read only, getter needed for unique vector.
    // this value isn't used internally so is kept in a closure just for this getter.
    var inertia = (params.inertia ? VMath.v3Copy(params.inertia) : VMath.v3ScalarMul(params.shape.inertia, mass));
    Object.defineProperty(retr, "inertia", {
        get : function rigidBodyGetInertia()
        {
            return VMath.v3Copy(inertia);
        },
        enumerable : true
    });

    // ------------------------------
    // initialise private properties of RigidBody.

    initPrivateBody(r, params);

    r.group = group;
    r.mask = mask;

    r.active = (params.active !== undefined) ? params.active :
                (params.frozen !== undefined) ? (!params.frozen) : true;

    r.kinematic = kinematic;
    r.fixedRotation = kinematic || ((params.fixedRotation !== undefined) ? params.fixedRotation : false);

    r.inverseInertiaLocal = (r.fixedRotation ? VMath.v3BuildZero() :
                                               VMath.v3Build(1 / inertia[0],
                                                             1 / inertia[1],
                                                             1 / inertia[2]));
    r.inverseInertia = VMath.m33BuildIdentity();

    r.mass = mass;
    r.inverseMass = (kinematic ? 0 : (1 / r.mass));

    r.collisionObject = false;

    // Kinematic object is not permitted to sleep in the normal sense.
    r.permitSleep = (params.permitSleep !== undefined) ? params.permitSleep : (!kinematic);

    // Kinematic object is not subject to manipulation by continous collisions.
    r.sweepFrozen = kinematic;

    return retr;
};

//
// WebGL Physics Constraint
//
function WebGLPhysicsConstraint() {}
WebGLPhysicsConstraint.prototype = {

    version : 1,

    preStep : function constraintPreStepFn(timeStep)
    {
    },

    applyCachedImpulses : function constraintApplyCachedImpulsesFn()
    {
    },

    computeAndApplyImpulses : function constraintComputeAndApplyImpulsesFn()
    {
    }
};

WebGLPhysicsConstraint.create = function webGLPhysicsConstraintFn(type, params)
{
    var s = new WebGLPhysicsConstraint();

    s.world = null;
    s.userData = null;

    webGLPhysicsClone(s, params);
    s.type = type;

    return s;
};

// Decorate constraint with getter/setters for bodyA/bodyB
// And deal with construction logic common to all constraints
function initConstraintProperties(c, params)
{
    c.userData = params.userData;

    var pc = c._private;
    pc.world = null;

    // read only, no getter required.
    pc.bodyA = params.bodyA._private;
    Object.defineProperty(c, "bodyA", {
        value : params.bodyA,
        enumerable : true
    });

    // read only, no getter required.
    pc.bodyB = params.bodyB ? params.bodyB._private : null;
    Object.defineProperty(c, "bodyB", {
        value : params.bodyB,
        enumerable : true
    });

    // read/write with side effects
    pc.active = (params.active !== undefined) ? params.active : true;
    Object.defineProperty(c, "active", {
        get : function constraintGetActive()
        {
            return this._private.active;
        },
        set : function constraintSetActive(active)
        {
            var pc = this._private;
            if (active === pc.active)
            {
                // If already active, and in a world then allow re-setting to true
                // to update wakeTimeStamp.
                if (pc.world && active)
                {
                    pc.wakeTimeStamp = pc.world.timeStamp;
                }
            }
            else if (pc.world)
            {
                // If in a world, and not already active then wake the constraint.
                if (active)
                {
                    pc.world.wakeConstraint(pc);
                }
                // Otherwise force constraint to go to sleep.
                else
                {
                    var list = pc.world.activeConstraints;
                    list[list.indexOf(pc)] = list[list.length - 1];
                    list.pop();
                    pc.active = false;
                }
            }
            else
            {
                pc.active = active;
            }
        },
        enumerable : true
    });
}

//
// WebGL Physics Point2Point Constraint
//
function WebGLPhysicsPoint2PointConstraint() {}
WebGLPhysicsPoint2PointConstraint.prototype = {

    version : 1,
    type : "POINT2POINT"

};

function WebGLPhysicsPrivatePoint2PointConstraint()
{
    // Initialise all properties that will ever be set on this object.
    this.bodyA = null;
    this.bodyB = null;

    // [0,  3) : pivotA (vector3)
    // [3,  6) : pivotB (vector3)
    // [6,  9) : relA   (vector3)
    // [9, 12) : relB   (vector3)
    // [12,21) : skewA  (mat33)
    // [21,30) : skewB  (mat33)
    // [30,31) : force   (scalar)
    // [31,32) : damping (scalar)
    // [32,33) : clamp   (scalar)
    // [33,34) : gamma   (scalar)
    // [34,40) : K (symmetric mat33)
    //           [ K0 K1 K2 ]
    //    aka:   [ K1 K3 K4 ]
    //           [ K2 K4 K5 ]
    // [40,43) : jAcc (vector3)
    // [43,46) : bias (vector3)
    this.data = new Float32Array(46);
}

WebGLPhysicsPrivatePoint2PointConstraint.prototype = {

    version : 1,

    preStep : function point2pointPreStepFn(timeStepRatio, timeStep)
    {
        var bodyA = this.bodyA;
        var bodyB = this.bodyB;
        var data = this.data;

        // a0 = this.pivotA
        var a0 = data[0];
        var a1 = data[1];
        var a2 = data[2];

        // b0 = this.pivotB
        var b0 = data[3];
        var b1 = data[4];
        var b2 = data[5];

        // Compute relative coordinates of pivot points.
        //this.relA = VMath.m43TransformVector(this.bodyA.transform, this.pivotA);
        var A = bodyA.transform;
        var ra0 = data[6] = (A[0] * a0) + (A[3] * a1) + (A[6] * a2);
        var ra1 = data[7] = (A[1] * a0) + (A[4] * a1) + (A[7] * a2);
        var ra2 = data[8] = (A[2] * a0) + (A[5] * a1) + (A[8] * a2);

        var rb0, rb1, rb2, B;
        if (bodyB)
        {
            B = bodyB.transform;

            //this.relB = VMath.m43TransformVector(this.bodyB.transform, this.pivotB);
            rb0 = data[9]  = (B[0] * b0) + (B[3] * b1) + (B[6] * b2);
            rb1 = data[10] = (B[1] * b0) + (B[4] * b1) + (B[7] * b2);
            rb2 = data[11] = (B[2] * b0) + (B[5] * b1) + (B[8] * b2);
        }

        //var skew = this.matrix;
        //this.m33BuildSkew(this.relA, skew);
        //VMath.m33Mul(skew, bodyA.inverseInertia, this.skewA);
        var I = bodyA.inverseInertia;
        data[12] = (-ra2 * I[3]) + (ra1 * I[6]);
        data[13] = (-ra2 * I[4]) + (ra1 * I[7]);
        data[14] = (-ra2 * I[5]) + (ra1 * I[8]);
        data[15] = (ra2 * I[0]) + (-ra0 * I[6]);
        data[16] = (ra2 * I[1]) + (-ra0 * I[7]);
        data[17] = (ra2 * I[2]) + (-ra0 * I[8]);
        data[18] = (-ra1 * I[0]) + (ra0 * I[3]);
        data[19] = (-ra1 * I[1]) + (ra0 * I[4]);
        data[20] = (-ra1 * I[2]) + (ra0 * I[5]);

        var mass_sum = bodyA.inverseMass + (bodyB ? bodyB.inverseMass : 0);
        //VMath.m33BuildIdentity(K);
        //VMath.m33ScalarMul(K, mass_sum, K);
        //this.m33Sub(K, VMath.m33Mul(this.skewA, skew), K);
        var K0 = mass_sum + (data[13] * -ra2) + (data[14] * ra1);
        var K3 = mass_sum + (data[15] * ra2)  + (data[17] * -ra0);
        var K5 = mass_sum + (data[18] * -ra1) + (data[19] * ra0);
        var K1 = (data[12] * ra2)  + (data[14] * -ra0);
        var K2 = (data[12] * -ra1) + (data[13] * ra0);
        var K4 = (data[15] * -ra1) + (data[16] * ra0);

        if (bodyB)
        {
            //this.m33BuildSkew(this.relB, skew);
            //VMath.m33Mul(skew, bodyB.inverseInertia, this.skewB);
            //this.m33Sub(K, VMath.m33Mul(this.skewB, skew), K);
            I = bodyB.inverseInertia;
            data[21] = (-rb2 * I[3]) + (rb1 * I[6]);
            data[22] = (-rb2 * I[4]) + (rb1 * I[7]);
            data[23] = (-rb2 * I[5]) + (rb1 * I[8]);
            data[24] = (rb2 * I[0]) + (-rb0 * I[6]);
            data[25] = (rb2 * I[1]) + (-rb0 * I[7]);
            data[26] = (rb2 * I[2]) + (-rb0 * I[8]);
            data[27] = (-rb1 * I[0]) + (rb0 * I[3]);
            data[28] = (-rb1 * I[1]) + (rb0 * I[4]);
            data[29] = (-rb1 * I[2]) + (rb0 * I[5]);

            K0 += (data[22] * -rb2) + (data[23] * rb1);
            K3 += (data[24] * rb2)  + (data[26] * -rb0);
            K5 += (data[27] * -rb1) + (data[28] * rb0);
            K1 += (data[21] * rb2)  + (data[23] * -rb0);
            K2 += (data[21] * -rb1) + (data[22] * rb0);
            K4 += (data[24] * -rb1) + (data[25] * rb0);
        }

        // Soft constraint physics (Based on Nape physics soft constraints).
        //
        // We are given this.force in constraint parameters.
        //   So we must compute suitable omega instead.
        var force = data[30];
        var omega = (2 / timeStep * force * data[31]) / (1 - force);

        var gk = force / (omega * omega);
        var ig = 1 / (1 + gk);
        data[33] = 1 - (gk * ig);

        //VMath.m33Inverse(K, K);
        //VMath.m33ScalarMul(K, ig, K);
        var i0 = ((K3 * K5) - (K4 * K4));
        var i1 = ((K2 * K4) - (K1 * K5));
        var i2 = ((K1 * K4) - (K2 * K3));
        var idet = ig / ((K0 * i0) + (K1 * i1) + (K2 * i2));

        data[34] = (idet * i0);
        data[35] = (idet * i1);
        data[36] = (idet * i2);
        data[37] = (idet * ((K0 * K5) - (K2 * K2)));
        data[38] = (idet * ((K1 * K2) - (K0 * K4)));
        data[39] = (idet * ((K0 * K3) - (K1 * K1)));

        // positional error
        var C0 = ra0 + A[9];
        var C1 = ra1 + A[10];
        var C2 = ra2 + A[11];
        if (bodyB)
        {
            C0 -= rb0 + B[9];
            C1 -= rb1 + B[10];
            C2 -= rb2 + B[11];
        }
        else
        {
            C0 -= b0;
            C1 -= b1;
            C2 -= b2;
        }

        // soft constraint bias.
        var scale = -force / timeStep;
        data[43] = (C0 * scale);
        data[44] = (C1 * scale);
        data[45] = (C2 * scale);

        // scale cached impulse for change in time step.
        data[40] *= timeStepRatio;
        data[41] *= timeStepRatio;
        data[42] *= timeStepRatio;
    },

    applyCachedImpulses : function point2pointApplyCachedImpulsesFn()
    {
        var data = this.data;

        // var j = this.jAcc
        var j0 = data[40];
        var j1 = data[41];
        var j2 = data[42];

        var bodyA = this.bodyA;
        var vel = bodyA.velocity;
        var imass = bodyA.inverseMass;
        vel[0] += (j0 * imass);
        vel[1] += (j1 * imass);
        vel[2] += (j2 * imass);

        //var I = this.skewA;
        vel[3] -= ((data[12] * j0) + (data[15] * j1) + (data[18] * j2));
        vel[4] -= ((data[13] * j0) + (data[16] * j1) + (data[19] * j2));
        vel[5] -= ((data[14] * j0) + (data[17] * j1) + (data[20] * j2));

        var bodyB = this.bodyB;
        if (bodyB)
        {
            vel = bodyB.velocity;
            imass = bodyB.inverseMass;
            vel[0] -= (j0 * imass);
            vel[1] -= (j1 * imass);
            vel[2] -= (j2 * imass);

            //I = this.skewB;
            vel[3] += ((data[21] * j0) + (data[24] * j1) + (data[27] * j2));
            vel[4] += ((data[22] * j0) + (data[25] * j1) + (data[28] * j2));
            vel[5] += ((data[23] * j0) + (data[26] * j1) + (data[29] * j2));
        }
    },

    computeAndApplyImpulses : function point2pointComputeAndApplyImpulsesFn()
    {
        var bodyA = this.bodyA;
        var bodyB = this.bodyB;
        var data = this.data;

        // jAcc = this.jAcc
        var jAcc0 = data[40];
        var jAcc1 = data[41];
        var jAcc2 = data[42];

        // velocity bias, minus the relative velocity at pivot points
        // stored in (l0, l1, l2)
        var vel1 = bodyA.velocity;
        //var rel = this.relA;
        // l = bias - (vel1 + ang1 cross rel)
        var l0 = data[43] - (vel1[0] + (vel1[4] * data[8]) - (vel1[5] * data[7]));
        var l1 = data[44] - (vel1[1] + (vel1[5] * data[6]) - (vel1[3] * data[8]));
        var l2 = data[45] - (vel1[2] + (vel1[3] * data[7]) - (vel1[4] * data[6]));

        var vel2;
        if (bodyB)
        {
            vel2 = bodyB.velocity;
            //rel = this.relB;
            // l += vel2 + ang2 cross rel
            l0 += (vel2[0] + (vel2[4] * data[11]) - (vel2[5] * data[10]));
            l1 += (vel2[1] + (vel2[5] * data[9])  - (vel2[3] * data[11]));
            l2 += (vel2[2] + (vel2[3] * data[10]) - (vel2[4] * data[9]));
        }

        // compute, and accumulate impulse into (jAcc0, jAcc1, jAcc2)
        var gamma = data[33];
        //var K = this.K;
        // jAcc = jAcc * gamma + K * l
        jAcc0 = (jAcc0 * gamma) + (data[34] * l0) + (data[35] * l1) + (data[36] * l2);
        jAcc1 = (jAcc1 * gamma) + (data[35] * l0) + (data[37] * l1) + (data[38] * l2);
        jAcc2 = (jAcc2 * gamma) + (data[36] * l0) + (data[38] * l1) + (data[39] * l2);

        var clamp = data[32];
        if (clamp !== 0)
        {
            // clamp accumulated impulse.
            var jlsq = (jAcc0 * jAcc0) + (jAcc1 * jAcc1) + (jAcc2 * jAcc2);
            if (jlsq > clamp * clamp)
            {
                jlsq = clamp / Math.sqrt(jlsq);
                jAcc0 *= jlsq;
                jAcc1 *= jlsq;
                jAcc2 *= jlsq;
            }
        }

        // compute impulse to apply, and store new cached impulse.
        var j0 = jAcc0 - data[40];
        var j1 = jAcc1 - data[41];
        var j2 = jAcc2 - data[42];
        data[40] = jAcc0;
        data[41] = jAcc1;
        data[42] = jAcc2;

        // Apply impulse.
        var imass = bodyA.inverseMass;
        vel1[0] += (j0 * imass);
        vel1[1] += (j1 * imass);
        vel1[2] += (j2 * imass);

        //var I = this.skewA;
        vel1[3] -= ((data[12] * j0) + (data[15] * j1) + (data[18] * j2));
        vel1[4] -= ((data[13] * j0) + (data[16] * j1) + (data[19] * j2));
        vel1[5] -= ((data[14] * j0) + (data[17] * j1) + (data[20] * j2));

        if (bodyB)
        {
            imass = bodyB.inverseMass;
            vel2[0] -= (j0 * imass);
            vel2[1] -= (j1 * imass);
            vel2[2] -= (j2 * imass);

            //I = this.skewB;
            vel2[3] += ((data[21] * j0) + (data[24] * j1) + (data[27] * j2));
            vel2[4] += ((data[22] * j0) + (data[25] * j1) + (data[28] * j2));
            vel2[5] += ((data[23] * j0) + (data[26] * j1) + (data[29] * j2));
        }
    }
};

WebGLPhysicsPoint2PointConstraint.create = function Point2PointConstraintFn(params)
{
    var c = new WebGLPhysicsPoint2PointConstraint();
    var pc = new WebGLPhysicsPrivatePoint2PointConstraint();
    c._private = pc;

    initConstraintProperties(c, params);

    var data = pc.data;
    // read/write with side effects
    data[0] = params.pivotA[0];
    data[1] = params.pivotA[1];
    data[2] = params.pivotA[2];
    Object.defineProperty(c, "pivotA", {
        get : function point2pointGetPivotA()
        {
            var data = this._private.data;
            return VMath.v3Build(data[0], data[1], data[2]);
        },
        set : function point2pointSetPivotA(pivotA)
        {
            var data = this._private.data;
            data[0] = pivotA[0];
            data[1] = pivotA[1];
            data[2] = pivotA[2];
        },
        enumerable : true
    });

    // read/write with side effects
    // In the case that bodyB is not defined, we initialise pivot so that positional
    // error is 0.
    if (params.pivotB)
    {
        data[3] = params.pivotB[0];
        data[4] = params.pivotB[1];
        data[5] = params.pivotB[2];
    }
    else
    {
        var pivotB = VMath.m43TransformPoint(pc.bodyA.transform, params.pivotA);
        data[3] = pivotB[0];
        data[4] = pivotB[1];
        data[5] = pivotB[2];
    }
    Object.defineProperty(c, "pivotB", {
        get : function point2pointGetPivotB()
        {
            var data = this._private.data;
            return VMath.v3Build(data[3], data[4], data[5]);
        },
        set : function point2pointSetPivotB(pivotB)
        {
            var data = this._private.data;
            data[3] = pivotB[0];
            data[4] = pivotB[1];
            data[5] = pivotB[2];
        },
        enumerable : true
    });

    // read/write with no immediate side effects, but getter/setter required.
    data[30] = (params.force !== undefined) ? params.force : 0.3;
    Object.defineProperty(c, "force", {
        get : function point2pointGetForce()
        {
            return this._private.data[30];
        },
        set : function point2pointSetForce(force)
        {
            this._private.data[30] = force;
        },
        enumerable : true
    });

    // read/write with no immediate side effects, but getter/setter required.
    data[31] = (params.damping !== undefined) ? params.damping : 1.0;
    Object.defineProperty(c, "damping", {
        get : function point2pointGetForce()
        {
            return this._private.data[31];
        },
        set : function point2pointSetForce(damping)
        {
            this._private.data[31] = damping;
        },
        enumerable : true
    });

    // read/write with no immediate side effects, but getter/setter required.
    data[32] = (params.impulseClamp !== undefined) ? params.impulseClamp : 0.0;
    Object.defineProperty(c, "impulseClamp", {
        get : function point2pointGetForce()
        {
            return this._private.data[32];
        },
        set : function point2pointSetForce(impulseClamp)
        {
            this._private.data[32] = impulseClamp;
        },
        enumerable : true
    });

    return c;
};

//
// WebGL Physics Character
//
function WebGLPhysicsCharacter() {}
WebGLPhysicsCharacter.prototype = {

    version : 1,

    jump : function characterJumpFn()
    {
        var pc = this._private;
        var rigidBody = pc.rigidBody._private;
        var world = rigidBody.world;
        if (world)
        {
            rigidBody.velocity[1] = Math.sqrt(-2 * (this.maxJumpHeight - this.stepHeight) * world.gravity[1]);
            rigidBody.transform[10] += this.stepHeight;
            world.wakeBody(rigidBody);
        }
    },

    calculateExtents : function characterCalculateExtentsFn(extents)
    {
        this._private.rigidBody.calculateExtents(extents);
    }
};

function WebGLPhysicsPrivateCharacter()
{
    // Initialise all properties this object will ever hold.

    // Value of read/write property.
    this.crouch = false;
    this.dead = false;

    // Matrices re-used in all calls to onGround getter.
    this.start = VMath.m43BuildIdentity();
    this.end   = VMath.m43BuildIdentity();

    // Reference to created RigidBody representing Character.
    this.rigidBody = null;
}

WebGLPhysicsPrivateCharacter.prototype = {

    version : 1,

    onGroundConvexCallback : function onGroundConvexCallbackFn(hitResult)
    {
        // Less than cosine of 15 degrees.
        return hitResult.hitNormal[1] >= 0.26;
    }
};

WebGLPhysicsCharacter.create = function webGLPhysicsCharacterFn(params)
{
    var c = new WebGLPhysicsCharacter();
    var pc = new WebGLPhysicsPrivateCharacter();
    c._private = pc;

    // read/write, no side effects.
    c.userData = (params.userData !== undefined) ? params.userData : null;

    // read/write with side effects.
    Object.defineProperty(c, "crouch", {
        get : function getCharacterCrouchFn()
        {
            return this._private.crouch;
        },
        set : function setCharacterCrouchFn(crouch)
        {
            var pc = this._private;
            if (!pc.dead && crouch !== pc.crouch)
            {
                var rigidBody = pc.rigidBody._private;
                var capsule = rigidBody.shape;

                pc.crouch = crouch;
                if (crouch)
                {
                    capsule.halfHeight = ((this.crouchHeight * 0.5) - this.radius);
                    rigidBody.transform[10] -= ((this.height - this.crouchHeight) * 0.5);
                }
                else
                {
                    capsule.halfHeight = ((this.height * 0.5) - this.radius);
                    rigidBody.transform[10] += ((this.height - this.crouchHeight) * 0.5);
                }

                if (rigidBody.world)
                {
                    rigidBody.world.wakeBody(rigidBody);
                }
            }
        },
        enumerable : true
    });

    // read/write with side effects.
    Object.defineProperty(c, "dead", {
        get : function getCharacterDeadFn()
        {
            return this._private.dead;
        },
        set : function setCharacterDead(dead)
        {
            var pc = this._private;
            if (pc.dead !== dead)
            {
                var rigidBody = pc.rigidBody._private;
                var capsule = rigidBody.shape;

                pc.dead = dead;
                if (dead)
                {
                    capsule.halfHeight = 0;
                    rigidBody.transform[10] -= ((this.height - this.radius) * 0.5);
                }
                else
                {
                    capsule.halfHeight = ((this.height * 0.5) - this.radius);
                    rigidBody.transform[10] += ((this.height - this.radius) * 0.5);
                }

                if (rigidBody.world)
                {
                    rigidBody.world.wakeBody(rigidBody);
                }
            }
        },
        enumerable : true
    });

    // read only, no getter required.
    Object.defineProperty(c, "height", {
        value : params.height,
        enumerable : true
    });

    // read only, no getter required.
    Object.defineProperty(c, "radius", {
        value : params.radius,
        enumerable : true
    });

    // read only, no getter required
    Object.defineProperty(c, "stepHeight", {
        value : (params.stepHeight !== undefined) ? params.stepHeight : 0.35,
        enumerable : true
    });

    // read/write, no side effects so stored on actual object as standard property.
    c.maxJumpHeight = (params.maxJumpHeight !== undefined) ? params.maxJumpHeight : 1;

    // read only, no getter required
    Object.defineProperty(c, "crouchHeight", {
        value : (params.crouchHeight !== undefined) ? params.crouchHeight : (0.5 * params.height),
        enumerable : true
    });

    // read only, getter required.
    Object.defineProperty(c, "onGround", {
        get : function getCharacterOnGround()
        {
            var pc = this._private;
            var rigidBody = pc.rigidBody._private;

            if (rigidBody.world)
            {
                var pos = rigidBody.transform;
                var start = pc.start;
                var end   = pc.end;

                start[9]  = pos[9];
                start[10] = pos[10];
                start[11] = pos[11];

                end[9]  = pos[9];
                end[10] = (pos[10] - (this.stepHeight * 0.5));
                end[11] = pos[11];

                var result = rigidBody.world.convexSweepTest({
                        shape: rigidBody.shape._public,
                        from: start,
                        to: end,
                        group: WebGLPhysicsDevice.prototype.FILTER_CHARACTER
                    },
                    this.onGroundConvexCallback
                );
                return (result !== null);
            }
            else
            {
                return false;
            }
        },
        enumerable : true
    });

    // read/write with side effects.
    Object.defineProperty(c, "position", {
        get : function getCharacterPosition()
        {
            var rigidBody = this._private.rigidBody;
            return VMath.m43Pos(rigidBody._private.transform);
        },
        set : function setCharacterPosition(position)
        {
            var rigidBody = this._private.rigidBody;
            var transform = rigidBody._private.transform;
            transform[9]  = position[0];
            transform[10] = position[1];
            transform[11] = position[2];
            rigidBody.transform = rigidBody._private.transform; //invoke setter.
            rigidBody.active = true;
        },
        enumerable : true
    });

    // read/write with side effects.
    Object.defineProperty(c, "velocity", {
        get : function getCharacterVelocity()
        {
            var rigidBody = this._private.rigidBody;
            return rigidBody.linearVelocity;
        },
        set : function setCharacterVelocity(velocity)
        {
            var rigidBody = this._private.rigidBody;
            rigidBody.linearVelocity = velocity;
            rigidBody.active = true;
        },
        enumerable : true
    });

    // read only, no getter required.
    var group = (params.group !== undefined) ? params.group : WebGLPhysicsDevice.prototype.FILTER_CHARACTER;
    Object.defineProperty(c, "group", {
        value : group,
        enumerable : true
    });

    // read only, no getter required.
    var mask  = (params.mask !== undefined) ? params.mask : WebGLPhysicsDevice.prototype.FILTER_ALL;
    Object.defineProperty(c, "mask", {
        value : mask,
        enumerable : true
    });

    // Create inner RigidBody with Capsule shape.
    var capsule = WebGLPhysicsCapsuleShape.create({
        radius : c.radius,
        height : (2 * ((c.height * 0.5) - c.radius)),
        margin : 0
    });

    var rigidBody = WebGLPhysicsRigidBody.create({
        shape : capsule,
        mass : params.mass,
        transform : params.transform,
        linearVelocity : params.velocity,
        group : group,
        mask : mask,
        friction : params.friction,
        restitution : params.restitution,
        linearDamping : params.linearDamping,
        angularDamping : params.angularDamping,
        fixedRotation : true
    });

    // private (But internals like dynamics world need access through this object).
    pc.rigidBody = rigidBody;
    // Back reference to this public character, so that rayTests and convexSweeps
    // can in the case of intersecting a rigid body that represents a character,
    // return the character instead!
    rigidBody._private._public = c;

    return c;
};

//
// WebGL GJK Contact Solver
//
function WebGLGJKContactSolver() {}
WebGLGJKContactSolver.prototype = {

    version : 1,

    removeVertex : function removeVertexFn(index)
    {
        this.numVertices -= 1;

        var simplex = this.simplex;
        var replace = (index * 9);
        var withv = (this.numVertices * 9);

        simplex[replace]     = simplex[withv];
        simplex[replace + 1] = simplex[withv + 1];
        simplex[replace + 2] = simplex[withv + 2];
        simplex[replace + 3] = simplex[withv + 3];
        simplex[replace + 4] = simplex[withv + 4];
        simplex[replace + 5] = simplex[withv + 5];
        simplex[replace + 6] = simplex[withv + 6];
        simplex[replace + 7] = simplex[withv + 7];
        simplex[replace + 8] = simplex[withv + 8];
    },

    reduceVertices : function reduceVerticesFn(coords)
    {
        // NOTE: NOT USING EPSILON
        //
        // To avoid necessitating carrying 4 additional
        // boolean fields to mark coordinates as being
        // used or for deletion, the barycentric
        // coordinates are used to infer this property
        // instead. so strict equality with 0 is needed.
        if (this.numVertices >= 4 && coords[3] === 0)
        {
            this.numVertices -= 1;
        }

        var simplex = this.simplex;
        var withv;
        if (this.numVertices >= 3 && coords[2] === 0)
        {
            this.numVertices -= 1;
            withv = (this.numVertices * 9);
            simplex[18] = simplex[withv];
            simplex[19] = simplex[withv + 1];
            simplex[20] = simplex[withv + 2];
            simplex[21] = simplex[withv + 3];
            simplex[22] = simplex[withv + 4];
            simplex[23] = simplex[withv + 5];
            simplex[24] = simplex[withv + 6];
            simplex[25] = simplex[withv + 7];
            simplex[26] = simplex[withv + 8];
        }

        if (this.numVertices >= 2 && coords[1] === 0)
        {
            this.numVertices -= 1;
            withv = (this.numVertices * 9);
            simplex[9]  = simplex[withv];
            simplex[10] = simplex[withv + 1];
            simplex[11] = simplex[withv + 2];
            simplex[12] = simplex[withv + 3];
            simplex[13] = simplex[withv + 4];
            simplex[14] = simplex[withv + 5];
            simplex[15] = simplex[withv + 6];
            simplex[16] = simplex[withv + 7];
            simplex[17] = simplex[withv + 8];
        }

        if (this.numVertices >= 1 && coords[0] === 0)
        {
            this.numVertices -= 1;
            withv = (this.numVertices * 9);
            simplex[0] = simplex[withv];
            simplex[1] = simplex[withv + 1];
            simplex[2] = simplex[withv + 2];
            simplex[3] = simplex[withv + 3];
            simplex[4] = simplex[withv + 4];
            simplex[5] = simplex[withv + 5];
            simplex[6] = simplex[withv + 6];
            simplex[7] = simplex[withv + 7];
            simplex[8] = simplex[withv + 8];
        }
    },

    updateClosestPoints : function updateClosestPointsFn()
    {
        var numVertices = this.numVertices;
        if (numVertices === 0)
        {
            return false;
        }

        // ----------------------------------------
        // single vertex, only one candidate point.

        var simplex = this.simplex;
        var closest = this.closest;
        var i;

        if (numVertices === 1)
        {
            closest[0] = simplex[3];
            closest[1] = simplex[4];
            closest[2] = simplex[5];
            closest[3] = simplex[6];
            closest[4] = simplex[7];
            closest[5] = simplex[8];
            return true;
        }

        // ----------------------------------------
        // two vertices, find closest point on line

        var a0 = simplex[0];
        var a1 = simplex[1];
        var a2 = simplex[2];

        var b0 = simplex[9];
        var b1 = simplex[10];
        var b2 = simplex[11];

        if (numVertices === 2)
        {
            var w0 = (a0 - b0);
            var w1 = (a1 - b1);
            var w2 = (a2 - b2);

            var dot = ((a0 * w0) + (a1 * w1) + (a2 * w2));
            if (dot > 0)
            {
                var wlsq = ((w0 * w0) + (w1 * w1) + (w2 * w2));
                if (dot < wlsq)
                {
                    dot /= wlsq;
                    var dot1 = (1.0 - dot);

                    closest[0] = ((simplex[3] * dot1) + (simplex[12] * dot));
                    closest[1] = ((simplex[4] * dot1) + (simplex[13] * dot));
                    closest[2] = ((simplex[5] * dot1) + (simplex[14] * dot));
                    closest[3] = ((simplex[6] * dot1) + (simplex[15] * dot));
                    closest[4] = ((simplex[7] * dot1) + (simplex[16] * dot));
                    closest[5] = ((simplex[8] * dot1) + (simplex[17] * dot));

                    return true;
                }
                else
                {
                    this.removeVertex(0);
                }
            }
            else
            {
                this.removeVertex(1);
            }

            for (i = 0; i < 6; i += 1)
            {
                closest[i] = simplex[i + 3];
            }

            return true;
        }

        // ----------------------------------------
        // 3 vertices, find closest point in triangle

        var coords = this.cachedCoords;
        var alpha, beta, gamma;

        if (numVertices === 3)
        {
            this.closestPointTriangle(0, 9, 18, coords);
            this.reduceVertices(coords);

            alpha = coords[0];
            beta = coords[1];
            gamma = coords[2];

            closest[0] = ((alpha * simplex[3]) + (beta * simplex[12]) + (gamma * simplex[21]));
            closest[1] = ((alpha * simplex[4]) + (beta * simplex[13]) + (gamma * simplex[22]));
            closest[2] = ((alpha * simplex[5]) + (beta * simplex[14]) + (gamma * simplex[23]));
            closest[3] = ((alpha * simplex[6]) + (beta * simplex[15]) + (gamma * simplex[24]));
            closest[4] = ((alpha * simplex[7]) + (beta * simplex[16]) + (gamma * simplex[25]));
            closest[5] = ((alpha * simplex[8]) + (beta * simplex[17]) + (gamma * simplex[26]));

            return true;
        }

        // ----------------------------------------
        // 4 vertices, find closest point in tetrahedron

        if (numVertices === 4)
        {
            var outside = this.closestPointTetrahedron(coords);
            if (outside)
            {
                this.reduceVertices(coords);

                alpha = coords[0];
                beta = coords[1];
                gamma = coords[2];
                var delta = coords[3];

                closest[0] = ((alpha * simplex[3]) + (beta * simplex[12]) + (gamma * simplex[21]) + (delta * simplex[30]));
                closest[1] = ((alpha * simplex[4]) + (beta * simplex[13]) + (gamma * simplex[22]) + (delta * simplex[31]));
                closest[2] = ((alpha * simplex[5]) + (beta * simplex[14]) + (gamma * simplex[23]) + (delta * simplex[32]));
                closest[3] = ((alpha * simplex[6]) + (beta * simplex[15]) + (gamma * simplex[24]) + (delta * simplex[33]));
                closest[4] = ((alpha * simplex[7]) + (beta * simplex[16]) + (gamma * simplex[25]) + (delta * simplex[34]));
                closest[5] = ((alpha * simplex[8]) + (beta * simplex[17]) + (gamma * simplex[26]) + (delta * simplex[35]));

                return true;
            }
            else
            {
                return false;
            }
        }

        return false;
    },

    closestPointTetrahedron : function closestPointTetrahedron(coords)
    {
        var simplex = this.simplex;

        var a0 = simplex[0];
        var a1 = simplex[1];
        var a2 = simplex[2];

        var b0 = simplex[9];
        var b1 = simplex[10];
        var b2 = simplex[11];

        var c0 = simplex[18];
        var c1 = simplex[19];
        var c2 = simplex[20];

        var d0 = simplex[27];
        var d1 = simplex[28];
        var d2 = simplex[29];

        var ab0 = (b0 - a0);
        var ab1 = (b1 - a1);
        var ab2 = (b2 - a2);

        var ac0 = (c0 - a0);
        var ac1 = (c1 - a1);
        var ac2 = (c2 - a2);

        var ad0 = (d0 - a0);
        var ad1 = (d1 - a1);
        var ad2 = (d2 - a2);

        var bc0 = (c0 - b0);
        var bc1 = (c1 - b1);
        var bc2 = (c2 - b2);

        var bd0 = (d0 - b0);
        var bd1 = (d1 - b1);
        var bd2 = (d2 - b2);

        var n0, n1, n2, signD, signOrigin;

        n0 = ((ab1 * ac2) - (ab2 * ac1));
        n1 = ((ab2 * ac0) - (ab0 * ac2));
        n2 = ((ab0 * ac1) - (ab1 * ac0));
        signD = ((ad0 * n0) + (ad1 * n1) + (ad2 * n2));
        signOrigin = - ((a0 * n0) + (a1 * n1) + (a2 * n2));
        var sideABC = ((signOrigin * signD) <= 0);

        n0 = ((ac1 * ad2) - (ac2 * ad1));
        n1 = ((ac2 * ad0) - (ac0 * ad2));
        n2 = ((ac0 * ad1) - (ac1 * ad0));
        signD = ((ab0 * n0) + (ab1 * n1) + (ab2 * n2));
        signOrigin = - ((a0 * n0) + (a1 * n1) + (a2 * n2));
        var sideACD = ((signOrigin * signD) <= 0);

        n0 = ((ad1 * ab2) - (ad2 * ab1));
        n1 = ((ad2 * ab0) - (ad0 * ab2));
        n2 = ((ad0 * ab1) - (ad1 * ab0));
        signD = ((ac0 * n0) + (ac1 * n1) + (ac2 * n2));
        signOrigin = - ((a0 * n0) + (a1 * n1) + (a2 * n2));
        var sideADB = ((signOrigin * signD) <= 0);

        n0 = ((bd1 * bc2) - (bd2 * bc1));
        n1 = ((bd2 * bc0) - (bd0 * bc2));
        n2 = ((bd0 * bc1) - (bd1 * bc0));
        signD = ((ab0 * n0) + (ab1 * n1) + (ab2 * n2));
        signOrigin = ((b0 * n0) + (b1 * n1) + (b2 * n2));
        var sideBDC = ((signOrigin * signD) <= 0);

        coords[0] = coords[1] = coords[2] = coords[3] = 0.0;

        // inclusion
        if (!sideABC && !sideACD && !sideADB && !sideBDC)
        {
            return false;
        }

        var tempCoords = this.tempCoords;
        var minSqDist = Number.MAX_VALUE;
        var sqDist;

        if (sideABC)
        {
            sqDist = this.closestPointTriangle(0, 9, 18, tempCoords, true);
            if (sqDist < minSqDist)
            {
                minSqDist = sqDist;
                coords[0] = tempCoords[0];
                coords[1] = tempCoords[1];
                coords[2] = tempCoords[2];
                coords[3] = 0.0;
            }
        }

        if (sideACD)
        {
            sqDist = this.closestPointTriangle(0, 18, 27, tempCoords, true);
            if (sqDist < minSqDist)
            {
                minSqDist = sqDist;
                coords[0] = tempCoords[0];
                coords[1] = 0.0;
                coords[2] = tempCoords[1];
                coords[3] = tempCoords[2];
            }
        }

        if (sideADB)
        {
            sqDist = this.closestPointTriangle(0, 27, 9, tempCoords, true);
            if (sqDist < minSqDist)
            {
                minSqDist = sqDist;
                coords[0] = tempCoords[0];
                coords[1] = tempCoords[2];
                coords[2] = 0.0;
                coords[3] = tempCoords[1];
            }
        }

        if (sideBDC)
        {
            sqDist = this.closestPointTriangle(9, 27, 18, tempCoords, true);
            if (sqDist < minSqDist)
            {
                minSqDist = sqDist;
                coords[0] = 0.0;
                coords[1] = tempCoords[0];
                coords[2] = tempCoords[2];
                coords[3] = tempCoords[1];
            }
        }

        return true;
    },

    closestPointTriangle : function closestPointTriangleFn(a, b, c, coords, computeDistance)
    {
        var simplex = this.simplex;

        var a0 = simplex[a];
        var a1 = simplex[a + 1];
        var a2 = simplex[a + 2];

        var b0 = simplex[b];
        var b1 = simplex[b + 1];
        var b2 = simplex[b + 2];

        var c0 = simplex[c];
        var c1 = simplex[c + 1];
        var c2 = simplex[c + 2];

        var ba0 = (a0 - b0);
        var ba1 = (a1 - b1);
        var ba2 = (a2 - b2);

        var ca0 = (a0 - c0);
        var ca1 = (a1 - c1);
        var ca2 = (a2 - c2);

        var dot1 = ((a0 * ba0) + (a1 * ba1) + (a2 * ba2));
        var dot2 = ((a0 * ca0) + (a1 * ca1) + (a2 * ca2));
        if (dot1 <= 0.0 && dot2 <= 0) // Origin in region outside of A
        {
            coords[0] = 1;
            coords[1] = coords[2] = 0;
            if (computeDistance)
            {
                return ((a0 * a0) + (a1 * a1) + (a2 * a2));
            }
            else
            {
                return undefined;
            }
        }

        var dot3 = ((b0 * ba0) + (b1 * ba1) + (b2 * ba2));
        var dot4 = ((b0 * ca0) + (b1 * ca1) + (b2 * ca2));
        if (dot3 >= 0.0 && dot4 <= dot3) // Origin in region outside of B
        {
            coords[1] = 1;
            coords[0] = coords[2] = 0;
            if (computeDistance)
            {
                return ((b0 * b0) + (b1 * b1) + (b2 * b2));
            }
            else
            {
                return undefined;
            }
        }

        var v;
        var d0, d1, d2;

        var vc = ((dot1 * dot4) - (dot3 * dot2));
        if (vc <= 0.0 && dot1 >= 0.0 && dot3 <= 0.0) // Origin in region outside A-B
        {
            v = (dot1 / (dot1 - dot3));
            coords[0] = (1 - v);
            coords[1] = v;
            coords[2] = 0;
            if (computeDistance)
            {
                d0 = (a0 - (v * ba0));
                d1 = (a1 - (v * ba1));
                d2 = (a2 - (v * ba2));
                return ((d0 * d0) + (d1 * d1) + (d2 * d2));
            }
            else
            {
                return undefined;
            }
        }

        var dot5 = ((c0 * ba0) + (c1 * ba1) + (c2 * ba2));
        var dot6 = ((c0 * ca0) + (c1 * ca1) + (c2 * ca2));
        if (dot6 >= 0.0 && dot5 <= dot6) // Origin in region outsiode of C
        {
            coords[0] = coords[1] = 0;
            coords[2] = 1;
            if (computeDistance)
            {
                return ((c0 * c0) + (c1 * c1) + (c2 * c2));
            }
            else
            {
                return undefined;
            }
        }

        var vb = ((dot5 * dot2) - (dot1 * dot6));
        if (vb <= 0.0 && dot2 >= 0.0 && dot6 <= 0.0) // Origin in region outside of A-C
        {
            v = (dot2 / (dot2 - dot6));
            coords[0] = (1 - v);
            coords[1] = 0;
            coords[2] = v;
            if (computeDistance)
            {
                d0 = (a0 - (v * ca0));
                d1 = (a1 - (v * ca1));
                d2 = (a2 - (v * ca2));
                return ((d0 * d0) + (d1 * d1) + (d2 * d2));
            }
            else
            {
                return undefined;
            }
        }

        var va = ((dot3 * dot6) - (dot5 * dot4));
        if (va <= 0.0 && (dot4 - dot3) >= 0.0 && (dot5 - dot6) >= 0.0) // Origin in region outside of B-C
        {
            v = ((dot4 - dot3) / ((dot4 - dot3) + (dot5 - dot6)));
            coords[0] = 0;
            coords[1] = (1 - v);
            coords[2] = v;
            if (computeDistance)
            {
                d0 = ((b0 * (1 - v)) + (c0 * v));
                d1 = ((b1 * (1 - v)) + (c1 * v));
                d2 = ((b2 * (1 - v)) + (c2 * v));
                return ((d0 * d0) + (d1 * d1) + (d2 * d2));
            }
            else
            {
                return undefined;
            }
        }

        // Origin contained in triangle region
        var denom = (1 / (va + vb + vc));
        v = (vb * denom);
        var w = (vc * denom);
        coords[0] = (1 - v - w);
        coords[1] = v;
        coords[2] = w;
        if (computeDistance)
        {
            d0 = (a0 - (ba0 * v) - (ca0 * w));
            d1 = (a1 - (ba1 * v) - (ca1 * w));
            d2 = (a2 - (ba2 * v) - (ca2 * w));
            return ((d0 * d0) + (d1 * d1) + (d2 * d2));
        }
        else
        {
            return undefined;
        }
    },

    //
    // cache having properties
    //   shapeA
    //   shapeB
    //   axis <-- to be mutated by this function
    //      'on' objectB.
    //   closestA <-- to be populated by this function
    //   closestB <-- to be populated by this function
    evaluate : function gjkEvaluateFn(cache, xformA, xformB)
    {
        var axis = cache.axis;
        var shapeA = cache.shapeA;
        var shapeB = cache.shapeB;

        // Reset GJK.
        this.numVertices = 0;
        var lastW0, lastW1, lastW2;
        lastW0 = lastW1 = lastW2 = Number.MAX_VALUE;

        var curIter = 0;
        var maxIter = 100;
        var seperated = false;

        var squaredDistance = Number.MAX_VALUE;

        // Cached for frequent access.
        var A0 = xformA[0];
        var A1 = xformA[1];
        var A2 = xformA[2];
        var A3 = xformA[3];
        var A4 = xformA[4];
        var A5 = xformA[5];
        var A6 = xformA[6];
        var A7 = xformA[7];
        var A8 = xformA[8];
        var A9 = xformA[9];
        var A10 = xformA[10];
        var A11 = xformA[11];

        var B0 = xformB[0];
        var B1 = xformB[1];
        var B2 = xformB[2];
        var B3 = xformB[3];
        var B4 = xformB[4];
        var B5 = xformB[5];
        var B6 = xformB[6];
        var B7 = xformB[7];
        var B8 = xformB[8];
        var B9 = xformB[9];
        var B10 = xformB[10];
        var B11 = xformB[11];

        var axis0 = axis[0];
        var axis1 = axis[1];
        var axis2 = axis[2];
        var axislsq;

        var supportA = cache.closestA;
        var supportB = cache.closestB;

        var closest = this.closest;
        var simplex = this.simplex;

        // Epsilon defined based on rough experimental result.
        var equalVertexThreshold = 1e-4;

        for (;;)
        {
            curIter += 1;

            // supportA = xformA * shapeA.localSupport ( - ixformA * axis)
            // supportB = xformB * shapeB.localSupport (   ixformB * axis)
            //this.m43InverseOrthonormalTransformVector(xformA, axis, supportA);
            //VMath.v3Neg(supportA, supportA);
            supportA[0] = -((A0 * axis0) + (A1 * axis1) + (A2 * axis2));
            supportA[1] = -((A3 * axis0) + (A4 * axis1) + (A5 * axis2));
            supportA[2] = -((A6 * axis0) + (A7 * axis1) + (A8 * axis2));

            //this.m43InverseOrthonormalTransformVector(xformB, axis, supportB);
            supportB[0] = ((B0 * axis0) + (B1 * axis1) + (B2 * axis2));
            supportB[1] = ((B3 * axis0) + (B4 * axis1) + (B5 * axis2));
            supportB[2] = ((B6 * axis0) + (B7 * axis1) + (B8 * axis2));

            shapeA.localSupportWithoutMargin(supportA, supportA);
            shapeB.localSupportWithoutMargin(supportB, supportB);

            //VMath.m43TransformPoint(xformA, supportA, supportA);
            var d0 = supportA[0];
            var d1 = supportA[1];
            var d2 = supportA[2];
            var sa0 = supportA[0] = ((A0 * d0) + (A3 * d1) + (A6 * d2) + A9);
            var sa1 = supportA[1] = ((A1 * d0) + (A4 * d1) + (A7 * d2) + A10);
            var sa2 = supportA[2] = ((A2 * d0) + (A5 * d1) + (A8 * d2) + A11);

            //VMath.m43TransformPoint(xformB, supportB, supportB);
            d0 = supportB[0];
            d1 = supportB[1];
            d2 = supportB[2];
            var sb0 = supportB[0] = ((B0 * d0) + (B3 * d1) + (B6 * d2) + B9);
            var sb1 = supportB[1] = ((B1 * d0) + (B4 * d1) + (B7 * d2) + B10);
            var sb2 = supportB[2] = ((B2 * d0) + (B5 * d1) + (B8 * d2) + B11);

            //VMath.v3Sub(supportA, supportB, w);
            var w0 = sa0 - sb0;
            var w1 = sa1 - sb1;
            var w2 = sa2 - sb2;

            // If point is already in simplex, then we have reached closest point to origin
            // and minkowski difference does not intersect origin.
            var inSimplex = false;
            var index = this.numVertices * 9;
            var i;
            for (i = 0; i < index; i += 9)
            {
                d0 = (w0 - simplex[i]);
                d1 = (w1 - simplex[i + 1]);
                d2 = (w2 - simplex[i + 2]);
                if (((d0 * d0) + (d1 * d1) + (d2 * d2)) < equalVertexThreshold)
                {
                    inSimplex = true;
                }
            }

            // Additionaly check against previously inserted vertex which may have been
            // removed and prevent endless oscillation.
            if (!inSimplex)
            {
                d0 = (w0 - lastW0);
                d1 = (w1 - lastW1);
                d2 = (w2 - lastW2);
                inSimplex = ((d0 * d0) + (d1 * d1) + (d2 * d2)) < equalVertexThreshold;
            }

            if (inSimplex)
            {
                seperated = true;
                break;
            }

            //delta = VMath.v3Dot(axis, w);
            var delta = (axis0 * w0) + (axis1 * w1) + (axis2 * w2);

            // Check that we are getting closer
            // If not (within epsilon) we are very roughly at closest point
            // and should terminate!
            //
            if ((squaredDistance - delta) <= (squaredDistance * WebGLPhysicsConfig.GJK_FRACTIONAL_THRESHOLD))
            {
                seperated = true;
                break;
            }

            // Add vertex to simplex.
            lastW0 = simplex[index] = w0;
            lastW1 = simplex[index + 1] = w1;
            lastW2 = simplex[index + 2] = w2;
            simplex[index + 3] = sa0;
            simplex[index + 4] = sa1;
            simplex[index + 5] = sa2;
            simplex[index + 6] = sb0;
            simplex[index + 7] = sb1;
            simplex[index + 8] = sb2;
            this.numVertices += 1;

            // If we cannot find a seperating axis
            // Then shapes are intersecting!
            if (!this.updateClosestPoints())
            {
                seperated = false;
                break;
            }

            d0 = (closest[0] - closest[3]);
            d1 = (closest[1] - closest[4]);
            d2 = (closest[2] - closest[5]);

            // If seperation distance is very (very) small
            // Then we assume shapes are intersecting.
            axislsq = ((d0 * d0) + (d1 * d1) + (d2 * d2));
            if (axislsq <= WebGLPhysicsConfig.GJK_EPA_DISTANCE_THRESHOLD)
            {
                seperated = true;
                break;
            }

            // Prepare for next iteration.
            //VMath.v3Copy(newaxis, axis);
            axis0 = d0;
            axis1 = d1;
            axis2 = d2;

            // Check that we are getting closer with true distances
            // If not, terminate!
            var previousSqDistance = squaredDistance;
            squaredDistance = axislsq;

            if ((previousSqDistance - squaredDistance) <= (WebGLPhysicsConfig.GJK_FRACTIONAL_THRESHOLD * previousSqDistance))
            {
                seperated = true;
                break;
            }

            if (curIter >= maxIter)
            {
                seperated = true;
                break;
            }

            // We already have a full simplex
            // Next iteration would add too many vertices
            // So we must be intersecting
            if (this.numVertices === 4)
            {
                break;
            }
        }

        // If we cannot normalise axis, then necessarigly
        // seperated = false.
        // We do not zero the axis, as it is still useful enough for EPA.
        axislsq = ((axis0 * axis0) + (axis1 * axis1) + (axis2 * axis2));
        if (axislsq < WebGLPhysicsConfig.DONT_NORMALIZE_THRESHOLD)
        {
            axis[0] = axis0;
            axis[1] = axis1;
            axis[2] = axis2;
            return undefined;
        }

        // Normalise axis whether GJK failed or succeeded:
        // Is useful information for futher investigations.
        var scale = 1 / Math.sqrt(axislsq);
        axis[0] = axis0 * scale;
        axis[1] = axis1 * scale;
        axis[2] = axis2 * scale;

        if (seperated)
        {
            // Get closest points in simplex.
            supportA[0] = closest[0];
            supportA[1] = closest[1];
            supportA[2] = closest[2];

            supportB[0] = closest[3];
            supportB[1] = closest[4];
            supportB[2] = closest[5];

            return Math.sqrt(squaredDistance);
        }
        else
        {
            return undefined;
        }
    }
};

WebGLGJKContactSolver.create = function WebGLGJKContactSolverFn()
{
    var solver = new WebGLGJKContactSolver();

    // current simplex with vertices W = P - Q, generated by points P and Q
    // [ W00 W01 W02 P01 P02 P03 Q01 Q02 Q03 ... ]
    solver.simplex = new Float32Array(36);
    solver.numVertices = 0;

    // on update closest points defined by W = P - Q stored here.
    solver.closest = new Float32Array(6);

    solver.cachedCoords = new Float32Array(4);
    solver.tempCoords = new Float32Array(4);

    return solver;
};

//
// WebGL Contact EPA
//
function WebGLContactEPA() {}
WebGLContactEPA.prototype = {

    version : 1,

    MAX_VERTICES : 64,
    MAX_FACES : 128,

    bind : function bindFn(faceA, edgeA, faceB, edgeB)
    {
        faceA.edge[edgeA] = edgeB;
        faceA.adjFace[edgeA] = faceB;
        faceB.edge[edgeB] = edgeA;
        faceB.adjFace[edgeB] = faceA;
    },

    append : function appendFn(list, face)
    {
        face.leaf0 = null;
        face.leaf1 = list.root;
        if (list.root)
        {
            list.root.leaf0 = face;
        }
        list.root = face;
        list.count += 1;
    },

    remove : function removeFn(list, face)
    {
        var leaf0 = face.leaf0;
        var leaf1 = face.leaf1;
        if (leaf1)
        {
            leaf1.leaf0 = leaf0;
        }
        if (leaf0)
        {
            leaf0.leaf1 = leaf1;
        }
        if (face === list.root)
        {
            list.root = leaf1;
        }
        list.count -= 1;
    },

    findBest : function findBestFn()
    {
        var minFace = this.hull.root;
        var minDistance = minFace.distance * minFace.distance;
        var f;
        for (f = minFace.leaf1; f !== null; f = f.leaf1)
        {
            var sqDistance = f.distance * f.distance;
            if (sqDistance < minDistance)
            {
                minFace = f;
                minDistance = sqDistance;
            }
        }

        return minFace;
    },

    getEdgeDistance : function getEdgeDistanceFn(face, a, b)
    {
        var vertices = this.vertex_store;

        var a0 = vertices[a];
        var a1 = vertices[a + 1];
        var a2 = vertices[a + 2];

        var b0 = vertices[b];
        var b1 = vertices[b + 1];
        var b2 = vertices[b + 2];

        var ba0 = (b0 - a0);
        var ba1 = (b1 - a1);
        var ba2 = (b2 - a2);
        // outward facing edge normal on triangle plane

        var fn = face.normal;
        var fn0 = fn[0];
        var fn1 = fn[1];
        var fn2 = fn[2];

        var n0 = ((ba1 * fn2) - (ba2 * fn1));
        var n1 = ((ba2 * fn0) - (ba0 * fn2));
        var n2 = ((ba0 * fn1) - (ba1 * fn0));

        var dot = ((a0 * n0) + (a1 * n1) + (a2 * n2));
        if (dot <= 0)
        {
            //outside of edge A-B
            var lengthSqBA = ((ba0 * ba0) + (ba1 * ba1) + (ba2 * ba2));
            var dotA = ((a0 * ba0) + (a1 * ba1) + (a2 * ba2));
            var dotB = ((b0 * ba0) + (b1 * ba2) + (b2 * ba2));

            if (dotA >= 0)
            {
                //outside of vertex A
                return Math.sqrt((a0 * a0) + (a1 * a1) + (a2 * a2));
            }
            else if (dotB <= 0)
            {
                //outside of vertex B
                return Math.sqrt((b0 * b0) + (b1 * b1) + (b2 * b2));
            }
            else
            {
                var dotAB = ((a0 * b0) + (a1 * b1) + (a2 * b2));
                var dSq = (((a0 * a0) + (a1 * a1) + (a2 * a2)) * ((b0 * b0) + (b1 * b1) + (b2 * b2))) -
                          (dotAB * dotAB);
                return dSq >= 0 ? Math.sqrt(dSq / lengthSqBA) : 0;
            }
        }
        else
        {
            return undefined;
        }
    },

    buildNewFace : function buildNewFaceFn(a, b, c, forced)
    {
        var face = this.stock.root;
        if (face === null)
        {
            return null;
        }

        face.pass = 0;
        face.vertex[0] = a;
        face.vertex[1] = b;
        face.vertex[2] = c;

        var vertices = this.vertex_store;

        var a0 = vertices[a];
        var a1 = vertices[a + 1];
        var a2 = vertices[a + 2];

        var b0 = vertices[b];
        var b1 = vertices[b + 1];
        var b2 = vertices[b + 2];

        var c0 = vertices[c];
        var c1 = vertices[c + 1];
        var c2 = vertices[c + 2];

        var ba0 = (b0 - a0);
        var ba1 = (b1 - a1);
        var ba2 = (b2 - a2);

        var ca0 = (c0 - a0);
        var ca1 = (c1 - a1);
        var ca2 = (c2 - a2);

        var fn = face.normal;
        var fn0 = fn[0] = ((ba1 * ca2) - (ba2 * ca1));
        var fn1 = fn[1] = ((ba2 * ca0) - (ba0 * ca2));
        var fn2 = fn[2] = ((ba0 * ca1) - (ba1 * ca0));
        var length = ((fn0 * fn0) + (fn1 * fn1) + (fn2 * fn2));

        if (length > WebGLPhysicsConfig.DONT_NORMALIZE_THRESHOLD)
        {
            face.distance = this.getEdgeDistance(face, a, b);

            if (face.distance === undefined)
            {
                face.distance = this.getEdgeDistance(face, b, c);
            }

            if (face.distance === undefined)
            {
                face.distance = this.getEdgeDistance(face, c, a);
            }

            var scale = 1 / Math.sqrt(length);
            if (face.distance === undefined)
            {
                // Origin must be closest to triangle plane.
                face.distance = ((a0 * fn0) + (a1 * fn1) + (a2 * fn2)) * scale;
            }

            // Epsilon based on rough experimental result.
            // Negative epsilon 'not' a typo!
            if (forced || (face.distance >= -1e-6))
            {
                fn[0] *= scale;
                fn[1] *= scale;
                fn[2] *= scale;

                // Success!
                this.remove(this.stock, face);
                this.append(this.hull, face);
                return face;
            }
        }

        return null;
    },

    expandFace : function expandFaceFn(pass, w, face, edge, horizon)
    {
        if (face.pass !== pass)
        {
            var fn = face.normal;
            var fn0 = fn[0];
            var fn1 = fn[1];
            var fn2 = fn[2];

            var vertices = this.vertex_store;
            var w0 = vertices[w];
            var w1 = vertices[w + 1];
            var w2 = vertices[w + 2];

            var edge1 = (edge + 1) % 3;
            // Epsilon based on rough experimental result
            // Negative epsilon 'not' a typo!
            if ((((fn0 * w0) + (fn1 * w1) + (fn2 * w2)) - face.distance) < -1e-6)
            {
                var newFace = this.buildNewFace(face.vertex[edge1], face.vertex[edge], w, false);
                if (newFace)
                {
                    this.bind(newFace, 0, face, edge);
                    if (horizon.cf)
                    {
                        this.bind(horizon.cf, 1, newFace, 2);
                    }
                    else
                    {
                        horizon.ff = newFace;
                    }
                    horizon.cf = newFace;
                    horizon.numFaces += 1;
                    return true;
                }
            }
            else
            {
                var edge2 = (edge + 2) % 3;
                face.pass = pass;
                if (this.expandFace(pass, w, face.adjFace[edge1], face.edge[edge1], horizon) &&
                    this.expandFace(pass, w, face.adjFace[edge2], face.edge[edge2], horizon))
                {
                    this.remove(this.hull, face);
                    this.append(this.stock, face);
                    return true;
                }
            }
        }

        return false;
    },

    //
    // cache having properties
    //   shapeA
    //   shapeB
    //   axis <-- to be mutated by this function
    //     'on' object B.
    //   closestA <-- to be populated by this function
    //   closestB <-- to be populated by this function
    evaluate : function epaEvaluateFn(gjkSimplex, cache, xformA, xformB)
    {
        var shapeA = cache.shapeA;
        var shapeB = cache.shapeB;

        var hull = this.hull;
        var stock = this.stock;

        // Clean up after last evaluation
        while (hull.root)
        {
            var face = hull.root;
            this.remove(hull, face);
            this.append(stock, face);
        }

        // Orient simplex based on volume of tetrahedron
        var d0 = gjkSimplex[27];
        var d1 = gjkSimplex[28];
        var d2 = gjkSimplex[29];
        var ind0, ind1;

        var a0 = gjkSimplex[0] - d0;
        var a1 = gjkSimplex[1] - d1;
        var a2 = gjkSimplex[2] - d2;
        var b0 = gjkSimplex[9] - d0;
        var b1 = gjkSimplex[10] - d1;
        var b2 = gjkSimplex[11] - d2;
        var c0 = gjkSimplex[18] - d0;
        var c1 = gjkSimplex[19] - d1;
        var c2 = gjkSimplex[20] - d2;

        if (((a0 * ((b1 * c2) - (b2 * c1))) +
             (a1 * ((b2 * c0) - (b0 * c2))) +
             (a2 * ((b0 * c1) - (b1 * c0)))) < 0)
        {
            ind0 = 9;
            ind1 = 0;
        }
        else
        {
            ind0 = 0;
            ind1 = 9;
        }

        var vertices = this.vertex_store;
        var i;
        for (i = 0; i < 9; i += 1)
        {
            vertices[i] = gjkSimplex[ind0 + i];
            vertices[9 + i] = gjkSimplex[ind1 + i];
            vertices[18 + i] = gjkSimplex[18 + i];
            vertices[27 + i] = gjkSimplex[27 + i];
        }

        // Build initial convex hull
        var t0 = this.buildNewFace(0, 9, 18, true);
        var t1 = this.buildNewFace(9, 0, 27, true);
        var t2 = this.buildNewFace(18, 9, 27, true);
        var t3 = this.buildNewFace(0, 18, 27, true);

        var nextVertex = 36; //(4 * 9)

        if (hull.count !== 4)
        {
            VMath.v3Build(gjkSimplex[3], gjkSimplex[4], gjkSimplex[5], cache.closestA);
            VMath.v3Build(gjkSimplex[6], gjkSimplex[7], gjkSimplex[8], cache.closestB);
            return 0;
        }

        var best = this.findBest();
        var pass = 0;
        var iterations = 0;

        this.bind(t0, 0, t1, 0);
        this.bind(t0, 1, t2, 0);
        this.bind(t0, 2, t3, 0);
        this.bind(t1, 1, t3, 2);
        this.bind(t1, 2, t2, 1);
        this.bind(t2, 2, t3, 1);

        // Cached for frequent access.
        var A0 = xformA[0];
        var A1 = xformA[1];
        var A2 = xformA[2];
        var A3 = xformA[3];
        var A4 = xformA[4];
        var A5 = xformA[5];
        var A6 = xformA[6];
        var A7 = xformA[7];
        var A8 = xformA[8];
        var A9 = xformA[9];
        var A10 = xformA[10];
        var A11 = xformA[11];

        var B0 = xformB[0];
        var B1 = xformB[1];
        var B2 = xformB[2];
        var B3 = xformB[3];
        var B4 = xformB[4];
        var B5 = xformB[5];
        var B6 = xformB[6];
        var B7 = xformB[7];
        var B8 = xformB[8];
        var B9 = xformB[9];
        var B10 = xformB[10];
        var B11 = xformB[11];

        var supportA = cache.closestA;
        var supportB = cache.closestB;

        var horizon = this.horizon;
        var bn, n0, n1, n2;

        for (; iterations < 100; iterations += 1)
        {
            if (nextVertex >= this.MAX_VERTICES * 9)
            {
                break;
            }

            // reset horizon
            horizon.cf = horizon.ff = null;
            horizon.numFaces = 0;

            // get vertex from pool
            var w = nextVertex;
            nextVertex += 9;

            pass += 1;
            best.pass = pass;

            // populate vertex with supports.
            bn = best.normal;
            n0 = bn[0];
            n1 = bn[1];
            n2 = bn[2];
            //WebGLPrivatePhysicsWorld.prototype.m43InverseOrthonormalTransformVector(xformA, best.normal, supportA);
            //WebGLPrivatePhysicsWorld.prototype.m43InverseOrthonormalTransformVector(xformB, best.normal, supportB);
            //VMath.v3Neg(supportB, supportB);
            supportA[0] = ((A0 * n0) + (A1 * n1) + (A2 * n2));
            supportA[1] = ((A3 * n0) + (A4 * n1) + (A5 * n2));
            supportA[2] = ((A6 * n0) + (A7 * n1) + (A8 * n2));

            supportB[0] = -((B0 * n0) + (B1 * n1) + (B2 * n2));
            supportB[1] = -((B3 * n0) + (B4 * n1) + (B5 * n2));
            supportB[2] = -((B6 * n0) + (B7 * n1) + (B8 * n2));

            shapeA.localSupportWithoutMargin(supportA, supportA);
            shapeB.localSupportWithoutMargin(supportB, supportB);

            //VMath.m43TransformPoint(xformA, supportA, supportA);
            d0 = supportA[0];
            d1 = supportA[1];
            d2 = supportA[2];
            a0 = ((A0 * d0) + (A3 * d1) + (A6 * d2) + A9);
            a1 = ((A1 * d0) + (A4 * d1) + (A7 * d2) + A10);
            a2 = ((A2 * d0) + (A5 * d1) + (A8 * d2) + A11);

            //VMath.m43TransformPoint(xformB, supportB, supportB);
            d0 = supportB[0];
            d1 = supportB[1];
            d2 = supportB[2];
            b0 = ((B0 * d0) + (B3 * d1) + (B6 * d2) + B9);
            b1 = ((B1 * d0) + (B4 * d1) + (B7 * d2) + B10);
            b2 = ((B2 * d0) + (B5 * d1) + (B8 * d2) + B11);

            var w0, w1, w2;
            vertices[w + 3] = a0;
            vertices[w + 4] = a1;
            vertices[w + 5] = a2;
            vertices[w + 6] = b0;
            vertices[w + 7] = b1;
            vertices[w + 8] = b2;
            vertices[w]     = w0 = (a0 - b0);
            vertices[w + 1] = w1 = (a1 - b1);
            vertices[w + 2] = w2 = (a2 - b2);

            // expand simplex
            var wDist = ((n0 * w0) + (n1 * w1) + (n2 * w2)) - best.distance;
            if (wDist > WebGLPhysicsConfig.GJK_EPA_DISTANCE_THRESHOLD)
            {
                var j;
                var valid = true;
                for (j = 0; (j < 3 && valid); j += 1)
                {
                    valid = valid && this.expandFace(pass, w, best.adjFace[j], best.edge[j], horizon);
                }

                if (valid && (horizon.numFaces >= 3))
                {
                    this.bind(horizon.cf, 1, horizon.ff, 2);
                    this.remove(hull, best);
                    this.append(stock, best);
                    best = this.findBest();
                }
                else
                {
                    break;
                }
            }
            else
            {
                break;
            }
        }

        bn = best.normal;
        n0 = bn[0];
        n1 = bn[1];
        n2 = bn[2];
        var bd = best.distance;

        // Projection of origin onto final face of simplex.
        var p0 = n0 * bd;
        var p1 = n1 * bd;
        var p2 = n2 * bd;

        c0 = best.vertex[0];
        c1 = best.vertex[1];
        c2 = best.vertex[2];

        var x0 = vertices[c0]     - p0;
        var x1 = vertices[c0 + 1] - p1;
        var x2 = vertices[c0 + 2] - p2;

        var y0 = vertices[c1]     - p0;
        var y1 = vertices[c1 + 1] - p1;
        var y2 = vertices[c1 + 2] - p2;

        var z0 = vertices[c2]     - p0;
        var z1 = vertices[c2 + 1] - p1;
        var z2 = vertices[c2 + 2] - p2;

        // Compute barycentric coordinates of origin's projection on face.
        d0 = ((y1 * z2) - (y2 * z1));
        d1 = ((y2 * z0) - (y0 * z2));
        d2 = ((y0 * z1) - (y1 * z0));
        var alpha = Math.sqrt((d0 * d0) + (d1 * d1) + (d2 * d2));

        d0 = ((z1 * x2) - (z2 * x1));
        d1 = ((z2 * x0) - (z0 * x2));
        d2 = ((z0 * x1) - (z1 * x0));
        var beta = Math.sqrt((d0 * d0) + (d1 * d1) + (d2 * d2));

        d0 = ((x1 * y2) - (x2 * y1));
        d1 = ((x2 * y0) - (x0 * y2));
        d2 = ((x0 * y1) - (x1 * y0));
        var gamma = Math.sqrt((d0 * d0) + (d1 * d1) + (d2 * d2));

        var scale = 1 / (alpha + beta + gamma);
        alpha *= scale;
        beta *= scale;
        gamma *= scale;

        // Interpolate for ideal support points.
        supportA[0] = supportA[1] = supportA[2] = 0;
        supportB[0] = supportB[1] = supportB[2] = 0;
        for (i = 0; i < 3; i += 1)
        {
            supportA[i] += (alpha * vertices[c0 + 3 + i]) + (beta * vertices[c1 + 3 + i]) + (gamma * vertices[c2 + 3 + i]);
            supportB[i] += (alpha * vertices[c0 + 6 + i]) + (beta * vertices[c1 + 6 + i]) + (gamma * vertices[c2 + 6 + i]);
        }

        var axis = cache.axis;
        axis[0] = -n0;
        axis[1] = -n1;
        axis[2] = -n2;
        return (-best.distance);
    }
};

WebGLContactEPA.create = function WebGLContactEPAFn()
{
    var epa = new WebGLContactEPA();
    var i;

    // populate vertex and face pools
    epa.vertex_store = new Float32Array(epa.MAX_VERTICES * 9);

    var face_store = [];
    for (i = 0; i < epa.MAX_FACES; i += 1)
    {
        face_store[i] = {
            normal : VMath.v3BuildZero(),
            distance : 0,
            vertex : new Int16Array(3),
            adjFace : [null, null, null],
            edge : new Int16Array(3),

            leaf0 : null,
            leaf1 : null,
            pass : 0
        };
    }

    // initialise hull, stock and horizon
    epa.hull = {
        root : null,
        count : 0
    };

    epa.stock = {
        root : null,
        count : 0
    };

    epa.horizon = {
        cf : null,
        ff : null,
        numFaces : 0
    };

    // populat stock with all faces
    for (i = 0; i < epa.MAX_FACES; i += 1)
    {
        epa.append(epa.stock, face_store[epa.MAX_FACES - i - 1]);
    }

    return epa;
};

//
// WebGLPhysicsContact
//

// [0,  3) : localA (vector3)
// [3,  6) : localB (vector3)
// [6,  9) : relA   (vector3)
// [9, 12) : relB   (vector3)
// [12,15) : normal (vector3)  ('on' object B)
// [15,18) : tangent (vector3)
// [18,21) : bitangent (vector3)
// [21,22) : distance
// [22,25) : Jacobian : normal x relA * iInertiaA (vector3)
// [25,28) : Jacobian : normal x relB * iInertiaB (vector3)
// [28,31) : Jacobian : tangent x relA * iInertiaA (vector3)
// [31,34) : Jacobian : tangent x relB * iInertiaB (vector3)
// [34,37) : Jacobian : bitangent x relA * iInertiaA (vector3)
// [37,40) : Jacobian : bitangent x relB * iInertiaB (vector3)
// [40,43) : jAcc (normal, tangent, bitangent) (vector3)
// [43,44) : bias
// [44,45) : jAccBias
// [45,46) : penetration constraint, effective mass (kN)
// [46,50) : friction constraint, effective mass
//           [ kfA   kfBC ]
//           [ kfBC   kfD ]
// [50,51) : bounce
//

//
// Contact objects are object pooled due to being frequently
// created and destroyed.
//
// Contacts are thus instead allocated an deallocated with no
// create method.
//
var WebGLPhysicsContact = {};
WebGLPhysicsContact.contactPool = [];
WebGLPhysicsContact.contactPoolSize = 0;

WebGLPhysicsContact.allocate = function allocateFn()
{
    var contact;
    if (this.contactPoolSize === 0)
    {
        contact = new Float32Array(51);
    }
    else
    {
        contact = this.contactPool[this.contactPoolSize - 1];
        this.contactPoolSize -= 1;
    }

    return contact;
};

WebGLPhysicsContact.deallocate = function deallocateFn(contact)
{
    this.contactPool[this.contactPoolSize] = contact;
    this.contactPoolSize += 1;

    // Contact jAccN is cached between updates. Needs to be reset if contact is re-used.
    contact[40] = 0;
};


//
// WebGLPhysicsArbiter
//
function WebGLPhysicsArbiter()
{
    // Initialise all properties of arbiters
    // which will ever be used.

    // Object between which this contact patch is defined.
    // Precondition: objectA.id < objectB.id
    this.objectA = null;
    this.objectB = null;

    // Shapes between which this contact patch is defined.
    // Precondition: object#.shape = shape#
    this.shapeA = null;
    this.shapeB = null;

    // Pairwise friction and restitution values.
    this.friction    = 0;
    this.restitution = 0;

    // Set of contacts in patch.
    this.contacts = [];

    // Set of contacts with negative distance for physics computaions.
    this.activeContacts = [];

    // Whether contact is active (As compared to being sleeping).
    this.active = true;

    // Flag used to ignore unneccesary discrete collision checks in post-continuous collisions.
    this.skipDiscreteCollisions = false;
}

WebGLPhysicsArbiter.prototype = {

    version : 1,

    insertContact : function insertContactFn(worldA, worldB, normal, distance, concave)
    {
        var cn0 = normal[0];
        var cn1 = normal[1];
        var cn2 = normal[2];
        var clsq = ((cn0 * cn0) + (cn1 * cn1) + (cn2 * cn2));

        if (clsq < WebGLPhysicsConfig.DONT_NORMALIZE_THRESHOLD)
        {
            return;
        }

        var data = WebGLPhysicsContact.allocate();
        //WebGLPrivatePhysicsWorld.prototype.m43InverseOrthonormalTransformPoint(this.objectA.transform, worldA, c.localA);
        //WebGLPrivatePhysicsWorld.prototype.m43InverseOrthonormalTransformPoint(this.objectB.transform, worldB, c.localB);
        //var localA = c.localA;
        //var localB = c.localB;
        //var relA = c.relA;
        //var relB = c.relB;
        var xformA = this.objectA.transform;
        var xformB = this.objectB.transform;

        var r0 = data[6] = worldA[0] - xformA[9];
        var r1 = data[7] = worldA[1] - xformA[10];
        var r2 = data[8] = worldA[2] - xformA[11];
        var ca0 = data[0] = (xformA[0] * r0) + (xformA[1] * r1) + (xformA[2] * r2);
        var ca1 = data[1] = (xformA[3] * r0) + (xformA[4] * r1) + (xformA[5] * r2);
        var ca2 = data[2] = (xformA[6] * r0) + (xformA[7] * r1) + (xformA[8] * r2);

        r0 = data[9] = worldB[0] - xformB[9];
        r1 = data[10] = worldB[1] - xformB[10];
        r2 = data[11] = worldB[2] - xformB[11];
        data[3] = (xformB[0] * r0) + (xformB[1] * r1) + (xformB[2] * r2);
        data[4] = (xformB[3] * r0) + (xformB[4] * r1) + (xformB[5] * r2);
        data[5] = (xformB[6] * r0) + (xformB[7] * r1) + (xformB[8] * r2);

        //c.distance = distance;
        data[21] = distance;

        // contact normal, normalised.
        //var basis = c.basis;
        var scale = 1 / Math.sqrt(clsq);
        data[12] = cn0 = (cn0 * scale);
        data[13] = cn1 = (cn1 * scale);
        data[14] = cn2 = (cn2 * scale);

        // contact tangent.
        var ct0, ct1, ct2;
        if ((cn0 * cn0) + (cn2 * cn2) === 0)
        {
            ct0 = data[15] = 1.0;
            ct1 = data[16] = 0.0;
            ct2 = data[17] = 0.0;
        }
        else
        {
            scale = 1 / Math.sqrt(cn0 * cn0 + cn2 * cn2);
            ct0 = data[15] = (-cn2 * scale);
            ct1 = data[16] = 0.0;
            ct2 = data[17] = (cn0 * scale);
        }

        // contact bitangent
        data[18] = ((cn1 * ct2) - (cn2 * ct1));
        data[19] = ((cn2 * ct0) - (cn0 * ct2));
        data[20] = ((cn0 * ct1) - (cn1 * ct0));

        // Cull any contacts with different normal
        // Inherit accumulated impulse of nearby contact
        var i = 0;
        var min = Number.MAX_VALUE;
        var contacts = this.contacts;
        var d0, d1, d2;
        while (i < contacts.length)
        {
            var datad = contacts[i];
            // 0.9 chosen based on rough experimental results.
            if ((!concave) && ((cn0 * datad[12]) + (cn1 * datad[13]) + (cn2 * datad[14])) < 0.9)
            {
                contacts[i] = contacts[contacts.length - 1];
                contacts.pop();
                WebGLPhysicsContact.deallocate(datad);
                continue;
            }

            //var dlocalA = d.localA;
            d0 = (ca0 - datad[0]);
            d1 = (ca1 - datad[1]);
            d2 = (ca2 - datad[2]);
            var sep = (d0 * d0) + (d1 * d1) + (d2 * d2);
            if (sep < WebGLPhysicsConfig.CONTACT_EQUAL_SQ_SEPERATION)
            {
                //c.jAccN = d.jAccN;
                data[40] = datad[40];
                contacts[i] = contacts[contacts.length - 1];
                contacts.pop();
                WebGLPhysicsContact.deallocate(datad);
                min = sep;
                continue;
            }

            if (sep < WebGLPhysicsConfig.CONTACT_INHERIT_SQ_SEPERATION && sep < min)
            {
                //c.jAccN = d.jAccN;
                data[40] = datad[40];
                min = sep;
            }

            i++;
        }

        contacts.push(data);

        if (contacts.length === 4)
        {
            // Discard one contact, so that remaining 3 have maximum area, and contain deepest contact
            // Find deepest.
            var minDistance = Number.MAX_VALUE;
            var minimum;
            for (i = 0; i < 4; i += 1)
            {
                data = contacts[i];
                if (data[21] < minDistance)
                {
                    minDistance = data[21];
                    minimum = i;
                }
            }

            var discard;
            var maxArea = -Number.MAX_VALUE;

            var con0 = contacts[0];
            var con1 = contacts[1];
            var con2 = contacts[2];
            var con3 = contacts[3];

            // World coordinates of contact points (Scaled and translated, but does not matter).
            var a0 = con0[6] + con0[9];
            var a1 = con0[7] + con0[10];
            var a2 = con0[8] + con0[11];

            var b0 = con1[6] + con1[9];
            var b1 = con1[7] + con1[10];
            var b2 = con1[8] + con1[11];

            var c0 = con2[6] + con2[9];
            var c1 = con2[7] + con2[10];
            var c2 = con2[8] + con2[11];

            d0 = con3[6] + con3[9];
            d1 = con3[7] + con3[10];
            d2 = con3[8] + con3[11];

            var ab0 = (b0 - a0);
            var ab1 = (b1 - a1);
            var ab2 = (b2 - a2);

            var ac0 = (c0 - a0);
            var ac1 = (c1 - a1);
            var ac2 = (c2 - a2);

            var ad0 = (d0 - a0);
            var ad1 = (d1 - a1);
            var ad2 = (d2 - a2);

            var n0, n1, n2;
            var area;

            // Area discarding contact 1
            if (minimum !== 1)
            {
                n0 = ((ac1 * ad2) - (ac2 * ad1));
                n1 = ((ac2 * ad0) - (ac0 * ad2));
                n2 = ((ac0 * ad1) - (ac1 * ad0));
                area = (n0 * n0) + (n1 * n1) + (n2 * n2);
                if (area > maxArea)
                {
                    maxArea = area;
                    discard = 1;
                }
            }

            // Area discarding contact 2
            if (minimum !== 2)
            {
                n0 = ((ab1 * ad2) - (ab2 * ad1));
                n1 = ((ab2 * ad0) - (ab0 * ad2));
                n2 = ((ab0 * ad1) - (ab1 * ad0));
                area = (n0 * n0) + (n1 * n1) + (n2 * n2);
                if (area > maxArea)
                {
                    maxArea = area;
                    discard = 2;
                }
            }

            // Area discarding contact 3
            if (minimum !== 3)
            {
                n0 = ((ab1 * ac2) - (ab2 * ac1));
                n1 = ((ab2 * ac0) - (ab0 * ac2));
                n2 = ((ab0 * ac1) - (ab1 * ac0));
                area = (n0 * n0) + (n1 * n1) + (n2 * n2);
                if (area > maxArea)
                {
                    maxArea = area;
                    discard = 3;
                }
            }

            // Area discarding contact 0
            if (minimum !== 0)
            {
                var bc0 = (c0 - b0);
                var bc1 = (c1 - b1);
                var bc2 = (c2 - b2);

                var bd0 = (d0 - b0);
                var bd1 = (d1 - b1);
                var bd2 = (d2 - b2);

                n0 = ((bc1 * bd2) - (bc2 * bd1));
                n1 = ((bc2 * bd0) - (bc0 * bd2));
                n2 = ((bc0 * bd1) - (bc1 * bd0));
                area = (n0 * n0) + (n1 * n1) + (n2 * n2);
                if (area > maxArea)
                {
                    maxArea = area;
                    discard = 0;
                }
            }

            data = contacts[discard];
            contacts[discard] = contacts[3];
            contacts.pop();
            WebGLPhysicsContact.deallocate(data);
        }
    },

    refreshContacts : function refreshContactsFn()
    {
        var contacts = this.contacts;
        var objectA = this.objectA;
        var objectB = this.objectB;

        var xformA = objectA.transform;
        var xformB = objectB.transform;

        // Cached for use throughout method.
        var A0 = xformA[0];
        var A1 = xformA[1];
        var A2 = xformA[2];
        var A3 = xformA[3];
        var A4 = xformA[4];
        var A5 = xformA[5];
        var A6 = xformA[6];
        var A7 = xformA[7];
        var A8 = xformA[8];
        var A9 = xformA[9];
        var A10 = xformA[10];
        var A11 = xformA[11];

        var B0 = xformB[0];
        var B1 = xformB[1];
        var B2 = xformB[2];
        var B3 = xformB[3];
        var B4 = xformB[4];
        var B5 = xformB[5];
        var B6 = xformB[6];
        var B7 = xformB[7];
        var B8 = xformB[8];
        var B9 = xformB[9];
        var B10 = xformB[10];
        var B11 = xformB[11];

        var data;
        var i = 0;
        while (i < contacts.length)
        {
            data = contacts[i];

            //VMath.m43TransformVector(this.objectA.transform, c.localA, c.relA);
            var v0 = data[0];
            var v1 = data[1];
            var v2 = data[2];
            var ra0 = data[6] = ((A0 * v0) + (A3 * v1) + (A6 * v2));
            var ra1 = data[7] = ((A1 * v0) + (A4 * v1) + (A7 * v2));
            var ra2 = data[8] = ((A2 * v0) + (A5 * v1) + (A8 * v2));

            //VMath.m43TransformVector(this.objectB.transform, c.localB, c.relB);
            v0 = data[3];
            v1 = data[4];
            v2 = data[5];
            var rb0 = data[9] = ((B0 * v0) + (B3 * v1) + (B6 * v2));
            var rb1 = data[10] = ((B1 * v0) + (B4 * v1) + (B7 * v2));
            var rb2 = data[11] = ((B2 * v0) + (B5 * v1) + (B8 * v2));

            // contact seperation.
            v0 = (ra0 + A9) - (rb0 + B9);
            v1 = (ra1 + A10) - (rb1 + B10);
            v2 = (ra2 + A11) - (rb2 + B11);

            //var basis = c.basis;
            var n0 = data[12];
            var n1 = data[13];
            var n2 = data[14];

            //c.distance = VMath.v3Dot(c.normal, seperation);
            var sep = data[21] = ((n0 * v0) + (n1 * v1) + (n2 * v2));
            if (sep > WebGLPhysicsConfig.CONTACT_MAX_Y_SEPERATION)
            {
                contacts[i] = contacts[contacts.length - 1];
                contacts.pop();
                WebGLPhysicsContact.deallocate(data);
                continue;
            }

            //VMath.v3AddScalarMul(seperation, c.normal, -c.distance, seperation);
            v0 -= (n0 * sep);
            v1 -= (n1 * sep);
            v2 -= (n2 * sep);

            if (((v0 * v0) + (v1 * v1) + (v2 * v2)) > WebGLPhysicsConfig.CONTACT_MAX_SQ_XZ_SEPERATION)
            {
                contacts[i] = contacts[contacts.length - 1];
                contacts.pop();
                WebGLPhysicsContact.deallocate(data);
                continue;
            }

            i++;
        }

        return (contacts.length === 0);
    },

    preStep : function arbiterPreStepFn(timeStepRatio, timeStep)
    {
        var objectA = this.objectA;
        var objectB = this.objectB;
        var mass_sum = objectA.inverseMass + objectB.inverseMass;

        var velA = objectA.velocity;
        var velB = objectB.velocity;

        // cached for frequent access.
        var I = objectA.inverseInertia;
        var A0 = I[0];
        var A1 = I[1];
        var A2 = I[2];
        var A3 = I[3];
        var A4 = I[4];
        var A5 = I[5];
        var A6 = I[6];
        var A7 = I[7];
        var A8 = I[8];

        I = objectB.inverseInertia;
        var B0 = I[0];
        var B1 = I[1];
        var B2 = I[2];
        var B3 = I[3];
        var B4 = I[4];
        var B5 = I[5];
        var B6 = I[6];
        var B7 = I[7];
        var B8 = I[8];

        var activeContacts = this.activeContacts;
        activeContacts.length = 0;

        var contacts = this.contacts;
        var i;
        var limit = contacts.length;
        for (i = 0; i < limit; i += 1)
        {
            var data = contacts[i];
            if (data[21] > 0)
            {
                continue;
            }

            activeContacts[activeContacts.length] = data;

            // cacheing friction impulses between steps
            // caused them to fight eachother instead of stabalising at 0.
            data[41] = data[42] = 0;

            var ca0, ca1, ca2;
            var cb0, cb1, cb2;

            //var basis = c.basis;
            var n0 = data[12];
            var n1 = data[13];
            var n2 = data[14];

            var ra0 = data[6];
            var ra1 = data[7];
            var ra2 = data[8];

            var rb0 = data[9];
            var rb1 = data[10];
            var rb2 = data[11];

            //var jac = c.jac;
            var k0, k1, k2;

            // Compute effective mass and jacobian of penetration constraint.
            var kN = mass_sum;
            //crossA = VMath.v3Cross(c.relA, c.normal);
            ca0 = ((ra1 * n2) - (ra2 * n1));
            ca1 = ((ra2 * n0) - (ra0 * n2));
            ca2 = ((ra0 * n1) - (ra1 * n0));
            //c.nCrossA = VMath.m33Transform(objectA.inverseInertia, crossA);
            data[22] = k0 = ((A0 * ca0) + (A3 * ca1) + (A6 * ca2));
            data[23] = k1 = ((A1 * ca0) + (A4 * ca1) + (A7 * ca2));
            data[24] = k2 = ((A2 * ca0) + (A5 * ca1) + (A8 * ca2));
            kN += ((ca0 * k0) + (ca1 * k1) + (ca2 * k2));

            //crossB = VMbth.v3Cross(c.relB, c.normal);
            cb0 = ((rb1 * n2) - (rb2 * n1));
            cb1 = ((rb2 * n0) - (rb0 * n2));
            cb2 = ((rb0 * n1) - (rb1 * n0));
            //c.nCrossB = VMbth.m33Trbnsform(objectB.inverseInertib, crossB);
            data[25] = k0 = -((B0 * cb0) + (B3 * cb1) + (B6 * cb2));
            data[26] = k1 = -((B1 * cb0) + (B4 * cb1) + (B7 * cb2));
            data[27] = k2 = -((B2 * cb0) + (B5 * cb1) + (B8 * cb2));
            kN -= ((cb0 * k0) + (cb1 * k1) + (cb2 * k2));

            data[45] = 1 / kN;

            // Compute positional bias for baumgraute stabalisation#
            var baum = (objectA.collisionObject || objectB.collisionObject) ?
                          WebGLPhysicsConfig.CONTACT_STATIC_BAUMGRAUTE :
                          WebGLPhysicsConfig.CONTACT_BAUMGRAUTE;
            data[43] = baum * Math.min(0, data[21] + WebGLPhysicsConfig.CONTACT_SLOP) / timeStep;
            data[44] = 0;

            // Compute velocity at contact
            // var vel = VMath.v3Sub(velA, velB);
            var vel0 = (velA[0] - velB[0]);
            var vel1 = (velA[1] - velB[1]);
            var vel2 = (velA[2] - velB[2]);
            // vel += VMath.v3Cross(angA, c.relA);
            vel0 += ((velA[4] * ra2) - (velA[5] * ra1));
            vel1 += ((velA[5] * ra0) - (velA[3] * ra2));
            vel2 += ((velA[3] * ra1) - (velA[4] * ra0));
            // vel -= VMath.v3Cross(velB, c.relB);
            vel0 -= ((velB[4] * rb2) - (velB[5] * rb1));
            vel1 -= ((velB[5] * rb0) - (velB[3] * rb2));
            vel2 -= ((velB[3] * rb1) - (velB[4] * rb0));

            // Compute bounce bias.
            //c.bounce = VMath.v3Dot(vel, c.normal) * this.restitution;
            var bounce = ((vel0 * n0) + (vel1 * n1) + (vel2 * n2)) * this.restitution;
            // Epsilon based on experimental result
            if (bounce * bounce < 1e-2)
            {
                bounce = 0;
            }
            data[50] = bounce;

            // Compute effective mass and jacobian of friction constraint.
            var kU = mass_sum;
            n0 = data[15];
            n1 = data[16];
            n2 = data[17];

            //crossA = VMath.v3Cross(c.relA, c.tangent);
            ca0 = ((ra1 * n2) - (ra2 * n1));
            ca1 = ((ra2 * n0) - (ra0 * n2));
            ca2 = ((ra0 * n1) - (ra1 * n0));
            //c.uCrossA = VMath.m33Transform(objecnA.inverseInertia, crossA);
            data[28] = k0 = ((A0 * ca0) + (A3 * ca1) + (A6 * ca2));
            data[29] = k1 = ((A1 * ca0) + (A4 * ca1) + (A7 * ca2));
            data[30] = k2 = ((A2 * ca0) + (A5 * ca1) + (A8 * ca2));
            kU += ((ca0 * k0) + (ca1 * k1) + (ca2 * k2));

            //crossB = VMbth.v3Cross(c.relB, c.tangent);
            cb0 = ((rb1 * n2) - (rb2 * n1));
            cb1 = ((rb2 * n0) - (rb0 * n2));
            cb2 = ((rb0 * n1) - (rb1 * n0));
            //c.uCrossB = VMbth.m33Trbnsform(objecnB.inverseInertib, crossB);
            data[31]  = k0 = -((B0 * cb0) + (B3 * cb1) + (B6 * cb2));
            data[32] = k1 = -((B1 * cb0) + (B4 * cb1) + (B7 * cb2));
            data[33] = k2 = -((B2 * cb0) + (B5 * cb1) + (B8 * cb2));
            kU -= ((cb0 * k0) + (cb1 * k1) + (cb2 * k2));

            var kV = mass_sum;
            n0 = data[18];
            n1 = data[19];
            n2 = data[20];

            //crossA = VMath.v3Cross(c.relA, c.bitangent);
            ca0 = ((ra1 * n2) - (ra2 * n1));
            ca1 = ((ra2 * n0) - (ra0 * n2));
            ca2 = ((ra0 * n1) - (ra1 * n0));
            //c.vCrossA = VMath.m33Transform(objecnA.inverseInertia, crossA);
            data[34] = k0 = ((A0 * ca0) + (A3 * ca1) + (A6 * ca2));
            data[35] = k1 = ((A1 * ca0) + (A4 * ca1) + (A7 * ca2));
            data[36] = k2 = ((A2 * ca0) + (A5 * ca1) + (A8 * ca2));
            kV += ((ca0 * k0) + (ca1 * k1) + (ca2 * k2));

            //crossB = VMbth.v3Cross(c.relB, c.bitangent);
            cb0 = ((rb1 * n2) - (rb2 * n1));
            cb1 = ((rb2 * n0) - (rb0 * n2));
            cb2 = ((rb0 * n1) - (rb1 * n0));
            //c.vCrossB = VMbth.m33Trbnsform(objecnB.inverseInertib, crossB);
            data[37] = k0 = -((B0 * cb0) + (B3 * cb1) + (B6 * cb2));
            data[38] = k1 = -((B1 * cb0) + (B4 * cb1) + (B7 * cb2));
            data[39] = k2 = -((B2 * cb0) + (B5 * cb1) + (B8 * cb2));
            kV -= ((cb0 * k0) + (cb1 * k1) + (cb2 * k2));

            var kUV = 0.0;
            kUV += ((ca0 * data[28]) + (ca1 * data[29]) + (ca2 * data[30]));
            kUV -= ((cb0 * data[31]) + (cb1 * data[32]) + (cb2 * data[33]));

            var idet = 1 / (kU * kV - kUV * kUV);
            data[46] = kV * idet;
            data[47] = -kUV * idet;
            data[48] = kU * idet;

            // scale cached impulse for change in time step
            data[40] *= timeStepRatio;
        }
    },

    applyCachedImpulses : function arbiterApplyCachedImpulsesFn()
    {
        var objectA = this.objectA;
        var objectB = this.objectB;

        var velA = objectA.velocity;
        var velB = objectB.velocity;

        var imA = objectA.inverseMass;
        var imB = objectB.inverseMass;

        var contacts = this.activeContacts;
        var i = 0;
        for (i = 0; i < contacts.length; i += 1)
        {
            var data = contacts[i];

            var jn = data[40];
            var n0 = (data[12] * jn);
            var n1 = (data[13] * jn);
            var n2 = (data[14] * jn);

            velA[0] += (n0 * imA);
            velA[1] += (n1 * imA);
            velA[2] += (n2 * imA);

            velB[0] -= (n0 * imB);
            velB[1] -= (n1 * imB);
            velB[2] -= (n2 * imB);

            velA[3] += (data[22] * jn);
            velA[4] += (data[23] * jn);
            velA[5] += (data[24] * jn);

            velB[3] += (data[25] * jn);
            velB[4] += (data[26] * jn);
            velB[5] += (data[27] * jn);
        }
    },

    computeAndApplyBiasImpulses : function arbiterBiasImpulsesFn()
    {
        var objectA = this.objectA;
        var objectB = this.objectB;

        // Set velocities to local vars.
        var vec = objectA.velocity;
        var va0 = vec[6];
        var va1 = vec[7];
        var va2 = vec[8];
        var wa0 = vec[9];
        var wa1 = vec[10];
        var wa2 = vec[11];

        vec = objectB.velocity;
        var vb0 = vec[6];
        var vb1 = vec[7];
        var vb2 = vec[8];
        var wb0 = vec[9];
        var wb1 = vec[10];
        var wb2 = vec[11];

        var imA = objectA.inverseMass;
        var imB = objectB.inverseMass;

        var contacts = this.activeContacts;
        var limit = contacts.length;
        var data;
        var i = 0;
        for (; i < limit; i += 1)
        {
            data = contacts[i];

            var n0 = data[12];
            var n1 = data[13];
            var n2 = data[14];

            var ra0 = data[6];
            var ra1 = data[7];
            var ra2 = data[8];

            var rb0 = data[9];
            var rb1 = data[10];
            var rb2 = data[11];

            // Velocity normal impulse.
            var j1 = data[45] * (
                  n0 * ((vb0 + ((wb1 * rb2) - (wb2 * rb1))) - (va0 + ((wa1 * ra2) - (wa2 * ra1)))) +
                  n1 * ((vb1 + ((wb2 * rb0) - (wb0 * rb2))) - (va1 + ((wa2 * ra0) - (wa0 * ra2)))) +
                  n2 * ((vb2 + ((wb0 * rb1) - (wb1 * rb0))) - (va2 + ((wa0 * ra1) - (wa1 * ra0)))) -
                  data[43]);

            // Accumulate and clamp.
            var jOld1 = data[44];
            var cjAcc1 = jOld1 + j1;
            if (cjAcc1 < 0)
            {
                cjAcc1 = 0.0;
            }
            j1 = cjAcc1 - jOld1;
            data[44] = cjAcc1;

            // Apply normal impulse.
            n0 *= j1;
            n1 *= j1;
            n2 *= j1;

            va0 += (n0 * imA);
            va1 += (n1 * imA);
            va2 += (n2 * imA);

            vb0 -= (n0 * imB);
            vb1 -= (n1 * imB);
            vb2 -= (n2 * imB);

            wa0 += (data[22] * j1);
            wa1 += (data[23] * j1);
            wa2 += (data[24] * j1);

            wb0 += (data[25] * j1);
            wb1 += (data[26] * j1);
            wb2 += (data[27] * j1);
        }

        // Set local vars to velocities.
        vec = objectA.velocity;
        vec[6] = va0;
        vec[7] = va1;
        vec[8] = va2;
        vec[9] = wa0;
        vec[10] = wa1;
        vec[11] = wa2;

        vec = objectB.velocity;
        vec[6] = vb0;
        vec[7] = vb1;
        vec[8] = vb2;
        vec[9] = wb0;
        vec[10] = wb1;
        vec[11] = wb2;
    },

    computeAndApplyImpulses : function arbiterImpulsesFn()
    {
        var objectA = this.objectA;
        var objectB = this.objectB;

        // Set velocities to local vars.
        var vec = objectA.velocity;
        var va0 = vec[0];
        var va1 = vec[1];
        var va2 = vec[2];
        var wa0 = vec[3];
        var wa1 = vec[4];
        var wa2 = vec[5];

        vec = objectB.velocity;
        var vb0 = vec[0];
        var vb1 = vec[1];
        var vb2 = vec[2];
        var wb0 = vec[3];
        var wb1 = vec[4];
        var wb2 = vec[5];

        var imA = objectA.inverseMass;
        var imB = objectB.inverseMass;

        var contacts = this.activeContacts;
        var limit = contacts.length;
        var data;
        var i = 0;
        for (; i < limit; i += 1)
        {
            data = contacts[i];

            var n0 = data[12];
            var n1 = data[13];
            var n2 = data[14];
            var u0 = data[15];
            var u1 = data[16];
            var u2 = data[17];
            var v0 = data[18];
            var v1 = data[19];
            var v2 = data[20];

            var ra0 = data[6];
            var ra1 = data[7];
            var ra2 = data[8];

            var rb0 = data[9];
            var rb1 = data[10];
            var rb2 = data[11];

            // Velocity normal impulse.
            var j1 = data[45] * (
                  n0 * ((vb0 + ((wb1 * rb2) - (wb2 * rb1))) - (va0 + ((wa1 * ra2) - (wa2 * ra1)))) +
                  n1 * ((vb1 + ((wb2 * rb0) - (wb0 * rb2))) - (va1 + ((wa2 * ra0) - (wa0 * ra2)))) +
                  n2 * ((vb2 + ((wb0 * rb1) - (wb1 * rb0))) - (va2 + ((wa0 * ra1) - (wa1 * ra0)))) -
                  data[50]);

            // Accumulate and clamp.
            var jOld1 = data[40];
            var cjAcc1 = jOld1 + j1;
            if (cjAcc1 < 0)
            {
                cjAcc1 = 0.0;
            }
            j1 = cjAcc1 - jOld1;
            data[40] = cjAcc1;

            // Apply normal impulse.
            n0 *= j1;
            n1 *= j1;
            n2 *= j1;

            va0 += (n0 * imA);
            va1 += (n1 * imA);
            va2 += (n2 * imA);

            vb0 -= (n0 * imB);
            vb1 -= (n1 * imB);
            vb2 -= (n2 * imB);

            wa0 += (data[22] * j1);
            wa1 += (data[23] * j1);
            wa2 += (data[24] * j1);

            wb0 += (data[25] * j1);
            wb1 += (data[26] * j1);
            wb2 += (data[27] * j1);

            // Relative velocity at contact point.
            n0 = (vb0 - va0) + ((wb1 * rb2) - (wb2 * rb1)) - ((wa1 * ra2) - (wa2 * ra1));
            n1 = (vb1 - va1) + ((wb2 * rb0) - (wb0 * rb2)) - ((wa2 * ra0) - (wa0 * ra2));
            n2 = (vb2 - va2) + ((wb0 * rb1) - (wb1 * rb0)) - ((wa0 * ra1) - (wa1 * ra0));

            // Friction tangent and bitangent constraint space impulses.
            var lambdau = ((u0 * n0) + (u1 * n1) + (u2 * n2));
            var lambdav = ((v0 * n0) + (v1 * n1) + (v2 * n2));

            // Transform by inverse mass matrix.
            j1 = lambdau * data[46] + lambdav * data[47];
            var j2 = lambdau * data[47] + lambdav * data[48];

            // Accumulate and clamp.
            jOld1 = data[41];
            var jOld2 = data[42];
            cjAcc1 = jOld1 + j1;
            var cjAcc2 = jOld2 + j2;

            var jMax = this.friction * data[40];
            var fsq = (cjAcc1 * cjAcc1) + (cjAcc2 * cjAcc2);
            if (fsq > (jMax * jMax))
            {
                fsq = jMax / Math.sqrt(fsq);
                cjAcc1 *= fsq;
                cjAcc2 *= fsq;
            }
            j1 = cjAcc1 - jOld1;
            j2 = cjAcc2 - jOld2;
            data[41] = cjAcc1;
            data[42] = cjAcc2;

            // Apply friction impulse.
            n0 = (u0 * j1) + (v0 * j2);
            n1 = (u1 * j1) + (v1 * j2);
            n2 = (u2 * j1) + (v2 * j2);

            va0 += (n0 * imA);
            va1 += (n1 * imA);
            va2 += (n2 * imA);

            vb0 -= (n0 * imB);
            vb1 -= (n1 * imB);
            vb2 -= (n2 * imB);

            wa0 += (data[28] * j1) + (data[34] * j2);
            wa1 += (data[29] * j1) + (data[35] * j2);
            wa2 += (data[30] * j1) + (data[36] * j2);

            wb0 += (data[31] * j1) + (data[37] * j2);
            wb1 += (data[32] * j1) + (data[38] * j2);
            wb2 += (data[33] * j1) + (data[39] * j2);
        }

        // Set local vars to velocities.
        vec = objectA.velocity;
        vec[0] = va0;
        vec[1] = va1;
        vec[2] = va2;
        vec[3] = wa0;
        vec[4] = wa1;
        vec[5] = wa2;

        vec = objectB.velocity;
        vec[0] = vb0;
        vec[1] = vb1;
        vec[2] = vb2;
        vec[3] = wb0;
        vec[4] = wb1;
        vec[5] = wb2;
    },

    invalidateParameters : function invalidateParametersFn()
    {
        this.restitution = (this.objectA.restitution * this.objectB.restitution);
        this.friction = (this.objectA.friction * this.objectB.friction);
    }
};

//
// Arbiter objects are object pooled due to being frequently
// created and destroyed.
//
// Arbiters are thus instead allocated an deallocated with no
// create method.
//
// Object pool for arbiters
WebGLPhysicsArbiter.arbiterPool = [];
WebGLPhysicsArbiter.arbiterPoolSize = 0;

WebGLPhysicsArbiter.allocate = function allocateFn(shapeA, shapeB, objectA, objectB)
{
    var arbiter;
    if (this.arbiterPoolSize === 0)
    {
        arbiter = new WebGLPhysicsArbiter();
    }
    else
    {
        arbiter = this.arbiterPool[this.arbiterPoolSize - 1];
        this.arbiterPoolSize -= 1;
    }

    arbiter.active = true;

    arbiter.shapeA = shapeA;
    arbiter.shapeB = shapeB;
    arbiter.objectA = objectA;
    arbiter.objectB = objectB;
    arbiter.invalidateParameters();

    return arbiter;
};

WebGLPhysicsArbiter.deallocate = function deallocateFn(arbiter)
{
    // Prevent object pooled arbiter from keeping shapes/objects
    // from potential GC.
    arbiter.shapeA = null;
    arbiter.shapeB = null;
    arbiter.objectA = null;
    arbiter.objectB = null;

    // Ensure flag is reset.
    arbiter.skipDiscreteCollisions = false;

    this.arbiterPool[this.arbiterPoolSize] = arbiter;
    this.arbiterPoolSize += 1;
};


//
// WebGLPhysicsIsland
//
function WebGLPhysicsIsland()
{
    // Initialise all properties of islands
    // which will ever be used.

    // Set of rigid bodies in island
    this.bodies = [];

    // Set of constraints in island
    this.constraints = [];

    // Local max wakeTimeStamp for island
    this.wakeTimeStamp = 0;

    // Active state of island (compared to sleeping)
    this.active = false;
}

WebGLPhysicsIsland.prototype = {

    version : 1

};
//
// Island objects are object pooled due to being frequently
// created and destroyed.
//
// Island are thus instead allocated an deallocated with no
// create method.
//
// Object pool for islands
WebGLPhysicsIsland.islandPool = [];
WebGLPhysicsIsland.islandPoolSize = 0;

WebGLPhysicsIsland.allocate = function allocateFn()
{
    var island;
    if (this.islandPoolSize === 0)
    {
        island = new WebGLPhysicsIsland();
    }
    else
    {
        island = this.islandPool[this.islandPoolSize - 1];
        this.islandPoolSize -= 1;
    }

    return island;
};

WebGLPhysicsIsland.deallocate = function deallocateFn(island)
{
    this.islandPool[this.islandPoolSize] = island;
    this.islandPoolSize += 1;

    // Make sure to reset local max wakeTimeStamp back to 0.
    island.wakeTimeStamp = 0;
};

//
// WebGLPhysicsTriangleShape
//
function WebGLPhysicsTriangleShape()
{
    // Initialise all properties of Triangle shape
    // which will ever be used.

    // Index into parent WebGLTriangleArray::triangles list.
    this.index = 0;

    // Collision radius in collision algorithms, this is taken from parent mesh shape.
    this.collisionRadius = 0;

    // The parent TriangleArray.
    this.triangleArray = null;
}

WebGLPhysicsTriangleShape.prototype = {

    type : "TRIANGLE_MESH_TRIANGLE",

    version : 1,

    localSupportWithoutMargin : function triangleShapeLocalSupportFn(vec, dst)
    {
        var vec0 = vec[0];
        var vec1 = vec[1];
        var vec2 = vec[2];

        var triangles = this.triangleArray.triangles;
        var triangle = this.index;

        var v00 = triangles[triangle + 3];
        var v01 = triangles[triangle + 4];
        var v02 = triangles[triangle + 5];
        var u0 = triangles[triangle + 6];
        var u1 = triangles[triangle + 7];
        var u2 = triangles[triangle + 8];
        var v0 = triangles[triangle + 9];
        var v1 = triangles[triangle + 10];
        var v2 = triangles[triangle + 11];

        var dotu = ((vec0 * u0) + (vec1 * u1) + (vec2 * u2));
        var dotv = ((vec0 * v0) + (vec1 * v1) + (vec2 * v2));

        if (dotu <= 0 && dotv <= 0)
        {
            dst[0] = v00;
            dst[1] = v01;
            dst[2] = v02;
        }
        else if (dotu >= dotv)
        {
            dst[0] = (v00 + u0);
            dst[1] = (v01 + u1);
            dst[2] = (v02 + u2);
        }
        else
        {
            dst[0] = (v00 + v0);
            dst[1] = (v01 + v1);
            dst[2] = (v02 + v2);
        }
    }

};
//
// Triangle shapes are used for collision detection with triangles of a triangle mesh.
// In most cases there is one persistant object used. In the case of continuous collisions
// we need to reuse many of these objects, so an object pool is used with allocate and
// deallocate methods instead of a create method.
//
// Object pool for Triangles
WebGLPhysicsTriangleShape.trianglePool = [];
WebGLPhysicsTriangleShape.trianglePoolSize = 0;

WebGLPhysicsTriangleShape.allocate = function allocateFn()
{
    var triangle;
    if (this.trianglePoolSize === 0)
    {
        triangle = new WebGLPhysicsTriangleShape();
    }
    else
    {
        triangle = this.trianglePool[this.trianglePoolSize - 1];
        this.trianglePoolSize -= 1;
    }

    return triangle;
};

WebGLPhysicsTriangleShape.deallocate = function deallocateFn(triangle)
{
    this.trianglePool[this.trianglePoolSize] = triangle;
    this.trianglePoolSize += 1;

    // Ensure reference is null'ed so that an object pooled Triangle Shape
    // cannot prevent the TriangleArray from being GC'ed.
    this.triangleArray = null;
};

//
// WebGLPhysicsTOIEvent
//
function WebGLPhysicsTOIEvent()
{
    // Initialise all properties of TOI Event
    // which will ever be used.
    //
    // This object is made to dual as a cache in contactPairTest.

    // Objects TOI Event relates to.
    this.objectA = null;
    this.objectB = null;

    // Shapes TOI Event relates to.
    // Precondition: object#.shape = shape#
    this.shapeA = null;
    this.shapeB = null;

    // Closest points on shapes forming the contact point.
    this.closestA = VMath.v3BuildZero();
    this.closestB = VMath.v3BuildZero();

    // Seperating axis / MTV axis forming contact normal.
    this.axis = VMath.v3BuildZero();

    // Penetration distance for contact of TOI event.
    this.distance = 0.0;

    // Time of impact for this event.
    this.toi = 0.0;

    // Cache defining the frozen state of objects during continuous collision detection.
    // Used to invalidate TOI Event when an object's sweepFrozen differs.
    this.frozenA = false;
    this.frozenB = false;

    // Marks this event as corresponding to a concave triangle mesh.
    // This value is passed to insertContact to prevent culling contacts
    // based on normals.
    this.concave = false;
}

WebGLPhysicsTOIEvent.prototype = {

    version : 1

};
//
// TOI Events are object pooled due to being frequently created and destroyed
//
// TOI Events are thus instead allocated and deallocated with no create method.
//
// Object pool for TOI Events
WebGLPhysicsTOIEvent.eventPool = [];
WebGLPhysicsTOIEvent.eventPoolSize = 0;

WebGLPhysicsTOIEvent.allocate = function allocateFn()
{
    var toi;
    if (this.eventPoolSize === 0)
    {
        toi = new WebGLPhysicsTOIEvent();
    }
    else
    {
        toi = this.eventPool[this.eventPoolSize - 1];
        this.eventPoolSize -= 1;
    }

    return toi;
};

WebGLPhysicsTOIEvent.deallocate = function deallocateFn(toi)
{
    this.eventPool[this.eventPoolSize] = toi;
    this.eventPoolSize += 1;

    // Ensure that if this is a concave TOI Event, that we also
    // deallocate the related TriangleShape that is generated.
    if (toi.concave)
    {
        WebGLPhysicsTriangleShape.deallocate(toi.shapeB);
        toi.concave = false;
    }

    // Ensure that object references are set to null to permit GC
    // even if this is in the object pool.
    toi.objectA = null;
    toi.objectB = null;
    toi.shapeA = null;
    toi.shapeB = null;
};


//
// WebGLPhysicsWorld
//
function WebGLPhysicsWorld() {}
WebGLPhysicsWorld.prototype = {

    version : 1,

    update : function physicsWorldUpdateFn()
    {
        this._private.update();
    },

    rayTest : function physicWorldRayTestFn(ray)
    {
        return this._private.rayTest(ray);
    },

    convexSweepTest : function physicsWorldConvexSweepTestFn(params)
    {
        return this._private.convexSweepTest(params);
    },

    addCollisionObject : function physicsWorldAddCollisionObjectFn(collisionObject)
    {
        return this._private.addBody(collisionObject._private);
    },

    removeCollisionObject : function physicsWorldRemoveCollisionObjectFn(collisionObject)
    {
        return this._private.removeBody(collisionObject._private);
    },

    addRigidBody : function physicsWorldAddRigidBodyFn(rigidBody)
    {
        return this._private.addBody(rigidBody._private);
    },

    removeRigidBody : function physicsWorldRemoveRigidBodyFn(rigidBody)
    {
        return this._private.removeBody(rigidBody._private);
    },

    addConstraint : function physicsWorldAddConstraintFn(constraint)
    {
        return this._private.addConstraint(constraint._private);
    },

    removeConstraint : function physicsWorldRemoveConstraintFn(constraint)
    {
        return this._private.removeConstraint(constraint._private);
    },

    addCharacter : function physicsWorldAddCharacterFn(character)
    {
        return this._private.addBody(character._private.rigidBody._private);
    },

    removeCharacter : function physicsWorldRemoveCharacterFn(character)
    {
        return this._private.removeBody(character._private.rigidBody._private);
    },

    flush : function physicsWorldFlushFn()
    {
        this._private.flush();
    }
};

function WebGLPrivatePhysicsWorld() {}
WebGLPrivatePhysicsWorld.prototype = {

    version : 1,

    m43InverseOrthonormalTransformVector : function m43InverseOrthonormalTransformVectorFn(m, v, dst)
    {
        if (dst === undefined)
        {
            dst = new Float32Array(3);
        }
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = (m[0] * v0 + m[1] * v1 + m[2] * v2);
        dst[1] = (m[3] * v0 + m[4] * v1 + m[5] * v2);
        dst[2] = (m[6] * v0 + m[7] * v1 + m[8] * v2);
        return dst;
    },

    m43InverseOrthonormalTransformPoint : function m43InverseOrthonormalTransformPointFn(m, v, dst)
    {
        if (dst === undefined)
        {
            dst = new Float32Array(3);
        }
        var v0 = v[0] - m[9];
        var v1 = v[1] - m[10];
        var v2 = v[2] - m[11];
        dst[0] = (m[0] * v0 + m[1] * v1 + m[2] * v2);
        dst[1] = (m[3] * v0 + m[4] * v1 + m[5] * v2);
        dst[2] = (m[6] * v0 + m[7] * v1 + m[8] * v2);
        return dst;
    },

    // Determine if shape intersects the plane containing triangle number 'index' in triangle array
    // With given shape and triangle transforms.
    trianglePlaneDiscard : function trianglePlaneDiscardFn(shape, xform, triangleArray, index, txform)
    {
        if (this.planeAxis === undefined)
        {
            this.planeAxis = VMath.v3BuildZero();
            this.planeSA = VMath.v3BuildZero();
            this.planeSB = VMath.v3BuildZero();
        }
        var axis = this.planeAxis;
        var supportA = this.planeSA;
        var supportB = this.planeSB;

        var triangles = triangleArray.triangles;
        // local plane normal and distance.
        var n0 = triangles[index];
        var n1 = triangles[index + 1];
        var n2 = triangles[index + 2];
        var nd = triangles[index + 16];

        var A0 = txform[0];
        var A1 = txform[1];
        var A2 = txform[2];
        var A3 = txform[3];
        var A4 = txform[4];
        var A5 = txform[5];
        var A6 = txform[6];
        var A7 = txform[7];
        var A8 = txform[8];
        var A9 = txform[9];
        var A10 = txform[10];
        var A11 = txform[11];

        // transform plane normal into world space.
        var w0 = (n0 * A0) + (n1 * A3) + (n2 * A6);
        var w1 = (n0 * A1) + (n1 * A4) + (n2 * A7);
        var w2 = (n0 * A2) + (n1 * A5) + (n2 * A8);

        A0 = xform[0];
        A1 = xform[1];
        A2 = xform[2];
        A3 = xform[3];
        A4 = xform[4];
        A5 = xform[5];
        A6 = xform[6];
        A7 = xform[7];
        A8 = xform[8];
        A9 -= xform[9];
        A10 -= xform[10];
        A11 -= xform[11];

        // transform plane into shape local space.
        n0 = (A0 * w0) + (A1 * w1) + (A2 * w2);
        n1 = (A3 * w0) + (A4 * w1) + (A5 * w2);
        n2 = (A6 * w0) + (A7 * w1) + (A8 * w2);
        nd += (w0 * A9) + (w1 * A10) + (w2 * A11);

        // find maximum and minimal support points on shape.
        axis[0] = n0;
        axis[1] = n1;
        axis[2] = n2;
        shape.localSupportWithoutMargin(axis, supportA);

        axis[0] = -n0;
        axis[1] = -n1;
        axis[2] = -n2;
        shape.localSupportWithoutMargin(axis, supportB);

        // Find distance from plane for each support.
        var dot1 = (supportA[0] * n0) + (supportA[1] * n1) + (supportA[2] * n2) - nd;
        var dot2 = (supportB[0] * n0) + (supportB[1] * n1) + (supportB[2] * n2) - nd;

        // If supports are on opposite side of plane, primitive definately
        // intersects plane
        if ((dot1 * dot2) <= 0)
        {
            return false;
        }

        // Choose closest support to plane for distance computation
        // with margins.
        var seperation;
        if ((dot1 * dot1) < (dot2 * dot2))
        {
            seperation = dot1;
        }
        else
        {
            seperation = dot2;
        }

        if ((seperation < 0) !== ((dot1 * dot2) < 0))
        {
            seperation = -seperation;
        }

        return (seperation - shape.collisionRadius) > 0;
    },

    // Determine if pair of objects is permitted to collide.
    filtered : function filteredFn(objectA, objectB)
    {
        if (objectA === objectB)
        {
            return true;
        }

        if ((objectA.collisionObject || objectA.kinematic) && (objectB.collisionObject || objectB.kinematic))
        {
            return true;
        }

        if ((objectA.mask & objectB.group) === 0 ||
            (objectB.mask & objectA.group) === 0)
        {
            return true;
        }

        return false;
    },

    // perform narrow phase collision detection between shapes A and B
    // owned by respective objects objectA, objectB (objectA.shape === shapeA etc)
    narrowPhase : function narrowPhaseFn(shapeA, shapeB, objectA, objectB)
    {
        // Objects reused in all narrowPhase calls.
        if (this.narrowTriangle === undefined)
        {
            // Fake triangle shape for TRIANGLE_MESH collisions.
            this.narrowTriangle = WebGLPhysicsTriangleShape.allocate();

            // contactPairTest cache object.
            this.narrowCache = {
                axis : VMath.v3Build(1, 0, 0),
                shapeA : null,
                shapeB : null,
                closestA : VMath.v3BuildZero(),
                closestB : VMath.v3BuildZero()
            };

            // contactPairTest cache object used in TRIANGLE_MESH
            // as shapeA/shapeB are not the same as above.
            this.narrowCache2 = {
                axis : this.narrowCache.axis, //reference!
                shapeA : null,
                shapeB : null,
                closestA : this.narrowCache.closestA, //reference!
                closestB : this.narrowCache.closestB //reference!
            };

            // Fake body used for TRIANGLE_MESH to compute local extents of
            // A shape in triangle mesh local-coordinates.
            this.narrowFakeBody = {
                transform : VMath.m43BuildIdentity(),
                shape : null
            };

            this.narrowTransform = VMath.m43BuildIdentity();
            this.narrowExtents = new Float32Array(6);
        }

        // Find existing arbiter for shape pair.
        // Iterating the smaller list of either object.
        var arb = null;
        var arbitersA = objectA.arbiters;
        var arbitersB = objectB.arbiters;
        var arbiters = (arbitersA.length <= arbitersB.length) ? arbitersA : arbitersB;

        var i = 0;
        var numArbiters = arbiters.length;
        for (i = 0; i < numArbiters; i += 1)
        {
            var carb = arbiters[i];
            if (carb.shapeA === shapeA && carb.shapeB === shapeB &&
                carb.objectA === objectA && carb.objectB === objectB)
            {
                arb = carb;
                break;
            }
        }

        if (arb !== null && arb.skipDiscreteCollisions)
        {
            arb.skipDiscreteCollisions = false;
            return;
        }

        // If arbiter does not already exist, create a new one.
        var fresh = (arb === null);
        if (fresh)
        {
            arb = WebGLPhysicsArbiter.allocate(shapeA, shapeB, objectA, objectB);
        }

        var cache = this.narrowCache;
        cache.shapeA = shapeA;
        cache.shapeB = shapeB;

        // 'warm-start' contact solver with a guess direction of MTV
        if (arb.contacts.length !== 0)
        {
            //var basis = arb.contacts[0].basis;
            var data = arb.contacts[0];
            // VMath.v3Copy(c.normal, cache.axis);
            cache.axis[0] = data[12];
            cache.axis[1] = data[13];
            cache.axis[2] = data[14];
        }

        var contact;
        var collided = false;

        //
        // Special case for triangle meshes.
        //
        if (shapeA.type === "TRIANGLE_MESH" || shapeB.type === "TRIANGLE_MESH")
        {
            var meshShape, otherShape;
            var meshXForm, otherXForm;
            var triangle = this.narrowTriangle;
            var cache2 = this.narrowCache2;

            if (shapeA.type === "TRIANGLE_MESH")
            {
                meshShape = shapeA;
                meshXForm = objectA.transform;
                otherShape = shapeB;
                otherXForm = objectB.transform;
                cache2.shapeA = triangle;
                cache2.shapeB = cache.shapeB;
            }
            else
            {
                meshShape = shapeB;
                meshXForm = objectB.transform;
                otherShape = shapeA;
                otherXForm = objectA.transform;
                cache2.shapeA = cache.shapeA;
                cache2.shapeB = triangle;
            }

            var triangleArray = meshShape.triangleArray;
            triangle.triangleArray = triangleArray;
            triangle.collisionRadius = meshShape.collisionRadius;

            var numTriangles;

            if (triangleArray.spatialMap)
            {
                // determine AABB of non-triangle mesh object in local coordinates
                // of triangle mesh.
                var transform = this.narrowTransform;
                var fakeBody = this.narrowFakeBody;
                var extents = this.narrowExtents;

                //var itransform = VMath.m43InverseOrthonormal(meshXForm);
                VMath.m43InverseOrthonormal(meshXForm, transform);
                VMath.m43Mul(otherXForm, transform, fakeBody.transform);
                fakeBody.shape = otherShape;
                WebGLPhysicsPrivateBody.prototype.calculateExtents.call(fakeBody, extents);

                // Find all triangles to test against.
                var triangles = this.persistantTrianglesList;
                numTriangles = triangleArray.spatialMap.getOverlappingNodes(extents, triangles, 0);
                for (i = 0; i < numTriangles; i += 1)
                {
                    var index = triangles[i].index;
                    triangle.index = index;
                    // Prevent GC issues from object being kept in persistent array
                    triangles[i] = undefined;

                    // Shortcut! Check that shape intersects plane of triangle
                    if (!this.trianglePlaneDiscard(otherShape, otherXForm, triangleArray, index, meshXForm))
                    {
                        contact = this.contactPairTest(cache2, objectA.transform, objectB.transform);
                        if (contact < 0)
                        {
                            arb.insertContact(cache2.closestA, cache2.closestB, cache2.axis, contact, true);
                            collided = true;
                        }
                    }
                }
            }
            else
            {
                // If triangle mesh is small, no AABBTree exists
                // And we check all triangles brute-force.
                numTriangles = triangleArray.numTriangles;
                for (i = 0; i < numTriangles; i += 1)
                {
                    triangle.index = (i * WebGLPhysicsPrivateTriangleArray.prototype.TRIANGLE_SIZE);
                    if (!this.trianglePlaneDiscard(otherShape, otherXForm, triangleArray, triangle.index, meshXForm))
                    {
                        contact = this.contactPairTest(cache2, objectA.transform, objectB.transform);
                        if (contact < 0)
                        {
                            arb.insertContact(cache2.closestA, cache2.closestB, cache2.axis, contact, true);
                            collided = true;
                        }
                    }
                }
            }
        }
        //
        // Default case, both objects are convex.
        //
        else {
            contact = this.contactPairTest(cache, objectA.transform, objectB.transform);
            if (contact < 0)
            {
                arb.insertContact(cache.closestA, cache.closestB, cache.axis, contact);
                collided = true;
            }
        }

        if (collided)
        {
            // New arbiter, add to object lists.
            if (fresh)
            {
                this.activeArbiters.push(arb);
                arb.active = true;
                objectA.arbiters.push(arb);
                objectB.arbiters.push(arb);
            }

            // Wake objects if sleeping, they've just collided!
            if (objectA.permitSleep && !objectA.active)
            {
                this.wakeBody(objectA);
            }
            if (objectB.permitSleep && !objectB.active)
            {
                this.wakeBody(objectB);
            }

            // If arbiter was sleeping, then waking it
            if (!arb.active)
            {
                arb.active = true;
                this.activeArbiters.push(arb);
            }
        }
        else if (fresh)
        {
            // New arbiter, but no collision means we should
            // immediately deallocate for re-use.
            WebGLPhysicsArbiter.deallocate(arb);
        }
    },

    // Compute islands of interaction rigid bodies and constraints
    // And put to sleep those islands that are to be considered
    // stationary.
    computeSleeping : function computeSleepingFn(timeStep)
    {
        // Implementation of union-find algorithm with union by rank
        // and path compression.
        function _unify(x, y)
        {
            var xr = _find(x);
            var yr = _find(y);
            if (xr !== yr)
            {
                if (xr.islandRank < yr.islandRank)
                {
                    xr.islandRoot = yr;
                }
                else if (xr.islandRank > yr.islandRank)
                {
                    yr.islandRoot = xr;
                }
                else
                {
                    yr.islandRoot = xr;
                    xr.islandRank += 1;
                }
            }
        }

        function _find(x)
        {
            if (x === x.islandRoot)
            {
                return x;
            }

            var root = x;
            var stack = null;
            var next;
            while (root !== root.islandRoot)
            {
                next = root.islandRoot;
                root.islandRoot = stack;
                stack = root;
                root = next;
            }

            while (stack !== null)
            {
                next = stack.islandRoot;
                stack.islandRoot = root;
                stack = next;
            }
            return root;
        }

        var objectA, objectB;

        // Build disjoint set forest
        // based on active arbiters and constraints.
        var arbiters = this.activeArbiters;
        var bodies = this.activeBodies;
        var constraints = this.activeConstraints;

        var n;
        var maxN = arbiters.length;
        for (n = 0; n < maxN; n += 1)
        {
            var arb = arbiters[n];
            objectA = arb.objectA;
            objectB = arb.objectB;
            if (objectA.permitSleep && objectB.permitSleep)
            {
                _unify(objectA, objectB);
            }
        }

        maxN = constraints.length;
        var con;
        for (n = 0; n < maxN; n += 1)
        {
            con = constraints[n];
            objectA = con.bodyA;
            objectB = con.bodyB;
            if (objectA && objectA.permitSleep)
            {
                _unify(objectA, con);
            }
            if (objectB && objectB.permitSleep)
            {
                _unify(objectB, con);
            }
        }

        // Build islands
        var islands = [];
        var island, body, root;
        while (bodies.length > 0)
        {
            body = bodies.pop();
            root = _find(body);
            island = root.island;
            if (!island)
            {
                island = root.island = WebGLPhysicsIsland.allocate();
                islands.push(island);
                island.active = false;
            }

            body.island = island;
            island.bodies.push(body);
            island.active = island.active || body.isActive(timeStep);
            if (body.wakeTimeStamp > island.wakeTimeStamp)
            {
                island.wakeTimeStamp = body.wakeTimeStamp;
            }
        }

        while (constraints.length > 0)
        {
            con = constraints.pop();
            root = _find(con);
            island = root.island;
            if (!island)
            {
                island = root.island = WebGLPhysicsIsland.allocate();
                islands.push(island);
                island.active = true;
            }

            con.island = island;
            island.constraints.push(con);
            if (con.wakeTimeStamp > island.wakeTimeStamp)
            {
                island.wakeTimeStamp = con.wakeTimeStamp;
            }
        }

        // Build new active bodies, destroying islands
        // Keep sleeping islands implicitly through references in sleeping bodies.
        while (islands.length > 0)
        {
            island = islands.pop();
            if (island.active)
            {
                while (island.bodies.length > 0)
                {
                    body = island.bodies.pop();
                    body.wakeTimeStamp = island.wakeTimeStamp;
                    bodies.push(body);

                    // reset for next iteration of computeSleeping
                    body.islandRoot = body;
                    body.islandRank = 0;
                    body.island = null;
                }

                while (island.constraints.length > 0)
                {
                    con = island.constraints.pop();
                    con.wakeTimeStamp = island.wakeTimeStamp;
                    constraints.push(con);

                    // reset for next iteration of computeSleeping
                    con.islandRoot = con;
                    con.islandRank = 0;
                    con.island = null;
                }

                WebGLPhysicsIsland.deallocate(island);
            }
            else
            {
                maxN = island.bodies.length;
                for (n = 0; n < maxN; n += 1)
                {
                    body = island.bodies[n];
                    body.velocity[0] = body.velocity[1] = body.velocity[2] = 0;
                    body.velocity[3] = body.velocity[4] = body.velocity[5] = 0;
                    body.active = false;
                    this.syncBody(body);

                    // reset for next iteration of computeSleeping
                    body.islandRoot = body;
                    body.islandRank = 0;
                }

                maxN = island.constraints.length;
                for (n = 0; n < maxN; n += 1)
                {
                    con = island.constraints[n];
                    con.active = false;

                    // reset for next iteration of computeSleeping
                    con.islandRoot = con;
                    con.islandRank = 0;
                }
            }
        }
    },

    // Wake up a sleeping island.
    wakeIsland : function wakeIslandFn(island)
    {
        while (island.bodies.length > 0)
        {
            var body = island.bodies.pop();
            body.wakeTimeStamp = this.timeStamp + (this.midStep ? 0 : 1);
            this.activeBodies.push(body);

            var n;
            var arbiters = body.arbiters;
            var maxN = arbiters.length;
            for (n = 0; n < maxN; n += 1)
            {
                var arb = arbiters[n];
                if (!arb.active)
                {
                    arb.active = true;
                    this.activeArbiters.push(arb);
                }
            }

            body.active = true;
            body.island = null;
            this.syncBody(body);
        }

        while (island.constraints.length > 0)
        {
            var constraint = island.constraints.pop();
            constraint.wakeTimeStamp = this.timeStamp + (this.midStep ? 0 : 1);
            this.activeConstraints.push(constraint);

            constraint.active = true;
            constraint.island = null;
        }

        WebGLPhysicsIsland.deallocate(island);
    },

    wakeRelated : function wakeRelatedFn(body)
    {
        // Wake any related constraints
        var constraints = body.constraints;
        var n;
        var maxN = constraints.length;
        for (n = 0; n < maxN; n += 1)
        {
            this.wakeConstraint(constraints[n]);
        }

        // Wake any touching bodies
        var arbiters = body.arbiters;
        maxN = arbiters.length;
        for (n = 0; n < maxN; n += 1)
        {
            var arb = arbiters[n];
            if (!arb.active)
            {
                arb.active = true;
                this.activeArbiters.push(arb);
            }

            if (arb.objectA.permitSleep && !arb.objectA.active)
            {
                this.wakeBody(arb.objectA);
            }
            if (arb.objectB.permitSleep && !arb.objectB.active)
            {
                this.wakeBody(arb.objectB);
            }
        }
    },

    // Wake up a rigid body.
    wakeBody : function wakeBodyFn(body)
    {
        if (body.collisionObject && !body.kinematic)
        {
            this.wakeRelated(body);
            this.syncBody(body);
        }
        else if (body.kinematic)
        {
            body.delaySleep = true;
            if (!body.active)
            {
                body.active = true;
                this.activeKinematics.push(body);

                this.wakeRelated(body);
                this.syncBody(body);
            }
        }
        else
        {
            body.wakeTimeStamp = this.timeStamp + (this.midStep ? 0 : 1);
            if (!body.active)
            {
                if (!body.island)
                {
                    body.active = true;
                    this.activeBodies.push(body);

                    this.wakeRelated(body);
                    this.syncBody(body);
                }
                else
                {
                    this.wakeIsland(body.island);
                }

                // Synchronise body with broadphase.
                this.syncBody(body);
            }
        }
    },

    // Sync body with broadphase
    syncBody : function syncBodyFn(body)
    {
        var extents = this.syncExtents;
        body.calculateExtents(extents);
        if (body.collisionObject && !body.kinematic)
        {
            this.staticSpatialMap.update(body, extents);
        }
        else
        {
            if (body.active)
            {
                if (!body.previouslyActive)
                {
                    this.staticSpatialMap.remove(body);
                    this.dynamicSpatialMap.add(body, extents);
                }
                else
                {
                    this.dynamicSpatialMap.update(body, extents);
                }
            }
            else
            {
                if (body.previouslyActive)
                {
                    this.dynamicSpatialMap.remove(body);
                    this.staticSpatialMap.add(body, extents);
                }
                else
                {
                    this.staticSpatialMap.update(body, extents);
                }
            }

            body.previouslyActive = body.active;
        }
    },

    // Wake up a constraint
    wakeConstraint : function wakeConstraintFn(constraint)
    {
        constraint.wakeTimeStamp = this.timeStamp + (this.midStep ? 0 : 1);
        if (!constraint.active)
        {
            if (!constraint.island)
            {
                constraint.active = true;
                this.activeConstraints.push(constraint);

                if (constraint.bodyA)
                {
                    this.wakeBody(constraint.bodyA);
                }
                if (constraint.bodyB)
                {
                    this.wakeBody(constraint.bodyB);
                }
            }
            else
            {
                this.wakeIsland(constraint.island);
            }
        }
    },

    // Implemenmtation of Conservative Advancement for two moving objects.
    dynamicSweep : function dynamicSweepFn(toi, timeStep, lowerBound, negRadius)
    {
        var objectA = toi.objectA;
        var objectB = toi.objectB;
        var axis = toi.axis;

        // Compute start guess on best axis.
        var vel1 = objectA.velocity;
        var axis0 = -vel1[0];
        var axis1 = -vel1[1];
        var axis2 = -vel1[2];

        var vel2 = objectB.velocity;
        axis0 += vel2[0];
        axis1 += vel2[1];
        axis2 += vel2[2];

        if (((axis0 * axis0) + (axis1 * axis1) + (axis2 * axis2)) < WebGLPhysicsConfig.DONT_NORMALIZE_THRESHOLD)
        {
            toi.toi = undefined;
            return;
        }

        axis[0] = axis0;
        axis[1] = axis1;
        axis[2] = axis2;

        // Compute relative linear velocity, and angular bias for distance calculations.
        var delta0 = -axis0;
        var delta1 = -axis1;
        var delta2 = -axis2;
        var angBias = 0;

        var radiusA, radiusB;
        if (!objectA.fixedRotation)
        {
            radiusA = objectA.shape.radius;
            angBias += radiusA * Math.sqrt((vel1[3] * vel1[3]) + (vel1[4] * vel1[4]) + (vel1[5] * vel1[5]));
        }

        if (!objectB.fixedRotation)
        {
            radiusB = objectB.shape.radius;
            angBias += radiusB * Math.sqrt((vel2[3] * vel2[3]) + (vel2[4] * vel2[4]) + (vel2[5] * vel2[5]));
        }

        // If relative velocity is small, then don't bother continuing as continuous detection is
        // not needed. If angular bias is too large, then we must however continue.
        if (angBias < (WebGLPhysicsConfig.CONTINUOUS_ANGULAR_BULLET / timeStep))
        {
            var radius = (radiusA < radiusB) ? radiusA : radiusB;
            radius *= WebGLPhysicsConfig.CONTINUOUS_LINEAR_BULLET / timeStep;
            if (((delta0 * delta0) + (delta1 * delta1) + (delta2 * delta2)) < (radius * radius))
            {
                toi.toi = undefined;
                return;
            }
        }

        var curIter = 0;
        var maxIter = 100;
        var curTOI = lowerBound;
        for (;;)
        {
            objectA.integratePosition(curTOI * timeStep);
            objectB.integratePosition(curTOI * timeStep);

            var nextContact = this.contactPairTest(toi, objectA.transform, objectB.transform);
            var seperation = nextContact;
            if (nextContact !== undefined)
            {
                seperation += negRadius;
            }

            // objects intersecting!
            // abort!
            if (seperation === undefined || seperation < WebGLPhysicsConfig.GJK_EPA_DISTANCE_THRESHOLD)
            {
                if (!this.seperatingTOI(toi))
                {
                    toi.distance = nextContact;
                }
                else
                {
                    curTOI = undefined;
                }
                break;
            }

            // lower bound on TOI advancement.
            var dot = (axis[0] * delta0) + (axis[1] * delta1) + (axis[2] * delta2);
            var denom = (angBias - dot) * timeStep;
            if (denom <= 0)
            {
                curTOI = undefined;
                break;
            }

            curTOI += seperation / denom;
            if (curTOI >= 1)
            {
                curTOI = undefined;
                break;
            }

            curIter += 1;
            if (curIter > maxIter)
            {
                curTOI = undefined;
                break;
            }
        }

        toi.toi = curTOI;
    },

    // Determine if TOI event corresponds to a seperation of the objects, and can be ignored.
    seperatingTOI : function seperatingTOIFn(toi)
    {
        var objectA = toi.objectA;
        var objectB = toi.objectB;
        var supportA = toi.closestA;
        var supportB = toi.closestB;

        var velA = objectA.velocity;
        var velB = objectB.velocity;

        var vrel0 = velA[0] - velB[0];
        var vrel1 = velA[1] - velB[1];
        var vrel2 = velA[2] - velB[2];

        if (!objectA.fixedRotation)
        {
            var relA0 = supportA[0] - objectA.transform[9];
            var relA1 = supportA[1] - objectA.transform[10];
            var relA2 = supportA[2] - objectA.transform[11];

            vrel0 += (velA[4] * relA2) - (velA[5] * relA1);
            vrel1 += (velA[5] * relA0) - (velA[3] * relA2);
            vrel2 += (velA[3] * relA1) - (velA[4] * relA0);
        }

        if (!objectB.fixedRotation)
        {
            var relB0 = supportB[0] - objectB.transform[9];
            var relB1 = supportB[1] - objectB.transform[10];
            var relB2 = supportB[2] - objectB.transform[11];

            vrel0 -= (velB[4] * relB2) - (velB[5] * relB1);
            vrel1 -= (velB[5] * relB0) - (velB[3] * relB2);
            vrel2 -= (velB[3] * relB1) - (velB[4] * relB0);
        }

        var axis = toi.axis;
        var dot = (vrel0 * axis[0]) + (vrel1 * axis[1]) + (vrel2 * axis[2]);
        return dot >= 0;
    },

    // Implemenmtation of Conservative Advancement for a moving body against a static body.
    // (Optimised compared with dynamicSweep)
    staticSweep : function staticSweepFn(toi, timeStep, lowerBound, negRadius)
    {
        var objectA = toi.objectA; //dynamic
        var objectB = toi.objectB; //static
        var axis = toi.axis;

        // Compute start guess on best axis.
        var vel = objectA.velocity;
        var axis0 = -vel[0];
        var axis1 = -vel[1];
        var axis2 = -vel[2];

        if (((axis0 * axis0) + (axis1 * axis1) + (axis2 * axis2)) < WebGLPhysicsConfig.DONT_NORMALIZE_THRESHOLD)
        {
            toi.toi = undefined;
            return;
        }

        axis[0] = axis0;
        axis[1] = axis1;
        axis[2] = axis2;

        // Compute relative linear velocity, and angular bias for distance calculations.
        var delta0 = -axis0;
        var delta1 = -axis1;
        var delta2 = -axis2;
        var angBias = 0;
        if (!objectA.fixedRotationtype)
        {
            angBias += objectA.shape.radius * Math.sqrt((vel[3] * vel[3]) + (vel[4] * vel[4]) + (vel[5] * vel[5]));
        }

        var curIter = 0;
        var maxIter = 100;
        var curTOI = lowerBound;
        for (;;)
        {
            objectA.integratePosition(curTOI * timeStep);

            var nextContact = this.contactPairTest(toi, objectA.transform, objectB.transform);
            var seperation = nextContact;
            if (nextContact !== undefined)
            {
                seperation += negRadius;
            }

            // objects intersecting!
            // abort!
            if (seperation === undefined || seperation < WebGLPhysicsConfig.GJK_EPA_DISTANCE_THRESHOLD)
            {
                if (!this.seperatingTOI(toi))
                {
                    toi.distance = nextContact;
                }
                else
                {
                    curTOI = undefined;
                }
                break;
            }

            // lower bound on TOI advancement.
            var dot = (axis[0] * delta0) + (axis[1] * delta1) + (axis[2] * delta2);
            var denom = (angBias - dot) * timeStep;
            if (denom <= 0)
            {
                curTOI = undefined;
                break;
            }

            curTOI += seperation / denom;
            if (curTOI >= 1)
            {
                curTOI = undefined;
                break;
            }

            curIter += 1;
            if (curIter > maxIter)
            {
                curTOI = undefined;
                break;
            }
        }

        toi.toi = curTOI;
    },

    performStaticTOIBase : function performStaticTOIBaseFn(slop, timeStep, events, numEvents, objectA, objectB)
    {
        var triangles = this.persistantTrianglesList;
        // Objects used in all executions of continuous collisions.
        if (this.continuousFakeBody === undefined)
        {
            this.continuousFakeBody = {
                shape : null,
                transform : VMath.m43BuildIdentity(),
                startTransform : VMath.m43BuildIdentity()
            };
            this.continuousInvTransform = VMath.m43BuildIdentity();
            this.continuousExtents = new Float32Array(6);
        }
        var fakeBody = this.continuousFakeBody;
        var invTransform = this.continuousInvTransform;
        var extents = this.continuousExtents;

        var toi;
        //ObjectB static/kinematic.
        if (objectB.shape.type === "TRIANGLE_MESH")
        {
            var triangleArray = objectB.shape.triangleArray;
            var numTriangles, k;
            if (triangleArray.spatialMap)
            {
                fakeBody.shape = objectA.shape;
                // Find AABB encompassing swept shape, in local coordinate system of triangle mesh
                VMath.m43InverseOrthonormal(objectB.transform, invTransform);
                VMath.m43Mul(objectA.startTransform, invTransform, fakeBody.startTransform);
                VMath.m43Mul(objectA.endTransform, invTransform, fakeBody.transform);
                WebGLPhysicsPrivateBody.prototype.calculateSweptExtents.call(fakeBody, extents);

                numTriangles = triangleArray.spatialMap.getOverlappingNodes(extents, triangles, 0);
                for (k = 0; k < numTriangles; k += 1)
                {
                    toi = WebGLPhysicsTOIEvent.allocate();
                    toi.objectA = objectA;
                    toi.objectB = objectB;
                    toi.shapeA = objectA.shape;
                    toi.shapeB = WebGLPhysicsTriangleShape.allocate();
                    toi.shapeB.index = triangles[k].index;

                    // prevent possible GC issues
                    triangles[k] = undefined;

                    toi.shapeB.triangleArray = objectB.shape.triangleArray;
                    toi.shapeB.collisionRadius = objectB.shape.collisionRadius;
                    toi.concave = true;

                    this.staticSweep(toi, timeStep, 0, slop);
                    if (toi.toi === undefined)
                    {
                        WebGLPhysicsTOIEvent.deallocate(toi);
                        continue;
                    }

                    toi.frozenA = false;
                    toi.frozenB = true;

                    events[numEvents] = toi;
                    numEvents += 1;
                }
            }
            else
            {
                numTriangles = triangleArray.numTriangles;
                for (k = 0; k < numTriangles; k += 1)
                {
                    toi = WebGLPhysicsTOIEvent.allocate();
                    toi.objectA = objectA;
                    toi.objectB = objectB;
                    toi.shapeA = objectA.shape;
                    toi.shapeB = WebGLPhysicsTriangleShape.allocate();
                    toi.shapeB.index = k * WebGLPhysicsPrivateTriangleArray.prototype.TRIANGLE_SIZE;
                    toi.shapeB.triangleArray = objectB.shape.triangleArray;
                    toi.shapeB.collisionRadius = objectB.shape.collisionRadius;
                    toi.concave = true;

                    this.staticSweep(toi, timeStep, 0, slop);
                    if (toi.toi === undefined)
                    {
                        WebGLPhysicsTOIEvent.deallocate(toi);
                        continue;
                    }

                    toi.frozenA = false;
                    toi.frozenB = true;

                    events[numEvents] = toi;
                    numEvents += 1;
                }
            }
        }
        else
        {
            toi = WebGLPhysicsTOIEvent.allocate();
            toi.objectA = objectA;
            toi.objectB = objectB;
            toi.shapeA = objectA.shape;
            toi.shapeB = objectB.shape;

            this.staticSweep(toi, timeStep, 0, slop);
            if (toi.toi === undefined)
            {
                WebGLPhysicsTOIEvent.deallocate(toi);
                return numEvents;
            }

            toi.frozenA = false;
            toi.frozenB = true;

            events[numEvents] = toi;
            numEvents += 1;
        }

        return numEvents;
    },

    update : function updateFn()
    {
        var dynamicMap = this.dynamicSpatialMap;
        var staticMap = this.staticSpatialMap;
        var rigidBodies = this.activeBodies;
        var kinematics = this.activeKinematics;
        var constraints = this.activeConstraints;
        var arbiters = this.activeArbiters;
        var gravity = this.gravity;

        var performance = this.performanceData;
        performance.discrete = 0;
        performance.sleepComputation = 0;
        performance.prestepContacts = 0;
        performance.prestepConstraints = 0;
        performance.integrateVelocities = 0;
        performance.warmstartContacts = 0;
        performance.warmstartConstraints = 0;
        performance.physicsIterations = 0;
        performance.integratePositions = 0;
        performance.continuous = 0;

        var prevTime = this.prevTimeStamp;
        if (prevTime === undefined)
        {
            this.prevTimeStamp = TurbulenzEngine.time;
            return;
        }

        // Compute number of sub-steps needed.
        var curTime = TurbulenzEngine.time;
        var timeDelta = (curTime - prevTime);

        var numSteps, timeStep;
        if (this.variableStep)
        {
            var minTimeStep = this.variableMinStep;
            var maxTimeStep = this.variableMaxStep;

            numSteps = Math.ceil(timeDelta / maxTimeStep);
            timeStep = (timeDelta / numSteps);

            // cap timeStep to lower bound.
            if (timeStep < minTimeStep)
            {
                timeStep = minTimeStep;
                numSteps = Math.floor(timeDelta / timeStep);
            }

            if (numSteps > this.maxSubSteps && this.maxGiveUpTimeStep !== 0)
            {
                numSteps = Math.ceil(timeDelta / this.maxGiveUpTimeStep);
                timeStep = (timeDelta / numSteps);
            }
        }
        else
        {
            timeStep = this.fixedTimeStep;
            numSteps = Math.floor(timeDelta / timeStep);

            if (numSteps > this.maxSubSteps && this.maxGiveUpTimeStep !== 0)
            {
                numSteps = Math.ceil(timeDelta / this.maxGiveUpTimeStep);
                timeStep = (timeDelta / numSteps);
            }
        }

        if (numSteps <= 0)
        {
            return;
        }

        // update physics time stamp regardless of
        // capping of sub step count. Otherwise time will just accumulate endlessly.
        this.prevTimeStamp += (timeStep * numSteps);

        // cap number of substeps to upper bound.
        if (numSteps > this.maxSubSteps)
        {
            numSteps = this.maxSubSteps;
        }

        this.midStep = true;

        // Determine velocities for kinematic objects.
        // And move them back to their old position (Use velocity to move it forwards in sub steps)
        var limit, i;
        var body;
        limit = kinematics.length;
        for (i = 0; i < limit;)
        {
            body = kinematics[i];
            if (!body.computeDeltaVelocity(timeStep * numSteps, body.prevTransform, body.transform) &&
                !body.delaySleep)
            {
                body.active = false;

                limit -= 1;
                kinematics[i] = kinematics[limit];
                kinematics.pop();

                this.syncBody(body);
            }
            else
            {
                VMath.m43Copy(body.transform, body.newTransform);
                VMath.m43Copy(body.prevTransform, body.transform);
                i += 1;
            }

            body.delaySleep = false;
        }

        // Perform substeps.
        var substep;
        for (substep = 0; substep < numSteps; substep += 1)
        {
            var j, extents;

            this.timeStamp += 1;
            var preTime;

            if (this.prevTimeStep === undefined)
            {
                this.prevTimeStep = timeStep;
            }

            var timeStepRatio = timeStep / this.prevTimeStep;
            this.prevTimeStep = timeStep;

            // ####################################################################

            // Update spatial maps with body positions and refresh inertia tensors.
            limit = rigidBodies.length;
            for (i = 0; i < limit; i += 1)
            {
                body = rigidBodies[i];

                extents = body.extents;
                body.calculateExtents(extents);
                dynamicMap.update(body, extents);

                body.refreshInertiaTensor();
            }

            limit = kinematics.length;
            for (i = 0; i < limit; i += 1)
            {
                body = kinematics[i];

                extents = body.extents;
                body.calculateExtents(extents);
                dynamicMap.update(body, extents);
            }

            // ####################################################################

            preTime = TurbulenzEngine.time;

            // Prepare broadphase
            staticMap.finalize();
            dynamicMap.finalize();

            // Perform broadphase

            // We compute first pairs of dynamic-dynamic objects
            //    objects = [ a0, a1, b0, b1, c0, c1, d0, d1 ... ]
            // We then compute pairs of dynamic-static/sleeping objects in compressed form.
            //    objects = [ ... a0, a1, a2, a3, a4, a0, ..., b0, b1, b2, b3, b4, b0 ... ]
            // where we can determine the start of a new compressed sublist by checking that
            // we are not checknig the pair (x, x)
            var objects = this.persistantObjectsList;

            // Get overlapping pairs of dynamic objects.
            var numDynDyn = dynamicMap.getOverlappingPairs(objects, 0);

            // Get overlapping pairs of static <-> dynamic objects.
            var storageIndex = numDynDyn;
            var numPairs;
            limit = rigidBodies.length;
            for (i = 0; i < limit; i += 1)
            {
                body = rigidBodies[i];
                numPairs = staticMap.getOverlappingNodes(body.extents, objects, storageIndex + 1);
                // only include sublist if number of pairs is non-zero.
                if (numPairs !== 0)
                {
                    objects[storageIndex] = body;
                    storageIndex += 1 + numPairs;
                    objects[storageIndex] = body;
                    storageIndex += 1;
                }
            }

            // Get overlapping pairs of kinematic <-> sleeping dynamic
            limit = kinematics.length;
            for (i = 0; i < limit; i += 1)
            {
                body = kinematics[i];

                numPairs = staticMap.getOverlappingNodes(body.extents, objects, storageIndex + 1);
                // only include sublist if number of pairs is non-zero.
                if (numPairs !== 0)
                {
                    objects[storageIndex] = body;
                    storageIndex += 1 + numPairs;
                    objects[storageIndex] = body;
                    storageIndex += 1;
                }
            }

            // Find contacts for dynamic-dynamic pairs
            // As well as kinematic-dynamic pairs.
            var objectA, objectB;
            for (i = 0; i < numDynDyn; i += 2)
            {
                objectA = objects[i];
                objectB = objects[i + 1];

                // prevent GC issues
                objects[i] = undefined;
                objects[i + 1] = undefined;
                if (!this.filtered(objectA, objectB))
                {
                    if (objectA.id < objectB.id)
                    {
                        this.narrowPhase(objectA.shape, objectB.shape, objectA, objectB);
                    }
                    else
                    {
                        this.narrowPhase(objectB.shape, objectA.shape, objectB, objectA);
                    }
                }
            }

            // Find contacts for dynamic-static/sleep pairs and kinematic/sleep-pairs
            for (i = numDynDyn; i < storageIndex;)
            {
                objectA = objects[i];
                // prevent GC issues
                objects[i] = undefined;

                i += 1;
                for (;;)
                {
                    objectB = objects[i];
                    //prevent GC issues
                    objects[i] = undefined;
                    i += 1;

                    // end of sub list.
                    if (objectA === objectB)
                    {
                        break;
                    }

                    if (!this.filtered(objectA, objectB))
                    {
                        if (objectA.id < objectB.id)
                        {
                            this.narrowPhase(objectA.shape, objectB.shape, objectA, objectB);
                        }
                        else
                        {
                            this.narrowPhase(objectB.shape, objectA.shape, objectB, objectA);
                        }
                    }
                }
            }
            performance.discrete += (TurbulenzEngine.time - preTime);

            // ####################################################################
            // Compute islands and perform sleeping.

            preTime = TurbulenzEngine.time;
            this.computeSleeping(timeStep);
            performance.sleepComputation += (TurbulenzEngine.time - preTime);

            // ####################################################################

            // Prestep arbiters
            preTime = TurbulenzEngine.time;
            i = 0;
            var arb;
            while (i < arbiters.length)
            {
                arb = arbiters[i];
                if (!arb.objectA.active && !arb.objectB.active)
                {
                    arb.active = false;
                    arbiters[i] = arbiters[arbiters.length - 1];
                    arbiters.pop();
                    continue;
                }

                if (arb.refreshContacts())
                {
                    arbiters[i] = arbiters[arbiters.length - 1];
                    arbiters.pop();

                    var bodyArbiters = arb.objectA.arbiters;
                    bodyArbiters[bodyArbiters.indexOf(arb)] = bodyArbiters[bodyArbiters.length - 1];
                    bodyArbiters.pop();

                    bodyArbiters = arb.objectB.arbiters;
                    bodyArbiters[bodyArbiters.indexOf(arb)] = bodyArbiters[bodyArbiters.length - 1];
                    bodyArbiters.pop();

                    WebGLPhysicsArbiter.deallocate(arb);
                    continue;
                }

                arb.preStep(timeStepRatio, timeStep);
                i++;
            }
            performance.prestepContacts += (TurbulenzEngine.time - preTime);

            preTime = TurbulenzEngine.time;
            // Prestep constraints
            limit = constraints.length;
            for (i = 0; i < limit; i += 1)
            {
                constraints[i].preStep(timeStepRatio, timeStep);
            }
            performance.prestepConstraints += (TurbulenzEngine.time - preTime);

            // ####################################################################

            preTime = TurbulenzEngine.time;
            // Integrate velocities, apply gravity
            limit = rigidBodies.length;
            for (i = 0; i < limit; i += 1)
            {
                body = rigidBodies[i];
                body.integrateVelocity(gravity, timeStep);
            }

            performance.integrateVelocities += (TurbulenzEngine.time - preTime);

            // ####################################################################

            preTime = TurbulenzEngine.time;
            // Warmstart arbiters
            limit = arbiters.length;
            for (i = 0; i < limit; i += 1)
            {
                arbiters[i].applyCachedImpulses();
            }
            performance.warmstartContacts += (TurbulenzEngine.time - preTime);

            preTime = TurbulenzEngine.time;
            // Warmstart constraints
            limit = constraints.length;
            for (i = 0; i < limit; i += 1)
            {
                constraints[i].applyCachedImpulses();
            }
            performance.warmstartConstraints += (TurbulenzEngine.time - preTime);

            // ####################################################################

            preTime = TurbulenzEngine.time;
            // Physics iterations
            var numIterations = 10; //TODO: make configurable.
            for (i = 0; i < numIterations; i += 1)
            {
                limit = arbiters.length;
                for (j = 0; j < limit; j += 1)
                {
                    arbiters[j].computeAndApplyImpulses();
                }

                limit = constraints.length;
                for (j = 0; j < limit; j += 1)
                {
                    constraints[j].computeAndApplyImpulses();
                }
            }

            numIterations = 3; //TODO: make configurable.
            limit = arbiters.length;
            for (i = 0; i < numIterations; i += 1)
            {
                for (j = 0; j < limit; j += 1)
                {
                    arbiters[j].computeAndApplyBiasImpulses();
                }
            }

            performance.physicsIterations += (TurbulenzEngine.time - preTime);

            // ####################################################################

            // Apply bias velocities to get start transform for sweeps.
            // Then integrate positions to get end transform for sweeps.
            // Syncing bodies into broadphase with swept AABB.
            var unfrozen = this.persistantObjectsList2;
            var numUnfrozen = 0;

            preTime = TurbulenzEngine.time;
            limit = rigidBodies.length;
            var radius;

            var timeStepSq = timeStep * timeStep;

            var xform0, xform1;
            for (i = 0; i < limit; i += 1)
            {
                body = rigidBodies[i];
                body.applyBiasVelocities(timeStep);
                body.integratePosition(timeStep);

                // If body is moving very slowly, don't bother doing any continuous
                if (!body.isActiveVelocity(WebGLPhysicsConfig.CONTINUOUS_LINEAR_SQ / timeStep,
                                           WebGLPhysicsConfig.CONTINUOUS_ANGULAR_SQ / timeStep))
                {
                    body.sweepFrozen = true;
                    body.bullet = false;
                    continue;
                }

                // cached for triangle mesh lookups.
                //VMath.m43Copy(body.transform, body.endTransform);
                xform0 = body.transform;
                xform1 = body.endTransform;
                xform1[0] = xform0[0];
                xform1[1] = xform0[1];
                xform1[2] = xform0[2];
                xform1[3] = xform0[3];
                xform1[4] = xform0[4];
                xform1[5] = xform0[5];
                xform1[6] = xform0[6];
                xform1[7] = xform0[7];
                xform1[8] = xform0[8];
                xform1[9] = xform0[9];
                xform1[10] = xform0[10];
                xform1[11] = xform0[11];

                // determine if body should be a bullet.
                radius = body.shape.radius * WebGLPhysicsConfig.CONTINUOUS_LINEAR_BULLET;

                var vel = body.velocity;
                var vlsq = ((vel[0] * vel[0]) + (vel[1] * vel[1]) + (vel[2] * vel[2])) * timeStepSq;
                var wlsq = ((vel[3] * vel[3]) + (vel[4] * vel[4]) + (vel[5] * vel[5])) * timeStepSq;

                body.bullet = vlsq > (radius * radius) ||
                              wlsq > WebGLPhysicsConfig.CONTINUOUS_ANGULAR_BULLET;

                extents = body.extents;
                body.calculateSweptExtents(extents);
                dynamicMap.update(body, extents);

                body.sweepFrozen = false;
                unfrozen[numUnfrozen] = body;
                numUnfrozen += 1;
            }

            limit = kinematics.length;
            for (i = 0; i < limit; i += 1)
            {
                body = kinematics[i];

                VMath.m43Copy(body.transform, body.startTransform);
                body.integratePosition(timeStep);

                extents = body.extents;
                body.calculateSweptExtents(extents);
                dynamicMap.update(body, extents);
            }

            performance.integratePositions += (TurbulenzEngine.time - preTime);

            // ####################################################################

            preTime = TurbulenzEngine.time;

            // We must finalize the broadphase once more.
            // Any objects that have gone to sleep (or been woken up) will have effected
            // the static map.
            // And every dynamic object has been updated in dynamic map with its swept
            // extents for continuous collisions and absolutely must be finalized.
            staticMap.finalize();
            dynamicMap.finalize();

            // Continuous collision detection.
            var slop = WebGLPhysicsConfig.CONTINUOUS_SLOP + WebGLPhysicsConfig.CONTACT_SLOP;

            var events = this.persistantTOIEventList;
            var numEvents = 0;
            var toi;

            // Determine pairs of dynamics with one being a bullet that must be checked for collisions
            numDynDyn = dynamicMap.getOverlappingPairs(objects, 0);
            for (i = 0; i < numDynDyn; i += 2)
            {
                objectA = objects[i];
                objectB = objects[i + 1];

                // prevent possible GC issues.
                objects[i] = undefined;
                objects[i + 1] = undefined;

                if (!((objectA.bullet || objectA.kinematic) || (objectB.bullet || objectB.kinematic)) ||
                    (objectA.sweepFrozen && objectB.sweepFrozen) ||
                    this.filtered(objectA, objectB))
                {
                    continue;
                }

                if (objectA.kinematic || objectB.kinematic)
                {
                    if (objectA.kinematic)
                    {
                        numEvents = this.performStaticTOIBase(slop, timeStep, events, numEvents, objectB, objectA);
                    }
                    else
                    {
                        numEvents = this.performStaticTOIBase(slop, timeStep, events, numEvents, objectA, objectB);
                    }
                }
                else
                {
                    toi = WebGLPhysicsTOIEvent.allocate();
                    toi.objectA = objectA;
                    toi.objectB = objectB;
                    toi.shapeA = objectA.shape;
                    toi.shapeB = objectB.shape;

                    this.dynamicSweep(toi, timeStep, 0, slop);
                    // don't cull non-existant toi's for dynamic-dynamic.
                    // freezing of either object will impact whether a toi
                    // is able to be computed or not. miss too many collisions
                    // by culling too early here.

                    toi.frozenA = objectA.sweepFrozen;
                    toi.frozenB = objectB.sweepFrozen;

                    events[numEvents] = toi;
                    numEvents += 1;
                }
            }

            // Determine pairs of statics dynamics that must be checked for collisions
            for (i = 0; i < numUnfrozen; i += 1)
            {
                objectA = unfrozen[i];
                numPairs = staticMap.getOverlappingNodes(objectA.extents, objects, 0);
                for (j = 0; j < numPairs; j += 1)
                {
                    objectB = objects[j];
                    // prevent possible GC issues
                    objects[j] = undefined;

                    if (this.filtered(objectA, objectB))
                    {
                        continue;
                    }

                    numEvents = this.performStaticTOIBase(slop, timeStep, events, numEvents, objectA, objectB);
                }
            }

            // Time to begin!
            var curTimeAlpha = 0;
            while (curTimeAlpha < 1 && numEvents > 0)
            {
                var minTOI = null;
                var minIndex;

                for (i = 0; i < numEvents;)
                {
                    toi = events[i];

                    objectA = toi.objectA;
                    objectB = toi.objectB;
                    // Check if tOI Event should be culled.
                    if (objectA.sweepFrozen && objectB.sweepFrozen)
                    {
                        numEvents -= 1;
                        if (i !== numEvents)
                        {
                            events[i] = events[numEvents];
                            // prevent possible GC issues
                            events[numEvents] = undefined;
                        }
                        WebGLPhysicsTOIEvent.deallocate(toi);
                        continue;
                    }

                    // Check if TOI Event is invalidated.
                    if ((toi.frozenA !== objectA.sweepFrozen) ||
                        (toi.frozenB !== objectB.sweepFrozen))
                    {
                        // Recompute TOI.
                        toi.frozenA = objectA.sweepFrozen;
                        toi.frozenB = objectB.sweepFrozen;

                        // Check if order of objects in event need swapped
                        // (For staticSweep objectA must be non-frozen)
                        if (toi.frozenA)
                        {
                            toi.objectA = objectB;
                            toi.objectB = objectA;
                            toi.shapeA = objectB.shape;
                            toi.shapeB = objectA.shape;
                            toi.frozenA = false;
                            toi.frozenB = true;
                        }
                        this.staticSweep(toi, timeStep, curTimeAlpha, slop);

                        if (toi.toi === undefined)
                        {
                            numEvents -= 1;
                            if (i !== numEvents)
                            {
                                events[i] = events[numEvents];
                                // prevent possible GC issues
                                events[numEvents] = undefined;
                            }
                            WebGLPhysicsTOIEvent.deallocate(toi);
                            continue;
                        }
                    }

                    if (toi.toi !== undefined && (minTOI === null || (toi.toi < minTOI.toi)))
                    {
                        minTOI = toi;
                        minIndex = i;
                    }

                    i += 1;
                }

                if (minTOI === null)
                {
                    break;
                }

                // remove TOI Event from list.
                numEvents -= 1;
                if (minIndex !== numEvents)
                {
                    events[minIndex] = events[numEvents];
                    // prevent possible GC issues
                    events[numEvents] = undefined;
                }

                // Advance time alpha.
                curTimeAlpha = minTOI.toi;

                // Freeze objects at TOI.
                objectA = minTOI.objectA;
                objectB = minTOI.objectB;
                if (!objectA.collisionObject)
                {
                    if (!objectA.sweepFrozen)
                    {
                        objectA.integratePosition(timeStep * curTimeAlpha);
                        objectA.sweepFrozen = true;
                    }
                    if (objectA.permitSleep && !objectA.active)
                    {
                        this.wakeBody(objectA);
                    }
                }
                if (!objectB.collisionObject)
                {
                    if (!objectB.sweepFrozen)
                    {
                        objectB.integratePosition(timeStep * curTimeAlpha);
                        objectB.sweepFrozen = true;
                    }
                    if (objectB.permitSleep && !objectB.active)
                    {
                        this.wakeBody(objectB);
                    }
                }

                // Flip objects based on id.
                if (objectA.id > objectB.id)
                {
                    var tmp = objectA;
                    objectA = objectB;
                    objectB = tmp;

                    var tmpv = minTOI.closestA;
                    minTOI.closestA = minTOI.closestB;
                    minTOI.closestB = tmpv;

                    tmpv = minTOI.axis;
                    tmpv[0] = -tmpv[0];
                    tmpv[1] = -tmpv[1];
                    tmpv[2] = -tmpv[2];
                }

                var shapeA = objectA.shape;
                var shapeB = objectB.shape;

                // Find existing arbiter for shape pair.
                // Iterating the smaller list of either object.
                arb = null;
                var arbitersA = objectA.arbiters;
                var arbitersB = objectB.arbiters;
                var arbs = (arbitersA.length <= arbitersB.length) ? arbitersA : arbitersB;

                var numArbiters = arbs.length;
                for (i = 0; i < numArbiters; i += 1)
                {
                    var carb = arbs[i];
                    if (carb.shapeA === shapeA && carb.shapeB === shapeB &&
                        carb.objectA === objectA && carb.objectB === objectB)
                    {
                        arb = carb;
                        break;
                    }
                }

                // If arbiter does not already exist, create a new one.
                var fresh = (arb === null);
                if (fresh)
                {
                    arb = WebGLPhysicsArbiter.allocate(shapeA, shapeB, objectA, objectB);
                }

                arb.insertContact(minTOI.closestA, minTOI.closestB, minTOI.axis, minTOI.distance, minTOI.concave);
                if (fresh)
                {
                    arbiters.push(arb);
                    arb.active = true;
                    objectA.arbiters.push(arb);
                    objectB.arbiters.push(arb);
                }

                // Since object transforms do not change. The contact point which will be computed
                // in discrete collision detection at start of next world update, will be exactly
                // this contact point.
                //
                // For that reason it is a waste to perform discrete collision detection in the next update
                // for this pair of objects. This flag represent this fact.
                //
                // For active kinematic objects, the transform may change slightly due to innacuracies
                // and so not skipping discrete may achieve a new contact point and will be beneficial.
                if (!((objectA.kinematic && objectA.active) || (objectB.kinematic && objectB.active)))
                {
                    arb.skipDiscreteCollisions = true;
                }

                WebGLPhysicsTOIEvent.deallocate(minTOI);
            }

            // Prevent possible GC issues.
            while (numEvents > 0)
            {
                numEvents -= 1;
                WebGLPhysicsTOIEvent.deallocate(events[numEvents]);
                events[numEvents] = undefined;
            }

            // Integrate anything unfrozen to end of time step.
            while (numUnfrozen > 0)
            {
                numUnfrozen -= 1;
                objectA = unfrozen[numUnfrozen];

                // prevent possible GC issues
                unfrozen[numUnfrozen] = undefined;

                if (!objectA.sweepFrozen)
                {
                    objectA.integratePosition(timeStep);
                }
            }

            performance.continuous += (TurbulenzEngine.time - preTime);
        }

        // Ensure kinematic bodies are moved 'EXACTLY' to their set transform.
        // (Numerical innacuries in integrations).
        limit = kinematics.length;
        for (i = 0; i < limit; i += 1)
        {
            body = kinematics[i];

            VMath.m43Copy(body.newTransform, body.transform);
            VMath.m43Copy(body.newTransform, body.prevTransform);
        }

        this.midStep = false;
    },

    rayTest : function worldRayTestFn(ray)
    {
        var group = ray.group;
        var mask = ray.mask;
        if (group === undefined)
        {
            group = WebGLPhysicsDevice.prototype.FILTER_DYNAMIC;
        }
        if (mask === undefined)
        {
            mask = WebGLPhysicsDevice.prototype.FILTER_ALL;
        }

        var exclude = ray.exclude;

        // Create parametric ray
        var pRay = {
            origin: ray.from,
            direction: VMath.v3Sub(ray.to, ray.from),
            maxFactor: 1.0
        };

        this.staticSpatialMap.finalize();
        this.dynamicSpatialMap.finalize();

        function rayCallback(tree, obj, pRay, unusedAABBDistance, upperBound)
        {
            /*jshint bitwise: false*/
            var actual_obj = obj._public;
            if (actual_obj === exclude ||
                (obj.mask & group) === 0 || (obj.group & mask) === 0)
            {
                return null;
            }
            /*jshint bitwise: true*/

            pRay.maxFactor = upperBound;
            var resultObj = obj.rayTest(pRay);
            if (resultObj !== null)
            {
                if (obj.collisionObject)
                {
                    resultObj.collisionObject = actual_obj;
                    resultObj.body = null;
                }
                else
                {
                    resultObj.collisionObject = null;
                    resultObj.body = actual_obj;
                }
            }

            return resultObj;
        }

        var ret = AABBTree.rayTest([this.staticSpatialMap, this.dynamicSpatialMap], pRay, rayCallback);
        //delete additional factor property
        if (ret !== null)
        {
            delete ret.factor;
        }

        return ret;
    },

    //
    // cache having properties
    //   shapeA
    //   shapeB
    //   axis <-- to be mutated by this function
    //      axis is 'on' object B.
    //   closestA <-- to be populated by this function
    //   closestB <-- to be populated by this function
    contactPairTest : function contactPairTest(cache, xformA, xformB)
    {
        var axis = cache.axis;
        var shapeA = cache.shapeA;
        var shapeB = cache.shapeB;
        var supportA = cache.closestA;
        var supportB = cache.closestB;

        if (this.contactGJK === undefined)
        {
            this.contactGJK = WebGLGJKContactSolver.create();
            this.contactEPA = WebGLContactEPA.create();
        }

        //
        // Special case for planes
        //
        if (shapeA.type === "PLANE" || shapeB.type === "PLANE")
        {
            var planeShape, otherShape;
            var planeXForm, otherXForm;
            if (shapeA.type === "PLANE")
            {
                planeShape = shapeA;
                planeXForm = xformA;
                otherShape = shapeB;
                otherXForm = xformB;
            }
            else
            {
                planeShape = shapeB;
                planeXForm = xformB;
                otherShape = shapeA;
                otherXForm = xformA;
            }

            var A0 = planeXForm[0];
            var A1 = planeXForm[1];
            var A2 = planeXForm[2];
            var A3 = planeXForm[3];
            var A4 = planeXForm[4];
            var A5 = planeXForm[5];
            var A6 = planeXForm[6];
            var A7 = planeXForm[7];
            var A8 = planeXForm[8];
            var A9 = planeXForm[9];
            var A10 = planeXForm[10];
            var A11 = planeXForm[11];

            // local plane normal and distance.
            var n = planeShape.normal;
            var n0 = n[0];
            var n1 = n[1];
            var n2 = n[2];
            var nd = planeShape.distance;

            // transform plane normal into world space.
            var w0 = (n0 * A0) + (n1 * A3) + (n2 * A6);
            var w1 = (n0 * A1) + (n1 * A4) + (n2 * A7);
            var w2 = (n0 * A2) + (n1 * A5) + (n2 * A8);

            A0 = otherXForm[0];
            A1 = otherXForm[1];
            A2 = otherXForm[2];
            A3 = otherXForm[3];
            A4 = otherXForm[4];
            A5 = otherXForm[5];
            A6 = otherXForm[6];
            A7 = otherXForm[7];
            A8 = otherXForm[8];
            var B9 = otherXForm[9];
            var B10 = otherXForm[10];
            var B11 = otherXForm[11];

            // transform plane into shape local space.
            n0 = (A0 * w0) + (A1 * w1) + (A2 * w2);
            n1 = (A3 * w0) + (A4 * w1) + (A5 * w2);
            n2 = (A6 * w0) + (A7 * w1) + (A8 * w2);
            nd += (w0 * (A9 - B9)) + (w1 * (A10 - B10)) + (w2 * (A11 - B11));

            // Find maximum and minimal support points on shape.
            axis[0] = n0;
            axis[1] = n1;
            axis[2] = n2;
            otherShape.localSupportWithoutMargin(axis, supportA);

            axis[0] = -n0;
            axis[1] = -n1;
            axis[2] = -n2;
            otherShape.localSupportWithoutMargin(axis, supportB);

            // Find distance from plane for each support.
            var dot1 = (supportA[0] * n0) + (supportA[1] * n1) + (supportA[2] * n2) - nd;
            var dot2 = (supportB[0] * n0) + (supportB[1] * n1) + (supportB[2] * n2) - nd;

            // Choose closest support to plane for distance computation
            // with margins.
            var seperation, c0, c1, c2;
            if ((dot1 * dot1) < (dot2 * dot2))
            {
                c0 = supportA[0];
                c1 = supportA[1];
                c2 = supportA[2];
                seperation = dot1;
            }
            else
            {
                c0 = supportB[0];
                c1 = supportB[1];
                c2 = supportB[2];
                seperation = dot2;
            }

            if ((seperation < 0) !== ((dot1 * dot2) < 0))
            {
                seperation = -seperation;
                // negate normal
                w0 = -w0;
                w1 = -w1;
                w2 = -w2;
            }

            // Take collision margin from seperation.
            var rad = otherShape.collisionRadius;
            var prad = planeShape.collisionRadius;

            // find world-space support point on non-plane shape
            //VMath.m43TransformPoint(otherXForm, closest, closest);
            var a0 = (A0 * c0) + (A3 * c1) + (A6 * c2) + B9;
            var a1 = (A1 * c0) + (A4 * c1) + (A7 * c2) + B10;
            var a2 = (A2 * c0) + (A5 * c1) + (A8 * c2) + B11;

            // find world-space support point on plane shape
            // including collision margin
            var rsep = prad - seperation;
            var p0 = a0 + (w0 * rsep);
            var p1 = a1 + (w1 * rsep);
            var p2 = a2 + (w2 * rsep);

            // apply collision margin to non-plane support.
            a0 -= (w0 * rad);
            a1 -= (w1 * rad);
            a2 -= (w2 * rad);

            // apply collision radius to seperation.
            seperation -= rad + prad;

            if (shapeA.type === "PLANE")
            {
                axis[0] = -w0;
                axis[1] = -w1;
                axis[2] = -w2;
                supportA[0] = p0;
                supportA[1] = p1;
                supportA[2] = p2;
                supportB[0] = a0;
                supportB[1] = a1;
                supportB[2] = a2;
            }
            else
            {
                axis[0] = w0;
                axis[1] = w1;
                axis[2] = w2;
                supportA[0] = a0;
                supportA[1] = a1;
                supportA[2] = a2;
                supportB[0] = p0;
                supportB[1] = p1;
                supportB[2] = p2;
            }

            return seperation;
        }
        else
        {
            var gjk = this.contactGJK;
            var distance = gjk.evaluate(cache, xformA, xformB);
            if (distance === undefined)
            {
                distance = this.contactEPA.evaluate(gjk.simplex, cache, xformA, xformB);
            }

            if (distance !== undefined)
            {
                var axis0 = axis[0];
                var axis1 = axis[1];
                var axis2 = axis[2];

                var radiusA = shapeA.collisionRadius;
                var radiusB = shapeB.collisionRadius;

                supportA[0] -= axis0 * radiusA;
                supportA[1] -= axis1 * radiusA;
                supportA[2] -= axis2 * radiusA;

                supportB[0] += axis0 * radiusB;
                supportB[1] += axis1 * radiusB;
                supportB[2] += axis2 * radiusB;

                return (distance - radiusA - radiusB);
            }
            else
            {
                return undefined;
            }
        }
    },

    // callback of the form HitResult -> Bool
    // if callback is undefined, then a callback of function (x) { return true; } is implied.
    convexSweepTest : function convexSweepTestFn(params, callback)
    {
        //
        // Initialise objects reused in all convexSweepTest calls.
        //
        if (this.sweepCache === undefined)
        {
            this.sweepCache = {
                axis : VMath.v3BuildZero(),
                shapeA : null,
                shapeB : null,
                closestA : VMath.v3BuildZero(),
                closestB : VMath.v3BuildZero()
            };

            // fake triangle shape for triangle meshes!
            this.sweepTriangle = WebGLPhysicsTriangleShape.allocate();

            this.sweepDelta = VMath.v3BuildZero();

            this.sweepFromExtents = new Float32Array(6);
            this.sweepToExtents = new Float32Array(6);
            this.sweepExtents = new Float32Array(6);

            // fake body used to compute shape extents in triangle mesh coordinate systems.
            this.sweepFakeBody = {
                shape : null,
                transform : null
            };
            this.sweepTransform = VMath.m43BuildIdentity();
            this.sweepTransform2 = VMath.m43BuildIdentity();
        }

        var cache = this.sweepCache;
        var triangle = this.sweepTriangle;
        var delta = this.sweepDelta;
        var fromExtents = this.sweepFromExtents;
        var toExtents = this.sweepToExtents;
        var extents = this.sweepExtents;
        var fakeBody = this.sweepFakeBody;
        var transform = this.sweepTransform;
        var transform2 = this.sweepTransform2;

        var that = this;
        // sweep shapeA linearlly from 'from' transform, through delta vector
        // against shapeB with transform 'transform' up to a maximum
        // distance of upperBound
        function staticSweep(shapeA, cpos, delta, shapeB, transform, upperBound)
        {
            var delta0 = delta[0];
            var delta1 = delta[1];
            var delta2 = delta[2];

            var axis = cache.axis;
            var supportA = cache.closestA;
            var supportB = cache.closestB;

            //VMath.v3Neg(delta, cache.axis);
            axis[0] = -delta0;
            axis[1] = -delta1;
            axis[2] = -delta2;

            cache.shapeA = shapeA;
            cache.shapeB = shapeB;

            var distance = 0;

            var curIter = 0;
            var maxIter = 100;
            var contactDistance;

            var previousDistance = Number.MAX_VALUE;
            var intersected = false;
            for (;;)
            {
                var nextContact = that.contactPairTest(cache, cpos, transform);

                // objects intersecting!
                // abort and use previous result if existing
                if (nextContact === undefined || nextContact < WebGLPhysicsConfig.GJK_EPA_DISTANCE_THRESHOLD)
                {
                    if (contactDistance !== undefined || nextContact !== undefined)
                    {
                        if (contactDistance === undefined)
                        {
                            contactDistance = nextContact;
                        }
                        intersected = true;
                    }
                    break;
                }

                // terminate if distance is increasing!!
                if ((nextContact - previousDistance) >= 1)
                {
                    break;
                }
                previousDistance = nextContact;

                // distance to advance object.
                //var dot = VMath.v3Dot(delta, VMath.v3Sub(nextContact.closestB, nextContact.closestA));
                var d0 = supportB[0] - supportA[0];
                var d1 = supportB[1] - supportA[1];
                var d2 = supportB[2] - supportA[2];
                var dot = (delta0 * d0) + (delta1 * d1) + (delta2 * d2);

                // If seperating axis is perpendicular to direction of motion
                // Then it is not possible for use to intersect with it.
                if (dot <= WebGLPhysicsConfig.COPLANAR_THRESHOLD)
                {
                    break;
                }

                var gap = (nextContact * nextContact) / dot;
                distance += gap;
                if (distance >= upperBound)
                {
                    contactDistance = undefined;
                    break;
                }

                contactDistance = nextContact;
                cpos[9]  += (delta0 * gap);
                cpos[10] += (delta1 * gap);
                cpos[11] += (delta2 * gap);

                // Exit if distance between objects is nominal
                if (contactDistance <= WebGLPhysicsConfig.GJK_EPA_DISTANCE_THRESHOLD)
                {
                    intersected = true;
                    break;
                }

                // Max iteration cutoff.
                curIter += 1;
                if (curIter > maxIter)
                {
                    break;
                }
            }

            if (contactDistance === undefined || !intersected)
            {
                return null;
            }
            else
            {
                return {
                    hitPoint : VMath.v3Copy(supportB),
                    hitNormal : VMath.v3Copy(axis),
                    distance : distance
                };
            }
        }

        var shape = params.shape._private;
        var from = params.from;
        var to = params.to;

        //var delta = VMath.v3Sub(VMath.m43Pos(to), VMath.m43Pos(from));
        var d0 = (to[9] - from[9]);
        var d1 = (to[10] - from[10]);
        var d2 = (to[11] - from[11]);

        //var upperBound = VMath.v3Length(delta);
        var upperBound = Math.sqrt((d0 * d0) + (d1 * d1) + (d2 * d2));

        //VMath.v3Normalize(delta, delta);
        var scale = 1 / upperBound;
        delta[0] = d0 * scale;
        delta[1] = d1 * scale;
        delta[2] = d2 * scale;

        var group = (params.group === undefined) ? WebGLPhysicsDevice.prototype.FILTER_DYNAMIC : params.group;
        var mask  = (params.mask  === undefined) ? WebGLPhysicsDevice.prototype.FILTER_ALL     : params.mask;
        var exclude = params.exclude;

        // Find AABB encompassing swept shape
        fakeBody.shape = shape;
        fakeBody.transform = from;
        WebGLPhysicsPrivateBody.prototype.calculateExtents.call(fakeBody, fromExtents);

        fakeBody.transform = to;
        WebGLPhysicsPrivateBody.prototype.calculateExtents.call(fakeBody, toExtents);

        //var extents = VMath.aabbUnion(fromExtents, toExtents);
        extents[0] = (fromExtents[0] < toExtents[0] ? fromExtents[0] : toExtents[0]);
        extents[1] = (fromExtents[1] < toExtents[1] ? fromExtents[1] : toExtents[1]);
        extents[2] = (fromExtents[2] < toExtents[2] ? fromExtents[2] : toExtents[2]);
        extents[3] = (fromExtents[3] > toExtents[3] ? fromExtents[3] : toExtents[3]);
        extents[4] = (fromExtents[4] > toExtents[4] ? fromExtents[4] : toExtents[4]);
        extents[5] = (fromExtents[5] > toExtents[5] ? fromExtents[5] : toExtents[5]);

        // Find all objects intersecting swept shape AABB.
        this.staticSpatialMap.finalize();
        this.dynamicSpatialMap.finalize();

        var objects = this.persistantObjectsList;
        var triangles = this.persistantTrianglesList;
        var staticCount = this.staticSpatialMap.getOverlappingNodes(extents, objects, 0);
        var limit = staticCount + this.dynamicSpatialMap.getOverlappingNodes(extents, objects, staticCount);

        var minResult = null;
        var i, j;
        for (i = 0; i < limit; i += 1)
        {
            var object = objects[i];
            // Prevent GC issues from persistant list.
            objects[i] = undefined;

            /*jshint bitwise: false*/
            var actual_object = object._public;
            if (actual_object === exclude || object.shape === shape ||
               (object.mask & group) === 0 || (object.group & mask) === 0)
            {
                continue;
            }
            /*jshint bitwise: true*/

            var result;
            var collisionShape = object.shape;
            if (collisionShape.type === "TRIANGLE_MESH")
            {
                var triangleArray = collisionShape.triangleArray;
                triangle.triangleArray = triangleArray;
                triangle.collisionRadius = collisionShape.collisionRadius;

                var numTriangles;
                if (triangleArray.spatialMap)
                {
                    // Find AABB encompassing swept shape, in local coordinate system of triangle mesh.
                    VMath.m43InverseOrthonormal(object.transform, transform2);
                    VMath.m43Mul(from, transform2, transform);

                    fakeBody.transform = transform;
                    WebGLPhysicsPrivateBody.prototype.calculateExtents.call(fakeBody, fromExtents);

                    VMath.m43Mul(to, transform2, transform);
                    WebGLPhysicsPrivateBody.prototype.calculateExtents.call(fakeBody, toExtents);

                    //var extents = VMath.aabbUnion(fromExtents, toExtents);
                    extents[0] = (fromExtents[0] < toExtents[0] ? fromExtents[0] : toExtents[0]);
                    extents[1] = (fromExtents[1] < toExtents[1] ? fromExtents[1] : toExtents[1]);
                    extents[2] = (fromExtents[2] < toExtents[2] ? fromExtents[2] : toExtents[2]);
                    extents[3] = (fromExtents[3] > toExtents[3] ? fromExtents[3] : toExtents[3]);
                    extents[4] = (fromExtents[4] > toExtents[4] ? fromExtents[4] : toExtents[4]);
                    extents[5] = (fromExtents[5] > toExtents[5] ? fromExtents[5] : toExtents[5]);

                    numTriangles = triangleArray.spatialMap.getOverlappingNodes(extents, triangles, 0);
                    for (j = 0; j < numTriangles; j += 1)
                    {
                        triangle.index = triangles[j].index;
                        // avoid GC problems of persistant array.
                        triangles[j] = undefined;

                        VMath.m43Copy(from, transform2);
                        result = staticSweep(shape, transform2, delta, triangle, object.transform, upperBound);
                        if (result)
                        {
                            result.collisionObject = actual_object;
                            result.body = null;

                            if (!callback || callback(result))
                            {
                                minResult = result;
                                upperBound = result.distance;
                            }
                        }
                    }
                }
                else
                {
                    numTriangles = triangleArray.numTriangles;
                    for (j = 0; j < numTriangles; j += 1)
                    {
                        triangle.index = (j * WebGLPhysicsPrivateTriangleArray.prototype.TRIANGLE_SIZE);
                        VMath.m43Copy(from, transform2);
                        result = staticSweep(shape, transform2, delta, triangle, object.transform, upperBound);
                        if (result)
                        {
                            result.collisionObject = actual_object;
                            result.body = null;

                            if (!callback || callback(result))
                            {
                                minResult = result;
                                upperBound = result.distance;
                            }
                        }
                    }
                }
            }
            else
            {
                VMath.m43Copy(from, transform2);
                result = staticSweep(shape, transform2, delta, collisionShape, object.transform, upperBound);
                if (result)
                {
                    if (object.collisionObject)
                    {
                        result.collisionObject = actual_object;
                        result.body = null;
                    }
                    else
                    {
                        result.collisionObject = null;
                        result.body = actual_object;
                    }

                    if (!callback || callback(result))
                    {
                        minResult = result;
                        upperBound = result.distance;
                    }
                }
            }

            // Cut off on epsilon distance
            // Based on rough experimental result
            if (upperBound < 1e-4)
            {
                // clean up remaining objects for GC
                for (j = i; j < limit; j += 1)
                {
                    objects[j] = undefined;
                }

                break;
            }
        }

        if (minResult)
        {
            // delete additional property
            delete minResult.distance;
        }

        return minResult;
    },

    addBody : function addBodyFn(body)
    {
        if (body.world)
        {
            return false;
        }

        body.world = this;
        if (body.collisionObject && !body.kinematic)
        {
            this.collisionObjects.push(body);
            this.syncBody(body);
            return true;
        }

        if (body.kinematic)
        {
            this.kinematicBodies.push(body);
        }
        else
        {
            this.rigidBodies.push(body);
        }

        var addSleeping = !body.active;
        body.previouslyActive = true;
        body.active = false;

        // Prepare body for disjoint set forest algorithm
        // in computeSleeping
        body.islandRoot = body;
        body.islandRank = 0;

        if (!addSleeping)
        {
            this.wakeBody(body);
        }
        else
        {
            this.syncBody(body);
        }

        return true;
    },

    removeBody : function removeBodyFn(body)
    {
        if (body.world !== this)
        {
            return false;
        }

        var list, activeList;
        if (body.collisionObject && !body.kinematic)
        {
            list = this.collisionObjects;
        }
        else if (body.kinematic)
        {
            list = this.kinematicBodies;
            activeList = this.activeKinematics;
        }
        else
        {
            list = this.rigidBodies;
            activeList = this.activeBodies;
        }

        body.world = null;
        list[list.indexOf(body)] = list[list.length - 1];
        list.pop();

        if (activeList && body.active)
        {
            activeList[activeList.indexOf(body)] = activeList[activeList.length - 1];
            activeList.pop();
            this.dynamicSpatialMap.remove(body);
        }
        else
        {
            this.staticSpatialMap.remove(body);
        }

        this.removeArbitersFromObject(body);

        return true;
    },

    addConstraint : function addConstraintFn(constraint)
    {
        if (constraint.world)
        {
            return false;
        }

        constraint.world = this;
        this.constraints.push(constraint);

        if (constraint.bodyA)
        {
            constraint.bodyA.constraints.push(constraint);
        }
        if (constraint.bodyB)
        {
            constraint.bodyB.constraints.push(constraint);
        }

        var addSleeping = !constraint.active;
        constraint.active = false;

        // Prepare constraint for disjoint set forest algorithm
        // in computeSleeping
        constraint.islandRoot = constraint;
        constraint.islandRank = 0;

        if (!addSleeping)
        {
            this.wakeConstraint(constraint);
        }

        return true;
    },

    removeConstraint : function removeConstraintFn(constraint)
    {
        if (constraint.world !== this)
        {
            return false;
        }

        constraint.world = null;

        var list = this.constraints;
        list[list.indexOf(constraint)] = list[list.length - 1];
        list.pop();

        if (constraint.bodyA)
        {
            list = constraint.bodyA.constraints;
            list[list.indexOf(constraint)] = list[list.length - 1];
            list.pop();
        }
        if (constraint.bodyB)
        {
            list = constraint.bodyA.constraints;
            list[list.indexOf(constraint)] = list[list.length - 1];
            list.pop();
        }

        if (constraint.active)
        {
            list = this.activeConstraints;
            list[list.indexOf(constraint)] = list[list.length - 1];
            list.pop();
        }

        return true;
    },

    flush : function physicsFlushFn()
    {
        // Use public remove# methods to ensure necessary side effects
        // Occur and avoid code duplication.

        while (this.rigidBodies.length > 0)
        {
            this.removeBody(this.rigidBodies[0]);
        }

        while (this.collisionObjects.length > 0)
        {
            this.removeBody(this.collisionObjects[0]);
        }

        while (this.kinematicObjects.length > 0)
        {
            this.removeBody(this.kinematicObjects[0]);
        }

        while (this.constraints.length > 0)
        {
            this.removeConstraint(this.constraints[0]);
        }

        this.timeStamp = 0;
    },

    removeArbitersFromObject : function removeArbitersFromObjectFn(object)
    {
        var arbiters = object.arbiters;
        var worldArbiters = this.activeArbiters;
        while (arbiters.length > 0)
        {
            var arb = arbiters.pop();

            // Remove from other object also.
            var bodyArbiters = (arb.objectA === object) ? arb.objectB.arbiters : arb.objectA.arbiters;
            bodyArbiters[bodyArbiters.indexOf(arb)] = bodyArbiters[bodyArbiters.length - 1];
            bodyArbiters.pop();

            // Remove from world arbiters list
            if (arb.active)
            {
                worldArbiters[worldArbiters.indexOf(arb)] = worldArbiters[worldArbiters.length - 1];
                worldArbiters.pop();
            }

            // Clean up all contacts.
            while (arb.contacts.length > 0)
            {
                var contact = arb.contacts.pop();
                WebGLPhysicsContact.deallocate(contact);
            }

            WebGLPhysicsArbiter.deallocate(arb);
        }
    }
};

WebGLPhysicsWorld.create = function webGLPrivatePhysicsWorldFn(params)
{
    var rets = new WebGLPhysicsWorld();
    var s = new WebGLPrivatePhysicsWorld();
    rets._private = s;
    s._public = rets;

    s.gravity = (params.gravity !== undefined) ? VMath.v3Copy(params.gravity) : VMath.v3Build(0, -10, 0);
    s.maxSubSteps = (params.maxSubSteps !== undefined) ? params.maxSubSteps : 10;

    s.fixedTimeStep = (params.fixedTimeStep !== undefined) ? params.fixedTimeStep : (1 / 60);

    s.variableMinStep = (params.minimumTimeStep !== undefined) ? params.minimumTimeStep : (1 / 70);
    s.variableMaxStep = (params.maximumTimeStep !== undefined) ? params.maximumTimeStep : (1 / 50);

    s.variableStep = (params.variableTimeSteps !== undefined) ? params.variableTimeSteps : false;

    s.maxGiveUpTimeStep = (params.maxGiveUpTimeStep !== undefined) ? params.maxGiveUpTimeStep : 1 / 20;

    // read only properties
    Object.defineProperty(rets, "maxSubSteps", {
        value : s.maxSubSteps,
        enumerable : true
    });

    Object.defineProperty(rets, "maxGiveUpTimeStep", {
        value : s.maxGiveUpTimeStep,
        enumerable : true
    });

    if (!s.variableStep)
    {
        Object.defineProperty(rets, "fixedTimeStep", {
            value : s.fixedTimeStep,
            enumerable : true
        });
    }
    else
    {
        Object.defineProperty(rets, "minimumTimeStep", {
            value : s.minimumTimeStep,
            enumerable : true
        });
        Object.defineProperty(rets, "maximumTimeStep", {
            value : s.maximumTimeStep,
            enumerable : true
        });
    }



    // read only, getter needed to make copy
    Object.defineProperty(rets, "gravity", {
        get : function physicsWorldGetGravity()
        {
            return VMath.v3Copy(this._private.gravity);
        },
        enumerable : true
    });

    s.staticSpatialMap = AABBTree.create(true);
    s.dynamicSpatialMap = AABBTree.create();

    s.collisionObjects = [];
    s.rigidBodies = [];
    s.constraints = [];
    s.kinematicBodies = [];

    // List of active arbiters between shapes.
    s.activeArbiters = [];

    // List of active rigid bodies and constraints.
    s.activeBodies = [];
    s.activeKinematics = [];
    s.activeConstraints = [];

    s.persistantObjectsList = [];
    s.persistantObjectsList2 = [];
    s.persistantTrianglesList = [];
    s.persistantTOIEventList = [];

    s.timeStamp = 0;

    // timing information
    s.performanceData = {
        discrete             : 0,
        sleepComputation     : 0,
        prestepContacts      : 0,
        prestepConstraints   : 0,
        integrateVelocities  : 0,
        warmstartContacts    : 0,
        warmstartConstraints : 0,
        physicsIterations    : 0,
        integratePositions   : 0,
        continuous           : 0
    };

    // read only, no getter needed
    Object.defineProperty(rets, "performanceData", {
        value : s.performanceData,
        enumerable : true
    });

    // Extents used throughout all calls to syncBody
    s.syncExtents = new Float32Array(6);

    return rets;
};


//
// WebGL Physics Device
//
function WebGLPhysicsDevice() {}
WebGLPhysicsDevice.prototype = {

    version : 1,

    vendor : "Turbulenz",

    FILTER_DYNAMIC : 1,
    FILTER_STATIC : 2,
    FILTER_KINEMATIC : 4,
    FILTER_DEBRIS : 8,
    FILTER_TRIGGER : 16,
    FILTER_CHARACTER : 32,
    FILTER_PROJECTILE : 64,
    FILTER_USER_MIN : 128,
    FILTER_USER_MAX : 0x8000,
    FILTER_ALL : 0xffff,

    createDynamicsWorld : function createDynamicsWorldFn(params)
    {
        return WebGLPhysicsWorld.create(params);
    },

    createPlaneShape : function createPlaneShapeFn(params)
    {
        return WebGLPhysicsPlaneShape.create(params);
    },

    createBoxShape : function createBoxShapeFn(params)
    {
        return WebGLPhysicsBoxShape.create(params);
    },

    createSphereShape : function createSphereShapeFn(params)
    {
        return WebGLPhysicsSphereShape.create(params);
    },

    createCapsuleShape : function createCapsuleShapeFn(params)
    {
        return WebGLPhysicsCapsuleShape.create(params);
    },

    createCylinderShape : function createCylinderShapeFn(params)
    {
        return WebGLPhysicsCylinderShape.create(params);
    },

    createConeShape : function createConeShapeFn(params)
    {
        return WebGLPhysicsConeShape.create(params);
    },

    createTriangleMeshShape : function createTriangleMeshShapeFn(params)
    {
        return WebGLPhysicsTriangleMeshShape.create(params);
    },

    createConvexHullShape : function createConvexHullShapeFn(params)
    {
        return WebGLPhysicsConvexHullShape.create(params);
    },

    createTriangleArray : function createTriangleArrayFn(params)
    {
        return WebGLPhysicsTriangleArray.create(params);
    },

    createCollisionObject : function createCollisionObjectFn(params)
    {
        return WebGLPhysicsCollisionObject.create(params);
    },

    createRigidBody : function createRigidBodyFn(params)
    {
        return WebGLPhysicsRigidBody.create(params);
    },

    createPoint2PointConstraint : function createPoint2PointConstraintFn(params)
    {
        return WebGLPhysicsPoint2PointConstraint.create(params);
    },

    createHingeConstraint : function createHingeConstraintFn(params)
    {
        return WebGLPhysicsConstraint.create("HINGE", params);
    },

    createConeTwistConstraint : function createConeTwistConstraintFn(params)
    {
        return WebGLPhysicsConstraint.create("CONETWIST", params);
    },

    create6DOFConstraint : function create6DOFConstraintFn(params)
    {
        return WebGLPhysicsConstraint.create("D6", params);
    },

    createSliderConstraint : function createSliderConstraintFn(params)
    {
        return WebGLPhysicsConstraint.create("SLIDER", params);
    },

    createCharacter : function createCharacterFn(params)
    {
        return WebGLPhysicsCharacter.create(params);
    }
};

WebGLPhysicsDevice.create = function webGLPhysicsDeviceFn(params)
{
    var pd = new WebGLPhysicsDevice();
    pd.genObjectId = 0;
    return pd;
};


// Copyright (c) 2011-2012 Turbulenz Limited
/*global TurbulenzEngine: false*/
/*global SoundTARLoader: false*/
/*global Audio: false*/
/*global VMath: false*/
/*global navigator: false*/
/*global window: false*/
/*global Uint8Array: false*/
/*global console*/



//
// WebGLSound
//
function WebGLSound() {}
WebGLSound.prototype =
{
    version : 1,

    destroy : function soundDestroyFn()
    {
        var audioContext = this.audioContext;
        if (audioContext)
        {
            delete this.audioContext;
            delete this.buffer;
        }
        else
        {
            delete this.audio;
        }
    }
};

WebGLSound.create = function webGLSoundCreateFn(sd, params)
{
    var sound = new WebGLSound();

    var soundPath = params.src;

    sound.name = (params.name || soundPath);
    sound.frequency = 0;
    sound.channels = 0;
    sound.bitrate = 0;
    sound.length = 0;
    sound.compressed = (!params.uncompress);

    var onload = params.onload;

    var data, numSamples, numChannels, samplerRate;

    var audioContext = sd.audioContext;
    if (audioContext)
    {
        sound.audioContext = audioContext;

        var buffer;
        if (soundPath)
        {
            if (!sd.isResourceSupported(soundPath))
            {
                if (onload)
                {
                    onload(null);
                }
                return null;
            }

            var bufferCreated = function bufferCreatedFn(buffer)
            {
                if (buffer)
                {
                    sound.buffer = buffer;
                    sound.frequency = buffer.sampleRate;
                    sound.channels = buffer.numberOfChannels;
                    sound.bitrate = (sound.frequency * sound.channels * 2 * 8);
                    sound.length = buffer.duration;

                    if (onload)
                    {
                        onload(sound, 200);
                    }
                }
                else
                {
                    if (onload)
                    {
                        onload(null);
                    }
                }
            };

            var bufferFailed = function bufferFailedFn()
            {
                if (onload)
                {
                    onload(null);
                }
            };

            data = params.data;
            if (data)
            {
                if (audioContext.decodeAudioData)
                {
                    audioContext.decodeAudioData(data, bufferCreated, bufferFailed);
                }
                else
                {
                    buffer = audioContext.createBuffer(data, false);
                    bufferCreated(buffer);
                }
            }
            else
            {
                var xhr;
                if (window.XMLHttpRequest)
                {
                    xhr = new window.XMLHttpRequest();
                }
                else if (window.ActiveXObject)
                {
                    xhr = new window.ActiveXObject("Microsoft.XMLHTTP");
                }
                else
                {
                    if (onload)
                    {
                        onload(null);
                    }
                    return null;
                }

                xhr.onreadystatechange = function ()
                {
                    if (xhr.readyState === 4)
                    {
                        if (!TurbulenzEngine || !TurbulenzEngine.isUnloading())
                        {
                            var xhrStatus = xhr.status;
                            var xhrStatusText = (xhrStatus !== 0 && xhr.statusText || 'No connection');
                            var response = xhr.response;

                            // Sometimes the browser sets status to 200 OK when the connection is closed
                            // before the message is sent (weird!).
                            // In order to address this we fail any completely empty responses.
                            // Hopefully, nobody will get a valid response with no headers and no body!
                            if (xhr.getAllResponseHeaders() === "" && !response && xhrStatus === 200 && xhrStatusText === 'OK')
                            {
                                if (onload)
                                {
                                    onload(null);
                                }
                            }
                            else if (xhrStatus === 200 || xhrStatus === 0)
                            {
                                if (audioContext.decodeAudioData)
                                {
                                    audioContext.decodeAudioData(response, bufferCreated, bufferFailed);
                                }
                                else
                                {
                                    var buffer = audioContext.createBuffer(response, false);
                                    bufferCreated(buffer);
                                }
                            }
                            else
                            {
                                if (onload)
                                {
                                    onload(null);
                                }
                            }
                        }
                        // break circular reference
                        xhr.onreadystatechange = null;
                        xhr = null;
                    }
                };
                xhr.open("GET", soundPath, true);
                xhr.responseType = "arraybuffer";
                xhr.setRequestHeader("Content-Type", "text/plain");
                xhr.send(null);
            }

            return sound;
        }
        else
        {
            data = params.data;
            if (data)
            {
                numSamples = data.length;
                numChannels = (params.channels || 1);
                samplerRate = params.frequency;

                var contextSampleRate = audioContext.sampleRate;
                var c, channel, i, j;

                if (contextSampleRate === samplerRate)
                {
                    buffer = audioContext.createBuffer(numChannels, (numSamples / numChannels), samplerRate);

                    // De-interleave data
                    for (c = 0; c < numChannels; c += 1)
                    {
                        channel = buffer.getChannelData(c);
                        for (i = c, j = 0; i < numSamples; i += numChannels, j += 1)
                        {
                            channel[j] = data[i];
                        }
                    }
                }
                else
                {
                    var ratio = (samplerRate / contextSampleRate);
                    var bufferLength = (numSamples / (ratio * numChannels));

                    buffer = audioContext.createBuffer(numChannels, bufferLength, contextSampleRate);

                    // De-interleave data
                    for (c = 0; c < numChannels; c += 1)
                    {
                        channel = buffer.getChannelData(c);
                        for (j = 0; j < bufferLength; j += 1)
                        {
                            /*jshint bitwise: false*/
                            channel[j] = data[c + (((j * ratio) | 0) * numChannels)];
                            /*jshint bitwise: true*/
                        }
                    }
                }

                if (buffer)
                {
                    sound.buffer = buffer;
                    sound.frequency = samplerRate;
                    sound.channels = numChannels;
                    sound.bitrate = (samplerRate * numChannels * 2 * 8);
                    sound.length = (numSamples / (samplerRate * numChannels));

                    if (onload)
                    {
                        onload(sound, 200);
                    }

                    return sound;
                }
            }
        }
    }
    else
    {
        var audio;

        if (soundPath)
        {
            var extension = soundPath.slice(-3);

            data = params.data;
            if (data)
            {

                var dataArray;
                if (data instanceof Uint8Array)
                {
                    dataArray = data;
                }
                else
                {
                    dataArray = new Uint8Array(data);
                }

                // Check extension based on data

                if (dataArray[0] === 79 &&
                    dataArray[1] === 103 &&
                    dataArray[2] === 103 &&
                    dataArray[3] === 83)
                {
                    extension = 'ogg';
                    soundPath = 'data:audio/ogg;base64,';
                }
                else if (dataArray[0] === 82 &&
                         dataArray[1] === 73 &&
                         dataArray[2] === 70 &&
                         dataArray[3] === 70)
                {
                    extension = 'wav';
                    soundPath = 'data:audio/wav;base64,';
                }
                else
                {
                    // Assume it's an mp3?
                    extension = 'mp3';
                    soundPath = 'data:audio/mpeg;base64,';
                }

                // Mangle data into a data URI
                soundPath = soundPath + TurbulenzEngine.base64Encode(dataArray);
            }

            if (!(extension in sd.supportedExtensions))
            {
                if (onload)
                {
                    onload(null);
                }
                return null;
            }

            audio = new Audio();

            audio.preload = 'auto';
            audio.autobuffer = true;

            audio.src = soundPath;

            audio.onerror = function loadingSoundFailedFn(e)
            {
                if (onload)
                {
                    onload(null);
                    onload = null;
                }
            };

            sd.addLoadingSound(function checkLoadedFn() {
                if (3 <= audio.readyState)
                {
                    sound.frequency = (audio.sampleRate || audio.mozSampleRate);
                    sound.channels = (audio.channels || audio.mozChannels);
                    sound.bitrate = (sound.frequency * sound.channels * 2 * 8);
                    sound.length = audio.duration;

                    if (audio.buffered &&
                        audio.buffered.length &&
                        0 < audio.buffered.end(0))
                    {
                        if (isNaN(sound.length) ||
                            sound.length === Number.POSITIVE_INFINITY)
                        {
                            sound.length = audio.buffered.end(0);
                        }

                        if (onload)
                        {
                            onload(sound, 200);
                            onload = null;
                        }
                    }
                    else
                    {
                        // Make sure the data is actually loaded
                        var forceLoading = function forceLoadingFn()
                        {
                            audio.pause();
                            audio.removeEventListener('play', forceLoading, false);

                            if (onload)
                            {
                                onload(sound, 200);
                                onload = null;
                            }
                        };
                        audio.addEventListener('play', forceLoading, false);
                        audio.volume = 0;
                        audio.play();
                    }

                    return true;
                }
                return false;
            });

            sound.audio = audio;

            return sound;
        }
        else
        {
            data = params.data;
            if (data)
            {
                audio = new Audio();

                if (audio.mozSetup)
                {
                    numSamples = data.length;
                    numChannels = (params.channels || 1);
                    samplerRate = params.frequency;

                    audio.mozSetup(numChannels, samplerRate);

                    sound.data = data;
                    sound.frequency = samplerRate;
                    sound.channels = numChannels;
                    sound.bitrate = (samplerRate * numChannels * 2 * 8);
                    sound.length = (numSamples / (samplerRate * numChannels));

                    sound.audio = audio;

                    if (onload)
                    {
                        onload(sound, 200);
                    }

                    return sound;
                }
                else
                {
                    audio = null;
                }
            }
        }
    }

    if (onload)
    {
        onload(null);
    }

    return null;
};


//
// WebGLSoundSource
//
function WebGLSoundSource() {}
WebGLSoundSource.prototype =
{
    version : 1,

    // Public API
    play : function sourcePlayFn(sound, seek)
    {
        var audioContext = this.audioContext;
        if (audioContext)
        {
            var bufferNode = this.bufferNode;

            if (this.sound !== sound)
            {
                if (bufferNode)
                {
                    bufferNode.noteOff(0);
                }
            }
            else
            {
                if (bufferNode)
                {
                    if (bufferNode.loop)
                    {
                        return true;
                    }
                }
            }

            bufferNode = this.createBufferNode(sound);

            this.sound = sound;

            if (!this.playing)
            {
                this.playing = true;
                this.paused = false;

                this.sd.addPlayingSource(this);
            }

            if (seek === undefined)
            {
                seek = 0;
            }

            if (0 < seek)
            {
                var buffer = sound.buffer;
                bufferNode.noteGrainOn(0, seek, (buffer.duration - seek));
                this.playStart = (audioContext.currentTime - seek);
            }
            else
            {
                bufferNode.noteOn(0);
                this.playStart = audioContext.currentTime;
            }
        }
        else
        {
            var audio;

            if (this.sound !== sound)
            {
                this.stop();

                if (sound.data)
                {
                    audio = new Audio();
                    audio.mozSetup(sound.channels, sound.frequency);
                }
                else
                {
                    audio = sound.audio.cloneNode(true);
                }

                this.sound = sound;
                this.audio = audio;

                this.updateAudioVolume();

                audio.loop = this.looping;

                audio.addEventListener('ended', this.loopAudio, false);
            }
            else
            {
                if (this.playing && !this.paused)
                {
                    if (this.looping)
                    {
                        return true;
                    }
                }

                audio = this.audio;
            }

            if (!this.playing)
            {
                this.playing = true;
                this.paused = false;

                this.sd.addPlayingSource(this);
            }

            if (seek === undefined)
            {
                seek = 0;
            }

            if (0.05 < Math.abs(audio.currentTime - seek))
            {
                try
                {
                    audio.currentTime = seek;
                }
                catch (e)
                {
                    // There does not seem to be any reliable way of seeking
                }
            }

            if (sound.data)
            {
                audio.mozWriteAudio(sound.data);
            }
            else
            {
                audio.play();
            }
        }

        return true;
    },

    stop : function sourceStopFn()
    {
        var playing = this.playing;
        if (playing)
        {
            this.playing = false;
            this.paused = false;

            var audioContext = this.audioContext;
            if (audioContext)
            {
                this.sound = null;

                var bufferNode = this.bufferNode;
                if (bufferNode)
                {
                    bufferNode.noteOff(0);
                    this.bufferNode = null;
                }
            }
            else
            {
                var audio = this.audio;
                if (audio)
                {
                    this.sound = null;
                    this.audio = null;

                    audio.pause();

                    audio.removeEventListener('ended', this.loopAudio, false);

                    audio = null;
                }
            }

            this.sd.removePlayingSource(this);
        }

        return playing;
    },

    pause : function sourcePauseFn()
    {
        if (this.playing)
        {
            if (!this.paused)
            {
                this.paused = true;

                var audioContext = this.audioContext;
                if (audioContext)
                {
                    this.playPaused = audioContext.currentTime;

                    this.bufferNode.noteOff(0);
                    this.bufferNode = null;
                }
                else
                {
                    this.audio.pause();
                }

                this.sd.removePlayingSource(this);
            }

            return true;
        }

        return false;
    },

    resume : function sourceResumeFn(seek)
    {
        if (this.paused)
        {
            this.paused = false;

            var audioContext = this.audioContext;
            if (audioContext)
            {
                if (seek === undefined)
                {
                    seek = (this.playPaused - this.playStart);
                }

                var bufferNode = this.createBufferNode(this.sound);

                if (0 < seek)
                {
                    var buffer = this.sound.buffer;
                    bufferNode.noteGrainOn(0, seek, (buffer.duration - seek));
                    this.playStart = (audioContext.currentTime - seek);
                }
                else
                {
                    bufferNode.noteOn(0);
                    this.playStart = audioContext.currentTime;
                }
            }
            else
            {
                var audio = this.audio;

                if (seek !== undefined)
                {
                    if (0.05 < Math.abs(audio.currentTime - seek))
                    {
                        try
                        {
                            audio.currentTime = seek;
                        }
                        catch (e)
                        {
                            // There does not seem to be any reliable way of seeking
                        }

                    }
                }

                audio.play();
            }

            this.sd.addPlayingSource(this);

            return true;
        }

        return false;
    },

    rewind : function sourceRewindFn()
    {
        if (this.playing)
        {
            var audioContext = this.audioContext;
            if (audioContext)
            {
                var bufferNode = this.bufferNode;
                if (bufferNode)
                {
                    bufferNode.noteOff(0);
                }

                bufferNode = this.createBufferNode(this.sound);

                bufferNode.noteOn(0);

                this.playStart = audioContext.currentTime;

                return true;
            }
            else
            {
                var audio = this.audio;
                if (audio)
                {
                    audio.currentTime = 0;

                    return true;
                }
            }
        }

        return false;
    },

    clear : function sourceClearFn()
    {
        this.stop();
    },

    setAuxiliarySendFilter : function setAuxiliarySendFilterFn()
    {
    },

    setDirectFilter : function setDirectFilterFn()
    {
    },

    destroy : function sourceDestroyFn()
    {
        this.stop();

        var audioContext = this.audioContext;
        if (audioContext)
        {
            var pannerNode = this.pannerNode;
            if (pannerNode)
            {
                pannerNode.disconnect();
                delete this.pannerNode;
            }

            delete this.audioContext;
        }
    }
};

WebGLSoundSource.create = function webGLSoundSourceCreateFn(sd, id, params)
{
    var source = new WebGLSoundSource();

    source.sd = sd;
    source.id = id;

    source.sound = null;
    source.playing = false;
    source.paused = false;

    var gain = (params.gain || 1);
    var looping = (params.looping || false);
    var pitch = (params.pitch || 1);
    var position, direction, velocity;

    var audioContext = sd.audioContext;
    if (audioContext)
    {
        source.audioContext = audioContext;
        source.bufferNode = null;
        source.playStart = -1;
        source.playPaused = -1;

        var pannerNode = audioContext.createPanner();
        source.pannerNode = pannerNode;
        pannerNode.connect(audioContext.destination);

        if (sd.linearDistance)
        {
            if (typeof pannerNode.LINEAR_DISTANCE === "number")
            {
                pannerNode.distanceModel = pannerNode.LINEAR_DISTANCE;
            }
        }

        pannerNode.panningModel = pannerNode.EQUALPOWER;

        Object.defineProperty(source, "position", {
                get : function getPositionFn() {
                    return position.slice();
                },
                set : function setPositionFn(newPosition) {
                    position = VMath.v3Copy(newPosition, position);
                    if (!source.relative)
                    {
                        pannerNode.setPosition(newPosition[0], newPosition[1], newPosition[2]);
                    }
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "direction", {
                get : function getDirectionFn() {
                    return direction.slice();
                },
                set : function setDirectionFn(newDirection) {
                    direction = VMath.v3Copy(newDirection, direction);
                    pannerNode.setOrientation(newDirection[0], newDirection[1], newDirection[2]);
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "velocity", {
                get : function getVelocityFn() {
                    return velocity.slice();
                },
                set : function setVelocityFn(newVelocity) {
                    velocity = VMath.v3Copy(newVelocity, velocity);
                    pannerNode.setVelocity(newVelocity[0], newVelocity[1], newVelocity[2]);
                },
                enumerable : true,
                configurable : false
            });

        source.createBufferNode = function createBufferNodeFn(sound)
        {
            var buffer = sound.buffer;

            var bufferNode = audioContext.createBufferSource();
            bufferNode.buffer = buffer;
            bufferNode.gain.value = gain;
            bufferNode.loop = looping;
            bufferNode.playbackRate.value = pitch;

            if (1 < sound.channels)
            {
                // We do not support panning of stereo sources
                bufferNode.connect(audioContext.destination);
            }
            else
            {
                bufferNode.connect(pannerNode);
            }

            this.bufferNode = bufferNode;

            return bufferNode;
        };

        Object.defineProperty(source, "gain", {
                get : function getGainFn() {
                    return gain;
                },
                set : function setGainFn(newGain) {
                    gain = newGain;
                    var bufferNode = this.bufferNode;
                    if (bufferNode)
                    {
                        bufferNode.gain.value = newGain;
                    }
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "looping", {
                get : function getLoopingFn() {
                    return looping;
                },
                set : function setLoopingFn(newLooping) {
                    looping = newLooping;
                    var bufferNode = this.bufferNode;
                    if (bufferNode)
                    {
                        bufferNode.loop = newLooping;
                    }
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "pitch", {
                get : function getPitchFn() {
                    return pitch;
                },
                set : function setPitchFn(newPitch) {
                    pitch = newPitch;
                    var bufferNode = this.bufferNode;
                    if (bufferNode)
                    {
                        bufferNode.playbackRate.value = newPitch;
                    }
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "tell", {
            get : function tellFn() {
                if (this.playing)
                {
                    if (this.paused)
                    {
                        return (this.playPaused - this.playStart);
                    }
                    else
                    {
                        return (audioContext.currentTime - this.playStart);
                    }
                }
                else
                {
                    return 0;
                }
            },
            enumerable : true,
            configurable : false
        });

        Object.defineProperty(source, "minDistance", {
                get : function getMinDistanceFn() {
                    return pannerNode.refDistance;
                },
                set : function setMinDistanceFn(minDistance) {
                    pannerNode.refDistance = minDistance;
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "maxDistance", {
                get : function getMaxDistanceFn() {
                    return pannerNode.maxDistance;
                },
                set : function setMaxDistanceFn(maxDistance) {
                    pannerNode.maxDistance = maxDistance;
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "rollOff", {
                get : function getRolloffFactorFn() {
                    return pannerNode.rolloffFactor;
                },
                set : function setRolloffFactorFn(rollOff) {
                    pannerNode.rolloffFactor = rollOff;
                },
                enumerable : true,
                configurable : false
            });
    }
    else
    {
        source.audio = null;

        source.gainFactor = 1;
        source.pitch = pitch;

        source.updateAudioVolume = function updateAudioVolumeFn()
        {
            var audio = this.audio;
            if (audio)
            {
                var volume = Math.min((this.gainFactor * gain), 1);
                audio.volume = volume;
                if (0 >= volume)
                {
                    audio.muted = true;
                }
                else
                {
                    audio.muted = false;
                }
            }
        };

        Object.defineProperty(source, "position", {
                get : function getPositionFn() {
                    return position.slice();
                },
                set : function setPositionFn(newPosition) {
                    position = VMath.v3Copy(newPosition, position);
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "direction", {
                get : function getDirectionFn() {
                    return direction.slice();
                },
                set : function setDirectionFn(newDirection) {
                    direction = VMath.v3Copy(newDirection, direction);
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "velocity", {
                get : function getVelocityFn() {
                    return velocity.slice();
                },
                set : function setVelocityFn(newVelocity) {
                    velocity = VMath.v3Copy(newVelocity, velocity);
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(source, "gain", {
                get : function getGainFn() {
                    return gain;
                },
                set : function setGainFn(newGain) {
                    if (gain !== newGain)
                    {
                        gain = newGain;
                        source.updateAudioVolume();
                    }
                },
                enumerable : true,
                configurable : false
            });

        if (sd.loopingSupported)
        {
            Object.defineProperty(source, "looping", {
                    get : function getLoopingFn() {
                        return looping;
                    },
                    set : function setLoopingFn(newLooping) {
                        looping = newLooping;
                        var audio = source.audio;
                        if (audio)
                        {
                            audio.loop = newLooping;
                        }
                    },
                    enumerable : true,
                    configurable : false
                });

            source.loopAudio = function loopAudioFn() {
                var audio = source.audio;
                if (audio)
                {
                    source.playing = false;
                    source.sd.removePlayingSource(source);
                }
            };
        }
        else
        {
            source.looping = looping;

            source.loopAudio = function loopAudioFn() {
                var audio = source.audio;
                if (audio)
                {
                    if (source.looping)
                    {
                        audio.currentTime = 0;
                        audio.play();
                    }
                    else
                    {
                        source.playing = false;
                        source.sd.removePlayingSource(source);
                    }
                }
            };
        }

        Object.defineProperty(source, "tell", {
            get : function tellFn() {
                var audio = source.audio;
                if (audio)
                {
                    return audio.currentTime;
                }
                else
                {
                    return 0;
                }
            },
            enumerable : true,
            configurable : false
        });
    }

    source.relative = params.relative;
    source.position = (params.position || VMath.v3BuildZero());
    source.direction = (params.direction || VMath.v3BuildZero());
    source.velocity = (params.velocity || VMath.v3BuildZero());
    source.minDistance = (params.minDistance || 1);
    source.maxDistance = (params.maxDistance || Number.MAX_VALUE);
    source.rollOff = (params.rollOff || 1);

    return source;
};


//
// WebGLSoundDevice
//
function WebGLSoundDevice() {}
WebGLSoundDevice.prototype =
{
    version : 1,

    vendor : "Turbulenz",

    // Public API
    createSource : function createSourceFn(params)
    {
        this.lastSourceID += 1;
        return WebGLSoundSource.create(this, this.lastSourceID, params);
    },

    createSound : function createSoundFn(params)
    {
        return WebGLSound.create(this, params);
    },

    loadSoundsArchive : function loadSoundsArchiveFn(params)
    {
        var src = params.src;
        if (typeof SoundTARLoader !== 'undefined')
        {
            SoundTARLoader.create({
                sd: this,
                src : src,
                uncompress : params.uncompress,
                onsoundload : function tarSoundLoadedFn(texture)
                {
                    params.onsoundload(texture);
                },
                onload : function soundTarLoadedFn(success, status)
                {
                    if (params.onload)
                    {
                        params.onload(success);
                    }
                },
                onerror : function soundTarFailedFn()
                {
                    if (params.onload)
                    {
                        params.onload(false);
                    }
                }
            });
            return true;
        }
        else
        {
            TurbulenzEngine.callOnError(
                'Missing archive loader required for ' + src);
            return false;
        }
    },

    createEffect : function createEffectFn(params)
    {
        return null;
    },

    createEffectSlot : function createEffectSlotFn(params)
    {
        return null;
    },

    createFilter : function createFilterFn(params)
    {
        return null;
    },

    update : function soundUpdateFn()
    {
        var sqrt = Math.sqrt;

        var listenerTransform = this.listenerTransform;
        var listenerPosition0 = listenerTransform[9];
        var listenerPosition1 = listenerTransform[10];
        var listenerPosition2 = listenerTransform[11];

        var linearDistance = this.linearDistance;

        var playingSources = this.playingSources;
        var id;
        for (id in playingSources)
        {
            if (playingSources.hasOwnProperty(id))
            {
                var source = playingSources[id];

                // Change volume depending on distance to listener
                var minDistance = source.minDistance;
                var maxDistance = source.maxDistance;
                var position = source.position;
                var position0 = position[0];
                var position1 = position[1];
                var position2 = position[2];

                var distanceSq;
                if (source.relative)
                {
                    distanceSq = ((position0 * position0) + (position1 * position1) + (position2 * position2));
                }
                else
                {
                    var delta0 = (listenerPosition0 - position0);
                    var delta1 = (listenerPosition1 - position1);
                    var delta2 = (listenerPosition2 - position2);
                    distanceSq = ((delta0 * delta0) + (delta1 * delta1) + (delta2 * delta2));
                }

                var gainFactor;
                if (distanceSq <= (minDistance * minDistance))
                {
                    gainFactor = 1;
                }
                else if (distanceSq >= (maxDistance * maxDistance))
                {
                    gainFactor = 0;
                }
                else
                {
                    var distance = sqrt(distanceSq);
                    if (linearDistance)
                    {
                        gainFactor = ((maxDistance - distance) / (maxDistance - minDistance));
                    }
                    else
                    {
                        gainFactor = minDistance / (minDistance + (source.rollOff * (distance - minDistance)));
                    }
                }

                if (source.gainFactor !== gainFactor)
                {
                    source.gainFactor = gainFactor;
                    source.updateAudioVolume();
                }
            }
        }
    },

    isSupported : function isSupportedFn(name)
    {
        if ("FILEFORMAT_OGG" === name)
        {
            return ("ogg" in this.supportedExtensions);
        }
        else if ("FILEFORMAT_MP3" === name)
        {
            return ("mp3" in this.supportedExtensions);
        }
        else if ("FILEFORMAT_WAV" === name)
        {
            return ("wav" in this.supportedExtensions);
        }
        return false;
    },

    // Private API
    addLoadingSound : function addLoadingSoundFn(soundCheckCall)
    {
        var loadingSounds = this.loadingSounds;
        loadingSounds[loadingSounds.length] = soundCheckCall;

        var loadingInterval = this.loadingInterval;
        var that = this;
        if (loadingInterval === null)
        {
            this.loadingInterval = loadingInterval = window.setInterval(function checkLoadingSources() {
                var numLoadingSounds = loadingSounds.length;
                var n = 0;
                do
                {
                    var soundCheck = loadingSounds[n];
                    if (soundCheck())
                    {
                        numLoadingSounds -= 1;
                        if (n < numLoadingSounds)
                        {
                            loadingSounds[n] = loadingSounds[numLoadingSounds];
                        }
                        loadingSounds.length = numLoadingSounds;
                    }
                    else
                    {
                        n += 1;
                    }
                }
                while (n < numLoadingSounds);
                if (numLoadingSounds === 0)
                {
                    window.clearInterval(loadingInterval);
                    that.loadingInterval = null;
                }
            }, 100);
        }
    },

    addPlayingSource : function addPlayingSourceFn(source)
    {
        this.playingSources[source.id] = source;
    },

    removePlayingSource : function removePlayingSourceFn(source)
    {
        delete this.playingSources[source.id];
    },

    isResourceSupported : function isResourceSupportedFn(soundPath)
    {
        var extension = soundPath.slice(-3).toLowerCase();
        return (extension in this.supportedExtensions);
    },

    destroy : function soundDeviceDestroyFn()
    {
        var loadingInterval = this.loadingInterval;
        if (loadingInterval !== null)
        {
            window.clearInterval(loadingInterval);
            this.loadingInterval = null;
        }

        var loadingSounds = this.loadingSounds;
        if (loadingSounds)
        {
            loadingSounds.length = 0;
            this.loadingSounds = null;
        }

        var playingSources = this.playingSources;
        var id;
        if (playingSources)
        {
            for (id in playingSources)
            {
                if (playingSources.hasOwnProperty(id))
                {
                    var source = playingSources[id];
                    if (source)
                    {
                        source.stop();
                    }
                }
            }
            this.playingSources = null;
        }
    }
};

// Constructor function
WebGLSoundDevice.create = function webGLSoundDeviceFn(params)
{
    var sd = new WebGLSoundDevice();

    sd.extensions = '';
    sd.renderer = 'HTML5 Audio';
    sd.aLCVersion = 0;
    sd.aLCExtensions = '';
    sd.aLCEFXVersion = 0;
    sd.aLCMaxAuxiliarySends = 0;

    sd.deviceSpecifier = (params.deviceSpecifier || null);
    sd.frequency = (params.frequency || 44100);
    sd.dopplerFactor = (params.dopplerFactor || 1);
    sd.dopplerVelocity = (params.dopplerVelocity || 1);
    sd.speedOfSound = (params.speedOfSound || 343.29998779296875);
    sd.linearDistance = (params.linearDistance !== undefined ? params.linearDistance : true);

    sd.loadingSounds = [];
    sd.loadingInterval = null;

    sd.playingSources = {};
    sd.lastSourceID = 0;

    var AudioContextConstructor = (window.AudioContext || window.webkitAudioContext);
    if (AudioContextConstructor)
    {
        var audioContext = new AudioContextConstructor();

        sd.renderer = 'WebAudio';
        sd.audioContext = audioContext;
        sd.frequency = audioContext.sampleRate;

        var listener = audioContext.listener;
        listener.dopplerFactor = sd.dopplerFactor;
        listener.speedOfSound = sd.speedOfSound;

        var listenerTransform, listenerVelocity;

        Object.defineProperty(sd, "listenerTransform", {
                get : function getListenerTransformFn() {
                    return listenerTransform.slice();
                },
                set : function setListenerTransformFn(transform) {
                    listenerTransform = VMath.m43Copy(transform, listenerTransform);

                    var position0 = transform[9];
                    var position1 = transform[10];
                    var position2 = transform[11];

                    listener.setPosition(position0, position1, position2);

                    listener.setOrientation(-transform[6], -transform[7], -transform[8],
                                            transform[3], transform[4], transform[5]);
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(sd, "listenerVelocity", {
                get : function getListenerVelocityFn() {
                    return listenerVelocity.slice();
                },
                set : function setListenerVelocityFn(velocity) {
                    listenerVelocity = VMath.v3Copy(velocity, listenerVelocity);
                    listener.setVelocity(velocity[0], velocity[1], velocity[2]);
                },
                enumerable : true,
                configurable : false
            });

        Object.defineProperty(sd, "gain", {
                get : function getGainFn() {
                    return listener.gain;
                },
                set : function setGainFn(newGain) {
                    listener.gain = newGain;
                },
                enumerable : true,
                configurable : false
            });

        sd.update = function soundDeviceUpdate()
        {
            var listenerPosition0 = listenerTransform[9];
            var listenerPosition1 = listenerTransform[10];
            var listenerPosition2 = listenerTransform[11];

            var playingSources = this.playingSources;
            var stopped = [];
            var id;

            for (id in playingSources)
            {
                if (playingSources.hasOwnProperty(id))
                {
                    var source = playingSources[id];

                    if (!source.looping)
                    {
                        var tell = (audioContext.currentTime - source.playStart);
                        if (source.bufferNode.buffer.duration < tell)
                        {
                            source.playing = false;
                            source.sound = null;
                            source.bufferNode = null;
                            stopped[stopped.length] = id;
                            continue;
                        }
                    }

                    if (source.relative)
                    {
                        var position = source.position;
                        var pannerNode = source.pannerNode;
                        pannerNode.setPosition(position[0] + listenerPosition0,
                                               position[1] + listenerPosition1,
                                               position[2] + listenerPosition2);
                    }
                }
            }

            var numStopped = stopped.length;
            var n;
            for (n = 0; n < numStopped; n += 1)
            {
                delete playingSources[stopped[n]];
            }
        };
    }

    sd.listenerTransform = (params.listenerTransform || VMath.m43BuildIdentity());
    sd.listenerVelocity = (params.listenerVelocity || VMath.v3BuildZero());
    sd.listenerGain = (params.listenerGain || 1);

    // Need a temporary Audio element to test capabilities
    var audio = new Audio();

    // Check for looping support
    sd.loopingSupported = (typeof audio.loop === 'boolean');

    // Check for supported extensions
    var supportedExtensions = {};
    if (audio.canPlayType('application/ogg'))
    {
        supportedExtensions.ogg = true;
    }
    if (audio.canPlayType('audio/mp3'))
    {
        supportedExtensions.mp3 = true;
    }
    if (audio.canPlayType('audio/wav'))
    {
        supportedExtensions.wav = true;
    }
    sd.supportedExtensions = supportedExtensions;

    audio = null;

    return sd;
};

// Copyright (c) 2011-2012 Turbulenz Limited
/*global TurbulenzEngine*/
/*global Uint8Array*/
/*global window*/


//
// SoundTARLoader
//
function SoundTARLoader() {}
SoundTARLoader.prototype = {

    version : 1,

    processBytes : function processBytesFn(bytes)
    {
        var offset = 0;
        var totalSize = bytes.length;

        function getString(limit)
        {
            var nextOffset = (offset + limit);
            var s = [];
            var n = 0;
            var c = bytes[offset];
            offset += 1;
            while (c && n < limit)
            {
                s[n] = c;
                n += 1;

                c = bytes[offset];
                offset += 1;
            }
            offset = nextOffset;
            return String.fromCharCode.apply(null, s);
        }

        function getNumber(text)
        {
            /*jshint regexp: false*/
            text = text.replace(/[^\d]/g, '');
            /*jshint regexp: true*/
            return parseInt('0' + text, 8);
        }

        function parseHeader()
        {
            var header = {
                fileName : getString(100),
                mode : getString(8),
                uid : getString(8),
                gid : getString(8),
                length : getNumber(getString(12)),
                lastModified : getString(12),
                checkSum : getString(8),
                fileType : getString(1),
                linkName : getString(100),
                ustarSignature : getString(6),
                ustarVersion : getString(2),
                ownerUserName : getString(32),
                ownerGroupName : getString(32),
                deviceMajor : getString(8),
                deviceMinor : getString(8),
                fileNamePrefix : getString(155)
            };
            offset += 12;
            return header;
        }

        var sd = this.sd;
        var uncompress = this.uncompress;
        var onsoundload = this.onsoundload;
        var result = true;

        // This function is called for each sound in the archive,
        // synchronously if there is an immediate error,
        // asynchronously otherwise.  If one fails, the load result
        // for the whole archive is false.

        this.soundsLoading = 0;
        var that = this;
        function onload(sound)
        {
            that.soundsLoading -= 1;
            if (sound)
            {
                onsoundload(sound);
            }
            else
            {
                result = false;
            }
        }

        var header;
        while ((offset + 512) <= totalSize)
        {
            header = parseHeader();
            if (0 < header.length)
            {
                var fileName;
                if (header.fileName === "././@LongLink")
                {
                    // name in next chunk
                    fileName = getString(256);
                    offset += 256;

                    header = parseHeader();
                }
                else
                {
                    if (header.fileNamePrefix &&
                        header.ustarSignature === "ustar")
                    {
                        fileName = (header.fileNamePrefix + header.fileName);
                    }
                    else
                    {
                        fileName = header.fileName;
                    }
                }
                if ('' === header.fileType || '0' === header.fileType)
                {
                    //console.log('Loading "' + fileName + '" (' + header.length + ')');
                    this.soundsLoading += 1;
                    sd.createSound({
                        src : fileName,
                        data : (sd.audioContext ?
                                bytes.buffer.slice(offset, (offset + header.length)) :
                                bytes.subarray(offset, (offset + header.length))),
                        uncompress : uncompress,
                        onload : onload
                    });
                }
                offset += (Math.floor((header.length + 511) / 512) * 512);
            }
        }

        bytes = null;

        return result;
    },

    isValidHeader : function isValidHeaderFn(header)
    {
        return true;
    }
};

// Constructor function
SoundTARLoader.create = function tgaLoaderFn(params)
{
    var loader = new SoundTARLoader();
    loader.sd = params.sd;
    loader.uncompress = params.uncompress;
    loader.onsoundload = params.onsoundload;
    loader.onload = params.onload;
    loader.onerror = params.onerror;
    loader.soundsLoading = 0;

    var src = params.src;
    if (src)
    {
        loader.src = src;
        var xhr;
        if (window.XMLHttpRequest)
        {
            xhr = new window.XMLHttpRequest();
        }
        else if (window.ActiveXObject)
        {
            xhr = new window.ActiveXObject("Microsoft.XMLHTTP");
        }
        else
        {
            if (params.onerror)
            {
                params.onerror("No XMLHTTPRequest object could be created");
            }
            return null;
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4)
            {
                if (!TurbulenzEngine || !TurbulenzEngine.isUnloading())
                {
                    var xhrStatus = xhr.status;
                    var xhrStatusText = xhr.status !== 0 && xhr.statusText || 'No connection';

                    // Sometimes the browser sets status to 200 OK when the connection is closed
                    // before the message is sent (weird!).
                    // In order to address this we fail any completely empty responses.
                    // Hopefully, nobody will get a valid response with no headers and no body!
                    if (xhr.getAllResponseHeaders() === "" && xhr.responseText === "" && xhrStatus === 200 && xhrStatusText === 'OK')
                    {
                        loader.onload('', 0);
                        return;
                    }

                    if (xhrStatus === 200 || xhrStatus === 0)
                    {
                        var buffer;
                        if (xhr.responseType === "arraybuffer")
                        {
                            buffer = xhr.response;
                        }
                        else if (xhr.mozResponseArrayBuffer)
                        {
                            buffer = xhr.mozResponseArrayBuffer;
                        }
                        else //if (xhr.responseText !== null)
                        {
                            /*jshint bitwise: false*/
                            var text = xhr.responseText;
                            var numChars = text.length;
                            var i;
                            buffer = [];
                            buffer.length = numChars;
                            for (i = 0; i < numChars; i += 1)
                            {
                                buffer[i] = (text.charCodeAt(i) & 0xff);
                            }
                            /*jshint bitwise: true*/
                        }

                        // Fix for loading from file
                        if (xhrStatus === 0 && window.location.protocol === "file:")
                        {
                            xhrStatus = 200;
                        }

                        // processBytes returns false if any of the
                        // entries in the archive was not supported or
                        // couldn't be loaded as a sound.

                        var archiveResult =
                            loader.processBytes(new Uint8Array(buffer));

                        // Wait until all sounds have been loaded (or
                        // failed) and return the result.

                        if (loader.onload)
                        {
                            var callOnload = function callOnloadFn()
                            {
                                if (0 < loader.soundsLoading)
                                {
                                    if (!TurbulenzEngine || !TurbulenzEngine.isUnloading())
                                    {
                                        window.setTimeout(callOnloadFn, 100);
                                    }
                                }
                                else
                                {
                                    loader.onload(archiveResult, xhrStatus);
                                }
                            };
                            callOnload();
                        }
                    }
                    else
                    {
                        if (loader.onerror)
                        {
                            loader.onerror();
                        }
                    }
                }
                // break circular reference
                xhr.onreadystatechange = null;
                xhr = null;
            }
        };
        xhr.open("GET", params.src, true);
        if (xhr.hasOwnProperty && xhr.hasOwnProperty("responseType"))
        {
            xhr.responseType = "arraybuffer";
        }
        else if (xhr.overrideMimeType)
        {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        }
        else
        {
            xhr.setRequestHeader("Content-Type", "text/plain; charset=x-user-defined");
        }
        xhr.send(null);
    }

    return loader;
};

// Copyright (c) 2011-2012 Turbulenz Limited
/*global TurbulenzEngine*/
/*global Uint8Array*/
/*global window*/


//
// TARLoader
//
function TARLoader() {}
TARLoader.prototype = {

    version : 1,

    processBytes : function processBytesFn(bytes)
    {
        var offset = 0;
        var totalSize = bytes.length;

        function getString(limit)
        {
            var nextOffset = (offset + limit);
            var s = [];
            var n = 0;
            var c = bytes[offset];
            offset += 1;
            while (c && n < limit)
            {
                s[n] = c;
                n += 1;

                c = bytes[offset];
                offset += 1;
            }
            offset = nextOffset;
            return String.fromCharCode.apply(null, s);
        }

        function getNumber(text)
        {
            /*jshint regexp: false*/
            text = text.replace(/[^\d]/g, '');
            /*jshint regexp: true*/
            return parseInt('0' + text, 8);
        }

        function parseHeader()
        {
            var header = {
                fileName : getString(100),
                mode : getString(8),
                uid : getString(8),
                gid : getString(8),
                length : getNumber(getString(12)),
                lastModified : getString(12),
                checkSum : getString(8),
                fileType : getString(1),
                linkName : getString(100),
                ustarSignature : getString(6),
                ustarVersion : getString(2),
                ownerUserName : getString(32),
                ownerGroupName : getString(32),
                deviceMajor : getString(8),
                deviceMinor : getString(8),
                fileNamePrefix : getString(155)
            };
            offset += 12;
            return header;
        }

        var gd = this.gd;
        var mipmaps = this.mipmaps;
        var ontextureload = this.ontextureload;
        var result = true;

        this.texturesLoading = 0;
        var that = this;
        function onload(texture)
        {
            that.texturesLoading -= 1;
            if (texture)
            {
                ontextureload(texture);
            }
            else
            {
                offset = totalSize;
                result = false;
            }
        }

        var header;
        while ((offset + 512) <= totalSize)
        {
            header = parseHeader();
            if (0 < header.length)
            {
                var fileName;
                if (header.fileName === "././@LongLink")
                {
                    // name in next chunk
                    fileName = getString(256);
                    offset += 256;

                    header = parseHeader();
                }
                else
                {
                    if (header.fileNamePrefix &&
                        header.ustarSignature === "ustar")
                    {
                        fileName = (header.fileNamePrefix + header.fileName);
                    }
                    else
                    {
                        fileName = header.fileName;
                    }
                }
                if ('' === header.fileType || '0' === header.fileType)
                {
                    //console.log('Loading "' + fileName + '" (' + header.length + ')');
                    this.texturesLoading += 1;
                    gd.createTexture({
                        src : fileName,
                        data : bytes.subarray(offset, (offset + header.length)),
                        mipmaps : mipmaps,
                        onload : onload
                    });
                }
                offset += (Math.floor((header.length + 511) / 512) * 512);
            }
        }

        bytes = null;

        return result;
    },

    isValidHeader : function isValidHeaderFn(header)
    {
        return true;
    }
};

// Constructor function
TARLoader.create = function tgaLoaderFn(params)
{
    var loader = new TARLoader();
    loader.gd = params.gd;
    loader.mipmaps = params.mipmaps;
    loader.ontextureload = params.ontextureload;
    loader.onload = params.onload;
    loader.onerror = params.onerror;
    loader.texturesLoading = 0;

    var src = params.src;
    if (src)
    {
        loader.src = src;
        var xhr;
        if (window.XMLHttpRequest)
        {
            xhr = new window.XMLHttpRequest();
        }
        else if (window.ActiveXObject)
        {
            xhr = new window.ActiveXObject("Microsoft.XMLHTTP");
        }
        else
        {
            if (params.onerror)
            {
                params.onerror("No XMLHTTPRequest object could be created");
            }
            return null;
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4)
            {
                if (!TurbulenzEngine || !TurbulenzEngine.isUnloading())
                {
                    var xhrStatus = xhr.status;
                    var xhrStatusText = xhr.status !== 0 && xhr.statusText || 'No connection';

                    // Sometimes the browser sets status to 200 OK when the connection is closed
                    // before the message is sent (weird!).
                    // In order to address this we fail any completely empty responses.
                    // Hopefully, nobody will get a valid response with no headers and no body!
                    if (xhr.getAllResponseHeaders() === "" && xhr.responseText === "" && xhrStatus === 200 && xhrStatusText === 'OK')
                    {
                        loader.onload('', 0);
                        return;
                    }

                    if (xhrStatus === 200 || xhrStatus === 0)
                    {
                        var buffer;
                        if (xhr.responseType === "arraybuffer")
                        {
                            buffer = xhr.response;
                        }
                        else if (xhr.mozResponseArrayBuffer)
                        {
                            buffer = xhr.mozResponseArrayBuffer;
                        }
                        else //if (xhr.responseText !== null)
                        {
                            /*jshint bitwise: false*/
                            var text = xhr.responseText;
                            var numChars = text.length;
                            buffer = [];
                            buffer.length = numChars;
                            for (var i = 0; i < numChars; i += 1)
                            {
                                buffer[i] = (text.charCodeAt(i) & 0xff);
                            }
                            /*jshint bitwise: true*/
                        }

                        // Fix for loading from file
                        if (xhrStatus === 0 && window.location.protocol === "file:")
                        {
                            xhrStatus = 200;
                        }

                        if (loader.processBytes(new Uint8Array(buffer)))
                        {
                            if (loader.onload)
                            {
                                var callOnload = function callOnloadFn()
                                {
                                    if (0 < loader.texturesLoading)
                                    {
                                        if (!TurbulenzEngine || !TurbulenzEngine.isUnloading())
                                        {
                                            window.setTimeout(callOnloadFn, 100);
                                        }
                                    }
                                    else
                                    {
                                        loader.onload(true, xhrStatus);
                                    }
                                };
                                callOnload();
                            }
                        }
                        else
                        {
                            if (loader.onerror)
                            {
                                loader.onerror();
                            }
                        }
                    }
                    else
                    {
                        if (loader.onerror)
                        {
                            loader.onerror();
                        }
                    }
                }
                // break circular reference
                xhr.onreadystatechange = null;
                xhr = null;
            }
        };
        xhr.open("GET", params.src, true);
        if (xhr.hasOwnProperty && xhr.hasOwnProperty("responseType"))
        {
            xhr.responseType = "arraybuffer";
        }
        else if (xhr.overrideMimeType)
        {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        }
        else
        {
            xhr.setRequestHeader("Content-Type", "text/plain; charset=x-user-defined");
        }
        xhr.send(null);
    }

    return loader;
};

// Copyright (c) 2011-2012 Turbulenz Limited
/*global TurbulenzEngine*/
/*global Uint8Array*/
/*global Uint16Array*/
/*global window*/


//
// TGALoader
//
function TGALoader() {}
TGALoader.prototype = {

    version : 1,

    TYPE_MAPPED      : 1,
    TYPE_COLOR       : 2,
    TYPE_GRAY        : 3,
    TYPE_MAPPED_RLE  : 9,
    TYPE_COLOR_RLE   : 10,
    TYPE_GRAY_RLE    : 11,

    DESC_ABITS       : 0x0f,
    DESC_HORIZONTAL  : 0x10,
    DESC_VERTICAL    : 0x20,

    SIGNATURE        : "TRUEVISION-XFILE",

    RLE_PACKETSIZE       : 0x80,

    processBytes : function processBytesFn(bytes)
    {
        var header = this.parseHeader(bytes);
        if (!this.isValidHeader(header))
        {
            return;
        }

        var offset = 18;

        this.width  = header.width;
        this.height = header.height;

        this.bytesPerPixel = Math.floor(header.bpp / 8);

        /*jshint bitwise: false*/
        this.horzRev = (header.descriptor & this.DESC_HORIZONTAL);
        this.vertRev = !(header.descriptor & this.DESC_VERTICAL);
        /*jshint bitwise: true*/

        var rle = false;

        var gd = this.gd;
        switch (header.imageType)
        {
        case this.TYPE_MAPPED_RLE:
            rle = true;
            if (header.colorMapSize > 24)
            {
                this.format = gd.PIXELFORMAT_R8G8B8A8;
            }
            else if (header.colorMapSize > 16)
            {
                this.format = gd.PIXELFORMAT_R8G8B8;
            }
            else
            {
                this.format = gd.PIXELFORMAT_R5G5B5A1;
            }
            break;

        case this.TYPE_MAPPED:
            if (header.colorMapSize > 24)
            {
                this.format = gd.PIXELFORMAT_R8G8B8A8;
            }
            else if (header.colorMapSize > 16)
            {
                this.format = gd.PIXELFORMAT_R8G8B8;
            }
            else
            {
                this.format = gd.PIXELFORMAT_R5G5B5A1;
            }
            break;

        case this.TYPE_GRAY_RLE:
            rle = true;
            this.format = gd.PIXELFORMAT_L8;
            break;

        case this.TYPE_GRAY:
            this.format = gd.PIXELFORMAT_L8;
            break;

        case this.TYPE_COLOR_RLE:
            rle = true;
            switch (this.bytesPerPixel)
            {
            case 4:
                this.format = gd.PIXELFORMAT_R8G8B8A8;
                break;

            case 3:
                this.format = gd.PIXELFORMAT_R8G8B8;
                break;

            case 2:
                this.format = gd.PIXELFORMAT_R5G5B5A1;
                break;

            default:
                return;
            }
            break;

        case this.TYPE_COLOR:
            switch (this.bytesPerPixel)
            {
            case 4:
                this.format = gd.PIXELFORMAT_R8G8B8A8;
                break;

            case 3:
                this.format = gd.PIXELFORMAT_R8G8B8;
                break;

            case 2:
                this.format = gd.PIXELFORMAT_R5G5B5A1;
                break;

            default:
                return;
            }
            break;

        default:
            return;
        }

        // Skip the image ID field.
        if (header.idLength)
        {
            offset += header.idLength;
            if (offset > bytes.length)
            {
                return;
            }
        }

        if (this.TYPE_MAPPED_RLE === header.imageType ||
            this.TYPE_MAPPED === header.imageType)
        {
            if (header.colorMapType !== 1)
            {
                return;
            }
        }
        else if (header.colorMapType !== 0)
        {
            return;
        }

        if (header.colorMapType === 1)
        {
            var index  = header.colorMapIndex;
            var length = header.colorMapLength;

            if (length === 0)
            {
                return;
            }

            var pelbytes = Math.floor(header.colorMapSize / 8);
            var numColors = (length + index);
            var colorMap = [];
            colorMap.length = (numColors * pelbytes);

            this.colorMap = colorMap;
            this.colorMapBytesPerPixel = pelbytes;

            // Zero the entries up to the beginning of the map
            var j;
            for (j = 0; j < (index * pelbytes); j += 1)
            {
                colorMap[j] = 0;
            }

            // Read in the rest of the colormap
            for (j = (index * pelbytes); j < (index * pelbytes); j += 1, offset += 1)
            {
                colorMap[j] = bytes[offset];
            }

            offset += (length * pelbytes);
            if (offset > bytes.length)
            {
                return;
            }

            if (pelbytes >= 3)
            {
                // Rearrange the colors from BGR to RGB
                for (j = (index * pelbytes); j < (length * pelbytes); j += pelbytes)
                {
                    var tmp = colorMap[j];
                    colorMap[j] = colorMap[j + 2];
                    colorMap[j + 2] = tmp;
                }
            }
        }

        var size = (this.width * this.height * this.bytesPerPixel);

        if (bytes.length < (offset + size))
        {
            return;
        }

        var data = bytes.subarray(offset);
        bytes = null;

        if (rle)
        {
            data = this.expandRLE(data);
        }

        if (this.horzRev)
        {
            this.flipHorz(data);
        }

        if (this.vertRev)
        {
            this.flipVert(data);
        }

        if (this.colorMap)
        {
            data = this.expandColorMap(data);
        }
        else if (2 < this.bytesPerPixel)
        {
            this.convertBGR2RGB(data);
        }
        else if (2 === this.bytesPerPixel)
        {
            data = this.convertARGB2RGBA(data);
        }

        this.data = data;
    },

    parseHeader : function parseHeaderFn(bytes)
    {
        /*jshint bitwise: false*/
        var header = {
            idLength : bytes[0],
            colorMapType : bytes[1],

            imageType : bytes[2],

            colorMapIndex : ((bytes[4] << 8) | bytes[3]),
            colorMapLength : ((bytes[6] << 8) | bytes[5]),

            colorMapSize : bytes[7],

            xOrigin : ((bytes[9] << 8) | bytes[8]),
            yOrigin : ((bytes[11] << 8) | bytes[10]),

            width : ((bytes[13] << 8) | bytes[12]),
            height : ((bytes[15] << 8) | bytes[14]),

            bpp : bytes[16],

            // Image descriptor:
            // 3-0: attribute bpp
            // 4:   left-to-right
            // 5:   top-to-bottom
            // 7-6: zero
            descriptor : bytes[17]
        };
        /*jshint bitwise: true*/
        return header;
    },

    isValidHeader : function isValidHeaderFn(header)
    {
        if (this.TYPE_MAPPED_RLE === header.imageType ||
            this.TYPE_MAPPED === header.imageType)
        {
            if (header.colorMapType !== 1)
            {
                return false;
            }
        }
        else if (header.colorMapType !== 0)
        {
            return false;
        }

        if (header.colorMapType === 1)
        {
            if (header.colorMapLength === 0)
            {
                return false;
            }
        }

        switch (header.imageType)
        {
        case this.TYPE_MAPPED_RLE:
        case this.TYPE_MAPPED:
            break;

        case this.TYPE_GRAY_RLE:
        case this.TYPE_GRAY:
            break;

        case this.TYPE_COLOR_RLE:
        case this.TYPE_COLOR:
            switch (Math.floor(header.bpp / 8))
            {
            case 4:
            case 3:
            case 2:
                break;

            default:
                return false;
            }
            break;

        default:
            return false;
        }

        if (16384 < header.width)
        {
            return false;
        }

        if (16384 < header.height)
        {
            return false;
        }

        return true;
    },

    expandRLE : function expandRLEFn(data)
    {
        var pelbytes = this.bytesPerPixel;
        var width = this.width;
        var height = this.height;
        var datasize = pelbytes;
        var size = (width * height * pelbytes);
        var RLE_PACKETSIZE = this.RLE_PACKETSIZE;
        var dst = new Uint8Array(size);
        var src = 0, dest = 0, n, k;
        do
        {
            var count = data[src];
            src += 1;

            /*jshint bitwise: false*/
            var bytes = (((count & ~RLE_PACKETSIZE) + 1) * datasize);

            if (count & RLE_PACKETSIZE)
            {
                // Optimized case for single-byte encoded data
                if (datasize === 1)
                {
                    var r = data[src];
                    src += 1;

                    for (n = 0; n < bytes; n += 1)
                    {
                        dst[dest + k] = r;
                    }
                }
                else
                {
                    // Fill the buffer with the next value
                    for (n = 0; n < datasize; n += 1)
                    {
                        dst[dest + n] = data[src + n];
                    }
                    src += datasize;

                    for (k = datasize; k < bytes; k += datasize)
                    {
                        for (n = 0; n < datasize; n += 1)
                        {
                            dst[dest + k + n] = dst[dest + n];
                        }
                    }
                }
            }
            else
            {
                // Read in the buffer
                for (n = 0; n < bytes; n += 1)
                {
                    dst[dest + n] = data[src + n];
                }
                src += bytes;
            }
            /*jshint bitwise: true*/

            dest += bytes;
        }
        while (dest < size);

        return dst;
    },

    expandColorMap : function expandColorMapFn(data)
    {
        // Unpack image
        var pelbytes = this.bytesPerPixel;
        var width = this.width;
        var height = this.height;
        var size = (width * height * pelbytes);
        var dst = new Uint8Array(size);
        var dest = 0, src = 0;
        var palette = this.colorMap;
        delete this.colorMap;

        if (pelbytes === 2 || pelbytes === 3 || pelbytes === 4)
        {
            do
            {
                var index = (data[src] * pelbytes);
                src += 1;

                for (var n = 0; n < pelbytes; n += 1)
                {
                    dst[dest] = palette[index + n];
                    dest += 1;
                }
            }
            while (dest < size);
        }

        if (pelbytes === 2)
        {
            dst = this.convertARGB2RGBA(dst);
        }

        return dst;
    },

    flipHorz : function flipHorzFn(data)
    {
        var pelbytes = this.bytesPerPixel;
        var width = this.width;
        var height = this.height;
        var halfWidth = Math.floor(width / 2);
        var pitch = (width * pelbytes);
        for (var i = 0; i < height; i += 1)
        {
            for (var j = 0; j < halfWidth; j += 1)
            {
                for (var k = 0; k < pelbytes; k += 1)
                {
                    var tmp = data[j * pelbytes + k];
                    data[j * pelbytes + k] = data[(width - j - 1) * pelbytes + k];
                    data[(width - j - 1) * pelbytes + k] = tmp;
                }
            }
            data += pitch;
        }
    },

    flipVert : function flipVertFn(data)
    {
        var pelbytes = this.bytesPerPixel;
        var width = this.width;
        var height = this.height;
        var halfHeight = Math.floor(height / 2);
        var pitch = (width * pelbytes);
        for (var i = 0; i < halfHeight; i += 1)
        {
            var srcRow = (i * pitch);
            var destRow = ((height - i - 1) * pitch);
            for (var j = 0; j < pitch; j += 1)
            {
                var tmp = data[srcRow + j];
                data[srcRow + j] = data[destRow + j];
                data[destRow + j] = tmp;
            }
        }
    },

    convertBGR2RGB : function convertBGR2RGBFn(data)
    {
        // Rearrange the colors from BGR to RGB
        var bytesPerPixel = this.bytesPerPixel;
        var width = this.width;
        var height = this.height;
        var size = (width * height * bytesPerPixel);
        var offset = 0;
        do
        {
            var tmp = data[offset];
            data[offset] = data[offset + 2];
            data[offset + 2] = tmp;
            offset += bytesPerPixel;
        }
        while (offset < size);
    },

    convertARGB2RGBA : function convertARGB2RGBAFn(data)
    {
        // Rearrange the colors from ARGB to RGBA (2 bytes)
        var bytesPerPixel = this.bytesPerPixel;
        if (bytesPerPixel === 2)
        {
            var width = this.width;
            var height = this.height;
            var size = (width * height * bytesPerPixel);
            var dst = new Uint16Array(width * height);
            var src = 0, dest = 0;
            var r, g, b, a;

            /*jshint bitwise: false*/
            var mask = ((1 << 5) - 1);
            var blueMask = mask;
            var greenMask = (mask << 5);
            var redMask = (mask << 10);
            //var alphaMask = (1 << 15);
            do
            {
                var value = ((src[1] << 8) | src[0]);
                src += 2;
                b = (value & blueMask) << 1;
                g = (value & greenMask) << 1;
                r = (value & redMask) << 1;
                a = (value >> 15);
                dst[dest] = r | g | b | a;
                dest += 1;
            }
            while (src < size);
            /*jshint bitwise: true*/

            return dst;
        }
        else
        {
            return data;
        }
    }
};

// Constructor function
TGALoader.create = function tgaLoaderFn(params)
{
    var loader = new TGALoader();
    loader.gd = params.gd;
    loader.onload = params.onload;
    loader.onerror = params.onerror;

    var src = params.src;
    if (src)
    {
        loader.src = src;
        var xhr;
        if (window.XMLHttpRequest)
        {
            xhr = new window.XMLHttpRequest();
        }
        else if (window.ActiveXObject)
        {
            xhr = new window.ActiveXObject("Microsoft.XMLHTTP");
        }
        else
        {
            if (params.onerror)
            {
                params.onerror("No XMLHTTPRequest object could be created");
            }
            return null;
        }

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4)
            {
                if (!TurbulenzEngine || !TurbulenzEngine.isUnloading())
                {
                    var xhrStatus = xhr.status;
                    var xhrStatusText = xhr.status !== 0 && xhr.statusText || 'No connection';

                    // Sometimes the browser sets status to 200 OK when the connection is closed
                    // before the message is sent (weird!).
                    // In order to address this we fail any completely empty responses.
                    // Hopefully, nobody will get a valid response with no headers and no body!
                    if (xhr.getAllResponseHeaders() === "" && xhr.responseText === "" && xhrStatus === 200 && xhrStatusText === 'OK')
                    {
                        loader.onload('', 0);
                        return;
                    }

                    if (xhrStatus === 200 || xhrStatus === 0)
                    {
                        var buffer;
                        if (xhr.responseType === "arraybuffer")
                        {
                            buffer = xhr.response;
                        }
                        else if (xhr.mozResponseArrayBuffer)
                        {
                            buffer = xhr.mozResponseArrayBuffer;
                        }
                        else //if (xhr.responseText !== null)
                        {
                            /*jshint bitwise: false*/
                            var text = xhr.responseText;
                            var numChars = text.length;
                            buffer = [];
                            buffer.length = numChars;
                            for (var i = 0; i < numChars; i += 1)
                            {
                                buffer[i] = (text.charCodeAt(i) & 0xff);
                            }
                            /*jshint bitwise: true*/
                        }

                        // Fix for loading from file
                        if (xhrStatus === 0 && window.location.protocol === "file:")
                        {
                            xhrStatus = 200;
                        }

                        loader.processBytes(new Uint8Array(buffer));
                        if (loader.data)
                        {
                            if (loader.onload)
                            {
                                loader.onload(loader.data, loader.width, loader.height, loader.format, xhrStatus);
                            }
                        }
                        else
                        {
                            if (loader.onerror)
                            {
                                loader.onerror();
                            }
                        }
                    }
                    else
                    {
                        if (loader.onerror)
                        {
                            loader.onerror();
                        }
                    }
                }
                // break circular reference
                xhr.onreadystatechange = null;
                xhr = null;
            }
        };
        xhr.open("GET", params.src, true);
        if (xhr.hasOwnProperty && xhr.hasOwnProperty("responseType"))
        {
            xhr.responseType = "arraybuffer";
        }
        else if (xhr.overrideMimeType)
        {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        }
        else
        {
            xhr.setRequestHeader("Content-Type", "text/plain; charset=x-user-defined");
        }
        xhr.send(null);
    }
    else
    {
        loader.processBytes(params.data);
        if (loader.data)
        {
            if (loader.onload)
            {
                loader.onload(loader.data, loader.width, loader.height, loader.format);
            }
        }
        else
        {
            if (loader.onerror)
            {
                loader.onerror();
            }
        }
    }

    return loader;
};

// Copyright (c) 2012 Turbulenz Limited

function Touch() {}

Touch.create = function touchCreateFn(params)
{
    var touch = new Touch();

    touch.force         = params.force;
    touch.identifier    = params.identifier;
    touch.isGameTouch   = params.isGameTouch;
    touch.positionX     = params.positionX;
    touch.positionY     = params.positionY;
    touch.radiusX       = params.radiusX;
    touch.radiusY       = params.radiusY;
    touch.rotationAngle = params.rotationAngle;

    return touch;
};

// Copyright (c) 2012 Turbulenz Limited

function TouchEvent() {}

TouchEvent.create = function touchEventCreateFn(params)
{
    var touchEvent = new TouchEvent();

    touchEvent.changedTouches   = params.changedTouches;
    touchEvent.gameTouches      = params.gameTouches;
    touchEvent.touches          = params.touches;

    return touchEvent;
};

// Copyright (c) 2011-2012 Turbulenz Limited
/*global VMathArrayConstructor: true*/
/*global VMath*/
/*global WebGLGraphicsDevice*/
/*global WebGLInputDevice*/
/*global WebGLSoundDevice*/
/*global WebGLPhysicsDevice*/
/*global WebGLNetworkDevice*/
/*global Float32Array*/
/*global console*/
/*global window*/


//
// WebGLTurbulenzEngine
//
function WebGLTurbulenzEngine() {}
WebGLTurbulenzEngine.prototype = {

    version : '0.23.1.0',

    setInterval: function (f, t)
    {
        var that = this;
        return window.setInterval(function () {
                that.updateTime();
                f();
            }, t);
    },

    clearInterval: function (i)
    {
        return window.clearInterval(i);
    },

    createGraphicsDevice: function (params)
    {
        if (this.graphicsDevice)
        {
            this.callOnError('GraphicsDevice already created');
            return null;
        }
        else
        {
            var graphicsDevice = WebGLGraphicsDevice.create(this.canvas, params);
            this.graphicsDevice = graphicsDevice;
            return graphicsDevice;
        }
    },

    createPhysicsDevice: function (params)
    {
        if (this.physicsDevice)
        {
            this.callOnError('PhysicsDevice already created');
            return null;
        }
        else
        {
            var physicsDevice;
            var plugin = this.getPluginObject();
            if (plugin)
            {
                physicsDevice = plugin.createPhysicsDevice(params);
            }
            else
            {
                physicsDevice = WebGLPhysicsDevice.create(params);
            }
            this.physicsDevice = physicsDevice;
            return physicsDevice;
        }
    },

    createSoundDevice: function (params)
    {
        if (this.soundDevice)
        {
            this.callOnError('SoundDevice already created');
            return null;
        }
        else
        {
            var soundDevice;
            var plugin = this.getPluginObject();
            if (plugin)
            {
                soundDevice = plugin.createSoundDevice(params);
            }
            else
            {
                soundDevice = WebGLSoundDevice.create(params);
            }
            this.soundDevice = soundDevice;
            return soundDevice;
        }
    },

    createInputDevice: function (params)
    {
        if (this.inputDevice)
        {
            this.callOnError('InputDevice already created');
            return null;
        }
        else
        {
            var inputDevice = WebGLInputDevice.create(this.canvas, params);
            this.inputDevice = inputDevice;
            return inputDevice;
        }
    },

    createNetworkDevice: function (params)
    {
        if (this.networkDevice)
        {
            throw 'NetworkDevice already created';
        }
        else
        {
            var networkDevice = WebGLNetworkDevice.create(params);
            this.networkDevice = networkDevice;
            return networkDevice;
        }
    },

    createMathDevice: function (params)
    {
        // Check if the browser supports using apply with Float32Array
        try
        {
            var testVector = new Float32Array([1, 2, 3]);

            VMath.v3Build.apply(VMath, testVector);

            // Clamp FLOAT_MAX
            testVector[0] = VMath.FLOAT_MAX;
            VMath.FLOAT_MAX = testVector[0];
        }
        catch (e)
        {
        }

        return VMath;
    },

    createNativeMathDevice: function (params)
    {
        return VMath;
    },

    getGraphicsDevice: function ()
    {
        var graphicsDevice = this.graphicsDevice;
        if (graphicsDevice === null)
        {
            this.callOnError("GraphicsDevice not created yet.");
        }
        return graphicsDevice;
    },

    getPhysicsDevice: function ()
    {
        return this.physicsDevice;
    },

    getSoundDevice: function ()
    {
        return this.soundDevice;
    },

    getInputDevice: function ()
    {
        return this.inputDevice;
    },

    getNetworkDevice: function ()
    {
        return this.networkDevice;
    },

    getMathDevice: function ()
    {
        return VMath;
    },

    getNativeMathDevice: function ()
    {
        return VMath;
    },

    flush: function ()
    {

    },

    run: function ()
    {

    },

    encrypt: function (msg)
    {
        return msg;
    },

    decrypt: function (msg)
    {
        return msg;
    },

    generateSignature: function (msg)
    {
        return null;
    },

    verifySignature: function (msg, sig)
    {
        return true;
    },

    onerror: function (msg)
    {
        console.error(msg);
    },

    onwarning: function (msg)
    {
        console.warn(msg);
    },

    getSystemInfo: function ()
    {
        return this.systemInfo;
    },

    request: function (url, callback)
    {
        var that = this;

        var xhr;
        if (window.XMLHttpRequest)
        {
            xhr = new window.XMLHttpRequest();
        }
        else if (window.ActiveXObject)
        {
            xhr = new window.ActiveXObject("Microsoft.XMLHTTP");
        }
        else
        {
            that.callOnError("No XMLHTTPRequest object could be created");
            return;
        }

        function httpRequestCallback()
        {
            if (xhr.readyState === 4) /* 4 == complete */
            {
                if (!that.isUnloading())
                {
                    var xhrResponseText = xhr.responseText;
                    var xhrStatus = xhr.status;

                    if ("" === xhrResponseText)
                    {
                        xhrResponseText = null;
                    }

                    if (null === xhr.getResponseHeader("Content-Type") &&
                        "" === xhr.getAllResponseHeaders())
                    {
                        // Sometimes the browser sets status to 200 OK
                        // when the connection is closed before the
                        // message is sent (weird!).  In order to address
                        // this we fail any completely empty responses.
                        // Hopefully, nobody will get a valid response
                        // with no headers and no body!
                        // Except that for cross domain requests getAllResponseHeaders ALWAYS returns an empty string
                        // even for valid responses...
                        callback(null, 0);
                        return;
                    }

                    // Fix for loading from file
                    if (xhrStatus === 0 && xhrResponseText && window.location.protocol === "file:")
                    {
                        xhrStatus = 200;
                    }

                    // Invoke the callback
                    if (xhrStatus !== 0)
                    {
                        // Under these conditions, we return a null
                        // response text.

                        if (404 === xhrStatus)
                        {
                            xhrResponseText = null;
                        }

                        callback(xhrResponseText, xhrStatus);
                    }
                    else
                    {
                        // Checking xhr.statusText when xhr.status is
                        // 0 causes a silent error

                        callback(xhrResponseText, 0);
                    }
                }

                // break circular reference
                xhr.onreadystatechange = null;
                xhr = null;
                callback = null;
            }
        }

        xhr.open('GET', url, true);
        if (callback)
        {
            xhr.onreadystatechange = httpRequestCallback;
        }
        xhr.send();
    },

    // Internals
    destroy : function ()
    {
        if (this.networkDevice)
        {
            delete this.networkDevice;
        }
        if (this.inputDevice)
        {
            this.inputDevice.destroy();
            delete this.inputDevice;
        }
        if (this.physicsDevice)
        {
            delete this.physicsDevice;
        }
        if (this.soundDevice)
        {
            if (this.soundDevice.destroy)
            {
                this.soundDevice.destroy();
            }
            delete this.soundDevice;
        }
        if (this.graphicsDevice)
        {
            this.graphicsDevice.destroy();
            delete this.graphicsDevice;
        }
        if (this.canvas)
        {
            delete this.canvas;
        }
        if (this.resizeCanvas)
        {
            window.removeEventListener('resize', this.resizeCanvas, false);
        }
    },

    getPluginObject : function ()
    {
        if (!this.plugin &&
            this.pluginId)
        {
            this.plugin = document.getElementById(this.pluginId);
        }
        return this.plugin;
    },

    unload : function ()
    {
        if (!this.unloading)
        {
            this.unloading = true;
            if (this.onunload)
            {
                this.onunload();
            }
            if (this.destroy)
            {
                this.destroy();
            }
        }
    },

    isUnloading : function ()
    {
        return this.unloading;
    },

    enableProfiling : function ()
    {
    },

    startProfiling : function ()
    {
        if (console && console.profile && console.profileEnd)
        {
            console.profile("turbulenz");
        }
    },

    stopProfiling : function ()
    {
        // Chrome and Safari return an object. IE and Firefox print to the console/profile tab.
        var result;
        if (console && console.profile && console.profileEnd)
        {
            console.profileEnd("turbulenz");
            if (console.profiles)
            {
                result = console.profiles[console.profiles.length - 1];
            }
        }

        return result;
    },

    callOnError : function (msg)
    {
        var onerror = this.onerror;
        if (onerror)
        {
            onerror(msg);
        }
    }
};

// Constructor function
WebGLTurbulenzEngine.create = function webGLTurbulenzEngineFn(params)
{
    var tz = new WebGLTurbulenzEngine();

    var canvas = params.canvas;
    var fillParent = params.fillParent;

    // To expose unload (the whole interaction needs a re-design)
    window.TurbulenzEngineCanvas = tz;

    tz.pluginId = params.pluginId;
    tz.plugin = null;

    // time property
    var getTime = Date.now;
    var performance = window.performance;
    if (performance)
    {
        // It seems high resolution "now" requires a proper "this"
        if (performance.now)
        {
            getTime = function getTimeFn()
            {
                return performance.now();
            };
        }
        else if (performance.webkitNow)
        {
            getTime = function getTimeFn()
            {
                return performance.webkitNow();
            };
        }
    }

    // To be used by the GraphicsDevice for accurate fps calculations
    tz.getTime = getTime;

    var baseTime = getTime(); // all in milliseconds (our "time" property is in seconds)

    // Safari 6.0 has broken object property defines.
    var canUseDefineProperty = true;
    var navStr = navigator.userAgent;
    var navVersionIdx = navStr.indexOf("Version/6.0");
    if (-1 !== navVersionIdx)
    {
        if (-1 !== navStr.substring(navVersionIdx).indexOf("Safari/"))
        {
            canUseDefineProperty = false;
        }
    }

    if (canUseDefineProperty && Object.defineProperty)
    {
        Object.defineProperty(tz, "time", {
                get : function () {
                    return ((getTime() - baseTime) * 0.001);
                },
                set : function (newValue) {
                    if (typeof newValue === 'number')
                    {
                        // baseTime is in milliseconds, newValue is in seconds
                        baseTime = (getTime() - (newValue * 1000));
                    }
                    else
                    {
                        tz.callOnError("Must set 'time' attribute to a number");
                    }
                },
                enumerable : false,
                configurable : false
            });

        tz.updateTime = function ()
        {
        };
    }
    else
    {
        tz.updateTime = function ()
        {
            this.time = ((getTime() - baseTime) * 0.001);
        };
    }

    // fast zero timeouts
    if (window.postMessage)
    {
        var zeroTimeoutMessageName = "0-timeout-message";
        var timeouts = [];
        var timeId = 0;

        var setZeroTimeout = function setZeroTimeoutFn(fn)
        {
            timeId += 1;
            var timeout = {
                    id : timeId,
                    fn : fn
                };
            timeouts.push(timeout);
            window.postMessage(zeroTimeoutMessageName, "*");
            return timeout;
        };

        var clearZeroTimeout = function clearZeroTimeoutFn(timeout)
        {
            var id = timeout;
            var numTimeouts = timeouts.length;
            for (var n = 0; n < numTimeouts; n += 1)
            {
                if (timeouts[n].id === id)
                {
                    timeouts.splice(n, 1);
                    return;
                }
            }
        };

        var handleZeroTimeoutMessages = function handleZeroTimeoutMessagesFn(event)
        {
            if (event.source === window &&
                event.data === zeroTimeoutMessageName)
            {
                event.stopPropagation();

                if (timeouts.length && !tz.isUnloading())
                {
                    var timeout = timeouts.shift();
                    var fn = timeout.fn;
                    fn();
                }
            }
        };
        window.addEventListener("message", handleZeroTimeoutMessages, true);

        tz.setTimeout = function (f, t)
        {
            if (t < 1)
            {
                return setZeroTimeout(f);
            }
            else
            {
                var that = this;
                return window.setTimeout(function () {
                        that.updateTime();
                        if (!that.isUnloading())
                        {
                            f();
                        }
                    }, t);
            }
        };

        tz.clearTimeout = function (i)
        {
            if (typeof i === 'object')
            {
                return clearZeroTimeout(i);
            }
            else
            {
                return window.clearTimeout(i);
            }
        };
    }
    else
    {
        tz.setTimeout = function (f, t)
        {
            var that = this;
            return window.setTimeout(function () {
                    that.updateTime();
                    if (!that.isUnloading())
                    {
                        f();
                    }
                }, t);
        };

        tz.clearTimeout = function (i)
        {
            return window.clearTimeout(i);
        };
    }

    var requestAnimationFrame = (window.requestAnimationFrame       ||
                                 window.webkitRequestAnimationFrame ||
                                 window.oRequestAnimationFrame      ||
                                 window.msRequestAnimationFrame     ||
                                 window.mozRequestAnimationFrame);
    if (requestAnimationFrame)
    {
        tz.setInterval = function (f, t)
        {
            var that = this;
            if (Math.abs(t - (1000 / 60)) <= 1)
            {
                var interval = {
                    enabled: true
                };
                var wrap1 = function wrap1()
                {
                    if (interval.enabled)
                    {
                        that.updateTime();
                        if (!that.isUnloading())
                        {
                            f();
                        }
                        requestAnimationFrame(wrap1, that.canvas);
                    }
                };
                requestAnimationFrame(wrap1, that.canvas);
                return interval;
            }
            else
            {
                var wrap2 = function wrap2()
                {
                    that.updateTime();
                    if (!that.isUnloading())
                    {
                        f();
                    }
                };
                return window.setInterval(wrap2, t);
            }
        };

        tz.clearInterval = function (i)
        {
            if (typeof i === 'object')
            {
                i.enabled = false;
            }
            else
            {
                window.clearInterval(i);
            }
        };
    }

    tz.canvas = canvas;
    tz.networkDevice = null;
    tz.inputDevice = null;
    tz.physicsDevice = null;
    tz.soundDevice = null;
    tz.graphicsDevice = null;

    if (fillParent)
    {
        // Resize canvas to fill parent
        tz.resizeCanvas = function ()
        {
            canvas.width = canvas.parentNode.clientWidth;
            canvas.height = canvas.parentNode.clientHeight;
        };

        tz.resizeCanvas();

        window.addEventListener('resize', tz.resizeCanvas, false);
    }

    var previousOnBeforeUnload = window.onbeforeunload;
    window.onbeforeunload = function ()
    {
        tz.unload();

        if (previousOnBeforeUnload)
        {
            previousOnBeforeUnload.call(this);
        }
    };

    tz.time = 0;

    // System info
    var systemInfo = {
        architecture: '',
        cpuDescription: '',
        cpuVendor: '',
        numPhysicalCores: 1,
        numLogicalCores: 1,
        ramInMegabytes: 0,
        frequencyInMegaHZ: 0,
        osVersionMajor: 0,
        osVersionMinor: 0,
        osVersionBuild: 0,
        osName: navigator.platform,
        userLocale: (navigator.language || navigator.userLanguage).replace('-', '_')
    };
    var userAgent = navigator.userAgent;
    var osIndex = userAgent.indexOf('Windows');
    if (osIndex !== -1)
    {
        systemInfo.osName = 'Windows';
        if (navigator.platform === 'Win64')
        {
            systemInfo.architecture = 'x86_64';
        }
        else if (navigator.platform === 'Win32')
        {
            systemInfo.architecture = 'x86';
        }
        osIndex += 7;
        if (userAgent.slice(osIndex, (osIndex + 4)) === ' NT ')
        {
            osIndex += 4;
            systemInfo.osVersionMajor = parseInt(userAgent.slice(osIndex, (osIndex + 1)), 10);
            systemInfo.osVersionMinor = parseInt(userAgent.slice((osIndex + 2), (osIndex + 4)), 10);
        }
    }
    else
    {
        osIndex = userAgent.indexOf('Mac OS X');
        if (osIndex !== -1)
        {
            systemInfo.osName = 'Darwin';
            if (navigator.platform.indexOf('Intel') !== -1)
            {
                systemInfo.architecture = 'x86';
            }
            osIndex += 9;
            systemInfo.osVersionMajor = parseInt(userAgent.slice(osIndex, (osIndex + 2)), 10);
            systemInfo.osVersionMinor = parseInt(userAgent.slice((osIndex + 3), (osIndex + 4)), 10);
            systemInfo.osVersionBuild = (parseInt(userAgent.slice((osIndex + 5), (osIndex + 6)), 10) || 0);
        }
        else
        {
            osIndex = userAgent.indexOf('Linux');
            if (osIndex !== -1)
            {
                systemInfo.osName = 'Linux';
                if (navigator.platform.indexOf('64') !== -1)
                {
                    systemInfo.architecture = 'x86_64';
                }
                else if (navigator.platform.indexOf('x86') !== -1)
                {
                    systemInfo.architecture = 'x86';
                }
            }
        }
    }
    tz.systemInfo = systemInfo;

    var b64ConversionTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".split('');

    tz.base64Encode = function base64EncodeFn(bytes)
    {
        var output = "";
        var numBytes = bytes.length;
        var valueToChar = b64ConversionTable;
        var n, chr1, chr2, chr3, enc1, enc2, enc3, enc4;

        /*jshint bitwise: false*/
        n = 0;
        while (n < numBytes)
        {
            chr1 = bytes[n];
            n += 1;

            enc1 = (chr1 >> 2);

            if (n < numBytes)
            {
                chr2 = bytes[n];
                n += 1;

                if (n < numBytes)
                {
                    chr3 = bytes[n];
                    n += 1;

                    enc2 = (((chr1 & 3) << 4) | (chr2 >> 4));
                    enc3 = (((chr2 & 15) << 2) | (chr3 >> 6));
                    enc4 = (chr3 & 63);
                }
                else
                {
                    enc2 = (((chr1 & 3) << 4) | (chr2 >> 4));
                    enc3 = ((chr2 & 15) << 2);
                    enc4 = 64;
                }
            }
            else
            {
                enc2 = ((chr1 & 3) << 4);
                enc3 = 64;
                enc4 = 64;
            }

            output += valueToChar[enc1];
            output += valueToChar[enc2];
            output += valueToChar[enc3];
            output += valueToChar[enc4];
        }
        /*jshint bitwise: true*/

        return output;
    };

    return tz;
};

window.WebGLTurbulenzEngine = WebGLTurbulenzEngine;



// Copyright (c) 2011-2012 Turbulenz Limited

/*global TurbulenzEngine*/
/*global Observer*/

function RequestHandler() {}
RequestHandler.prototype =
{
    reasonConnectionLost: 0,
    reasonServiceBusy: 1,

    retryExponential: function requestHandlerExponentialRetryFn(callContext, requestFn, status)
    {
        if (!this.notifiedConnectionLost &&
            TurbulenzEngine.time - this.connectionLostTime > (this.notifyTime * 0.001))
        {
            this.notifiedConnectionLost = true;

            var reason;
            if (status === 0)
            {
                reason = this.reasonConnectionLost;
            }
            else
            {
                reason = this.reasonServiceBusy;
            }
            callContext.reason = reason;
            this.onRequestTimeout(reason, callContext);
        }

        // only the first request with a lost connection continues
        // all following requests wait for a reconnection
        if (this.connected)
        {
            this.connectionLostTime = TurbulenzEngine.time;
            this.notifiedConnectionLost = false;
            this.connected = false;
            this.reconnectTest = callContext;

            callContext.status = status;
        }
        else if (this.reconnectTest !== callContext)
        {
            var reconnectedObserver = this.reconnectedObserver;
            reconnectedObserver.subscribe(function onReconnected()
                {
                    reconnectedObserver.unsubscribe(onReconnected);
                    requestFn();
                });
            return;
        }

        if (callContext.expTime)
        {
            callContext.expTime = 2 * callContext.expTime;
            if (callContext.expTime > this.maxRetryTime)
            {
                callContext.expTime = this.maxRetryTime;
            }
        }
        else
        {
            callContext.expTime = this.initialRetryTime;
        }

        if (callContext.retries)
        {
            callContext.retries += 1;
        }
        else
        {
            callContext.retries = 1;
        }
        TurbulenzEngine.setTimeout(requestFn, callContext.expTime);
    },

    retryAfter: function requestHandlerRetryAfterFn(callContext, retryAfter, requestFn, status)
    {
        if (callContext.retries)
        {
            callContext.retries += 1;
        }
        else
        {
            callContext.firstRetry = TurbulenzEngine.time;
            callContext.retries = 1;
        }

        if (!callContext.notifiedMaxRetries &&
            TurbulenzEngine.time - callContext.firstRetry + retryAfter > this.notifyTime)
        {
            callContext.notifiedMaxRetries = true;

            var reason = this.reasonServiceBusy;
            callContext.reason = reason;
            this.onRequestTimeout(reason, callContext);
        }

        TurbulenzEngine.setTimeout(requestFn, retryAfter * 1000);
    },

    request: function requestHandlerRequestFn(callContext)
    {
        var makeRequest;
        var that = this;

        var responseCallback = function responseCallbackFn(responseAsset, status)
        {
            var xhr = callContext.xhr;
            var sendEventToHandlers = that.sendEventToHandlers;
            var handlers = that.handlers;

            if (xhr)
            {
                var retryAfterHeader = xhr.getResponseHeader("Retry-After");
                if (retryAfterHeader)
                {
                    var retryAfter = parseInt(retryAfterHeader, 10);
                    if (retryAfter > 0)
                    {
                        that.retryAfter(callContext, retryAfter, makeRequest, status);
                        return;
                    }
                }
            }

            // 0 Connection Lost
            // 408 Request Timeout
            // 429 Too Many Requests
            // 480 Temporarily Unavailable
            if (status === 0 || status === 408 || status === 429 || status === 480)
            {
                that.retryExponential(callContext, makeRequest, status);
                return;
            }

            if (!that.connected)
            {
                // Reconnected!
                that.connected = true;
                if (that.reconnectTest === callContext && that.notifiedConnectionLost)
                {
                    that.onReconnected(that.reconnectTest.reason, that.reconnectTest);
                }
                that.reconnectTest = null;
                that.reconnectedObserver.notify();
            }

            if (callContext.customErrorHandler &&
                !callContext.customErrorHandler.call(this, callContext, makeRequest, responseAsset, status))
            {
                return;
            }

            if (that.customErrorHandler &&
                !that.customErrorHandler(callContext, makeRequest, responseAsset, status))
            {
                return;
            }

            if (callContext.onload)
            {
                var nameStr;
                if (responseAsset && responseAsset.name)
                {
                    nameStr = responseAsset.name;
                }
                else
                {
                    nameStr = callContext.src;
                }

                sendEventToHandlers(handlers.eventOnload, {eventType: "eventOnload", name: nameStr});

                callContext.onload(responseAsset, status, callContext);
                callContext.onload = null;
            }
            callContext = null;
        };

        makeRequest = function makeRequestFn()
        {
            if (callContext.requestFn)
            {
                if (callContext.requestOwner)
                {
                    callContext.requestFn.call(callContext.requestOwner, callContext.src, responseCallback, callContext);
                }
                else
                {
                    callContext.requestFn(callContext.src, responseCallback, callContext);
                }
            }
            else if (callContext.requestOwner)
            {
                callContext.requestOwner.request(callContext.src, responseCallback, callContext);
            }
            else
            {
                TurbulenzEngine.request(callContext.src, responseCallback, callContext);
            }
        };

        makeRequest();
    },

    addEventListener : function addEventListenerFn(eventType, eventListener)
    {
        var i;
        var length;
        var eventHandlers;

        if (this.handlers.hasOwnProperty(eventType))
        {
            eventHandlers = this.handlers[eventType];

            if (eventListener)
            {
                // Check handler is not already stored
                length = eventHandlers.length;
                for (i = 0; i < length; i += 1)
                {
                    if (eventHandlers[i] === eventListener)
                    {
                        // Event handler has already been added
                        return;
                    }
                }

                eventHandlers.push(eventListener);
            }
        }
    },

    removeEventListener : function removeEventListenerFn(eventType, eventListener)
    {
        var i;
        var length;
        var eventHandlers;

        if (this.handlers.hasOwnProperty(eventType))
        {
            eventHandlers = this.handlers[eventType];

            if (eventListener)
            {
                length = eventHandlers.length;
                for (i = 0; i < length; i += 1)
                {
                    if (eventHandlers[i] === eventListener)
                    {
                        eventHandlers.splice(i, 1);
                        break;
                    }
                }
            }
        }
    },

    sendEventToHandlers : function sendEventToHandlersFn(eventHandlers, arg0)
    {
        var i;
        var length = eventHandlers.length;

        if (length)
        {
            for (i = 0; i < length; i += 1)
            {
                eventHandlers[i](arg0);
            }
        }
    }
};

RequestHandler.create = function requestHandlerCreateFn(params)
{
    var rh = new RequestHandler();

    rh.initialRetryTime = params.initialRetryTime || 0.5 * 1000;
    rh.notifyTime = params.notifyTime || 4 * 1000;
    rh.maxRetryTime = params.maxRetryTime || 8 * 1000;

    rh.notifiedConnectionLost = false;
    rh.connected = true;
    rh.reconnectedObserver = Observer.create();
    rh.reconnectTest = null;

    rh.onReconnected = params.onReconnected || function onReconnectedFn() {};
    rh.onRequestTimeout = params.onRequestTimeout || function onRequestTimeoutFn(callContext) {};
    var handlers = {};
    rh.handlers = handlers;

    rh.handlers.eventOnload = [];

    return rh;
};

// Copyright (c) 2011 Turbulenz Limited

/*global TurbulenzServices: false*/

//
// API
//
function MappingTable() {}
MappingTable.prototype =
{
    version : 1,

    getURL: function mappingTableGetURL(assetPath, missingCallbackFn)
    {
        var url = this.urlMapping[assetPath];
        if (url)
        {
            return url;
        }
        else
        {
            if (missingCallbackFn)
            {
                missingCallbackFn(assetPath);
            }
            return (this.assetPrefix + assetPath);
        }
    },

    map: function mappingTableMap(logicalPath, physicalPath)
    {
        this.urlMapping[logicalPath] = physicalPath;
    },

    alias: function mappingTableAlias(alias, logicalPath)
    {
        var urlMapping = this.urlMapping;
        urlMapping[alias] = urlMapping[logicalPath];
    }
};

MappingTable.create = function MappingTableCreateFn(params)
{
    var mappingTable = new MappingTable();

    mappingTable.mappingTableURL = params.mappingTableURL;
    mappingTable.mappingTablePrefix = params.mappingTablePrefix;
    mappingTable.assetPrefix = params.assetPrefix;

    mappingTable.errorCallbackFn = params.errorCallback || TurbulenzServices.defaultErrorCallback;
    if (!mappingTable.mappingTableURL)
    {
        mappingTable.errorCallbackFn("TurbulenzServices.createMappingTable no mapping table file given");
    }

    function createMappingTableCallbackFn(urlMappingData)
    {
        var urlMapping = urlMappingData.urnmapping || urlMappingData.urnremapping || {};
        mappingTable.urlMapping = urlMapping;

        // Prepend all the mapped physical paths with the asset server
        var mappingTablePrefix = mappingTable.mappingTablePrefix;
        if (mappingTablePrefix)
        {
            var source;
            for (source in urlMapping)
            {
                if (urlMapping.hasOwnProperty(source))
                {
                    urlMapping[source] = mappingTablePrefix + urlMapping[source];
                }
            }
        }

        params.onload(mappingTable);
    }

    params.requestHandler.request({
            src: mappingTable.mappingTableURL,
            onload: function jsonifyResponse(jsonResponse, status) {
                var obj = JSON.parse(jsonResponse);
                if (status === 200)
                {
                    createMappingTableCallbackFn(obj);
                }
                else
                {
                    mappingTable.errorCallbackFn("TurbulenzServices.createMappingTable error with HTTP status " + status + ": " + jsonResponse.msg, status);
                }
            }
        });

    return mappingTable;
};

// Copyright (c) 2012 Turbulenz Limited

/*global
Global: false
Draw2D: false
Float32Array: false
TurbulenzEngine: false
*/

//
// Draw2DGroup. Wraps vertex buffer data with pairings of indices and textures
// representing subsets of buffer relating to a set of equal-texture quads.
//
// [ sprite1  sprite2  sprite3  sprite4  sprite5 ]
//  \---------------/  \------/ \--------------/
//       texture 1    texture 2     texture 3
//      12 indices    6 indices     12 indices
//
function Draw2DGroup() {}
Draw2DGroup.create = function draw2DGroupFn()
{
    var group = new Draw2DGroup();

    // pairs of index counts + associated texture for subset of group.
    group.indices = [];
    group.textures = [];
    group.numSets = 0;

    // vertex buffer for group.
    group.vertexBufferData = new Draw2D.prototype.floatArray(1024);
    group.numVertices = 0;

    return group;
};

function Draw2DSprite() {}
Draw2DSprite.prototype = {

    version : 1,

    //
    // Assumption is that user will not be performing these actions frequently.
    // To that end, we provide a function which performs the ssary side effects
    // on call, to prevent an overhead for lazy evaluation.
    //
    getTextureRectangle : function getTextureRectangleFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Draw2D.prototype.floatArray(4);
        }
        var data = this.data;
        var texture = this._texture;
        if (texture)
        {
            dst[0] = data[12] * texture.width;
            dst[1] = data[13] * texture.height;
            dst[2] = data[14] * texture.width;
            dst[3] = data[15] * texture.height;
        }
        else
        {
            dst[0] = data[12];
            dst[1] = data[13];
            dst[2] = data[14];
            dst[3] = data[15];
        }
        return dst;
    },
    setTextureRectangle : function setTextureRectangleFn(uvRect)
    {
        var data = this.data;
        var texture = this._texture;
        if (texture)
        {
            var iwidth  = 1 / texture.width;
            var iheight = 1 / texture.height;
            data[12] = uvRect[0] * iwidth;
            data[13] = uvRect[1] * iheight;
            data[14] = uvRect[2] * iwidth;
            data[15] = uvRect[3] * iheight;
        }
        else
        {
            data[12] = uvRect[0];
            data[13] = uvRect[1];
            data[14] = uvRect[2];
            data[15] = uvRect[3];
        }
    },

    getColor : function getColorFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Draw2D.prototype.floatArray(4);
        }
        var data = this.data;
        dst[0] = data[8];
        dst[1] = data[9];
        dst[2] = data[10];
        dst[3] = data[11];
        return dst;
    },
    setColor : function setColorFn(color)
    {
        var data = this.data;
        data[8]  = color[0];
        data[9]  = color[1];
        data[10] = color[2];
        data[11] = color[3];
    },

    getTexture : function getTextureFn()
    {
        return this._texture;
    },
    setTexture : function setTextureFn(texture)
    {
        if (this._texture !== texture)
        {
            var su = (this._texture ? this._texture.width  : 1.0) / (texture ? texture.width  : 1.0);
            var sv = (this._texture ? this._texture.height : 1.0) / (texture ? texture.height : 1.0);
            this._texture = texture || null;

            // re-normalise texture coordinates.
            var data = this.data;
            data[12] *= su;
            data[13] *= sv;
            data[14] *= su;
            data[15] *= sv;
        }
    },

    getWidth : function getWidthFn()
    {
        return this.data[17] * 2;
    },
    setWidth : function setWidthFn(width)
    {
        width *= 0.5;
        var data = this.data;
        if (data[17] !== width)
        {
            data[17] = width;
            this._invalidate();
        }
    },

    getHeight : function getHeightFn()
    {
        return this.data[18] * 2;
    },
    setHeight : function setHeightFn(height)
    {
        height *= 0.5;
        var data = this.data;
        if (data[18] !== height)
        {
            data[18] = height;
            this._invalidate();
        }
    },

    getScale : function getScaleFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Draw2D.prototype.floatArray(2);
        }
        var data = this.data;
        dst[0] = data[19];
        dst[1] = data[20];
        return dst;
    },
    setScale : function setScaleFn(scale)
    {
        var scaleX = scale[0];
        var scaleY = scale[1];
        var data = this.data;
        if (data[19] !== scaleX || data[20] !== scaleY)
        {
            data[19] = scaleX;
            data[20] = scaleY;
            this._invalidate();
        }
    },

    getShear : function getShearFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Draw2D.prototype.floatArray(2);
        }
        var data = this.data;
        dst[0] = data[21];
        dst[1] = data[22];
        return dst;
    },
    setShear : function setShearFn(shear)
    {
        var shearX = shear[0];
        var shearY = shear[1];
        var data = this.data;
        if (data[21] !== shearX || data[22] !== shearY)
        {
            data[21] = shearX;
            data[22] = shearY;
            this._invalidate();
        }
    },

    getOrigin : function getOriginFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Draw2D.prototype.floatArray(2);
        }
        var data = this.data;
        dst[0] = data[23];
        dst[1] = data[24];
        return dst;
    },
    setOrigin : function setOriginFn(origin)
    {
        var originX = origin[0];
        var originY = origin[1];
        var data = this.data;
        if (data[23] !== originX || data[24] !== originY)
        {
            data[23] = originX;
            data[24] = originY;
            this._invalidate();
        }
    },

    // Method for internal use only.
    //
    // Recompute locally defined vectors.
    _invalidate : function invalidateFn()
    {
        var data = this.data;
        // [ T1 T2 ] = [ scaleX 0 ] [ 1 shearX ]
        // [ T3 T4 ]   [ 0 scaleY ] [ shearY 1 ]
        var T1 = data[19];
        var T2 = data[19] * data[21];
        var T3 = data[20] * data[22];
        var T4 = data[20];

        // Recompute locally defined position of true center of sprite.
        var x = data[17] - data[23];  // x = width/2 - originX
        var y = data[18] - data[24];  // y = height/2 - originY
        var cx = data[25] = (T1 * x + T2 * y); // (cx) = T (x)
        var cy = data[26] = (T3 * x + T4 * y); // (cy)     (y)

        // Recompute locally defined position of top-left vertex relative to center of sprite.
        x = -data[17]; // x = -width/2
        y = -data[18]; // y = -height/2
        var ux = data[27] = (T1 * x + T2 * y); // (ux) = T (x)
        var uy = data[28] = (T3 * x + T4 * y); // (uy)     (y)

        // Recompute locally defined position of top-right vertex relative to center of sprite.
        x = -x; // x = width / 2
        var vx = data[29] = (T1 * x + T2 * y); // (vx) = T (x)
        var vy = data[30] = (T3 * x + T4 * y); // (vy)     (y)

        // Rotate vectors to screen space so that in the case that rotation is not performed
        // These vectors are still valid.
        var rotation = data[16] = this.rotation;
        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);

        data[31] = ((cos * cx) - (sin * cy));
        data[32] = ((sin * cx) + (cos * cy));
        data[33] = ((cos * ux) - (sin * uy));
        data[34] = ((sin * ux) + (cos * uy));
        data[35] = ((cos * vx) - (sin * vy));
        data[36] = ((sin * vx) + (cos * vy));

        // Compute suitable epsilon to consider rotations equals.
        // We do this by finding the vertex furthest from defined center of rotation.
        // And using its distance to compute what rotation constitutes a 'visible' rotation.
        //
        // Positions of vertices relative to origin are given by:
        // v1 = c + u, v2 = c + v, v3 = c - v, v4 = c - u.
        // |v1|^2 = |c|^2 + |u|^2 + 2c.u
        // |v4|^2 = |c|^2 + |u|^2 - 2c.u
        // |v2|^2 = |c|^2 + |v|^2 + 2c.v
        // |v3|^2 = |c|^2 + |v|^2 - 2c.v
        //
        // Compute r1 = |u|^2 + abs(2c.u)
        // Compute r2 = |v|^2 + abs(2c.v)
        //
        // Finally max(|vi|^2) = |c|^2 + max(r1, r2)
        //
        var dot = 2 * ((cx * ux) + (cy * uy));
        if (dot < 0)
        {
            dot = -dot;
        }
        var r1 = (ux * ux) + (uy * uy) + dot;

        dot = 2 * ((cx * vx) + (cy * vy));
        if (dot < 0)
        {
            dot = -dot;
        }
        var r2 = (vx * vx) + (vy * vy) + dot;

        if (r2 > r1)
        {
            r1 = r2;
        }

        r1 += ((cx * cx) + (cy * cy));
        // r1 is the squared distance to furthest vertex.
        //
        // We permit a half pixel movement to be considered a 'true' movement.
        // Squared rotation required to impart this movement on furthest vertex is
        data[37] = (0.25 / r1); // squared epsilon
    },

    // Method for internal use only.
    //
    // Recompute draw2d coordinate space vertices and vectors.
    _update : function _updateFn(angleScaleFactor)
    {
        var data = this.data;
        var x, y, u, v;

        // Check if rotation has been modified
        x = this.rotation;
        y = x - data[16]; // y = rotation - previousRotation
        if ((y * y) > (data[37] * angleScaleFactor)) // if |y| > epsilon
        {
            data[16] = x; //previousRotation = rotation
            u = Math.cos(x);
            v = Math.sin(x);

            // rotate locally defined vectors.
            x = data[25];
            y = data[26];
            data[31] = (u * x - v * y); // (px) = [cos -sin] (cx)
            data[32] = (v * x + u * y); // (py) = [sin  cos] (cy)

            x = data[27];
            y = data[28];
            data[33] = (u * x - v * y); // (x1) = [cos -sin] (ux)
            data[34] = (v * x + u * y); // (y1) = [sin  cos] (uy)

            x = data[29];
            y = data[30];
            data[35] = (u * x - v * y); // (x2) = [cos -sin] (vx)
            data[36] = (v * x + u * y); // (y2) = [sin  cos] (vy)
        }

        // Compute center of this sprite in screen space.
        u = this.x + data[31]; // u = centerX = positionX + px
        v = this.y + data[32]; // v = centerY = positionY + py

        // Compute vertex positions in screen space.
        x = data[33];
        y = data[34];
        data[0] = u + x; // v1x = centerX + x1
        data[1] = v + y; // v1y = centerY + y1
        data[6] = u - x; // v4x = centerX - x1
        data[7] = v - y; // v4y = centerY - y1

        x = data[35];
        y = data[36];
        data[2] = u + x; // v2x = centerX + x2
        data[3] = v + y; // v2y = centerY + y2
        data[4] = u - x; // v3x = centerX - x2
        data[5] = v - y; // v3y = centerY - y2
    }
};

Draw2DSprite.create = function draw2DSpriteCreateFn(params)
{
    if ((params.width === undefined || params.height === undefined) && !params.texture)
    {
        return null;
    }

    // data:
    // ---
    // First 16 values reserved for Draw2DSpriteData.
    //   includes colour and texture coordinates.
    //
    // 16    : old_rotation (for lazy evaluation)
    // 17,18 : width/2, height/2 (changed by user via function)
    // 19,20 : scaleX, scaleY    (changed by user via function)
    // 21,22 : shearX, shearY    (changed by user via function)
    // 23,24 : originX, originY  (changed by user via function)
    // 25,26 : cx, cy // locally defined position of true center of sprite relative to origin
    //    (dependant on scale/shear/center/dimension)
    // 27,28 : u1, v1 // locally defined position of top-left vertex relative to center of sprite.
    //    (dependant on scale/shear/dimension)
    // 29,30 : u2, v2 // locally defined position of top-right vertex relative to center of sprite.
    //    (dependant on scale/shear/dimension)
    // 31,32 : px, py // relative defined position of true center of sprite relative to origin
    //    (dependant on rotation and cx,cy)
    // 33,34 : x1, y1 // relative defined position of top-left vertex relative to center of sprite.
    //    (dependant on rotation and u1,v1)
    // 35,36 : x2, y2 // relative defined position of top-right vertex relative to center of sprite.
    //    (dependant on rotation and u2,v2)
    // 37 : Squared epsilon to consider rotations equal based on dimensions.
    var s = new Draw2DSprite();
    var data = s.data = new Draw2D.prototype.floatArray(38);

    // texture (not optional)
    var texture = s._texture = params.texture || null;

    // position (optional, default 0,0)
    s.x = (params.x || 0.0);
    s.y = (params.y || 0.0);

    // rotation (optional, default 0)
    s.rotation = data[16] = (params.rotation || 0.0);

    // colour (optional, default [1,1,1,1])
    var color = params.color;
    data[8]  = (color ? color[0] : 1.0);
    data[9]  = (color ? color[1] : 1.0);
    data[10] = (color ? color[2] : 1.0);
    data[11] = (color ? color[3] : 1.0);

    // uvRect (optional, default texture rectangle)
    var uvRect = params.textureRectangle;
    var iwidth  = (texture ? 1 / texture.width  : 1);
    var iheight = (texture ? 1 / texture.height : 1);
    data[12] = (uvRect ? (uvRect[0] * iwidth)  : 0.0);
    data[13] = (uvRect ? (uvRect[1] * iheight) : 0.0);
    data[14] = (uvRect ? (uvRect[2] * iwidth)  : 1.0);
    data[15] = (uvRect ? (uvRect[3] * iheight) : 1.0);

    // dimensions / 2 (default texture dimensions)
    data[17] = ((params.width  !== undefined) ? params.width  : texture.width)  * 0.5;
    data[18] = ((params.height !== undefined) ? params.height : texture.height) * 0.5;

    // scale (default [1,1])
    var scale = params.scale;
    data[19] = (scale ? scale[0] : 1.0);
    data[20] = (scale ? scale[1] : 1.0);

    // shear (default [0,0])
    var shear = params.shear;
    data[21] = (shear ? shear[0] : 0.0);
    data[22] = (shear ? shear[1] : 0.0);

    // origin (default dimensions / 2)
    var origin = params.origin;
    data[23] = (origin ? origin[0] : data[17]);
    data[24] = (origin ? origin[1] : data[18]);

    s._invalidate();
    return s;
};

//
// Used in rectangle draw routines to compute data to be pushed into vertex buffers.
//
function Draw2DSpriteData() {}
Draw2DSpriteData.setFromRotatedRectangle = function setFromRotatedRectangleFn(sprite, texture, rect, uvrect, color, rotation, origin)
{
    var x1 = rect[0];
    var y1 = rect[1];
    var x2 = rect[2];
    var y2 = rect[3];

    if (!rotation)
    {
        sprite[0] = x1;
        sprite[1] = y1;
        sprite[2] = x2;
        sprite[3] = y1;
        sprite[4] = x1;
        sprite[5] = y2;
        sprite[6] = x2;
        sprite[7] = y2;
    }
    else
    {
        var cx, cy;
        if (origin)
        {
            cx = x1 + origin[0];
            cy = y1 + origin[1];
        }
        else
        {
            cx = 0.5 * (x1 + x2);
            cy = 0.5 * (y1 + y2);
        }

        var dx = x1 - cx;
        var dy = y1 - cy;

        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);
        var w = (x2 - x1);
        var h = (y2 - y1);

        sprite[0] = x1 = cx + (cos * dx - sin * dy);
        sprite[1] = y1 = cy + (sin * dx + cos * dy);
        sprite[2] = x1 + (cos * w);
        sprite[3] = y1 + (sin * w);
        sprite[4] = x1 - (sin * h);
        sprite[5] = y1 + (cos * h);
        sprite[6] = x1 + (cos * w - sin * h);
        sprite[7] = y1 + (sin * w + cos * h);
    }

    if (color)
    {
        sprite[8]  = color[0];
        sprite[9]  = color[1];
        sprite[10] = color[2];
        sprite[11] = color[3];
    }
    else
    {
        sprite[8] = sprite[9] = sprite[10] = sprite[11] = 1.0;
    }

    if (uvrect && texture)
    {
        var iwidth  = 1 / texture.width;
        var iheight = 1 / texture.height;
        sprite[12] = uvrect[0] * iwidth;
        sprite[13] = uvrect[1] * iheight;
        sprite[14] = uvrect[2] * iwidth;
        sprite[15] = uvrect[3] * iheight;
    }
    else
    {
        sprite[12] = sprite[13] = 0;
        sprite[14] = sprite[15] = 1;
    }
};

Draw2DSpriteData.create = function draw2DSpriteFn()
{
    // x1 y1 x2 y2 x3 y3 x4 y4 - vertices [0,8)
    // cr cg cb ca u1 v1 u2 v2 - normalized color + texture [8,16)
    return new Draw2D.prototype.floatArray(16);
};

function Draw2D() {}

Draw2D.prototype = {

    version : 7,

    forceUpdate : false,
    clearBackBuffer : false,

    // supported sort modes.
    sort : {
        deferred  : 'deferred',
        immediate : 'immediate',
        texture   : 'texture'
    },

    // supported scale modes.
    scale : {
        scale : 'scale',
        none  : 'none'
    },

    drawStates: {
        uninit: 0,
        ready : 1,
        draw  : 2
    },

    defaultClearColor: [0, 0, 0, 1],

    clear: function clearFn(clearColor)
    {
        if (this.state !== this.drawStates.ready)
        {
            return false;
        }

        var gd = this.graphicsDevice;
        if (this.currentRenderTarget)
        {
            if (!gd.beginRenderTarget(this.currentRenderTarget.renderTarget))
            {
                return false;
            }

            gd.clear(clearColor || this.defaultClearColor);
            gd.endRenderTarget();
        }
        else
        {
            gd.clear(clearColor || this.defaultClearColor);
        }

        return true;
    },

    clearBatch: function clearFn()
    {
        for (var name in this.texLists)
        {
            if (this.texLists.hasOwnProperty(name))
            {
                delete this.texLists[name];
            }
        }
        this.currentTextureGroup = undefined;
        this.numGroups = 0;
    },

    bufferSprite : function bufferSpriteFn(buffer, sprite, index)
    {
        sprite._update(0);
        /*jshint bitwise: false*/
        index <<= 4;
        /*jshint bitwise: true*/

        var data = sprite.data;
        buffer[index]      = data[0];
        buffer[index + 1]  = data[1];
        buffer[index + 2]  = data[2];
        buffer[index + 3]  = data[3];
        buffer[index + 4]  = data[4];
        buffer[index + 5]  = data[5];
        buffer[index + 6]  = data[6];
        buffer[index + 7]  = data[7];
        buffer[index + 8]  = data[8];
        buffer[index + 9]  = data[9];
        buffer[index + 10] = data[10];
        buffer[index + 11] = data[11];
        buffer[index + 12] = data[12];
        buffer[index + 13] = data[13];
        buffer[index + 14] = data[14];
        buffer[index + 15] = data[15];
    },

    update: function updateFn()
    {
        var graphicsDevice = this.graphicsDevice;
        var width = this.width;
        var height = this.height;

        var graphicsDeviceWidth = graphicsDevice.width;
        var graphicsDeviceHeight = graphicsDevice.height;

        if (width !== graphicsDeviceWidth || height !== graphicsDeviceHeight || this.forceUpdate)
        {
            var viewWidth, viewHeight, viewX, viewY;
            var viewportRectangle = this.viewportRectangle;

            if (viewportRectangle)
            {
                viewX = viewportRectangle[0];
                viewY = viewportRectangle[1];
                viewWidth  = viewportRectangle[2] - viewX;
                viewHeight = viewportRectangle[3] - viewY;
            }
            else
            {
                viewX = 0;
                viewY = 0;
                viewWidth = graphicsDeviceWidth;
                viewHeight = graphicsDeviceHeight;
            }

            if ((viewWidth === graphicsDeviceWidth) && (viewHeight === graphicsDeviceHeight))
            {
                this.clearBackBuffer = false;
            }
            else
            {
                this.clearBackBuffer = true;
            }

            var target = this.currentRenderTarget;

            if (this.scaleMode === 'scale')
            {
                var viewAspectRatio = viewWidth / viewHeight;
                var graphicsDeviceAspectRatio = graphicsDeviceWidth / graphicsDeviceHeight;
                var calcViewWidth, calcViewHeight, diffWidth, diffHeight, halfDiffWidth, halfDiffHeight;

                if (graphicsDeviceAspectRatio > viewAspectRatio)
                {
                    calcViewWidth = Math.ceil((graphicsDeviceHeight / viewHeight) * viewWidth);
                    diffWidth = graphicsDeviceWidth - calcViewWidth;
                    halfDiffWidth = Math.floor(diffWidth * 0.5);

                    this.scissorX = halfDiffWidth;
                    this.scissorY = 0;
                    this.scissorWidth = calcViewWidth;
                    this.scissorHeight = graphicsDeviceHeight;

                    this.viewScaleX = viewWidth / calcViewWidth;
                    this.viewScaleY = viewHeight / graphicsDeviceHeight;

                    if (!target)
                    {
                        this.clipOffsetX = (halfDiffWidth / graphicsDeviceWidth * 2.0) - 1.0;
                        this.clipOffsetY = 1;
                        this.clipScaleX = (calcViewWidth / graphicsDeviceWidth * 2.0) / viewWidth;
                        this.clipScaleY = -2.0 / viewHeight;
                    }
                }
                else
                {
                    calcViewHeight = Math.ceil((graphicsDeviceWidth / viewWidth) * viewHeight);
                    diffHeight = graphicsDeviceHeight - calcViewHeight;
                    halfDiffHeight = Math.floor(diffHeight * 0.5);

                    this.scissorX = 0;
                    this.scissorY = halfDiffHeight;
                    this.scissorWidth = graphicsDeviceWidth;
                    this.scissorHeight = calcViewHeight;

                    this.viewScaleX = viewWidth / graphicsDeviceWidth;
                    this.viewScaleY = viewHeight / calcViewHeight;

                    if (!target)
                    {
                        this.clipOffsetX = -1.0;
                        this.clipOffsetY = 1 - ((halfDiffHeight / graphicsDeviceHeight) * 2.0);
                        this.clipScaleX = 2.0 / viewWidth;
                        this.clipScaleY = ((calcViewHeight / graphicsDeviceHeight) * -2.0) / viewHeight;
                    }
                }
            }
            else
            {
                this.viewScaleX = 1;
                this.viewScaleY = 1;

                if (!target)
                {
                    this.clipOffsetX = -1.0;
                    this.clipOffsetY = 1.0;
                    this.clipScaleX = 2.0 / graphicsDeviceWidth;
                    this.clipScaleY = -2.0 / graphicsDeviceHeight;
                }

                this.scissorX = 0;
                this.scissorY = (graphicsDeviceHeight - viewHeight);
                this.scissorWidth = viewWidth;
                this.scissorHeight = viewHeight;
            }

            this.spriteAngleFactor = Math.min(this.viewScaleX, this.viewScaleY);
            this.spriteAngleFactor *= this.spriteAngleFactor;

            this.width = graphicsDeviceWidth;
            this.height = graphicsDeviceHeight;

            var i = 0;
            var renderTargets = this.renderTargetStructs;
            var limit = renderTargets.length;
            for (i = 0; i < limit; i += 1)
            {
                this.validateTarget(renderTargets[i], this.scissorWidth, this.scissorHeight);
            }

            if (target)
            {
                this.clipOffsetX = -1.0;
                this.clipOffsetY = -1.0;
                this.clipScaleX = 2.0 * target.actualWidth / target.texture.width / viewWidth;
                this.clipScaleY = 2.0 * target.actualHeight / target.texture.height / viewHeight;
            }

            // Deal with viewports that are not started at (0,0)
            this.clipOffsetX -= viewX * this.clipScaleX;
            this.clipOffsetY -= viewY * this.clipScaleY;

            var clipSpace = this.techniqueParameters.clipSpace;
            clipSpace[0] = this.clipScaleX;
            clipSpace[1] = this.clipScaleY;
            clipSpace[2] = this.clipOffsetX;
            clipSpace[3] = this.clipOffsetY;

            this.updateRenderTargetVbo(this.scissorX, this.scissorY, this.scissorWidth, this.scissorHeight);
            this.forceUpdate = false;
        }
    },

    getViewport: function getViewportFn(dst)
    {
        if (!dst)
        {
            dst = new Draw2D.prototype.floatArray(4);
        }
        var viewport = this.viewportRectangle;
        if (viewport)
        {
            dst[0] = viewport[0];
            dst[1] = viewport[1];
            dst[2] = viewport[2];
            dst[3] = viewport[3];
        }
        else
        {
            dst[0] = dst[1] = 0;
            dst[2] = this.graphicsDevice.width;
            dst[3] = this.graphicsDevice.height;
        }
        return dst;
    },
    getScreenSpaceViewport: function screenSpaceViewportFn(dst)
    {
        if (!dst)
        {
            dst = new Draw2D.prototype.floatArray(4);
        }
        // ensure mapping is correct.
        this.update();

        dst[0] = this.scissorX;
        dst[1] = this.height - (this.scissorY + this.scissorHeight);
        dst[2] = dst[0] + this.scissorWidth;
        dst[3] = dst[1] + this.scissorHeight;
        return dst;
    },

    viewportMap: function viewportMapFn(screenX, screenY, dst)
    {
        if (!dst)
        {
            dst = new Draw2D.prototype.floatArray(2);
        }
        // ensure mapping is correct.
        this.update();

        // webgl coordinates have flipped y.
        var scissorY = (this.height - this.scissorHeight - this.scissorY);

        dst[0] = (screenX - this.scissorX) * this.viewScaleX;
        dst[1] = (screenY - scissorY) * this.viewScaleY;

        var viewport = this.viewportRectangle;
        if (viewport)
        {
            dst[0] += viewport[0];
            dst[1] += viewport[1];
        }

        return dst;
    },
    viewportUnmap: function screenMapFn(x, y, dst)
    {
        if (!dst)
        {
            dst = new Draw2D.prototype.floatArray(2);
        }
        // ensure mapping is correct.
        this.update();

        var viewport = this.viewportRectangle;
        if (viewport)
        {
            x -= viewport[0];
            y -= viewport[1];
        }

        // webgl coordinates have flipped y.
        var scissorY = (this.height - this.scissorHeight - this.scissorY);

        dst[0] = (x / this.viewScaleX) + this.scissorX;
        dst[1] = (y / this.viewScaleY) + scissorY;
        return dst;
    },

    viewportClamp: function viewportClampFn(point)
    {
        if (point)
        {
            var x = point[0];
            var y = point[1];

            var minX, minY, maxX, maxY;
            var viewport = this.viewportRectangle;
            if (viewport)
            {
                minX = viewport[0];
                minY = viewport[1];
                maxX = viewport[2];
                maxY = viewport[3];
            }
            else
            {
                minX = 0;
                minY = 0;
                maxX = this.graphicsDevice.width;
                maxY = this.graphicsDevice.height;
            }

            if (x < minX)
            {
                x = minX;
            }
            else if (x > maxX)
            {
                x = maxX;
            }

            if (y < minY)
            {
                y = minY;
            }
            else if (y > maxY)
            {
                y = maxY;
            }

            point[0] = x;
            point[1] = y;
        }

        return point;
    },

    configure: function configureFn(params)
    {
        if (this.state !== this.drawStates.ready)
        {
            return false;
        }

        var viewportRectangle = ("viewportRectangle" in params) ? params.viewportRectangle : this.viewportRectangle;

        var scaleMode = params.scaleMode;
        if (scaleMode !== undefined)
        {
            // check scaleMode is supported.
            if (!(scaleMode in this.scale))
            {
                return false;
            }
            if (scaleMode === 'scale' && !viewportRectangle)
            {
                return false;
            }
            this.scaleMode = scaleMode;
        }

        this.viewportRectangle = viewportRectangle;

        this.forceUpdate = true;
        this.update();

        return true;
    },

    destroy: function destroyFn()
    {
        this.texLists = null;
        this.state = this.drawStates.uninit;

        delete this.graphicsDevice;

        if (this.vertexBuffer)
        {
            this.vertexBuffer.destroy();
        }
        if (this.indexBuffer)
        {
            this.indexBuffer.destroy();
        }

        this.copyVertexBuffer.destroy();

        var renderTargets = this.renderTargetStructs;
        while (renderTargets.length > 0)
        {
            var target = renderTargets.pop();
            target.texture.destroy();
            target.renderTarget.destroy();
            delete target.texture;
            delete target.renderTarget;
        }
    },

    begin: function beginFn(blendMode, sortMode)
    {
        // Check sort mode is well defined (or undefined signifying default)
        if (sortMode && !(sortMode in this.sort))
        {
            return false;
        }

        // Check blend mode is well defined (or undefined signifying default)
        if (blendMode && !(blendMode in this.blend))
        {
            return false;
        }

        //if there are render states left in the stack
        //and begin has been called without an end
        //draw previous data with current render state
        var firstTime = !this.sortMode;
        if (this.dispatch())
        {
            this.clearBatch();
        }

        if (firstTime)
        {
            if (this.state !== this.drawStates.ready)
            {
                return false;
            }

            // Check the buffers are correct before we render
            this.update();

            if (!this.currentRenderTarget)
            {
                this.graphicsDevice.setScissor(this.scissorX, this.scissorY, this.scissorWidth, this.scissorHeight);
            }
        }

        this.state = this.drawStates.draw;

        sortMode  = (sortMode)  ? sortMode  : (firstTime ? 'deferred' : this.sortMode);
        blendMode = (blendMode) ? blendMode : (firstTime ? 'opaque'   : this.blendMode);


        if (!firstTime)
        {
            this.sortModeStack.push(this.sortMode);
            this.blendModeStack.push(this.blendMode);
        }
        this.sortMode = sortMode;
        this.blendMode = blendMode;

        this.prepareSortMode(sortMode);
        this.graphicsDevice.setTechnique(this.blendModeTechniques[blendMode]);

        return true;
    },

    ///////////////////////////////////////////////////////////////////////////////////////////////

    // append sprite data to group buffer.
    _bufferSprite : function bufferSpriteFn(group, sprite)
    {
        var vertexData = group.vertexBufferData;
        var vertexBuffer = this.vertexBuffer;

        var index = group.numVertices * vertexBuffer.stride;
        var total = index + (4 * vertexBuffer.stride);
        if (total >= vertexData.length)
        {
            // allocate new vertex buffer data array.
            var size = this.bufferSizeAlgorithm(total, this.cpuStride);
            var newData = new Draw2D.prototype.floatArray(size);

            // copy data from existing buffer.
            var i;
            for (i = 0; i < index; i += 1)
            {
                newData[i] = vertexData[i];
            }

            group.vertexBufferData = vertexData = newData;
        }

        var c1 = sprite[8];
        var c2 = sprite[9];
        var c3 = sprite[10];
        var c4 = sprite[11];
        var u1 = sprite[12];
        var v1 = sprite[13];
        var u2 = sprite[14];
        var v2 = sprite[15];

        vertexData[index]      = sprite[0];
        vertexData[index + 1]  = sprite[1];
        vertexData[index + 2]  = c1;
        vertexData[index + 3]  = c2;
        vertexData[index + 4]  = c3;
        vertexData[index + 5]  = c4;
        vertexData[index + 6]  = u1;
        vertexData[index + 7]  = v1;

        vertexData[index + 8]  = sprite[2];
        vertexData[index + 9]  = sprite[3];
        vertexData[index + 10] = c1;
        vertexData[index + 11] = c2;
        vertexData[index + 12] = c3;
        vertexData[index + 13] = c4;
        vertexData[index + 14] = u2;
        vertexData[index + 15] = v1;

        vertexData[index + 16] = sprite[4];
        vertexData[index + 17] = sprite[5];
        vertexData[index + 18] = c1;
        vertexData[index + 19] = c2;
        vertexData[index + 20] = c3;
        vertexData[index + 21] = c4;
        vertexData[index + 22] = u1;
        vertexData[index + 23] = v2;

        vertexData[index + 24] = sprite[6];
        vertexData[index + 25] = sprite[7];
        vertexData[index + 26] = c1;
        vertexData[index + 27] = c2;
        vertexData[index + 28] = c3;
        vertexData[index + 29] = c4;
        vertexData[index + 30] = u2;
        vertexData[index + 31] = v2;

        group.numVertices += 4;

        // increment number of indices in present subset.
        group.indices[group.numSets - 1] += 6;
    },

    bufferMultiSprite : function bufferMultiSprite(group, buffer, count, offset)
    {
        var vertexData = group.vertexBufferData;
        var vertexBuffer = this.vertexBuffer;

        var numSprites = (count === undefined) ? Math.floor(buffer.length / 16) : count;
        count = numSprites * 16;

        offset = (offset !== undefined ? offset : 0) * 16;

        var i;
        var index = (group.numVertices * vertexBuffer.stride);
        var total = index + (numSprites * 4 * vertexBuffer.stride);
        if (total >= vertexData.length)
        {
            // allocate new vertex buffer data array.
            var size = this.bufferSizeAlgorithm(total, this.cpuStride);
            var newData = new Draw2D.prototype.floatArray(size);

            // copy data from existing buffer.
            for (i = 0; i < index; i += 1)
            {
                newData[i] = vertexData[i];
            }

            group.vertexBufferData = vertexData = newData;
        }

        var limit = offset + count;
        for (i = offset; i < limit; i += 16)
        {
            var c1 = buffer[i + 8];
            var c2 = buffer[i + 9];
            var c3 = buffer[i + 10];
            var c4 = buffer[i + 11];
            var u1 = buffer[i + 12];
            var v1 = buffer[i + 13];
            var u2 = buffer[i + 14];
            var v2 = buffer[i + 15];

            vertexData[index]      = buffer[i];
            vertexData[index + 1]  = buffer[i + 1];
            vertexData[index + 2]  = c1;
            vertexData[index + 3]  = c2;
            vertexData[index + 4]  = c3;
            vertexData[index + 5]  = c4;
            vertexData[index + 6]  = u1;
            vertexData[index + 7]  = v1;

            vertexData[index + 8]  = buffer[i + 2];
            vertexData[index + 9]  = buffer[i + 3];
            vertexData[index + 10] = c1;
            vertexData[index + 11] = c2;
            vertexData[index + 12] = c3;
            vertexData[index + 13] = c4;
            vertexData[index + 14] = u2;
            vertexData[index + 15] = v1;

            vertexData[index + 16] = buffer[i + 4];
            vertexData[index + 17] = buffer[i + 5];
            vertexData[index + 18] = c1;
            vertexData[index + 19] = c2;
            vertexData[index + 20] = c3;
            vertexData[index + 21] = c4;
            vertexData[index + 22] = u1;
            vertexData[index + 23] = v2;

            vertexData[index + 24] = buffer[i + 6];
            vertexData[index + 25] = buffer[i + 7];
            vertexData[index + 26] = c1;
            vertexData[index + 27] = c2;
            vertexData[index + 28] = c3;
            vertexData[index + 29] = c4;
            vertexData[index + 30] = u2;
            vertexData[index + 31] = v2;

            index += 32;
        }

        group.numVertices += (numSprites * 4);
        // increment number of indices in present subset.
        group.indices[group.numSets - 1] += (numSprites * 6);
    },

    ///////////////////////////////////////////////////////////////////////////////////////////////

    indexData : function indexDataFn(count)
    {
        var indexData = new Draw2D.prototype.uint16Array(count);
        var i;
        var vertexIndex = 0;
        for (i = 0; i < count; i += 6)
        {
            indexData[i]     = vertexIndex;
            indexData[i + 1] = vertexIndex + 1;
            indexData[i + 2] = vertexIndex + 2;
            indexData[i + 3] = vertexIndex + 1;
            indexData[i + 4] = vertexIndex + 2;
            indexData[i + 5] = vertexIndex + 3;
            vertexIndex += 4;
        }
        return indexData;
    },

    // upload group buffer to graphics device vertexBuffer.
    uploadBuffer : function uploadBufferFn(group, count, offset)
    {
        var vertexBuffer = this.vertexBuffer;
        var vertexBufferParameters = this.vertexBufferParameters;
        var graphicsDevice = this.graphicsDevice;
        var vertexData = group.vertexBufferData;

        var performanceData = this.performanceData;

        // Resize buffers.
        if (count > vertexBufferParameters.numVertices)
        {
            var newSize = this.bufferSizeAlgorithm(count, this.gpuStride);
            if (newSize > this.maxVertices)
            {
                newSize = this.maxVertices;
            }

            vertexBufferParameters.numVertices = newSize;
            this.vertexBuffer.destroy();
            this.vertexBuffer = vertexBuffer = graphicsDevice.createVertexBuffer(vertexBufferParameters);

            // 32 bytes per vertex.
            // 2 bytes per index, 1.5 indices per vertex.
            performanceData.gpuMemoryUsage = newSize * 35; // 32 + (1.5 * 2)

            newSize *= 1.5;

            // Set indices.
            var indexBufferParameters = this.indexBufferParameters;
            indexBufferParameters.data = this.indexData(newSize);
            indexBufferParameters.numIndices = newSize;
            this.indexBuffer.destroy();
            this.indexBuffer = graphicsDevice.createIndexBuffer(indexBufferParameters);
            graphicsDevice.setIndexBuffer(this.indexBuffer);
        }

        performanceData.dataTransfers += 1;

        // Upload data.
        if (offset === 0)
        {
            vertexBuffer.setData(vertexData, 0, count);
        }
        else
        {
            var stride = vertexBuffer.stride;
            vertexBuffer.setData(vertexData.subarray(offset * stride, (offset + count) * stride), 0, count);
        }
    },

    ///////////////////////////////////////////////////////////////////////////////////////////////

    drawRawImmediate : function drawRawImmediateFn(texture, multiSprite, count, offset)
    {
        var group = this.drawGroups[0];
        group.textures[0] = texture || this.defaultTexture;
        group.indices[0] = 0;
        group.numSets = 1;
        this.numGroups = 1;

        this.bufferMultiSprite(group, multiSprite, count, offset);

        // Draw render group immediately.
        this.dispatch();
    },

    drawSpriteImmediate : function drawSpriteImmediateFn(sprite)
    {
        var group = this.drawGroups[0];
        group.textures[0] = sprite._texture || this.defaultTexture;
        group.indices[0] = 0;
        group.numSets = 1;
        this.numGroups = 1;

        sprite._update(this.spriteAngleFactor);
        this._bufferSprite(group, sprite.data);

        // Draw render group immediately.
        this.dispatch();
    },

    drawImmediate : function drawImmediateFn(params)
    {
        var texture = params.texture || this.defaultTexture;
        var destRect = params.destinationRectangle;
        var srcRect = params.sourceRectangle;
        var color = params.color;
        var rotation = params.rotation;

        var group = this.drawGroups[0];
        group.textures[0] = texture;
        group.indices[0] = 0;
        group.numSets = 1;
        this.numGroups = 1;

        var drawSprite = this.drawSprite;
        Draw2DSpriteData.setFromRotatedRectangle(drawSprite, texture, destRect, srcRect, color, rotation, params.origin);
        this._bufferSprite(group, drawSprite);

        // Draw render group immediately.
        this.dispatch();
    },

    ///////////////////////////////////////////////////////////////////////////////////////////////

    drawRawDeferred : function drawRawDeferredFn(texture, multiSprite, count, offset)
    {
        texture = texture || this.defaultTexture;
        var group = this.drawGroups[0];
        this.numGroups = 1;
        // If present group draw list uses a different texture
        // We must start a new draw list.
        var numSets = group.numSets;
        if (numSets === 0 || group.textures[numSets - 1] !== texture)
        {
            group.textures[numSets] = texture;
            group.indices[numSets] = 0;
            group.numSets += 1;
        }

        this.bufferMultiSprite(group, multiSprite, count, offset);
    },

    drawSpriteDeferred : function drawSpriteDeferredFn(sprite)
    {
        var texture = sprite._texture || this.defaultTexture;

        var group = this.drawGroups[0];
        this.numGroups = 1;
        // If present group draw list uses a different texture
        // We must start a new draw list.
        var numSets = group.numSets;
        if (numSets === 0 || group.textures[numSets - 1] !== texture)
        {
            group.textures[numSets] = texture;
            group.indices[numSets] = 0;
            group.numSets += 1;
        }

        sprite._update(this.spriteAngleFactor);
        this._bufferSprite(group, sprite.data);
    },

    drawDeferred : function drawDeferredFn(params)
    {
        var texture = params.texture || this.defaultTexture;

        var group = this.drawGroups[0];
        this.numGroups = 1;
        // If present group draw list uses a different texture
        // We must start a new draw list.
        var numSets = group.numSets;
        if (numSets === 0 || group.textures[numSets - 1] !== texture)
        {
            group.textures[numSets] = texture;
            group.indices[numSets] = 0;
            group.numSets += 1;
        }

        var destRect = params.destinationRectangle;
        var srcRect = params.sourceRectangle;
        var color = params.color;
        var rotation = params.rotation;

        var drawSprite = this.drawSprite;
        Draw2DSpriteData.setFromRotatedRectangle(drawSprite, texture, destRect, srcRect, color, rotation, params.origin);

        this._bufferSprite(group, drawSprite);
    },

    ///////////////////////////////////////////////////////////////////////////////////////////////

    drawRawTextured : function drawRawTexturedFn(texture, multiSprite, count, offset)
    {
        texture = texture || this.defaultTexture;
        var group;
        // If last call to drawTextured used the same texture, then we need not look up render group.
        if (this.currentTextureGroup !== undefined && this.currentTextureGroup.textures[0] === texture)
        {
            group = this.currentTextureGroup;
        }
        else
        {
            // Look up render group in texLists.
            var name = texture.name;
            var texLists = this.texLists;
            group = texLists[name];
            if (!group)
            {
                // Create new render group.
                group = this.drawGroups[this.numGroups];
                if (!group)
                {
                    group = Draw2DGroup.create();
                }
                this.drawGroups[this.numGroups] = texLists[name] = group;
                group.textures[0] = texture;
                group.indices[0] = 0;
                group.numSets = 1;
                this.numGroups += 1;
            }
            this.currentTextureGroup = group;
        }

        this.bufferMultiSprite(group, multiSprite, count, offset);
    },

    drawSpriteTextured : function drawSpriteTexturedFn(sprite)
    {
        var texture = sprite._texture || this.defaultTexture;

        var group;
        // If last call to drawTextured used the same texture, then we need not look up render group.
        if (this.currentTextureGroup !== undefined && this.currentTextureGroup.textures[0] === texture)
        {
            group = this.currentTextureGroup;
        }
        else
        {
            // Look up render group in texLists.
            var name = texture.name;
            var texLists = this.texLists;
            group = texLists[name];
            if (!group)
            {
                // Create new render group.
                group = this.drawGroups[this.numGroups];
                if (!group)
                {
                    group = Draw2DGroup.create();
                }
                this.drawGroups[this.numGroups] = texLists[name] = group;
                group.textures[0] = texture;
                group.indices[0] = 0;
                group.numSets = 1;
                this.numGroups += 1;
            }
            this.currentTextureGroup = group;
        }

        sprite._update(this.spriteAngleFactor);
        this._bufferSprite(group, sprite.data);
    },

    drawTextured : function drawTexturedFn(params)
    {
        var texture = params.texture || this.defaultTexture;

        var group;
        // If last call to drawTextured used the same texture, then we need not look up render group.
        if (this.currentTextureGroup !== undefined && this.currentTextureGroup.textures[0] === texture)
        {
            group = this.currentTextureGroup;
        }
        else
        {
            // Look up render group in texLists.
            var name = texture.name;
            var texLists = this.texLists;
            group = texLists[name];
            if (!group)
            {
                // Create new render group.
                group = this.drawGroups[this.numGroups];
                if (!group)
                {
                    group = Draw2DGroup.create();
                }
                this.drawGroups[this.numGroups] = texLists[name] = group;
                group.textures[0] = texture;
                group.indices[0] = 0;
                group.numSets = 1;
                this.numGroups += 1;
            }
            this.currentTextureGroup = group;
        }

        var destRect = params.destinationRectangle;
        var srcRect = params.sourceRectangle;
        var color = params.color;
        var rotation = params.rotation;

        var drawSprite = this.drawSprite;
        Draw2DSpriteData.setFromRotatedRectangle(drawSprite, texture, destRect, srcRect, color, rotation, params.origin);

        this._bufferSprite(group, drawSprite);
    },

    ///////////////////////////////////////////////////////////////////////////////////////////////

    prepareSortMode : function refreshSortModeFn(sortMode)
    {
        if (sortMode === 'deferred')
        {
            this.draw = this.drawDeferred;
            this.drawSprite = this.drawSpriteDeferred;
            this.drawRaw = this.drawRawDeferred;
        }
        else if (sortMode === 'immediate')
        {
            this.draw = this.drawImmediate;
            this.drawSprite = this.drawSpriteImmediate;
            this.drawRaw = this.drawRawImmediate;
        }
        else
        {
            this.draw = this.drawTextured;
            this.drawSprite = this.drawSpriteTextured;
            this.drawRaw = this.drawRawTextured;
        }
    },

    ///////////////////////////////////////////////////////////////////////////////////////////////

    end: function endFn()
    {
        if (this.state !== this.drawStates.draw)
        {
            return false;
        }

        //dispatch objects to the graphics card
        if (this.dispatch())
        {
            this.clearBatch();
        }

        if (this.blendModeStack.length !== 0)
        {
            this.blendMode = this.blendModeStack.pop();
            this.sortMode = this.sortModeStack.pop();
            this.prepareSortMode(this.sortMode);
            this.graphicsDevice.setTechnique(this.blendModeTechniques[this.blendMode]);
        }
        else
        {
            this.blendMode = undefined;
            this.sortMode = undefined;
            this.state = this.drawStates.ready;
        }

        return true;
    },

    dispatch: function dispatchFn()
    {
        // Nothing to dispatch.
        var numGroups = this.numGroups;
        if (numGroups === 0)
        {
            return false;
        }

        var graphicsDevice = this.graphicsDevice;
        var techniqueParameters = this.techniqueParameters;
        graphicsDevice.setIndexBuffer(this.indexBuffer);

        var drawGroups = this.drawGroups;
        var renderTargetUsed = false;
        if (this.currentRenderTarget)
        {
            renderTargetUsed = graphicsDevice.beginRenderTarget(this.currentRenderTarget.renderTarget);
        }

        var performanceData = this.performanceData;

        var i;
        for (i = 0; i < numGroups; i += 1)
        {
            var group = drawGroups[i];

            var textures = group.textures;
            var indices = group.indices;
            var setIndex = 0;

            var vindex = 0;
            var vlimit = group.numVertices;
            while (vindex < vlimit)
            {
                // number of vertices remaining.
                var vcount = vlimit - vindex;
                if (vcount > this.maxVertices)
                {
                    vcount = this.maxVertices;
                }

                // Upload group vertex sub-buffer to graphics device.
                this.uploadBuffer(group, vcount, vindex);
                graphicsDevice.setStream(this.vertexBuffer, this.semantics);

                // sprite uses 4 vertices, and 6 indices
                // so for 'vcount' number of vertices, we have vcount * 1.5 indices
                var ilimit = vcount * 1.5;
                var iindex = 0;
                while (iindex < ilimit) {
                    techniqueParameters.texture = textures[setIndex];

                    // number of indices remaining to render.
                    var icount = ilimit - iindex;
                    if (icount >= indices[setIndex])
                    {
                        // finish rendering sub list.
                        icount = indices[setIndex];
                        setIndex += 1;
                    }
                    else
                    {
                        // sub list still has remaining indices to render.
                        indices[setIndex] -= icount;
                    }

                    var batchSize = icount / 6;
                    if (performanceData.batchCount === 0)
                    {
                        performanceData.minBatchSize = batchSize;
                        performanceData.maxBatchSize = batchSize;
                        performanceData.avgBatchSize = batchSize;
                        performanceData.batchCount = 1;
                    }
                    else
                    {
                        if (batchSize < performanceData.minBatchSize)
                        {
                            performanceData.minBatchSize = batchSize;
                        }
                        if (batchSize > performanceData.maxBatchSize)
                        {
                            performanceData.maxBatchSize = batchSize;
                        }
                        performanceData.avgBatchSize *= performanceData.batchCount;
                        performanceData.avgBatchSize += batchSize;
                        performanceData.batchCount += 1;
                        performanceData.avgBatchSize /= performanceData.batchCount;
                    }

                    graphicsDevice.setTechniqueParameters(techniqueParameters);
                    graphicsDevice.drawIndexed(graphicsDevice.PRIMITIVE_TRIANGLES, icount, iindex);

                    iindex += icount;
                }

                vindex += vcount;
            }

            group.numSets = 0;
            group.numVertices = 0;
        }

        if (this.currentRenderTarget && renderTargetUsed)
        {
            graphicsDevice.endRenderTarget();
        }

        return true;
    },

    bufferSizeAlgorithm : function bufferSizeAlgorithmFn(target, stride)
    {
        // scale factor of 2 is asymtopically optimal in terms of number of resizes
        // performed and copies performed, but we want to try and conserve memory
        // and so choose a less optimal 1.25 so that buffer will never be too much
        // larger than necessary.
        var factor = 1.25;

        // We size buffer to the next power of the factor which is >= target
        var logf = Math.ceil(Math.log(target) / Math.log(factor));
        var size = Math.floor(Math.pow(factor, logf));

        // Additionally ensure that we always take a multiple of of the stride
        // to avoid wasted bytes that could never be used.
        return (stride * Math.ceil(size / stride));
    },

    updateRenderTargetVbo : function updateRenderTargetVboFn(viewX, viewY, viewWidth, viewHeight)
    {
        var graphicsDevice = this.graphicsDevice;
        var halfGraphicsDeviceWidth = 0.5 * graphicsDevice.width;
        var halfGraphicsDeviceHeight = 0.5 * graphicsDevice.height;

        //
        // Update the VBO for the presentRenderTarget
        //
        var vertexBuffer = this.copyVertexBuffer;

        var left = (viewX - halfGraphicsDeviceWidth) / halfGraphicsDeviceWidth;
        var right = (viewX + viewWidth - halfGraphicsDeviceWidth) / halfGraphicsDeviceWidth;
        var topv = (viewY - halfGraphicsDeviceHeight) / halfGraphicsDeviceHeight;
        var bottom = (viewY + viewHeight - halfGraphicsDeviceHeight) / halfGraphicsDeviceHeight;

        var vertexData = this.vertexBufferData;
        vertexData[0] = left;
        vertexData[1] = bottom;
        vertexData[2] = 0.0;
        vertexData[3] = 1.0;

        vertexData[4] = left;
        vertexData[5] = topv;
        vertexData[6] = 0.0;
        vertexData[7] = 0.0;

        vertexData[8] = right;
        vertexData[9] = bottom;
        vertexData[10] = 1.0;
        vertexData[11] = 1.0;

        vertexData[12] = right;
        vertexData[13] = topv;
        vertexData[14] = 1.0;
        vertexData[15] = 0.0;

        vertexBuffer.setData(vertexData, 0, 4);
    },

    // always overallocate.
    makePow2 : function makePow2Fn(dim)
    {
        var index = Math.log(dim) / Math.log(2);
        return (1 << Math.ceil(index));
    },

    createRenderTarget : function createRenderTargetFn(params)
    {
        var gd = this.graphicsDevice;
        var renderTargets = this.renderTargetStructs;
        var index = renderTargets.length;

        var name = (params && params.name) ? params.name : ("RenderTarget#" + index);
        var backBuffer = (params && params.backBuffer !== undefined) ? params.backBuffer : true;
        var matchScreen = (params.width === undefined || params.height === undefined);

        var texParams = this.renderTargetTextureParameters;
        texParams.name = name;

        var width  = (matchScreen) ? gd.width  : params.width;
        var height = (matchScreen) ? gd.height : params.height;
        texParams.width  = this.makePow2(width);
        texParams.height = this.makePow2(height);

        var texture = gd.createTexture(texParams);
        var targetParams = this.renderTargetParams;
        targetParams.colorTexture0 = texture;
        var renderTarget = gd.createRenderTarget(targetParams);

        renderTargets.push({
            managed : matchScreen,
            renderTarget : renderTarget,
            texture : texture,
            backBuffer : backBuffer,
            actualWidth  : (backBuffer ? width  : texture.width),
            actualHeight : (backBuffer ? height : texture.height)
        });

        return index;
    },

    validateTarget : function validateTargetFn(target, viewWidth, viewHeight)
    {
        if (target.managed)
        {
            var tex = target.texture;
            if (target.backBuffer)
            {
                target.actualWidth = viewWidth;
                target.actualHeight = viewHeight;
            }
            viewWidth = this.makePow2(viewWidth);
            viewHeight = this.makePow2(viewHeight);
            if (!target.backBuffer)
            {
                target.actualWidth = viewWidth;
                target.actualHeight = viewHeight;
            }
            if (tex.width !== viewWidth || tex.height !== viewHeight)
            {
                var texParams = this.renderTargetTextureParameters;
                var targetParams = this.renderTargetParams;

                texParams.name = tex.name;
                texParams.width  = viewWidth;
                texParams.height = viewHeight;

                tex.destroy();
                target.renderTarget.destroy();

                var graphicsDevice = this.graphicsDevice;
                target.texture = graphicsDevice.createTexture(texParams);
                targetParams.colorTexture0 = target.texture;
                target.renderTarget = graphicsDevice.createRenderTarget(targetParams);
            }
        }
    },

    setBackBuffer : function setBackBufferFn()
    {
        if (this.state !== this.drawStates.ready)
        {
            return false;
        }

        this.currentRenderTarget = null;
        this.forceUpdate = true;

        return true;
    },

    getRenderTargetTexture : function getRenderTargetTextureFn(renderTargetIndex)
    {
        var renderTargets = this.renderTargetStructs;
        if (renderTargetIndex < 0 || renderTargetIndex >= renderTargets.length)
        {
            return null;
        }

        return renderTargets[renderTargetIndex].texture;
    },

    getRenderTarget : function getRenderTargetFn(renderTargetIndex)
    {
        var renderTargets = this.renderTargetStructs;
        if (renderTargetIndex < 0 || renderTargetIndex >= renderTargets.length)
        {
            return null;
        }

        return renderTargets[renderTargetIndex].renderTarget;
    },

    setRenderTarget : function setRenderTargetFn(renderTargetIndex)
    {
        var renderTargets = this.renderTargetStructs;
        if (renderTargetIndex < 0 || renderTargetIndex >= renderTargets.length)
        {
            return false;
        }

        if (this.state !== this.drawStates.ready)
        {
            return false;
        }

        this.currentRenderTarget = renderTargets[renderTargetIndex];
        this.forceUpdate = true;

        return true;
    },

    copyRenderTarget: function copyRenderTargetFn(renderTargetIndex)
    {
        if (this.state !== this.drawStates.ready)
        {
            return false;
        }

        var renderTargets = this.renderTargetStructs;
        if (renderTargetIndex < 0 || renderTargetIndex >= renderTargets.length)
        {
            return false;
        }

        // Check the buffers are correct before we render.
        this.update();

        if (!this.currentRenderTarget)
        {
            this.graphicsDevice.setScissor(this.scissorX, this.scissorY, this.scissorWidth, this.scissorHeight);
        }

        var graphicsDevice = this.graphicsDevice;
        var target = renderTargets[renderTargetIndex];
        var tex = target.texture;

        var technique = this.copyTechnique;
        var params = this.copyTechniqueParameters;
        var copyUVScale = params.copyUVScale;
        copyUVScale[0] = target.actualWidth / tex.width;
        copyUVScale[1] = target.actualHeight / tex.height;
        params.copyFlip = (!this.currentRenderTarget ? -1.0 : 1.0);
        params.inputTexture0 = tex;

        var renderTargetUsed = false;
        var currentTarget = this.currentRenderTarget;
        var vbo = this.copyVertexBuffer;
        if (currentTarget)
        {
            renderTargetUsed = graphicsDevice.beginRenderTarget(currentTarget.renderTarget);
        }

        graphicsDevice.setTechnique(technique);
        graphicsDevice.setTechniqueParameters(params);

        graphicsDevice.setStream(vbo, this.quadSemantics);
        graphicsDevice.draw(this.quadPrimitive, 4, 0);

        if (currentTarget && renderTargetUsed)
        {
            graphicsDevice.endRenderTarget();
        }

        return true;
    },

    resetPerformanceData : function resetPerformanceDataFn()
    {
        var data = this.performanceData;
        data.minBatchSize = data.maxBatchSize = data.avgBatchSize = undefined;
        data.batchCount = 0;
        data.dataTransfers = 0;
    }
};

// Constructor function
//
// params : {
//    graphicsDevice : gd,
//    blendModes : { // optional
//       name : Technique,
//       **repeated**
//    }
// }
Draw2D.create = function draw2DCreateFn(params)
{
    var o = new Draw2D();
    var gd = o.graphicsDevice = params.graphicsDevice;

    // Current sort and blend mode.
    o.sortMode  = undefined;
    o.blendMode = undefined;
    // Disjoint stack of modes for nested begins.
    o.sortModeStack  = [];
    o.blendModeStack = [];

    // Set of render groups to be dispatched.
    o.drawGroups = [Draw2DGroup.create()];
    o.numGroups = 0;

    // Set of render groups for texture sort mode.
    // dictionary on texture name.
    o.texLists = [];
    // Cached reference to last retrieved group to accelerate
    // texture sort mode draw calls.
    o.texGroup = undefined;

    // Sprite data instance used for rectangle draw calls.
    o.drawSprite = Draw2DSpriteData.create();

    // Solid fill texture for draw calls that do not specify a texture.
    o.defaultTexture = gd.createTexture({
        name : "DefaultDraw2DTexture",
        width : 1,
        height : 1,
        depth : 1,
        format : "L8",
        cubemap : false,
        mipmaps : true,
        renderable : false,
        dynamic : false,
        data : [0xff]
    });

    // Draw call methods.
    // These are set based on current sort mode.
    o.draw = undefined;
    o.drawSprite = undefined;
    o.drawRaw = undefined;

    // Load embedded default shader and techniques
    /*jshint white: false*/
    var shader = gd.createShader(
{
 "version": 1,
 "name": "draw2D.cgfx",
 "samplers":
 {
  "texture":
  {
   "MinFilter": 9985,
   "MagFilter": 9729,
   "WrapS": 33071,
   "WrapT": 33071
  },
  "inputTexture0":
  {
   "MinFilter": 9728,
   "MagFilter": 9729,
   "WrapS": 33071,
   "WrapT": 33071
  }
 },
 "parameters":
 {
  "clipSpace":
  {
   "type": "float",
   "columns": 4
  },
  "copyUVScale":
  {
   "type": "float",
   "columns": 2
  },
  "copyFlip":
  {
   "type": "float"
  },
  "texture":
  {
   "type": "sampler2D"
  },
  "inputTexture0":
  {
   "type": "sampler2D"
  }
 },
 "techniques":
 {
  "opaque":
  [
   {
    "parameters": ["clipSpace","texture"],
    "semantics": ["POSITION","COLOR","TEXCOORD0"],
    "states":
    {
     "DepthTestEnable": false,
     "DepthMask": false,
     "CullFaceEnable": false,
     "BlendEnable": false
    },
    "programs": ["vp_draw2D","fp_draw2D"]
   }
  ],
  "alpha":
  [
   {
    "parameters": ["clipSpace","texture"],
    "semantics": ["POSITION","COLOR","TEXCOORD0"],
    "states":
    {
     "DepthTestEnable": false,
     "DepthMask": false,
     "CullFaceEnable": false,
     "BlendEnable": true,
     "BlendFunc": [770,771]
    },
    "programs": ["vp_draw2D","fp_draw2D"]
   }
  ],
  "additive":
  [
   {
    "parameters": ["clipSpace","texture"],
    "semantics": ["POSITION","COLOR","TEXCOORD0"],
    "states":
    {
     "DepthTestEnable": false,
     "DepthMask": false,
     "CullFaceEnable": false,
     "BlendEnable": true,
     "BlendFunc": [770,1]
    },
    "programs": ["vp_draw2D","fp_draw2D"]
   }
  ],
  "copy":
  [
   {
    "parameters": ["copyUVScale","copyFlip","inputTexture0"],
    "semantics": ["POSITION","TEXCOORD0"],
    "states":
    {
     "DepthTestEnable": false,
     "DepthMask": false,
     "CullFaceEnable": false,
     "BlendEnable": false
    },
    "programs": ["vp_copy","fp_copy"]
   }
  ]
 },
 "programs":
 {
  "fp_copy":
  {
   "type": "fragment",
   "code": "#ifdef GL_ES\n#define TZ_LOWP lowp\nprecision mediump float;\nprecision mediump int;\n#else\n#define TZ_LOWP\n#endif\nvarying vec4 tz_TexCoord[8];\nvec4 _ret_0;uniform sampler2D inputTexture0;void main()\n{_ret_0=texture2D(inputTexture0,tz_TexCoord[0].xy);gl_FragColor=_ret_0;}"
  },
  "vp_copy":
  {
   "type": "vertex",
   "code": "#ifdef GL_ES\n#define TZ_LOWP lowp\nprecision mediump float;\nprecision mediump int;\n#else\n#define TZ_LOWP\n#endif\nvarying vec4 tz_TexCoord[8];attribute vec4 ATTR8;attribute vec4 ATTR0;\nvec4 _OutPosition1;vec2 _OutUV1;uniform vec2 copyUVScale;uniform float copyFlip;void main()\n{_OutPosition1.x=ATTR0.x;_OutPosition1.y=ATTR0.y*copyFlip;_OutPosition1.zw=ATTR0.zw;_OutUV1=ATTR8.xy*copyUVScale;tz_TexCoord[0].xy=_OutUV1;gl_Position=_OutPosition1;}"
  },
  "fp_draw2D":
  {
   "type": "fragment",
   "code": "#ifdef GL_ES\n#define TZ_LOWP lowp\nprecision mediump float;\nprecision mediump int;\n#else\n#define TZ_LOWP\n#endif\nvarying TZ_LOWP vec4 tz_Color;varying vec4 tz_TexCoord[8];\nvec4 _ret_0;vec4 _TMP0;uniform sampler2D texture;void main()\n{_TMP0=texture2D(texture,tz_TexCoord[0].xy);_ret_0=tz_Color*_TMP0;gl_FragColor=_ret_0;}"
  },
  "vp_draw2D":
  {
   "type": "vertex",
   "code": "#ifdef GL_ES\n#define TZ_LOWP lowp\nprecision mediump float;\nprecision mediump int;\n#else\n#define TZ_LOWP\n#endif\nvarying TZ_LOWP vec4 tz_Color;varying vec4 tz_TexCoord[8];attribute vec4 ATTR8;attribute vec4 ATTR3;attribute vec4 ATTR0;\nvec4 _OUTPosition1;vec4 _OUTColor1;vec2 _OUTTexCoord01;uniform vec4 clipSpace;void main()\n{vec2 _position;_position=ATTR0.xy*clipSpace.xy+clipSpace.zw;_OUTPosition1.x=_position.x;_OUTPosition1.y=_position.y;_OUTPosition1.z=0.0;_OUTPosition1.w=1.0;_OUTColor1=ATTR3;_OUTTexCoord01=ATTR8.xy;tz_TexCoord[0].xy=ATTR8.xy;tz_Color=ATTR3;gl_Position=_OUTPosition1;}"
  }
 }
}
    );
    /*jshint white: true*/

    // supported blend modes.
    o.blend = {
        additive : 'additive',
        alpha    : 'alpha',
        opaque   : 'opaque'
    },

    // Mapping from blend mode name to Technique object.
    o.blendModeTechniques = {};
    o.blendModeTechniques.additive = shader.getTechnique("additive");
    o.blendModeTechniques.alpha    = shader.getTechnique("alpha");
    o.blendModeTechniques.opaque   = shader.getTechnique("opaque");

    // Append techniques and supported blend modes with user supplied techniques.
    if (params.blendModes)
    {
        for (var name in params.blendModes)
        {
            if (params.blendModes.hasOwnProperty(name))
            {
                o.blend[name] = name;
                o.blendModeTechniques[name] = params.blendModes[name];
            }
        }
    }

    // Blending techniques.
    o.techniqueParameters = gd.createTechniqueParameters({
        clipSpace: new Draw2D.prototype.floatArray(4),
        texture: null
    });

    // Current render target
    o.currentRenderTarget = null;
    o.renderTargetStructs = [];

    o.state = o.drawStates.ready;

    o.scaleMode = 'none';
    o.blendMode = 'opaque';

    // View port, back buffer and managed render target values.
    o.width = 0;
    o.height = 0;

    o.scissorX = 0;
    o.scissorY = 0;
    o.scissorWidth = o.graphicsDevice.width;
    o.scissorHeight = o.graphicsDevice.height;

    o.clipOffsetX = -1.0;
    o.clipOffsetY = 1;
    o.clipScaleX = 2.0 / o.graphicsDevice.width;
    o.clipScaleY = -2.0 / o.graphicsDevice.height;

    o.viewScaleX = 1;
    o.viewScaleY = 1;

    // GPU Memory.
    // -----------

    var initial = (params.initialGpuMemory ? params.initialGpuMemory : 0);
    if (initial < 140)
    {
        // 140 = minimum that can be used to draw a single sprite.
        initial = 140;
    }
    if (initial > 2293760)
    {
        // 2293760 = maximum that can ever be used in 16bit indices.
        initial = 2293760;
    }

    o.performanceData = {
        gpuMemoryUsage : initial,
        minBatchSize : 0,
        maxBatchSize : 0,
        avgBatchSize : 0,
        batchCount : 0,
        dataTransfers : 0
    };

    o.maxGpuMemory = (params.maxGpuMemory ? params.maxGpuMemory : 2293760);
    if (o.maxGpuMemory < initial)
    {
        o.maxGpuMemory = initial;
    }

    var initialVertices = Math.floor(initial / 140) * 4;
    o.maxVertices = Math.floor(o.maxGpuMemory / 140) * 4;
    if (o.maxVertices > 65536)
    {
        o.maxVertices = 65536;
    }

    // number of bytes used per-sprite on cpu vertex buffers.
    o.cpuStride = 64;

    // vertex buffer is in terms of number of vertices.
    // so we have a stride of 4 rather than 128.
    o.gpuStride = 4;

    // Index and vertex buffer setup.
    o.vertexBufferParameters = {
        numVertices: initialVertices,
        attributes: [gd.VERTEXFORMAT_FLOAT2, gd.VERTEXFORMAT_FLOAT4, gd.VERTEXFORMAT_FLOAT2],
        'transient': true
    };
    o.vertexBuffer = gd.createVertexBuffer(o.vertexBufferParameters);

    o.semantics = gd.createSemantics([gd.SEMANTIC_POSITION, gd.SEMANTIC_COLOR, gd.SEMANTIC_TEXCOORD0]);
    o.indexBufferParameters = {
        numIndices: (initialVertices * 1.5),
        format: gd.INDEXFORMAT_USHORT,
        dynamic: false,
        data : o.indexData((initialVertices * 1.5))
    };
    o.indexBuffer = gd.createIndexBuffer(o.indexBufferParameters);

    // Render Target API
    // -----------------

    // Objects and values used in render target management.
    o.renderTargetIndex = 0;
    o.renderTargetCount = 0;

    o.renderTargetTextureParameters = {
        name   : '',
        width  : 0,
        height : 0,
        depth  : 1,
        format     : "R8G8B8A8",
        cubemap    : false,
        mipmaps    : true,
        renderable : true,
        dynamic    : true
    };

    o.renderTargetParams = {
        colorTexture0 : null
    };

    // Render Target copying.
    // ----------------------

    // Copy technique for copyRenderTarget
    o.copyTechnique = shader.getTechnique("copy");
    o.copyTechniqueParameters = gd.createTechniqueParameters({
        inputTexture0 : null,
        copyFlip : 1,
        copyUVScale : new Draw2D.prototype.floatArray([1, 1])
    });

    // Objects used in copyRenderTarget method.
    o.quadSemantics = gd.createSemantics([gd.SEMANTIC_POSITION, gd.SEMANTIC_TEXCOORD0]);
    o.quadPrimitive = gd.PRIMITIVE_TRIANGLE_STRIP;

    o.copyVertexBufferParams = {
        numVertices: 4,
        attributes: [gd.VERTEXFORMAT_FLOAT2, gd.VERTEXFORMAT_FLOAT2],
        'transient': true
    };
    o.copyVertexBuffer = gd.createVertexBuffer(o.copyVertexBufferParams);

    // updateRenderTargetVBO
    // ---------------------

    /*jshint white: false*/
    o.vertexBufferData = new Draw2D.prototype.floatArray([-1.0, -1.0, 0.0, 0.0,
                                                           1.0, -1.0, 1.0, 0.0,
                                                          -1.0,  1.0, 0.0, 1.0,
                                                           1.0,  1.0, 1.0, 1.0]);
    /*jshint white: true*/

    return o;
};

// Detect correct typed arrays
(function () {
    Draw2D.prototype.uint16Array = function (arg) {
        if (arguments.length === 0)
        {
            return [];
        }

        var i, ret;
        if (typeof arg === "number")
        {
            ret = new Array(arg);
        }
        else
        {
            ret = [];
            for (i = 0; i < arg.length; i += 1)
            {
                ret[i] = arg[i];
            }
        }
        return ret;
    };

    var testArray;
    var textDescriptor;

    if (typeof Uint16Array !== "undefined")
    {
        testArray = new Uint16Array(4);
        textDescriptor = Object.prototype.toString.call(testArray);
        if (textDescriptor === '[object Uint16Array]')
        {
            Draw2D.prototype.uint16Array = Uint16Array;
        }
    }

    Draw2D.prototype.floatArray = function (arg) {
        if (arguments.length === 0)
        {
            return [];
        }

        var i, ret;
        if (typeof arg === "number")
        {
            ret = new Array(arg);
        }
        else
        {
            ret = [];
            for (i = 0; i < arg.length; i += 1)
            {
                ret[i] = arg[i];
            }
        }
        return ret;
    };

    if (typeof Float32Array !== "undefined")
    {
        testArray = new Float32Array(4);
        textDescriptor = Object.prototype.toString.call(testArray);
        if (textDescriptor === '[object Float32Array]')
        {
            Draw2D.prototype.floatArray = Float32Array;
            Draw2D.prototype.defaultClearColor = new Float32Array(Draw2D.prototype.defaultClearColor);
        }
    }
}());

// Copyright (c) 2011-2012 Turbulenz Limited

/*global BadgeManager: false*/
/*global window: false*/
/*global GameSession: false*/
/*global Turbulenz*/
/*global TurbulenzBridge: false*/
/*global TurbulenzEngine: false*/
/*global Utilities: false*/
/*global MappingTable: false*/
/*global LeaderboardManager: false*/
/*global ServiceRequester: false*/
/*global Badges*/
/*global MultiPlayerSession: false*/
/*global MultiPlayerSessionManager: false*/
/*global Observer*/
/*global StoreManager: false*/
/*global JsLocalStore: false*/

var TurbulenzServices;

function ServiceRequester() {}
ServiceRequester.prototype =
{

    // make a request if the service is available. Same parameters as an
    // Utilities.ajax call with extra argument:
    //     neverDiscard - Never discard the request. Always queues the request
    //                    for when the service is again available. (Ignores
    //                    server preference)
    request: function requestFn(params)
    {
        var discardRequestFn = function discardRequestFn()
        {
            if (params.callback)
            {
                params.callback({'ok': false, 'msg': 'Service Unavailable. Discarding request'}, 503);
            }
        };

        var that = this;
        var serviceStatusObserver = this.serviceStatusObserver;

        var onServiceStatusChange;
        onServiceStatusChange = function onServiceStatusChangeFn(running, discardRequest)
        {
            if (discardRequest)
            {
                if (!params.neverDiscard)
                {
                    serviceStatusObserver.unsubscribe(onServiceStatusChange);
                    discardRequestFn();
                }
            }
            else if (running)
            {
                serviceStatusObserver.unsubscribe(onServiceStatusChange);
                that.request(params);
            }
        };

        if (!this.running)
        {
            if (this.discardRequests && !params.neverDiscard)
            {
                TurbulenzEngine.setTimeout(discardRequestFn, 0);
                return false;
            }

            // we check waiting so that we don't get into an infinite loop of callbacks
            // when a service goes down, then up and then down again before the subscribed
            // callbacks have all been called.
            if (!params.waiting)
            {
                params.waiting = true;
                serviceStatusObserver.subscribe(onServiceStatusChange);
            }
            return true;
        }

        var oldCustomErrorHandler = params.customErrorHandler;
        params.customErrorHandler = function checkServiceUnavailableFn(callContext, makeRequest, responseJSON, status)
        {
            if (status === 503)
            {
                var responseObj = JSON.parse(responseJSON);
                var statusObj = responseObj.data;
                var discardRequests = (statusObj ? statusObj.discardRequests : true);
                that.discardRequests = discardRequests;

                if (discardRequests && !params.neverDiscard)
                {
                    discardRequestFn();
                }
                else
                {
                    serviceStatusObserver.subscribe(onServiceStatusChange);
                }
                TurbulenzServices.serviceUnavailable(that, callContext);
                // An error occurred so return false to avoid calling the success callback
                return false;
            }
            else
            {
                // call the old custom error handler
                if (oldCustomErrorHandler)
                {
                    return oldCustomErrorHandler.call(params.requestHandler, callContext, makeRequest, responseJSON, status);
                }
                return true;
            }
        };

        Utilities.ajax(params);
        return true;
    }
};

ServiceRequester.create = function apiServiceCreateFn(serviceName, params)
{
    var serviceRequester = new ServiceRequester();

    if (!params)
    {
        params = {};
    }

    // we assume everything is working at first
    serviceRequester.running = true;
    serviceRequester.discardRequests = false;
    serviceRequester.serviceStatusObserver = Observer.create();

    serviceRequester.serviceName = serviceName;

    serviceRequester.onServiceUnavailable = params.onServiceUnavailable;
    serviceRequester.onServiceAvailable = params.onServiceAvailable;

    return serviceRequester;
};

//
// TurbulenzServices
//
TurbulenzServices = {

    multiplayerJoinRequestQueue: {
        // A FIFO queue that passes events through to the handler when un-paused and buffers up
        // events while paused
        argsQueue: [],
        handler: function nopFn() {},
        context: undefined,
        paused: true,
        onEvent: function onEventFn(handler, context) {
            this.handler = handler;
            this.context = context;
        },
        push: function pushFn(sessionId)
        {
            var args = [sessionId];
            if (this.paused)
            {
                this.argsQueue.push(args);
            }
            else
            {
                this.handler.apply(this.context, args);
            }
        },
        shift: function shiftFn()
        {
            var args = this.argsQueue.shift();
            return args ? args[0] : undefined;
        },
        clear: function clearFn()
        {
            this.argsQueue = [];
        },
        pause: function pauseFn()
        {
            this.paused = true;
        },
        resume: function resumeFn()
        {
            this.paused = false;
            while (this.argsQueue.length)
            {
                this.handler.apply(this.context, this.argsQueue.shift());
                if (this.paused)
                {
                    break;
                }
            }
        }
    },

    available: function turbulenzServicesAvailableFn()
    {
        return window.gameSlug !== undefined;
    },

    addBridgeEvents: function addBridgeEventsFn()
    {
        var turbulenz = window.top.Turbulenz;
        var turbulenzData = (turbulenz && turbulenz.Data) || {};
        var sessionToJoin = turbulenzData.joinMultiplayerSessionId;
        var that = this;

        var onJoinMultiplayerSession = function onJoinMultiplayerSessionFn(joinMultiplayerSessionId) {
            that.multiplayerJoinRequestQueue.push(joinMultiplayerSessionId);
        };

        var onReceiveConfig = function onReceiveConfigFn(configString) {
            var config = JSON.parse(configString);

            if (config.mode)
            {
                that.mode = config.mode;
            }

            if (config.joinMultiplayerSessionId)
            {
                that.multiplayerJoinRequestQueue.push(config.joinMultiplayerSessionId);
            }

            that.bridgeServices = !!config.bridgeServices;
        };

        // This should go once we have fully moved to the new system
        if (sessionToJoin)
        {
            this.multiplayerJoinRequestQueue.push(sessionToJoin);
        }

        TurbulenzBridge.setOnMultiplayerSessionToJoin(onJoinMultiplayerSession);
        TurbulenzBridge.setOnReceiveConfig(onReceiveConfig);
        TurbulenzBridge.triggerRequestConfig();

        // Setup framework for asynchronous function calls
        this.responseHandlers = [null];
        // 0 is reserved value for no registered callback
        this.responseIndex = 0;
        TurbulenzBridge.on("bridgeservices.response", function (jsondata) { that.routeResponse(jsondata); });
    },

    callOnBridge: function turbulenzServicesCallOnBridgeFn(event, data, callback)
    {
        var request = {
            data: data
        };
        if (callback)
        {
            this.responseIndex += 1;
            this.responseHandlers[this.responseIndex] = callback;
            request.key = this.responseIndex;
        }
        TurbulenzBridge.emit('bridgeservices.' + event, JSON.stringify(request));
    },

    addSignature: function turbulenzServicesAddSignatureFn(data, url)
    {
        var str;
        data.requestUrl = url;
        str = TurbulenzEngine.encrypt(JSON.stringify(data));
        data.str = str;
        data.signature = TurbulenzEngine.generateSignature(str);
        return data;
    },

    routeResponse: function routeResponseFn(jsondata)
    {
        var response = JSON.parse(jsondata);
        var index = response.key || 0;
        var callback = this.responseHandlers[index];
        if (callback)
        {
            this.responseHandlers[index] = null;
            callback(response.data);
        }
    },

    defaultErrorCallback: function turbulenzServicesDefaultErrorCallbackFn(errorMsg, httpStatus) {},

    onServiceUnavailable: function turbulenzServicesOnServiceUnavailableFn(serviceName, callContext) {},
    onServiceAvailable: function turbulenzServicesOnServiceAvailableFn(serviceName, callContext) {},

    createGameSession: function turbulenzServicesCreateGameSession(requestHandler, sessionCreatedFn, errorCallbackFn)
    {
        return GameSession.create(requestHandler, sessionCreatedFn, errorCallbackFn);
    },

    createMappingTable: function turbulenzServicesCreateMappingTable(requestHandler,
                                                                     gameSession,
                                                                     tableRecievedFn,
                                                                     defaultMappingSettings,
                                                                     errorCallbackFn)
    {
        var mappingTable = new MappingTable();
        var mappingTableSettings = gameSession && gameSession.mappingTable;
        if (mappingTableSettings)
        {
            mappingTable.mappingTableURL = mappingTableSettings.mappingTableURL;
            mappingTable.mappingTablePrefix = mappingTableSettings.mappingTablePrefix;
            mappingTable.assetPrefix = mappingTableSettings.assetPrefix;
        }
        else if (defaultMappingSettings)
        {
            mappingTable.mappingTableURL = defaultMappingSettings.mappingTableURL ||
                (defaultMappingSettings.mappingTableURL === "" ? "" : "mapping_table.json");
            mappingTable.mappingTablePrefix = defaultMappingSettings.mappingTablePrefix ||
                (defaultMappingSettings.mappingTablePrefix === "" ? "" : "staticmax/");
            mappingTable.assetPrefix = defaultMappingSettings.assetPrefix ||
                (defaultMappingSettings.assetPrefix === "" ? "" : "missing/");
        }
        else
        {
            mappingTable.mappingTableURL = "mapping_table.json";
            mappingTable.mappingTablePrefix = "staticmax/";
            mappingTable.assetPrefix = "missing/";
        }

        mappingTable.errorCallbackFn = errorCallbackFn || TurbulenzServices.defaultErrorCallback;
        if (!mappingTable.mappingTableURL)
        {
            mappingTable.errorCallbackFn("TurbulenzServices.createMappingTable no mapping table file given");
        }

        function createMappingTableCallbackFn(urlMappingData)
        {
            var urlMapping = urlMappingData.urnmapping || urlMappingData.urnremapping || {};
            mappingTable.urlMapping = urlMapping;

            // Prepend all the mapped physical paths with the asset server
            var mappingTablePrefix = mappingTable.mappingTablePrefix;
            if (mappingTablePrefix)
            {
                var source;
                for (source in urlMapping)
                {
                    if (urlMapping.hasOwnProperty(source))
                    {
                        urlMapping[source] = mappingTablePrefix + urlMapping[source];
                    }
                }
            }

            tableRecievedFn(mappingTable);
        }

        requestHandler.request({
                src: mappingTable.mappingTableURL,
                onload: function jsonifyResponse(jsonResponse, status) {
                    if (status === 200)
                    {
                        var obj = JSON.parse(jsonResponse);
                        createMappingTableCallbackFn(obj);
                        return;
                    }

                    jsonResponse = jsonResponse || { msg: "(no response)"};
                    mappingTable.errorCallbackFn("TurbulenzServices.createMappingTable error with HTTP status " + status + ": " + jsonResponse.msg, status);

                    mappingTable.urlMapping = defaultMappingSettings && (defaultMappingSettings.urnMapping || {});
                    tableRecievedFn(mappingTable);
                }
            });

        return mappingTable;
    },

    createLeaderboardManager: function turbulenzServicesCreateLeaderboardManager(requestHandler,
                                                                                 gameSession,
                                                                                 leaderboardMetaRecieved,
                                                                                 errorCallbackFn)
    {
        return LeaderboardManager.create(requestHandler, gameSession, leaderboardMetaRecieved, errorCallbackFn);
    },

    createBadgeManager: function turbulenzServicesCreateBadgeManager(requestHandler, gameSession)
    {
        return BadgeManager.create(requestHandler, gameSession);
    },

    createStoreManager: function turbulenzServicesCreateStoreManager(requestHandler,
                                                                     gameSession,
                                                                     storeMetaRecieved,
                                                                     errorCallbackFn)
    {
        return StoreManager.create(requestHandler,
                                   gameSession,
                                   storeMetaRecieved,
                                   errorCallbackFn);
    },

    createMultiplayerSessionManager: function turbulenzServicescreateMultiplayerSessionManagerFn(requestHandler,
                                                                                                 gameSession)
    {
        return MultiPlayerSessionManager.create(requestHandler, gameSession);
    },

    createUserProfile: function turbulenzServicesCreateUserProfile(requestHandler,
                                                                   profileRecievedFn,
                                                                   errorCallbackFn)
    {
        var userProfile = {};

        if (!errorCallbackFn)
        {
            errorCallbackFn = TurbulenzServices.defaultErrorCallback;
        }

        function loadUserProfileCallbackFn(userProfileData)
        {
            if (userProfileData && userProfileData.ok)
            {
                userProfileData = userProfileData.data;
                var p;
                for (p in userProfileData)
                {
                    if (userProfileData.hasOwnProperty(p))
                    {
                        userProfile[p] = userProfileData[p];
                    }
                }
            }
        }

        var url = '/api/v1/profiles/user';
        // Can't request files from the hard disk using AJAX
        if (TurbulenzServices.available())
        {
            this.getService('profiles').request({
                url: url,
                method: 'GET',
                callback: function createUserProfileAjaxErrorCheck(jsonResponse, status)
                {
                    if (status === 200)
                    {
                        loadUserProfileCallbackFn(jsonResponse);
                    }
                    else if (errorCallbackFn)
                    {
                        errorCallbackFn("TurbulenzServices.createUserProfile error with HTTP status " + status + ": " + jsonResponse.msg, status);
                    }
                    profileRecievedFn(userProfile);
                },
                requestHandler: requestHandler
            });
        }

        return userProfile;
    },

    sendCustomMetricEvent: function turbulenzServicesSendCustomMetricEvent(eventKey,
                                                                           eventValue,
                                                                           requestHandler,
                                                                           gameSession,
                                                                           errorCallbackFn)
    {
        if (!errorCallbackFn)
        {
            errorCallbackFn = TurbulenzServices.defaultErrorCallback;
        }

        if (!TurbulenzServices.available())
        {
            if (errorCallbackFn)
            {
                errorCallbackFn("TurbulenzServices.sendCustomMetricEvent failed: Service not available",
                                0);
            }
            return;
        }

        // Validation

        if (('string' !== typeof eventKey) || (0 === eventKey.length))
        {
            if (errorCallbackFn)
            {
                errorCallbackFn("TurbulenzServices.sendCustomMetricEvent failed: Event key must be a non-empty string",
                                0);
            }
            return;
        }

        if (isNaN(parseFloat(eventValue)) || !isFinite(eventValue))
        {
            if ('[object Array]' !== Object.prototype.toString.call(eventValue))
            {
                if (errorCallbackFn)
                {
                    errorCallbackFn("TurbulenzServices.sendCustomMetricEvent failed: Event value must be a number or an array of numbers",
                                    0);
                }
                return;
            }

            var i, valuesLength = eventValue.length;
            for (i = 0; i < valuesLength; i += 1)
            {
                if (isNaN(parseFloat(eventValue[i])) || !isFinite(eventValue[i]))
                {
                    if (errorCallbackFn)
                    {
                        errorCallbackFn("TurbulenzServices.sendCustomMetricEvent failed: Event value array elements must be numbers",
                                        0);
                    }
                    return;
                }
            }
        }

        this.getService('customMetrics').request({
            url: '/api/v1/custommetrics/add-event/' + gameSession.gameSlug,
            method: 'POST',
            data: {'key': eventKey, 'value': eventValue, 'gameSessionId': gameSession.gameSessionId},
            callback: function sendCustomMetricEventAjaxErrorCheck(jsonResponse, status)
            {
                if (status !== 200 && errorCallbackFn)
                {
                    errorCallbackFn("TurbulenzServices.sendCustomMetricEvent error with HTTP status " + status + ": " + jsonResponse.msg, status);
                }
            },
            requestHandler: requestHandler,
            encrypt: true
        });
    },


    services: {},
    waitingServices: {},
    pollingServiceStatus: false,
    // milliseconds
    defaultPollInterval: 4000,

    getService: function getServiceFn(serviceName)
    {
        var services = this.services;
        if (services.hasOwnProperty(serviceName))
        {
            return services[serviceName];
        }
        else
        {
            var service = ServiceRequester.create(serviceName);
            services[serviceName] = service;
            return service;
        }
    },

    serviceUnavailable: function serviceUnavailableFn(service, callContext)
    {
        var waitingServices = this.waitingServices;
        var serviceName = service.serviceName;
        if (waitingServices.hasOwnProperty(serviceName))
        {
            return;
        }

        waitingServices[serviceName] = service;

        service.running = false;

        var onServiceUnavailableCallbacks = function onServiceUnavailableCallbacksFn(service)
        {
            var onServiceUnavailable = callContext.onServiceUnavailable;
            if (onServiceUnavailable)
            {
                onServiceUnavailable.call(service, callContext);
            }
            if (service.onServiceUnavailable)
            {
                service.onServiceUnavailable();
            }
            if (TurbulenzServices.onServiceUnavailable)
            {
                TurbulenzServices.onServiceUnavailable(service);
            }
        };

        if (service.discardRequests)
        {
            onServiceUnavailableCallbacks(service);
        }

        if (this.pollingServiceStatus)
        {
            return;
        }

        var that = this;
        var pollServiceStatus;

        var serviceUrl = '/api/v1/service-status/game/read/' + window.gameSlug;
        var servicesStatusCB = function servicesStatusCBFn(responseObj, status)
        {
            if (status === 200)
            {
                var statusObj = responseObj.data;
                var servicesObj = statusObj.services;

                var retry = false;
                var serviceName;
                for (serviceName in waitingServices)
                {
                    if (waitingServices.hasOwnProperty(serviceName))
                    {
                        var service = waitingServices[serviceName];
                        var serviceData = servicesObj[serviceName];
                        var serviceRunning = serviceData.running;

                        service.running = serviceRunning;
                        service.description = serviceData.description;

                        if (serviceRunning)
                        {
                            if (service.discardRequests)
                            {
                                var onServiceAvailable = callContext.onServiceAvailable;
                                if (onServiceAvailable)
                                {
                                    onServiceAvailable.call(service, callContext);
                                }
                                if (service.onServiceAvailable)
                                {
                                    service.onServiceAvailable();
                                }
                                if (TurbulenzServices.onServiceAvailable)
                                {
                                    TurbulenzServices.onServiceAvailable(service);
                                }
                            }

                            delete waitingServices[serviceName];
                            service.discardRequests = false;
                            service.serviceStatusObserver.notify(serviceRunning, service.discardRequests);

                        }
                        else
                        {
                            // if discardRequests has been set
                            if (serviceData.discardRequests && !service.discardRequests)
                            {
                                service.discardRequests = true;
                                onServiceUnavailableCallbacks(service);
                                // discard all waiting requests
                                service.serviceStatusObserver.notify(serviceRunning, service.discardRequests);
                            }
                            retry = true;
                        }
                    }
                }
                if (!retry)
                {
                    this.pollingServiceStatus = false;
                    return;
                }
                TurbulenzEngine.setTimeout(pollServiceStatus, statusObj.pollInterval * 1000);
            }
            else
            {
                TurbulenzEngine.setTimeout(pollServiceStatus, that.defaultPollInterval);
            }
        };

        pollServiceStatus = function pollServiceStatusFn()
        {
            Utilities.ajax({
                url: serviceUrl,
                method: 'GET',
                callback: servicesStatusCB
            });
        };

        pollServiceStatus();
    }

};

if (typeof TurbulenzBridge !== 'undefined')
{
    TurbulenzServices.addBridgeEvents();
}

// Copyright (c) 2011-2012 Turbulenz Limited
/*global window: false*/
/*global TurbulenzServices: false*/
/*jshint nomen: false*/

/*
 * An object that takes care of communication with the gamesite and, among
 * other things, replaces the deprecated 'osdlib' module.
 *
 * It wraps an EventEmitter instance that is stored on the page and provides
 * methods that manually display the 'loading'-flag, post certain events to
 * the page or request information about a player's settings.
 *
 */
var TurbulenzBridge = {
    _bridge: undefined,

    /**
     * Try to find an 'EventEmitter' object on the page and cache it.
     */
    _initInstance: function _initInstanceFn() {
        var Turbulenz = window.top.Turbulenz;

        if (Turbulenz && Turbulenz.Services)
        {
            var bridge = Turbulenz.Services.bridge;
            if (!bridge)
            {
                return;
            }

            this._bridge = bridge;

            this.emit = bridge.emit;
            // TODO can remove all of these or's after gamesite and hub updates
            this.on = bridge.gameListenerOn || bridge.addListener || bridge.setListener;

            // we cant use off yet becuase the function recieved on the other VM is re-wrapped each time
            //this.off = bridge.gameListenerOff;
            // Legacy functions addListener/setListener
            this.addListener = bridge.gameListenerOn || bridge.addListener || bridge.setListener;
            this.setListener = bridge.gameListenerOn || bridge.setListener;
        }

        if (typeof TurbulenzServices !== 'undefined')
        {
            TurbulenzServices.addBridgeEvents();
        }
    },

    isInitialised: function isInitialisedFn() {
        return this._bridge !== undefined;
    },

    emit: function emitFn() {},

    on: function onFn() {},

    //off: function offFn() {},

    addListener: function addListenerFn() {},

    setListener: function setListenerFn() {},

    /**
     * Message that passes game configuration information from the hosting site
     */
    setOnReceiveConfig: function setOnReceiveConfigFn(callback) {
        this.on('config.set', callback);
    },
    triggerRequestConfig: function triggerRequestConfigFn() {
        this.emit('config.request');
    },

    /**
     * Methods to signal the beginning and end of load/save processes.
     * This will display hints to the player and helps the page
     * to prioritize resources.
     */
    startLoading: function startLoadingFn() {
        this.emit('status.loading.start');
    },

    startSaving: function startSavingFn() {
        this.emit('status.saving.start');
    },

    stopLoading: function stopLoadingFn() {
        this.emit('status.loading.stop');
    },

    stopSaving: function stopSavingFn() {
        this.emit('status.saving.stop');
    },

    /**
     * These methods tell the gamesite the gameSession so it can
     * emit a heartbeat for the message server to detect.
     * gameSessionId - A string for identifying the current game session
     */
    createdGameSession: function createdGameSessionFn(gameSessionId) {
        this.emit('game.session.created', gameSessionId);
    },

    destroyedGameSession: function destroyedGameSessionFn(gameSessionId) {
        this.emit('game.session.destroyed', gameSessionId);
    },

    setGameSessionStatus: function setGameSessionStatusFn(gameSessionId, status) {
        this.emit('game.session.status', gameSessionId, status);
    },

    setGameSessionInfo: function setGameSessionInfoFn(info) {
        this.emit('game.session.info', info);
    },

    /**
     * Update a userbadge. Used by the BadgeManager
     */
    updateUserBadge: function updateUserBadgeFn(badge)
    {
        this.emit('userbadge.update', badge);
    },

    /**
     * Update a leaderboard. Used by the LeaderboardManager
     */
    updateLeaderBoard: function updateLeaderBoardFn(scoreData)
    {
        this.emit('leaderboards.update', scoreData);
    },


    /**
     * Handle multiplayer join events
     */
    setOnMultiplayerSessionToJoin: function setOnMultiplayerSessionToJoinFn(callback) {
        this.on('multiplayer.session.join', callback);
    },

    triggerJoinedMultiplayerSession: function triggerJoinedMultiplayerSessionFn(session) {
        this.emit('multiplayer.session.joined', session);
    },

    triggerLeaveMultiplayerSession: function triggerLeaveMultiplayerSessionFn(sessionId) {
        this.emit('multiplayer.session.leave', sessionId);
    },

    triggerMultiplayerSessionMakePublic: function triggerMultiplayerSessionMakePublicFn(sessionId) {
        this.emit('multiplayer.session.makepublic');
    },

    /**
     * Handle store basket events
     */
    setOnBasketUpdate: function setOnBasketUpdateFn(callback) {
        this.on('basket.site.update', callback);
    },

    triggerBasketUpdate: function triggerBasketUpdateFn(basket) {
        this.emit('basket.game.update', basket);
    },

    triggerUserStoreUpdate: function triggerUserStoreUpdateFn(items) {
        this.emit('store.user.update', items);
    },

    setOnPurchaseConfirmed: function setOnPurchaseConfirmedFn(callback) {
        this.on('purchase.confirmed', callback);
    },

    setOnPurchaseRejected: function setOnPurchaseRejectedFn(callback) {
        this.on('purchase.rejected', callback);
    },

    triggerShowConfirmPurchase: function triggerShowConfirmPurchaseFn() {
        this.emit('purchase.show.confirm');
    },

    triggerFetchStoreMeta: function triggerFetchStoreMetaFn() {
        this.emit('fetch.store.meta');
    },

    setOnStoreMeta: function setOnStoreMetaFn(callback) {
        this.on('store.meta.v2', callback);
    },

    /**
     * Methods to signal changes of the viewport's aspect ratio to the page.
     */
    changeAspectRatio: function changeAspectRatioFn(ratio) {
        this.emit('change.viewport.ratio', ratio);
    },

    /**
     * Methods to set callbacks to react to events happening on the page.
     */
    setOnViewportHide: function setOnViewportHideFn(callback) {
        this.on('change.viewport.hide', callback);
    },

    setOnViewportShow: function setOnViewportShowFn(callback) {
        this.on('change.viewport.show', callback);
    },

    setOnFullscreenOn: function setOnFullscreenOnFn(callback) {
        this.on('change.viewport.fullscreen.on', callback);
    },

    setOnFullscreenOff: function setOnFullscreenOffFn(callback) {
        this.on('change.viewport.fullscreen.off', callback);
    },

    setOnMenuStateChange: function setOnMenuStateChangeFn(callback) {
        this.on('change.menu.state', callback);
    },

    setOnUserStateChange: function setOnUserStateChangeFn(callback) {
        this.on('change.user.state', callback);
    },

    /**
     * Methods to send trigger event-emission on the page. These prompt the  page to trigger
     * the aforementioned corresponding onXXXX methods.
     */

    triggerOnFullscreen: function triggerOnFullscreenQueryFn() {
        this.emit('trigger.viewport.fullscreen');
    },

    triggerOnViewportVisibility: function triggerOnViewportVisibilityQueryFn() {
        this.emit('trigger.viewport.visibility');
    },

    triggerOnMenuStateChange: function triggerOnMenuStateQueryFn() {
        this.emit('trigger.menu.state');
    },

    triggerOnUserStateChange: function triggerOnUserStateQueryFn() {
        this.emit('trigger.user.state');
    },

    /**
     * Methods to send requests for information to the page. These methods can be used to send
     * state-queries. They take a callback function and prompt the page to call it.
     */

    /**
     * callback - a function that takes a single boolean value that will be set to 'true' if the
     * viewport is in fullscreen.
     */
    queryFullscreen: function queryFullscreenFn(callback) {
        this.emit('query.viewport.fullscreen', callback);
    },
    /**
     * callback - a function that takes a single boolean value that will be set to 'true' if the
     * viewport is visible.
     */
    queryViewportVisibility: function queryViewportVisibilityFn(callback) {
        this.emit('query.viewport.visibility', callback);
    },
    /**
     * callback - a function that takes an object-representation of the current menu-state.
     */
    queryMenuState: function queryMenuStateFn(callback) {
        this.emit('query.menu.state', callback);
    },
    /**
     * callback - a function that takes an object-representation of the current state of the user's settings.
     */
    queryUserState: function queryUserStateFn(callback) {
        this.emit('query.user.state', callback);
    }
};

if (!TurbulenzBridge.isInitialised())
{
    TurbulenzBridge._initInstance();
}

// Copyright (c) 2011-2012 Turbulenz Limited

/*global Utilities: false*/
/*global TurbulenzBridge: false*/
/*global TurbulenzEngine: false*/
/*global TurbulenzServices: false*/

//
// API
//
function GameSession() {}
GameSession.prototype =
{
    version : 1,
    post_delay: 1000,

    setStatus: function gameSessionSetStatusFn(status)
    {
        if (this.destroyed || this.status === status)
        {
            return;
        }

        this.status = status;
        TurbulenzBridge.setGameSessionStatus(this.gameSessionId, status);
    },

    // callbackFn is for testing only!
    // It will not be called if destroy is called in TurbulenzEngine.onUnload
    destroy: function gameSessionDestroyFn(callbackFn)
    {
        var dataSpec;
        if (this.pendingUpdate)
        {
            TurbulenzEngine.clearTimeout(this.pendingUpdate);
            this.pendingUpdate = null;
        }

        if (!this.destroyed && this.gameSessionId)
        {
            // we can't wait for the callback as the browser doesn't
            // call async callbacks after onbeforeunload has been called
            TurbulenzBridge.destroyedGameSession(this.gameSessionId);
            this.destroyed = true;

            dataSpec = {'gameSessionId': this.gameSessionId};

            if (TurbulenzServices.bridgeServices)
            {
                TurbulenzServices.callOnBridge('gamesession.destroy', dataSpec, callbackFn);
            }
            else
            {
                Utilities.ajax({
                    url: '/api/v1/games/destroy-session',
                    method: 'POST',
                    data: dataSpec,
                    callback: callbackFn,
                    requestHandler: this.requestHandler
                });
            }
        }
        else
        {
            if (callbackFn)
            {
                TurbulenzEngine.setTimeout(callbackFn, 0);
            }
        }
    },

    /**
     * Handle player metadata
     */
    setTeamInfo : function gameSessionSetTeamInfoFn(teamList)
    {
        var sessionData = this.info.sessionData;
        var oldTeamList = sessionData.teamList || [];
        if (teamList.join('#') !== oldTeamList.join('#'))
        {
            sessionData.teamList = teamList;
            this.update();
        }
    },

    setPlayerInfo : function gameSessionSetPlayerInfoFn(playerId, data)
    {
        var playerData = this.info.playerSessionData[playerId];
        var key;
        var dirty = false;

        if (!playerData)
        {
            playerData = {};
            this.info.playerSessionData[playerId] = playerData;
            dirty = true;
        }

        for (key in data)
        {
            if (data.hasOwnProperty(key))
            {
                if (!this.templatePlayerData.hasOwnProperty(key))
                {
                    throw "unknown session data property " + key;
                }
                if (playerData[key] !== data[key])
                {
                    playerData[key] = data[key];
                    dirty = true;
                }
            }
        }

        if (dirty)
        {
            this.update();
        }
    },

    removePlayerInfo : function gameSessionRemovePlayerInfoFn(playerId)
    {
        delete this.info.playerSessionData[playerId];
        this.update();
    },

    clearAllPlayerInfo : function clearAllPlayerInfoFn()
    {
        this.info.playerSessionData = {};
        this.update();
    },

    update: function updateFn()
    {
        if (!this.pendingUpdate)
        {
            // Debounce the update to pick up any other changes.
            this.pendingUpdate = TurbulenzEngine.setTimeout(this.postData, this.post_delay);
        }
    }
};

GameSession.create = function gameSessionCreateFn(requestHandler, sessionCreatedFn, errorCallbackFn)
{
    var gameSession = new GameSession();
    var gameSlug = window.gameSlug;
    var turbulenz = window.top.Turbulenz;
    var turbulenzData = (turbulenz && turbulenz.Data) || {};
    var mode = turbulenzData.mode || TurbulenzServices.mode;
    var createSessionURL = '/api/v1/games/create-session/' + gameSlug;
    var gameSessionRequestCallback = function gameSessionRequestCallbackFn(jsonResponse, status)
    {
        if (status === 200)
        {
            gameSession.mappingTable = jsonResponse.mappingTable;
            gameSession.gameSessionId = jsonResponse.gameSessionId;

            if (sessionCreatedFn)
            {
                sessionCreatedFn(gameSession);
            }

            TurbulenzBridge.createdGameSession(gameSession.gameSessionId);
        }
        else
        {
            gameSession.errorCallbackFn("TurbulenzServices.createGameSession error with HTTP status " + status + ": " + jsonResponse.msg, status);
        }
    };

    gameSession.info = {
        sessionData: {},
        playerSessionData: {}
    };

    gameSession.templatePlayerData = {
        team: null,
        color: null,
        status: null,
        rank: null,
        score: null,
        sortkey: null
    };

    gameSession.postData = function postDataFn()
    {
        TurbulenzBridge.setGameSessionInfo(JSON.stringify(gameSession.info));
        gameSession.pendingUpdate = null;
    };

    gameSession.pendingUpdate = null;

    gameSession.gameSlug = gameSlug;

    gameSession.requestHandler = requestHandler;
    gameSession.errorCallbackFn = errorCallbackFn || TurbulenzServices.defaultErrorCallback;
    gameSession.gameSessionId = null;
    gameSession.service = TurbulenzServices.getService('gameSessions');
    gameSession.status = null;

    if (!TurbulenzServices.available())
    {
        // Call sessionCreatedFn on a timeout to get the same behaviour as the AJAX call
        if (sessionCreatedFn)
        {
            TurbulenzEngine.setTimeout(function sessionCreatedCall()
            {
                sessionCreatedFn(gameSession);
            }, 0);
        }
        return gameSession;
    }

    if (mode)
    {
        createSessionURL += '/' + mode;
    }

    gameSession.service.request({
        url: createSessionURL,
        method: 'POST',
        callback: gameSessionRequestCallback,
        requestHandler: requestHandler,
        neverDiscard: true
    });

    return gameSession;
};



// Copyright (c) 2012 Turbulenz Limited

// Complains in various parts about use of (/*NAME*/value) constants.
/*jshint white: false*/

/*global
Float32Array: false
Uint16Array: false
BoxTree: false
*/


//
// Physics2D Configuration
//
var Physics2DConfig = {
    // (Contact Physics)
    // Amount of slop permitted in contact penetration
    CONTACT_SLOP : 0.01, // m
    EFF_MASS_EPSILON : 1e-10,
    ILL_THRESHOLD : 1e5,
    CLIP_EPSILON : 1.65e-10, // m

    // Configuration of bias coeffecient computation
    // for percentage of error to resolve per-frame.
    BIAS_COEF : 0.15,
    STATIC_BIAS_COEF : 0.75, // for static-dynamic
    CONT_BIAS_COEF : 0.5, // for continuous contacts.
    CONT_STATIC_BIAS_COEF : 0.6, // for continuous, static-dynamic contacts.

    // Bounce-target-velocity at contact below this value
    // will cause bouncing to be ignored.
    BOUNCE_VELOCITY_THRESHOLD : 0.25, // m/s


    // ================================================
    // (Constraint physics)
    // Point
    // -----------
    // Percentage of error solved per-iteration
    POINT_BIAS_COEF : 0.5,
    // Maximum error to be resolved per-iteration
    POINT_MAX_ERROR : 0.2, // m
    POINT_MAX_ERROR_SQ : (0.2 * 0.2),
    POINT_SLOP_SQ : 1e-6, // m^2
    // Squared error to consider error too large
    // to solve properly.
    POINT_LARGE_ERROR_SQ : 0.01, //m^2
    // Percentage of error solved per-iteration in large error case
    POINT_LARGE_ERROR_BIAS : 0.75,
    // Maximum error to be resolve per-iteration in large error case
    POINT_LARGE_ERROR_MAX : 0.4, // m

    // Weld
    // ----
    // Percentage of error solved per-iteration
    WELD_BIAS_COEF : 0.5,
    // Maximum error to be resolved per-iteration
    WELD_MAX_LINEAR_ERROR : 0.2, // m
    WELD_MAX_ANGULAR_ERROR : 0.5, // rad
    WELD_MAX_LINEAR_ERROR_SQ : (0.2 * 0.2),
    WELD_LINEAR_SLOP_SQ : 1e-6, // m^2
    WELD_ANGULAR_SLOP_SQ : 1e-6, // rad^2
    // Squared error to consider error too large
    // to solve properly.
    WELD_LARGE_ERROR_SQ : 0.01, //m^2
    // Percentage of linear error solved per-iteration in large error case
    WELD_LARGE_ERROR_BIAS : 0.75,
    // Maximum linear error to be resolve per-iteration in large error case
    WELD_LARGE_ERROR_MAX : 0.4, // m

    // Angle
    // -----
    // Percentage of error solved per-iteration
    ANGLE_BIAS_COEF : 0.5,
    ANGLE_SLOP_SQ : 1e-6, // rad^2

    // Distance
    // --------
    // Percentage of error solved per-iteration
    DIST_BIAS_COEF : 0.5,
    DIST_SLOP_SQ : 1e-6, // m^2
    // Squared error to consider error too large
    // to solve properly.
    DIST_LARGE_ERROR_SQ : 0.01, //m^2
    // Percentage of error to solve per-iteration in large error case
    DIST_LARGE_ERROR_BIAS : 0.75,


    // Line
    // ----
    // Percentage of error solved per-iteration
    LINE_BIAS_COEF : 0.8,
    LINE_SLOP_SQ : 1e-6, // m^2
    // Squared error to consider error too large
    // to solve properly.
    LINE_LARGE_ERROR_SQ : 0.01, // m^2
    // Percentage of error to solve per-iteration in large error case
    LINE_LARGE_ERROR_BIAS : 0.9,

    // Pulley
    // --------
    // Percentage of error solved per-iteration
    PULLEY_BIAS_COEF : 0.5,
    PULLEY_SLOP_SQ : 1e-6, // m^2
    // Squared error to consider error too large
    // to solve properly.
    PULLEY_LARGE_ERROR_SQ : 0.01, //m^2
    // Percentage of error to solve per-iteration in large error case
    PULLEY_LARGE_ERROR_BIAS : 0.75,

    // ================================================
    // (Continuous collisions)
    // Percentage of body radius body must move through.
    MIN_LINEAR_STATIC_SWEEP : 0.05,
    MIN_ANGULAR_STATIC_SWEEP : 0.005,
    MIN_LINEAR_BULLET_SWEEP : 0.5,
    MIN_ANGULAR_BULLET_SWEEP : 0.05,

    // Accuracy threshold for sweeps on distance.
    SWEEP_LIMIT : 0.0005, // m
    // Amount of slop permitted in a continuous collision.
    SWEEP_SLOP : 0.05, // m

    // Minimum fractional TOI-alpha advancement
    MINIMUM_SWEEP_ADVANCE : 1e-6,
    // Maximum sub-steps in sweep
    MAX_SWEEP_ITER : 50,

    // Squared relative velocity in dynamic sweeps to ignore pair
    EQUAL_SQ_VEL : 0.2, // (m/s)^2
    // Sum of angular-velocity * radius for pair of shapes to ignore pair in dynamic sweeps.
    ZERO_ANG_BIAS : 0.02, // (m.rad/s)

    // Scale factor for angular velocity when TOI has been permitted to slip.
    // This helps prevent an object getting 'stuck' for a few steps when in
    // a fast rotating continuous set of collisions at one point.
    TOI_SLIP_SCALE : 0.75,


    // ================================================
    // (Arbiter/Contact persistance)
    // Number of simulation steps before inactive arbiter is killed.
    DELAYED_DEATH : 30,

    // ================================================
    // (Body integration)
    DELTA_ROTATION_EPSILON : 1e-4, // rad^2

    // ================================================
    // (Sleeping)
    SLEEP_DELAY : 60,
    // squared linear velocity for sleeping
    SLEEP_LINEAR_SQ : 0.0006, // (m/s)^2
    // squared tangent velocity for sleeping (body radius taken into account)
    SLEEP_ANGULAR_SQ : 0.001, // (m/s)^2

    // ================================================
    // (Point containment)
    CONTAINS_EPSILON : 1e-6,
    CONTAINS_SQ_EPSILON : 1e-12,

    // ================================================
    // (General)
    COLLINEAR_EPSILON : 1e-5,
    COLLINEAR_SQ_EPSILON : (1e-5 * 1e-5),
    NORMALIZE_EPSILON : 1e-6,
    NORMALIZE_SQ_EPSILON : (1e-6 * 1e-6)
};


// ==============================================================

//
// Physics2D Material
//

//
// MATERIAL DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*MAT_ELASTICITY*/0
///*MAT_STATIC*/1
///*MAT_DYNAMIC*/2
///*MAT_ROLLING*/3
///*MAT_DENSITY*/4
//
///*MATERIAL_DATA_SIZE*/5
//
function Physics2DMaterial() {}
Physics2DMaterial.prototype = {

    version : 1,

    getElasticity : function getElasticityFn()
    {
        return this._data[(/*MAT_ELASTICITY*/0)];
    },

    getStaticFriction : function getStaticFrictionFn()
    {
        return this._data[(/*MAT_STATIC*/1)];
    },

    getDynamicFriction : function getDynamicFrictionFn()
    {
        return this._data[(/*MAT_DYNAMIC*/2)];
    },

    getRollingFriction : function getRollingFrictionFn()
    {
        return this._data[(/*MAT_ROLLING*/3)];
    },

    getDensity : function getDensityFn()
    {
        return this._data[(/*MAT_DENSITY*/4)];
    }
};

// params = {
//    elasticity : ## = 0,
//    staticFriction : ## = 2,
//    dynamicFriction : ## = 1,
//    rollingFriction : ## = 0.005,
//    density : ## = 1,
//    userData : null
// }
Physics2DMaterial.create = function materialFn(params)
{
    var m = new Physics2DMaterial();
    var elasticity      = (params && params.elasticity      !== undefined ? params.elasticity      : 0);
    var staticFriction  = (params && params.staticFriction  !== undefined ? params.staticFriction  : 2);
    var dynamicFriction = (params && params.dynamicFriction !== undefined ? params.dynamicFriction : 1);
    var rollingFriction = (params && params.rollingFriction !== undefined ? params.rollingFriction : 0.005);
    var density         = (params && params.density         !== undefined ? params.density         : 1);

    var data = m._data = new Physics2DDevice.prototype.floatArray((/*MATERIAL_DATA_SIZE*/5));

    data[(/*MAT_ELASTICITY*/0)] = elasticity;
    data[(/*MAT_STATIC*/1)]     = staticFriction;
    data[(/*MAT_DYNAMIC*/2)]    = dynamicFriction;
    data[(/*MAT_ROLLING*/3)]    = rollingFriction;
    data[(/*MAT_DENSITY*/4)]    = density;

    m.userData = (params && params.userData ? params.userData : null);

    return m;
};

// =========================================================================
//
// Common to all constraints
//

// CONSTRAINT DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*JOINT_FREQUENCY*/0   // Frequency when soft constraint enabled
///*JOINT_DAMPING*/1     // Damping when soft constraint enabled
///*JOINT_MAX_FORCE*/2   // Force clamping for soft/rigid constraints
///*JOINT_MAX_ERROR*/3   // Error clamping for soft constraints only.
///*JOINT_PRE_DT*/4      // Previous time step value for impulse scaling

function Physics2DConstraint() {}
Physics2DConstraint.prototype = {

    init : function initFn(con, params)
    {
        var data = con._data;
        data[(/*JOINT_FREQUENCY*/0)] = (params.frequency !== undefined ? params.frequency : 10.0);
        data[(/*JOINT_DAMPING*/1)]   = (params.damping   !== undefined ? params.damping   : 1.0);
        data[(/*JOINT_MAX_FORCE*/2)] = (params.maxForce  !== undefined ? params.maxForce  : Number.POSITIVE_INFINITY);
        data[(/*JOINT_MAX_ERROR*/3)] = (params.maxError  !== undefined ? params.maxError  : Number.POSITIVE_INFINITY);
        data[(/*JOINT_PRE_DT*/4)]    = -1;

        con._removeOnBreak      = (params.removeOnBreak      !== undefined ? params.removeOnBreak      : true);
        con._breakUnderError    = (params.breakUnderError    !== undefined ? params.breakUnderError    : false);
        con._breakUnderForce    = (params.breakUnderForce    !== undefined ? params.breakUnderForce    : false);
        con._stiff              = (params.stiff              !== undefined ? params.stiff              : true);
        con._ignoreInteractions = (params.ignoreInteractions !== undefined ? params.ignoreInteractions : false);
        con.sleeping            = (params.sleeping           !== undefined ? params.sleeping           : false);
        con._active             = (params.disabled           !== undefined ? (!params.disabled)        : true);

        con.world = null;
        con._islandRoot = null;
        con._islandRank = 0;
        con._island = null;

        con._wakeTime = 0;

        con._onBreak = [];
        con._onWake  = [];
        con._onSleep = [];

        con.userData = (params.userData || null);
    },

    configure : function configureFn(params)
    {
        var data = this._data;
        if (params.frequency !== undefined)
        {
            data[(/*JOINT_FREQUENCY*/0)] = params.frequency;
        }
        if (params.damping !== undefined)
        {
            data[(/*JOINT_DAMPING*/1)] = params.damping;
        }
        if (params.maxForce !== undefined)
        {
            data[(/*JOINT_MAX_FORCE*/2)] = params.maxForce;
        }
        if (params.maxError !== undefined)
        {
            data[(/*JOINT_MAX_ERROR*/3)] = params.maxError;
        }
        if (params.removeOnBreak !== undefined)
        {
            this._removeOnBreak = params.removeOnBreak;
        }
        if (params.breakUnderError !== undefined)
        {
            this._breakUnderError = params.breakUnderError;
        }
        if (params.breakUnderForce !== undefined)
        {
            this._breakUnderForce = params.breakUnderForce;
        }
        if (params.ignoreInteractions !== undefined)
        {
            this._ignoreInteractions = params.ignoreInteractions;
        }
        if (params.stiff !== undefined)
        {
            this._stiff = params.stiff;
        }
        this.wake(true);
    },

    // ===============================================

    addEventListener : function constraintAddEventListenerFn(eventType, callback)
    {
        var events = (eventType === 'wake'  ? this._onWake  :
                      eventType === 'sleep' ? this._onSleep :
                      eventType === 'break' ? this._onBreak :
                      null);

        if (events === null)
        {
            return false;
        }

        var index = events.indexOf(callback);
        if (index !== -1)
        {
            return false;
        }

        events.push(callback);

        this.wake();

        return true;
    },

    removeEventListener : function removeEventListenerFn(eventType, callback)
    {
        var events = (eventType === 'wake'  ? this._onWake  :
                      eventType === 'sleep' ? this._onSleep :
                      eventType === 'break' ? this._onBreak :
                      null);

        if (events === null)
        {
            return false;
        }

        var index = events.indexOf(callback);
        if (index === -1)
        {
            return false;
        }

        // Need to keep order, cannot use swap-pop
        events.splice(index, 1);

        this.wake();

        return true;
    },

    // ===============================================

    wake : function wakeFn(automated)
    {
        if (!this.world)
        {
            this.sleeping = false;
            return;
        }

        this.world._wakeConstraint(this, !automated);
    },
    sleep : function sleepFn()
    {
        if (!this.world)
        {
            this.sleeping = true;
            return;
        }

        this.world._forceSleepConstraint(this);
    },

    // ================================================

    isEnabled : function isEnabledFn()
    {
        return this._active;
    },
    isDisabled : function isDisabledFn()
    {
        return (!this._active);
    },

    enable : function enableFn()
    {
        if (!this._active)
        {
            this._active = true;
            if (this.world)
            {
                this.world._enabledConstraint(this);
                this.wake(true);
            }
        }
    },
    disable : function disableFn()
    {
        if (this._active)
        {
            if (this.world)
            {
                // Emulate a non-automated wake
                // to prevent wake callback.
                this.wake(false);
                this.world._disabledConstraint(this);
            }
            this._active = false;
        }
    },

    // ================================================

    getAnchorA : function getAnchorAFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        var INDEX = this._ANCHOR_A;
        dst[0] = data[INDEX];
        dst[1] = data[INDEX + 1];
        return dst;
    },
    getAnchorB : function getAnchorBFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        var INDEX = this._ANCHOR_B;
        dst[0] = data[INDEX];
        dst[1] = data[INDEX + 1];
        return dst;
    },

    setAnchorA : function setAnchorAFn(anchor)
    {
        var data = this._data;
        var INDEX = this._ANCHOR_A;
        var newX = anchor[0];
        var newY = anchor[1];
        if (newX !== data[INDEX] || newY !== data[INDEX + 1])
        {
            data[INDEX]     = newX;
            data[INDEX + 1] = newY;
            this.wake(true);
        }
    },
    setAnchorB : function setAnchorBFn(anchor)
    {
        var data = this._data;
        var INDEX = this._ANCHOR_B;
        var newX = anchor[0];
        var newY = anchor[1];
        if (newX !== data[INDEX] || newY !== data[INDEX + 1])
        {
            data[INDEX]     = newX;
            data[INDEX + 1] = newY;
            this.wake(true);
        }
    },

    rotateAnchor : function rotateAnchorFn(data, body, LOCAL, RELATIVE)
    {
        var x = data[LOCAL];
        var y = data[LOCAL + 1];
        var cos = body[(/*BODY_AXIS*/5)];
        var sin = body[(/*BODY_AXIS*/5) + 1];

        data[RELATIVE]     = ((cos * x) - (sin * y));
        data[RELATIVE + 1] = ((sin * x) + (cos * y));
    },

    // ================================================

    dtRatio : function dtRatioFn(data, deltaTime)
    {
        var preDt = data[(/*JOINT_PRE_DT*/4)];
        var dtRatio = (preDt === -1 ? 1.0 : (deltaTime / preDt));
        data[(/*JOINT_PRE_DT*/4)] = deltaTime;
        return dtRatio;
    },

    // ================================================

    twoBodyInWorld : function twoBodyInWorldFn()
    {
        this.bodyA.constraints.push(this);
        this.bodyB.constraints.push(this);
    },

    twoBodyOutWorld : function twoBodyOutWorldFn()
    {
        var constraints = this.bodyA.constraints;
        var index = constraints.indexOf(this);
        constraints[index] = constraints[constraints.length - 1];
        constraints.pop();

        constraints = this.bodyB.constraints;
        index = constraints.indexOf(this);
        constraints[index] = constraints[constraints.length - 1];
        constraints.pop();
    },

    twoBodyPairExists : function twoBodyPairExistsFn(b1, b2)
    {
        return ((b1 === this.bodyA && b2 === this.bodyB) ||
                (b2 === this.bodyA && b1 === this.bodyB));
    },

    twoBodyWakeConnected : function twoBodyWakeConnectedFn()
    {
        var body = this.bodyA;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            body.wake(true);
        }

        body = this.bodyB;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            body.wake(true);
        }
    },

    twoBodySleepComputation : function twoBodySleepComputationFn(union)
    {
        var body = this.bodyA;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            union(body, this);
        }

        body = this.bodyB;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            union(body, this);
        }
    },

    // ================================================

    clearCache : function clearCacheFn()
    {
        var data = this._data;
        data[this._JACC] = 0;
        data[(/*JOINT_PRE_DT*/4)] = -1;
    },
    clearCache2 : function clearCache2Fn()
    {
        var data = this._data;
        var INDEX = this._JACC;
        data[INDEX] = data[INDEX + 1] = 0;
        data[(/*JOINT_PRE_DT*/4)] = -1;
    },
    clearCache3 : function clearCache3Fn()
    {
        var data = this._data;
        var INDEX = this._JACC;
        data[INDEX] = data[INDEX + 1] = data[INDEX + 2] = 0;
        data[(/*JOINT_PRE_DT*/4)] = -1;
    },

    // ================================================

    // Soft constraint parameter logic.
    // storing gamma at index GAMMA
    // scaling effective mass at KMASS
    // scaling bias at BIAS
    // and returning true if constraint was broken.
    soft_params : function soft_paramsFn(data, KMASS, GAMMA, BIAS, deltaTime, breakUnderError)
    {
        var bias = data[BIAS];
        var bsq = (bias * bias);
        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (breakUnderError && (bsq > (maxError * maxError)))
        {
            return true;
        }

        var omega = (2 * Math.PI * data[(/*JOINT_FREQUENCY*/0)]);
        var gamma = (1 / (deltaTime * omega * ((2 * data[(/*JOINT_DAMPING*/1)]) + (omega * deltaTime))));
        var iG = (1 / (1 + gamma));
        var biasCoef = (deltaTime * omega * omega * gamma);

        data[GAMMA] = (gamma * iG);
        data[KMASS] *= iG;

        bias *= biasCoef;
        bsq *= (biasCoef * biasCoef);
        if (bsq > (maxError * maxError))
        {
            bsq = (maxError / Math.sqrt(bsq));
            bias *= bsq;
        }
        data[BIAS] = bias;
        return false;
    },
    soft_params2 : function soft_params2Fn(data, KMASS, GAMMA, BIAS, deltaTime, breakUnderError)
    {
        var biasX = data[BIAS];
        var biasY = data[BIAS + 1];
        var bsq = ((biasX * biasX) + (biasY * biasY));
        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (breakUnderError && (bsq > (maxError * maxError)))
        {
            return true;
        }

        var omega = (2 * Math.PI * data[(/*JOINT_FREQUENCY*/0)]);
        var gamma = (1 / (deltaTime * omega * ((2 * data[(/*JOINT_DAMPING*/1)]) + (omega * deltaTime))));
        var iG = (1 / (1 + gamma));
        var biasCoef = (deltaTime * omega * omega * gamma);

        data[GAMMA] = (gamma * iG);
        data[KMASS]     *= iG;
        data[KMASS + 1] *= iG;
        data[KMASS + 2] *= iG;

        biasX *= biasCoef;
        biasY *= biasCoef;
        bsq *= (biasCoef * biasCoef);
        if (bsq > (maxError * maxError))
        {
            bsq = (maxError / Math.sqrt(bsq));
            biasX *= bsq;
            biasY *= bsq;
        }
        data[BIAS]     = biasX;
        data[BIAS + 1] = biasY;
        return false;
    },
    soft_params3 : function soft_params3Fn(data, KMASS, GAMMA, BIAS, deltaTime, breakUnderError)
    {
        var biasX = data[BIAS];
        var biasY = data[BIAS + 1];
        var biasZ = data[BIAS + 2];
        var bsq = ((biasX * biasX) + (biasY * biasY) + (biasZ * biasZ));
        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (breakUnderError && (bsq > (maxError * maxError)))
        {
            return true;
        }

        var omega = (2 * Math.PI * data[(/*JOINT_FREQUENCY*/0)]);
        var gamma = (1 / (deltaTime * omega * ((2 * data[(/*JOINT_DAMPING*/1)]) + (omega * deltaTime))));
        var iG = (1 / (1 + gamma));
        var biasCoef = (deltaTime * omega * omega * gamma);

        data[GAMMA] = (gamma * iG);
        data[KMASS]     *= iG;
        data[KMASS + 1] *= iG;
        data[KMASS + 2] *= iG;
        data[KMASS + 3] *= iG;
        data[KMASS + 4] *= iG;
        data[KMASS + 5] *= iG;

        biasX *= biasCoef;
        biasY *= biasCoef;
        biasZ *= biasCoef;
        bsq *= (biasCoef * biasCoef);
        if (bsq > (maxError * maxError))
        {
            bsq = (maxError / Math.sqrt(bsq));
            biasX *= bsq;
            biasY *= bsq;
            biasZ *= bsq;
        }
        data[BIAS]     = biasX;
        data[BIAS + 1] = biasY;
        data[BIAS + 2] = biasZ;
        return false;
    },

    // Solve K * j = err, permitting degeneracies in K
    // indices JMASS, ERR, IMP
    // ERR may be equal to IMP.
    safe_solve : function safe_solveFn(data, KMASS, ERR, IMP)
    {
        var err = data[ERR];
        var K = data[KMASS];
        data[IMP] = (K !== 0 ? (err / K) : 0);
    },
    safe_solve2 : function safe_solve2Fn(data, KMASS, ERR, IMP)
    {
        var errX = data[ERR];
        var errY = data[ERR + 1];

        var Ka = data[KMASS];
        var Kb = data[KMASS + 1];
        var Kc = data[KMASS + 2];
        var det = ((Ka * Kc) - (Kb * Kb));
        if (det === 0)
        {
            // Consider ranks seperately.
            data[IMP]     = (Ka !== 0 ? (errX / Ka) : 0);
            data[IMP + 1] = (Kc !== 0 ? (errY / Kc) : 0);
        }
        else
        {
            // Full matrix inversion.
            det = (1 / det);
            data[IMP]     = (det * ((Kc * errX) - (Kb * errY)));
            data[IMP + 1] = (det * ((Ka * errY) - (Kb * errX)));
        }
    },
    safe_solve3 : function safe_solve3Fn(data, KMASS, ERR, IMP)
    {
        var errX = data[ERR];
        var errY = data[ERR + 1];
        var errZ = data[ERR + 2];

        var Ka = data[KMASS];
        var Kb = data[KMASS + 1];
        var Kc = data[KMASS + 2];
        var Kd = data[KMASS + 3];
        var Ke = data[KMASS + 4];
        var Kf = data[KMASS + 5];

        var A = ((Kd * Kf) - (Ke * Ke));
        var B = ((Kc * Ke) - (Kb * Kf));
        var C = ((Kb * Ke) - (Kc * Kd));
        var det = ((Ka * A) + (Kb * B) + (Kc * C));
        if (det === 0)
        {
            det = ((Ka * Kd) - (Kb * Kb));
            if (det !== 0)
            {
                // Invert matrix ignoring bottom rank.
                // [Ka Kb #]
                // [Kb Kd #]
                // [#  #  #]
                det = (1 / det);
                data[IMP]     = (det * ((Kd * errX) - (Kb * errY)));
                data[IMP + 1] = (det * ((Ka * errY) - (Kb * errX)));
                data[IMP + 2] = (Kf !== 0 ? (errZ / Kf) : 0);
                return;
            }

            det = ((Ka * Kf) - (Kc * Kc));
            if (det !== 0)
            {
                // Invert matrix ignoring bottom rank.
                // [Ka # Kc]
                // [#  #  #]
                // [Kc # Kf]
                det = (1 / det);
                data[IMP]     = (det * ((Kf * errX) - (Kc * errZ)));
                data[IMP + 1] = (Kd !== 0 ? (errY / Kd) : 0);
                data[IMP + 2] = (det * ((Ka * errZ) - (Kc * errX)));
                return;
            }

            det = ((Kd * Kf) - (Ke * Ke));
            if (det !== 0)
            {
                // Invert matrix ignoring top rank
                // [#  #  #]
                // [# Kd Ke]
                // [# Ke Kf]
                det = (1 / det);
                data[IMP]     = (Ka !== 0 ? (errX / Ka) : 0);
                data[IMP + 1] = (det * ((Kf * errY) - (Ke * errZ)));
                data[IMP + 2] = (det * ((Kd * errZ) - (Ke * errY)));
                return;
            }

            // Consider all ranks seperately.
            data[IMP]     = (Ka !== 0 ? (errX / Ka) : 0);
            data[IMP + 1] = (Kd !== 0 ? (errY / Kd) : 0);
            data[IMP + 2] = (Kf !== 0 ? (errZ / Kf) : 0);
        }
        else
        {
            // Full matrix inversion.
            det = (1 / det);
            var D = ((Ka * Kf) - (Kc * Kc));
            var E = ((Kb * Kc) - (Ka * Ke));
            var F = ((Ka * Kd) - (Kb * Kb));
            data[IMP]     = (det * ((A * errX) + (B * errY) + (C * errZ)));
            data[IMP + 1] = (det * ((B * errX) + (D * errY) + (E * errZ)));
            data[IMP + 2] = (det * ((C * errX) + (E * errY) + (F * errZ)));
        }
    },

    // Invert matrix stored symmetrically in data at
    // indices KMASS
    // with accumulated impulse at indices JACC
    safe_invert : function safe_invertFn(data, KMASS, JACC)
    {
        // Invert [K != 0] into [1 / K]
        // And otherwise into [0] with zero-ed JACC
        var K = data[KMASS];
        if (K === 0)
        {
            data[JACC] = 0;
        }
        else
        {
            data[KMASS] = (1 / K);
        }
    },
    safe_invert2 : function safe_invert2Fn(data, KMASS, JACC)
    {
        var Ka = data[KMASS];
        var Kb = data[KMASS + 1];
        var Kc = data[KMASS + 2];

        var det = ((Ka * Kc) - (Kb * Kb));
        if (det === 0)
        {
            // Consider both ranks seperately.
            if (Ka !== 0)
            {
                data[KMASS] = (1 / Ka);
            }
            else
            {
                data[JACC] = 0.0;
            }

            if (Kc !== 0)
            {
                data[KMASS + 2] = (1 / Kc);
            }
            else
            {
                data[JACC + 1] = 0.0;
            }

            data[KMASS + 1] = 0.0;
        }
        else
        {
            // Full matrix inversion.
            det = (1 / det);
            data[KMASS]     = (det * Kc);
            data[KMASS + 1] = (det * -Kb);
            data[KMASS + 2] = (det * Ka);
        }
    },
    safe_invert3 : function safe_invert3Fn(data, KMASS, JACC)
    {
        var Ka = data[KMASS];
        var Kb = data[KMASS + 1];
        var Kc = data[KMASS + 2];
        var Kd = data[KMASS + 3];
        var Ke = data[KMASS + 4];
        var Kf = data[KMASS + 5];

        var A = ((Kd * Kf) - (Ke * Ke));
        var B = ((Kc * Ke) - (Kb * Kf));
        var C = ((Kb * Ke) - (Kc * Kd));
        var det = ((Ka * A) + (Kb * B) + (Kc * C));
        if (det === 0)
        {
            det = ((Ka * Kd) - (Kb * Kb));
            if (det !== 0)
            {
                // Invert matrix ignoring bottom rank
                // [Ka Kb #]
                // [Kb Kd #]
                // [#  #  #]
                det = (1 / det);
                data[KMASS]     = (det * Kd);
                data[KMASS + 1] = (det * -Kb);
                data[KMASS + 3] = (det * Ka);

                // Consider bottom rank seperately.
                if (Kf !== 0)
                {
                    data[KMASS + 5] = (1 / Kf);
                }
                else
                {
                    data[JACC + 2] = 0;
                }

                data[KMASS + 2] = data[KMASS + 4] = 0;
                return;
            }

            det = ((Ka * Kf) - (Kc * Kc));
            if (det !== 0)
            {
                // Invert matrix ignoring middle rank
                // [Ka # Kc]
                // [#  #  #]
                // [Kc # Kf]
                det = (1 / det);
                data[KMASS]     = (det * Kf);
                data[KMASS + 2] = (det * -Kc);
                data[KMASS + 5] = (det * Ka);

                // Consider middle rank seperately.
                if (Kd !== 0)
                {
                    data[KMASS + 3] = (1 / Kd);
                }
                else
                {
                    data[JACC + 1] = 0;
                }

                data[KMASS + 1] = data[KMASS + 4] = 0;
                return;
            }

            det = ((Kd * Kf) - (Ke * Ke));
            if (det !== 0)
            {
                // Invert matrix ignoring top rank
                // [#  #  #]
                // [# Kd Ke]
                // [# Ke Kf]
                det = (1 / det);
                data[KMASS + 3] = (det * Kf);
                data[KMASS + 4] = (det * -Ke);
                data[KMASS + 5] = (det * Kd);

                // Consider top rank seperately.
                if (Ka !== 0)
                {
                    data[KMASS] = (1 / Ka);
                }
                else
                {
                    data[JACC] = 0;
                }

                data[KMASS + 1] = data[KMASS + 2] = 0;
                return;
            }

            // Consider all ranks seperately
            if (Ka !== 0)
            {
                data[KMASS] = (1 / Ka);
            }
            else
            {
                data[JACC] = 0;
            }

            if (Kd !== 0)
            {
                data[KMASS + 3] = (1 / Kd);
            }
            else
            {
                data[JACC + 1] = 0;
            }

            if (Kf !== 0)
            {
                data[KMASS + 5] = (1 / Kf);
            }
            else
            {
                data[JACC + 2] = 0;
            }

            data[KMASS + 1] = data[KMASS + 2] = data[KMASS + 4] = 0;
        }
        else
        {
            // Full matrix inversion.
            det = (1 / det);
            data[KMASS]     = (det * A);
            data[KMASS + 1] = (det * B);
            data[KMASS + 2] = (det * C);
            data[KMASS + 3] = (det * ((Ka * Kf) - (Kc * Kc)));
            data[KMASS + 4] = (det * ((Kb * Kc) - (Ka * Ke)));
            data[KMASS + 5] = (det * ((Ka * Kd) - (Kb * Kb)));
        }
    }

};


// =========================================================================
//
// Custom Constraint
//

// CUSTOM DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*CUSTOM_JMAX*/5
///*CUSTOM_GAMMA*/6

function Physics2DCustomConstraint() {}
Physics2DCustomConstraint.prototype = {

    type : "CUSTOM",

    // Inherited
    wake  : Physics2DConstraint.prototype.wake,
    sleep : Physics2DConstraint.prototype.sleep,

    configure  : Physics2DConstraint.prototype.configure,
    isEnabled  : Physics2DConstraint.prototype.isEnabled,
    isDisabled : Physics2DConstraint.prototype.isDisabled,
    enable     : Physics2DConstraint.prototype.enable,
    disable    : Physics2DConstraint.prototype.disable,

    addEventListener    : Physics2DConstraint.prototype.addEventListener,
    removeEventListener : Physics2DConstraint.prototype.removeEventListener,

    // ===============================================

    _inWorld : function _inWorldFn()
    {
        var bodies = this.bodies;
        var limit = bodies.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            bodies[i].constraints.push(this);
        }
    },

    _outWorld : function _inactiveOurOutWorldFn()
    {
        var bodies = this.bodies;
        var limit = bodies.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var constraints = bodies[i].constraints;
            var index = constraints.indexOf(this);
            constraints[index] = constraints[constraints.length - 1];
            constraints.pop();
        }
    },

    _pairExists : function _pairExistsFn(b1, b2)
    {
        var bodies = this.bodies;
        var limit = bodies.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var bodyA = bodies[i];
            if (bodyA === b1 || bodyA === b2)
            {
                var j;
                for (j = (i + 1); j < limit; j += 1)
                {
                    var bodyB = bodies[j];
                    if ((bodyA === b1 && bodyB === b2) ||
                        (bodyA === b2 && bodyB === b1))
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    },

    _wakeConnected : function wakeConnectedFn()
    {
        var bodies = this.bodies;
        var limit = bodies.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var body = bodies[i];
            if (body._type === (/*TYPE_DYNAMIC*/0))
            {
                body.wake(true);
            }
        }
    },

    _sleepComputation : function sleepComputationFn(union)
    {
        var bodies = this.bodies;
        var limit = bodies.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var body = bodies[i];
            if (body._type === (/*TYPE_DYNAMIC*/0))
            {
                union(body, this);
            }
        }
    },

    // =====================================================

    _clearCache : function _clearCacheFn()
    {
        var data = this._data;

        var J_ACC = this._J_ACC;
        var limit = (J_ACC + this.dimension);
        var i;
        for (i = J_ACC; i < limit; i += 1)
        {
            data[i] = 0;
        }

        data[(/*JOINT_PRE_DT*/4)] = -1;
    },

    // Compute cholesky decomposition of A into
    // lower triangular matrix L. A stored
    // as symmetric matrix. and L a full matrix
    // for ease of computation.
    _cholesky : function _choleskyFn()
    {
        var data = this._data;
        var A = this._K_MASS;
        var L = this._K_CHOLESKY;
        var dim = this.dimension;

        var j;
        for (j = 0; j < dim; j += 1)
        {
            var sum = 0;
            var k;
            for (k = 0; k <= (j - 1); k += 1)
            {
                var Lval = data[L + (j * dim) + k];
                sum += (Lval * Lval);
            }

            var rec = data[A] - sum;
            var zeroRank = (rec <= 0);
            if (zeroRank)
            {
                rec = data[A];
            }
            rec = (rec <= 0 ? 0 : Math.sqrt(rec));
            A += 1;
            data[L + (j * dim) + j] = rec;

            var i;
            if (rec !== 0 && !zeroRank)
            {
                rec = (1 / rec);
                for (i = (j + 1); i < dim; i += 1)
                {
                    sum = 0;
                    for (k = 0; k <= (j - 1); k += 1)
                    {
                        sum += (data[L + (i * dim) + k] * data[L + (j * dim) + k]);
                    }
                    data[L + (i * dim) + j] = rec * (data[A] - sum);
                    A += 1;
                }
            }

            if (zeroRank)
            {
                for (i = (j + 1); i < dim; i += 1)
                {
                    data[L + (i * dim) + j] = 0;
                }
                for (i = 0; i < j; i += 1)
                {
                    data[L + (j * dim) + i] = 0;
                }
                A += (dim - j - 1);
            }
        }
    },

    // Perform multiplication with inverse of eff-mass matrix.
    // X = (LL^T)^-1 * X for L = CHOLESKY
    _transform : function _transformFn(X)
    {
        var data = this._data;
        var Y = this._VECTOR_TMP;
        var L = this._K_CHOLESKY;
        var dim = this.dimension;

        // Y = (L^-1) * X
        var i, lii, sum, k;
        for (i = 0; i < dim; i += 1)
        {
            sum = data[X + i];
            lii = data[L + (i * dim) + i];
            if (lii !== 0)
            {
                for (k = 0; k < i; k += 1)
                {
                    sum -= data[L + (i * dim) + k] * data[Y + k];
                }
                data[Y + i] = (sum / lii);
            }
            else
            {
                data[Y + i] = 0;
            }
        }

        // X = (L^T)^-1 * Y
        var ix;
        for (ix = 0; ix < dim; ix += 1)
        {
            i = (dim - 1 - ix);
            lii = data[L + (i * dim) + i];
            if (lii !== 0)
            {
                sum = data[Y + i];
                for (k = (i + 1); k < dim; k += 1)
                {
                    sum -= data[L + (k * dim) + i] * data[X + k];
                }
                data[X + i] = (sum / lii);
            }
            else
            {
                data[X + i] = 0;
            }
        }
    },

    _effMass : function _effMassFn()
    {
        var data = this._data;
        var dimension = this.dimension;
        var bodies = this.bodies;
        var limit = bodies.length;
        var length = (limit * 3);

        // Compute non-inverted effective mass
        var JAC = this._JACOBIAN;
        var KMASS = this._K_MASS;
        var i, j, k;
        for (i = 0; i < dimension; i += 1)
        {
            var JACI = (JAC + (i * length));
            for (j = i; j < dimension; j += 1)
            {
                var JACJ = (JAC + (j * length));
                var sum = 0;
                for (k = 0; k < limit; k += 1)
                {
                    var body = bodies[k]._data;
                    var k3 = (k * 3);
                    sum += (body[(/*BODY_IMASS*/0)] * ((data[JACI + k3] * data[JACJ + k3]) +
                                                       (data[JACI + k3 + 1] * data[JACJ + k3 + 1])));
                    sum += (body[(/*BODY_IINERTIA*/1)] * (data[JACI + k3 + 2] * data[JACJ + k3 + 2]));
                }
                data[KMASS] = sum;
                KMASS += 1;
            }
        }
    },

    _preStep : function _preStepFn(deltaTime)
    {
        var dimension = this.dimension;
        var data = this._data;
        var i, limit;

        if (this._posConsts)
        {
            this._posConsts.call(this);
        }

        var JAC = this._JACOBIAN;
        var K_CHOLESKY = this._K_CHOLESKY;
        var BIAS = this._BIAS;


        if (!this._stiff && !this._velocityOnly)
        {
            this._posError.call(this, data, BIAS);

            this._jacobian.call(this, data, JAC);
            this._effMass();
            this._cholesky();

            // Compute |BIAS|^2
            var bsq = 0;
            limit = (BIAS + dimension);
            for (i = BIAS; i < limit; i += 1)
            {
                var bias = data[i];
                bsq += (bias * bias);
            }

            var maxError = data[(/*JOINT_MAX_ERROR*/3)];
            if (this._breakUnderError && (bsq > (maxError * maxError)))
            {
                return true;
            }

            var omega = (2 * Math.PI * data[(/*JOINT_FREQUENCY*/0)]);
            var gamma = (1 / (deltaTime * omega * ((2 * data[(/*JOINT_DAMPING*/1)]) + (omega * deltaTime))));
            var iG = (1 / (1 + gamma));
            var biasCoef = -(deltaTime * omega * omega * gamma);

            data[(/*CUSTOM_GAMMA*/6)] = (gamma * iG);

            // Multiply K_CHOLESKY with (1 / sqrt(iG)).
            //
            //   (We want to mulitply inverted eff-mass with iG.
            //    Instead of iG * K^1 we have:
            //    (g * L)^T^-1 * (g * L)^-1
            //    so we must have g = 1 / sqrt(iG)
            //    so that after multiplication we get iG * K^-1
            limit = (K_CHOLESKY + (dimension * dimension));
            iG = (1 / Math.sqrt(iG));
            for (i = K_CHOLESKY; i < limit; i += 1)
            {
                data[i] *= iG;
            }

            // Clamp BIAS magnitude to maxError
            // (implicit via scaling of biasCoef)
            bsq *= (biasCoef * biasCoef);
            if (bsq > (maxError * maxError))
            {
                biasCoef *= (maxError / Math.sqrt(bsq));
            }

            // Multiply BIAS with biasCoef
            limit = (BIAS + dimension);
            for (i = BIAS; i < limit; i += 1)
            {
                data[i] *= biasCoef;
            }
        }
        else
        {
            this._jacobian.call(this, data, JAC);
            this._effMass();
            this._cholesky();

            // BIAS = 0
            limit = (BIAS + dimension);
            for (i = BIAS; i < limit; i += 1)
            {
                data[i] = 0;
            }
            data[(/*CUSTOM_GAMMA*/6)] = 0;
        }

        var dtRatio = Physics2DConstraint.prototype.dtRatio(data, deltaTime);
        // Multiply J_ACC with dtRatio.
        var J_ACC = this._J_ACC;
        limit = (J_ACC + this.dimension);
        for (i = J_ACC; i < limit; i += 1)
        {
            data[i] *= dtRatio;
        }

        data[(/*CUSTOM_JMAX*/5)] = (data[(/*JOINT_MAX_FORCE*/2)] * deltaTime);

        return false;
    },

    _warmStart : function _warmStartFn()
    {
        this._applyImpulse(this._J_ACC);
    },

    getImpulseForBody : function getImpulseOnBody(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var data = this._data;
        var JAC = this._JACOBIAN;
        var J = this._J_ACC;

        var bodies = this.bodies;
        var limit = bodies.length;
        var length = (limit * 3);
        var dim = this.dimension;

        var i;
        for (i = 0; i < limit; i += 1)
        {
            var b = bodies[i];
            if (b === body)
            {
                var sumX = 0;
                var sumY = 0;
                var sumW = 0;
                var j;
                for (j = 0; j < dim; j += 1)
                {
                    sumX += (data[J + j] * data[JAC + (length * j)]);
                    sumY += (data[J + j] * data[JAC + (length * j) + 1]);
                    sumW += (data[J + j] * data[JAC + (length * j) + 2]);
                }

                dst[0] = sumX;
                dst[1] = sumY;
                dst[2] = sumW;
                return dst;
            }

            JAC += 3;
        }

        dst[0] = dst[1] = dst[2] = 0;
        return dst;
    },

    _applyImpulse : function _applyImpulseFn(J, position)
    {
        var data = this._data;
        var JAC = this._JACOBIAN;

        var bodies = this.bodies;
        var limit = bodies.length;
        var length = (limit * 3);
        var dim = this.dimension;

        var i;
        for (i = 0; i < limit; i += 1)
        {
            var b = bodies[i];
            var body = b._data;

            var sumX = 0;
            var sumY = 0;
            var sumW = 0;
            var j;
            for (j = 0; j < dim; j += 1)
            {
                sumX += (data[J + j] * data[JAC + (length * j)]);
                sumY += (data[J + j] * data[JAC + (length * j) + 1]);
                sumW += (data[J + j] * data[JAC + (length * j) + 2]);
            }

            var im = body[(/*BODY_IMASS*/0)];
            var dr = sumW * body[(/*BODY_IINERTIA*/1)];
            if (position)
            {
                body[(/*BODY_POS*/2)]     += sumX * im;
                body[(/*BODY_POS*/2) + 1] += sumY * im;
                if (dr !== 0)
                {
                    b._deltaRotation(dr);
                }
            }
            else
            {
                body[(/*BODY_VEL*/7)]     += sumX * im;
                body[(/*BODY_VEL*/7) + 1] += sumY * im;
                body[(/*BODY_VEL*/7) + 2] += dr;
            }

            JAC += 3;
        }
    },

    _iterateVel : function _iterateVelFn()
    {
        var dimension = this.dimension;
        var data = this._data;
        var i, limit;

        var VECTOR = this._VECTOR;
        var BIAS = this._BIAS;
        // VECTOR = BIAS - velocity()
        var j;
        var bodies = this.bodies;
        var limit2 = bodies.length;
        var JAC = this._JACOBIAN;
        for (i = 0; i < dimension; i += 1)
        {
            var term = data[BIAS + i];
            for (j = 0; j < limit2; j += 1)
            {
                var body = bodies[j]._data;
                term -= ((body[(/*BODY_VEL*/7)]     * data[JAC]) +
                         (body[(/*BODY_VEL*/7) + 1] * data[JAC + 1]) +
                         (body[(/*BODY_VEL*/7) + 2] * data[JAC + 2]));
                JAC += 3;
            }
            data[VECTOR + i] = term;
        }

        // VECTOR = KMASS * VECTOR
        this._transform(VECTOR);

        // JOLD = JACC
        // JACC += (VECTOR - JOLD * gamma)
        var JACC = this._J_ACC;
        var JOLD = this._VECTOR_TMP;
        var jAcc;
        var gamma = data[(/*CUSTOM_GAMMA*/6)];
        for (i = 0; i < dimension; i += 1)
        {
            jAcc = data[JOLD + i] = data[JACC + i];
            data[JACC + i] += (data[VECTOR + i] - (jAcc * gamma));
        }

        if (this._velClamp)
        {
            this._velClamp.call(this, data, JACC);
        }

        // jlsq = |JACC|^2
        var jlsq = 0;
        limit = (JACC + dimension);
        for (i = JACC; i < limit; i += 1)
        {
            jAcc = data[i];
            jlsq += (jAcc * jAcc);
        }

        var jMax = data[(/*CUSTOM_JMAX*/5)];
        if (this._breakUnderForce && jlsq > (jMax * jMax))
        {
            return true;
        }
        else if (!this._stiff && jlsq > (jMax * jMax))
        {
            // clamp(JACC, jMax)
            jlsq = (jMax / Math.sqrt(jlsq));
            for (i = JACC; i < limit; i += 1)
            {
                data[i] *= jlsq;
            }
        }

        // VECTOR = JACC - JOLD
        for (i = 0; i < dimension; i += 1)
        {
            data[VECTOR + i] = (data[JACC + i] - data[JOLD + i]);
        }

        this._applyImpulse(VECTOR);

        return false;
    },

    _iteratePos : function _iteratePosFn()
    {
        if (this._velocityOnly)
        {
            return false;
        }

        if (this._posConsts)
        {
            this._posConsts.call(this);
        }

        var dimension = this.dimension;
        var data = this._data;
        var i, limit;

        var BIAS = this._BIAS;
        this._posError.call(this, data, BIAS);

        // elsq = |BIAS|^2
        // BIAS = -BIAS
        limit = (BIAS + dimension);
        var err;
        var elsq = 0;
        for (i = BIAS; i < limit; i += 1)
        {
            err = data[i];
            elsq += (err * err);
            data[i] = -err;
        }

        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (this._breakUnderError && (elsq > (maxError * maxError)))
        {
            return true;
        }

        var JAC = this._JACOBIAN;

        // Recompute jacobian
        this._jacobian.call(this, data, JAC);

        // Recompute effective mass.
        this._effMass();
        this._cholesky();

        // BIAS = KMASS * BIAS
        this._transform(BIAS);
        if (this._posClamp)
        {
            this._posClamp.call(this, data, BIAS);
        }

        this._applyImpulse(BIAS, true);

        return false;
    }
};

Physics2DCustomConstraint.create = function userConstraintFn(params)
{
    var p = new Physics2DCustomConstraint();

    var dim = p.dimension = params.dimension;
    p.bodies = params.bodies.concat();

    // K_MASS     = (dim * (dim + 1)) / 2
    // K_CHOLSEKY = (dim * dim)
    // BIAS       = dim
    // J_ACC      = dim
    // VECTOR     = dim
    // JACOBIAN   = (dim * bodies.length * 3)
    // VECTOR_TMP = dim
    var dataSize = 7 + (dim * (4 + dim) + ((dim * (dim + 1)) / 2));
    dataSize += (dim * p.bodies.length * 3);
    p._data = new Physics2DDevice.prototype.floatArray(dataSize);
    Physics2DConstraint.prototype.init(p, params);

    p._K_MASS     = 7;
    p._K_CHOLESKY = p._K_MASS + ((dim * (dim + 1)) / 2);
    p._BIAS       = p._K_CHOLESKY + (dim * dim);
    p._J_ACC      = p._BIAS + dim;
    p._VECTOR     = p._J_ACC + dim;
    p._JACOBIAN   = p._VECTOR + dim;
    p._VECTOR_TMP = p._JACOBIAN + (dim * p.bodies.length * 3);

    p._draw      = params.debugDraw;
    p._posConsts = params.positionConstants;
    p._posError  = params.position;
    p._velError  = params.velocity;
    p._posClamp  = params.positionClamp;
    p._velClamp  = params.velocityClamp;
    p._jacobian  = params.jacobian;

    p._velocityOnly = (p._posError === undefined);

    return p;
};


// =========================================================================
//
//
// Pulley Constraint
//
// PULLEY DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*PULLEY_JOINTMIN*/5   // Joint limits
///*PULLEY_JOINTMAX*/6   //
///*PULLEY_RATIO*/7      // Pulley ratio
///*PULLEY_KMASS*/8      // Effective-mass (scalar)
///*PULLEY_JACC*/9       // Accumulated impulse (scalar)
///*PULLEY_JMAX*/10      // Maximum impulse (maxForce derived)
///*PULLEY_LANCHOR1*/11  // Local anchor position on bodyA (x, y)
///*PULLEY_LANCHOR2*/13  // Local anchor position on bodyB (x, y)
///*PULLEY_LANCHOR3*/15  // Local anchor position on bodyC (x, y)
///*PULLEY_LANCHOR4*/17  // Local anchor position on bodyD (x, y)
///*PULLEY_RANCHOR1*/19  // Relative anchor position on bodyA (x, y)
///*PULLEY_RANCHOR2*/21  // Relative anchor position on bodyB (x, y)
///*PULLEY_RANCHOR3*/23  // Relative anchor position on bodyC (x, y)
///*PULLEY_RANCHOR4*/25  // Relative anchor position on bodyD (x, y)
///*PULLEY_GAMMA*/27     // Soft constraint gamma
///*PULLEY_BIAS*/28      // Soft constraint bias (scalar)
///*PULLEY_N12*/29       // Direction of constraint (r1 -> r2) (x, y)
///*PULLEY_N34*/31       // Direction of constraint (r3 -> r4) (x, y)
///*PULLEY_CX1*/33       // (RANCHOR1 cross N12)
///*PULLEY_CX2*/34       // (RANCHOR2 cross N12)
///*PULLEY_CX3*/35       // (RANCHOR3 cross N34)
///*PULLEY_CX4*/36       // (RANCHOR4 cross N34)
//
///*PULLEY_DATA_SIZE*/37

function Physics2DPulleyConstraint() {}
Physics2DPulleyConstraint.prototype = {

    type : "PULLEY",

    // Inherited
    wake  : Physics2DConstraint.prototype.wake,
    sleep : Physics2DConstraint.prototype.sleep,

    configure  : Physics2DConstraint.prototype.configure,
    isEnabled  : Physics2DConstraint.prototype.isEnabled,
    isDisabled : Physics2DConstraint.prototype.isDisabled,
    enable     : Physics2DConstraint.prototype.enable,
    disable    : Physics2DConstraint.prototype.disable,

    addEventListener    : Physics2DConstraint.prototype.addEventListener,
    removeEventListener : Physics2DConstraint.prototype.removeEventListener,

    // ===============================================

    getRatio : function getRatioFn()
    {
        return this._data[(/*PULLEY_RATIO*/7)];
    },
    setRatio : function setRatioFn(ratio)
    {
        var data = this._data;
        if (data[(/*PULLEY_RATIO*/7)] !== ratio)
        {
            data[(/*PULLEY_RATIO*/7)] = ratio;
            this.wake(true);
        }
    },

    getLowerBound : function getLowerBound()
    {
        return this._data[(/*PULLEY_JOINTMIN*/5)];
    },
    getUpperBound : function getUpperBound()
    {
        return this._data[(/*PULLEY_JOINTMAX*/6)];
    },

    setLowerBound : function setLowerBoundFn(lowerBound)
    {
        var data = this._data;
        if (data[(/*PULLEY_JOINTMIN*/5)] !== lowerBound)
        {
            data[(/*PULLEY_JOINTMIN*/5)] = lowerBound;
            this._equal = (lowerBound === data[(/*PULLEY_JOINTMAX*/6)]);
            this.wake(true);
        }
    },
    setUpperBound : function setUpperBoundFn(upperBound)
    {
        var data = this._data;
        if (data[(/*PULLEY_JOINTMAX*/6)] !== upperBound)
        {
            data[(/*PULLEY_JOINTMAX*/6)] = upperBound;
            this._equal = (upperBound === data[(/*PULLEY_JOINTMIN*/5)]);
            this.wake(true);
        }
    },

    // Inherited
    _ANCHOR_A : (/*PULLEY_LANCHOR1*/11),
    getAnchorA : Physics2DConstraint.prototype.getAnchorA,
    setAnchorA : Physics2DConstraint.prototype.setAnchorA,

    _ANCHOR_B : (/*PULLEY_LANCHOR2*/13),
    getAnchorB : Physics2DConstraint.prototype.getAnchorB,
    setAnchorB : Physics2DConstraint.prototype.setAnchorB,

    _ANCHOR_C : (/*PULLEY_LANCHOR3*/15),
    getAnchorC : function getAnchorCFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        var INDEX = this._ANCHOR_C;
        dst[0] = data[INDEX];
        dst[1] = data[INDEX + 1];
        return dst;
    },
    setAnchorC : function setAnchorCFn(anchor)
    {
        var data = this._data;
        var INDEX = this._ANCHOR_C;
        var newX = anchor[0];
        var newY = anchor[1];
        if (newX !== data[INDEX] || newY !== data[INDEX + 1])
        {
            data[INDEX]     = newX;
            data[INDEX + 1] = newY;
            this.wake(true);
        }
    },

    _ANCHOR_D : (/*PULLEY_LANCHOR4*/17),
    getAnchorD : function getAnchorDFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        var INDEX = this._ANCHOR_D;
        dst[0] = data[INDEX];
        dst[1] = data[INDEX + 1];
        return dst;
    },
    setAnchorD : function setAnchorDFn(anchor)
    {
        var data = this._data;
        var INDEX = this._ANCHOR_D;
        var newX = anchor[0];
        var newY = anchor[1];
        if (newX !== data[INDEX] || newY !== data[INDEX + 1])
        {
            data[INDEX]     = newX;
            data[INDEX + 1] = newY;
            this.wake(true);
        }
    },

    // =========================================================

    _inWorld : function inWorldFn()
    {
        this.bodyA.constraints.push(this);
        this.bodyB.constraints.push(this);
        if (this.bodyB !== this.bodyC)
        {
            this.bodyC.constraints.push(this);
        }
        this.bodyD.constraints.push(this);
    },

    _outWorld : function outWorldFn()
    {
        var constraints = this.bodyA.constraints;
        var index = constraints.indexOf(this);
        constraints[index] = constraints[constraints.length - 1];
        constraints.pop();

        constraints = this.bodyB.constraints;
        index = constraints.indexOf(this);
        constraints[index] = constraints[constraints.length - 1];
        constraints.pop();

        if (this.bodyB !== this.bodyC)
        {
            constraints = this.bodyB.constraints;
            index = constraints.indexOf(this);
            constraints[index] = constraints[constraints.length - 1];
            constraints.pop();
        }

        constraints = this.bodyD.constraints;
        index = constraints.indexOf(this);
        constraints[index] = constraints[constraints.length - 1];
        constraints.pop();
    },

    _pairExists : function pairExistsFn(b1, b2)
    {
        var bodyA = this.bodyA;
        var bodyB = this.bodyB;
        var bodyC = this.bodyC;
        var bodyD = this.bodyD;

        return ((b1 === bodyA && (b2 === bodyB || b2 === bodyC || b2 === bodyD)) ||
                (b1 === bodyB && (b2 === bodyA || b2 === bodyC || b2 === bodyD)) ||
                (b1 === bodyC && (b2 === bodyA || b2 === bodyB || b2 === bodyD)) ||
                (b1 === bodyD && (b2 === bodyA || b2 === bodyB || b2 === bodyC)));
    },

    _wakeConnected : function wakeConnectedFn()
    {
        var body = this.bodyA;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            body.wake(true);
        }

        body = this.bodyB;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            body.wake(true);
        }

        body = this.bodyC;
        if (body !== this.bodyB && body._type === (/*TYPE_DYNAMIC*/0))
        {
            body.wake(true);
        }

        body = this.bodyD;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            body.wake(true);
        }
    },

    _sleepComputation : function sleepComputationFn(union)
    {
        var body = this.bodyA;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            union(body, this);
        }

        body = this.bodyB;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            union(body, this);
        }

        body = this.bodyC;
        if (body !== this.bodyB && body._type === (/*TYPE_DYNAMIC*/0))
        {
            union(body, this);
        }

        body = this.bodyD;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            union(body, this);
        }
    },

    // =====================================================

    // Inherited
    _JACC : (/*PULLEY_JACC*/9),
    _clearCache : Physics2DConstraint.prototype.clearCache,

    _posError : function _posErrorFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;
        var b3 = this.bodyC._data;
        var b4 = this.bodyD._data;

        Physics2DConstraint.prototype.rotateAnchor(data, b1, (/*PULLEY_LANCHOR1*/11), (/*PULLEY_RANCHOR1*/19));
        Physics2DConstraint.prototype.rotateAnchor(data, b2, (/*PULLEY_LANCHOR2*/13), (/*PULLEY_RANCHOR2*/21));
        Physics2DConstraint.prototype.rotateAnchor(data, b3, (/*PULLEY_LANCHOR3*/15), (/*PULLEY_RANCHOR3*/23));
        Physics2DConstraint.prototype.rotateAnchor(data, b4, (/*PULLEY_LANCHOR4*/17), (/*PULLEY_RANCHOR4*/25));

        var jointMin = data[(/*PULLEY_JOINTMIN*/5)];
        var jointMax = data[(/*PULLEY_JOINTMAX*/6)];

        var n12x = ((b2[(/*BODY_POS*/2)]     + data[(/*PULLEY_RANCHOR2*/21)])     -
                    (b1[(/*BODY_POS*/2)]     + data[(/*PULLEY_RANCHOR1*/19)]));
        var n12y = ((b2[(/*BODY_POS*/2) + 1] + data[(/*PULLEY_RANCHOR2*/21) + 1]) -
                    (b1[(/*BODY_POS*/2) + 1] + data[(/*PULLEY_RANCHOR1*/19) + 1]));
        var n34x = ((b4[(/*BODY_POS*/2)]     + data[(/*PULLEY_RANCHOR4*/25)])     -
                    (b3[(/*BODY_POS*/2)]     + data[(/*PULLEY_RANCHOR3*/23)]));
        var n34y = ((b4[(/*BODY_POS*/2) + 1] + data[(/*PULLEY_RANCHOR4*/25) + 1]) -
                    (b3[(/*BODY_POS*/2) + 1] + data[(/*PULLEY_RANCHOR3*/23) + 1]));

        var err12 = ((n12x * n12x) + (n12y * n12y));
        var err34 = ((n34x * n34x) + (n34y * n34y));
        var rec;
        if (err12 < Physics2DConfig.NORMALIZE_SQ_EPSILON)
        {
            err12 = 0;
            n12x = data[(/*PULLEY_N12*/29)];
            n12y = data[(/*PULLEY_N12*/29) + 1];
        }
        else
        {
            err12 = Math.sqrt(err12);
            rec = (1 / err12);
            n12x *= rec;
            n12y *= rec;
        }

        var ratio = data[(/*PULLEY_RATIO*/7)];
        if (err34 < Physics2DConfig.NORMALIZE_SQ_EPSILON)
        {
            err34 = 0;
            n34x = data[(/*PULLEY_N34*/31)];
            n34y = data[(/*PULLEY_N34*/31) + 1];
        }
        else
        {
            err34 = Math.sqrt(err34);
            rec = (ratio / err34);
            n34x *= rec;
            n34y *= rec;
        }

        var err = (err12 + (err34 * ratio));
        if (this._equal)
        {
            err -= jointMin;
            this._slack = false;
        }
        else if (err < jointMin)
        {
            err = (jointMin - err);
            n12x = -n12x;
            n12y = -n12y;
            n34x = -n34x;
            n34y = -n34y;
            this._slack = false;
        }
        else if (err > jointMax)
        {
            err -= jointMax;
            this._slack = false;
        }
        else
        {
            // Don't set normals to 0.
            // In this case that _slack is true, we do no further work
            // So we permit normals to persist so that should constraint
            // become degenerate we can still choose a 'good' direction.
            //
            // Constraint only becomes degenerate when jointMin = 0 and we reach this
            // limit. In this condition we want negated normals, so that's what we
            // allow to persist.
            n12x = -n12x;
            n12y = -n12y;
            n34x = -n34x;
            n34y = -n34y;

            err = 0;
            this._slack = true;
        }

        data[(/*PULLEY_N12*/29)]     = n12x;
        data[(/*PULLEY_N12*/29) + 1] = n12y;
        data[(/*PULLEY_N34*/31)]     = n34x;
        data[(/*PULLEY_N34*/31) + 1] = n34y;
        data[(/*PULLEY_BIAS*/28)]    = (-err);
    },

    _preStep : function _preStepFn(deltaTime)
    {
        this._posError();
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;
        var b3 = this.bodyC._data;
        var b4 = this.bodyD._data;

        // Compute non-inverted effective mass.
        var ratioSq = data[(/*PULLEY_RATIO*/7)];
        ratioSq *= ratioSq;
        var n12x = data[(/*PULLEY_N12*/29)];
        var n12y = data[(/*PULLEY_N12*/29) + 1];
        var n34x = data[(/*PULLEY_N34*/31)];
        var n34y = data[(/*PULLEY_N34*/31) + 1];
        var cx1 = data[(/*PULLEY_CX1*/33)] = ((data[(/*PULLEY_RANCHOR1*/19)] * n12y) - (data[(/*PULLEY_RANCHOR1*/19) + 1] * n12x));
        var cx2 = data[(/*PULLEY_CX2*/34)] = ((data[(/*PULLEY_RANCHOR2*/21)] * n12y) - (data[(/*PULLEY_RANCHOR2*/21) + 1] * n12x));
        var cx3 = data[(/*PULLEY_CX3*/35)] = ((data[(/*PULLEY_RANCHOR3*/23)] * n34y) - (data[(/*PULLEY_RANCHOR3*/23) + 1] * n34x));
        var cx4 = data[(/*PULLEY_CX4*/36)] = ((data[(/*PULLEY_RANCHOR4*/25)] * n34y) - (data[(/*PULLEY_RANCHOR4*/25) + 1] * n34x));
        var im3 = b3[(/*BODY_IMASS*/0)];
        var ii3 = b3[(/*BODY_IINERTIA*/1)];
        var K = (b1[(/*BODY_IMASS*/0)] + b2[(/*BODY_IMASS*/0)] + (ratioSq * (im3 + b4[(/*BODY_IMASS*/0)])) +
                 (cx1 * b1[(/*BODY_IINERTIA*/1)] * cx1) + (cx2 * b2[(/*BODY_IINERTIA*/1)] * cx2) + (cx3 * ii3 * cx3) +
                 (cx4 * b4[(/*BODY_IINERTIA*/1)] * cx4));
        if (b2 === b3)
        {
            K -= 2 * ((((n12x * n34x) + (n12y * n34y)) * im3) + (cx2 * cx3 * ii3));
        }
        data[(/*PULLEY_KMASS*/8)] = K;

        // Invert effective mass
        Physics2DConstraint.prototype.safe_invert(data, (/*PULLEY_KMASS*/8), (/*PULLEY_JACC*/9));

        if (!this._stiff)
        {
            if (Physics2DConstraint.prototype.soft_params(data, (/*PULLEY_KMASS*/8), (/*PULLEY_GAMMA*/27), (/*PULLEY_BIAS*/28), deltaTime, this._breakUnderError))
            {
                return true;
            }
        }
        else
        {
            data[(/*PULLEY_GAMMA*/27)] = 0;
            data[(/*PULLEY_BIAS*/28)]  = 0;
        }

        var dtRatio = Physics2DConstraint.prototype.dtRatio(data, deltaTime);
        data[(/*PULLEY_JACC*/9)]  *= dtRatio;
        data[(/*PULLEY_JMAX*/10)] = (data[(/*JOINT_MAX_FORCE*/2)] * deltaTime);

        return false;
    },

    _warmStart : function _warmStartFn()
    {
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;
        var b3 = this.bodyC._data;
        var b4 = this.bodyD._data;

        var jAcc = data[(/*PULLEY_JACC*/9)];
        var jx = (data[(/*PULLEY_N12*/29)]     * jAcc);
        var jy = (data[(/*PULLEY_N12*/29) + 1] * jAcc);

        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (jx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b1[(/*BODY_VEL*/7) + 2] -= (data[(/*PULLEY_CX1*/33)] * jAcc * b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (jx * im);
        b2[(/*BODY_VEL*/7) + 1] += (jy * im);
        b2[(/*BODY_VEL*/7) + 2] += (data[(/*PULLEY_CX2*/34)] * jAcc * b2[(/*BODY_IINERTIA*/1)]);

        jx = (data[(/*PULLEY_N34*/31)]     * jAcc);
        jy = (data[(/*PULLEY_N34*/31) + 1] * jAcc);

        im = b3[(/*BODY_IMASS*/0)];
        b3[(/*BODY_VEL*/7)]     -= (jx * im);
        b3[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b3[(/*BODY_VEL*/7) + 2] -= (data[(/*PULLEY_CX3*/35)] * jAcc * b3[(/*BODY_IINERTIA*/1)]);

        im = b4[(/*BODY_IMASS*/0)];
        b4[(/*BODY_VEL*/7)]     += (jx * im);
        b4[(/*BODY_VEL*/7) + 1] += (jy * im);
        b4[(/*BODY_VEL*/7) + 2] += (data[(/*PULLEY_CX4*/36)] * jAcc * b4[(/*BODY_IINERTIA*/1)]);
    },

    getImpulseForBody : function getImpulseForBody(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var jAcc = data[(/*PULLEY_JACC*/9)];

        var data = this._data;
        if (body === this.bodyA)
        {
            dst[0] = -(data[(/*PULLEY_N12*/29)]     * jAcc);
            dst[1] = -(data[(/*PULLEY_N12*/29) + 1] * jAcc);
            dst[2] = -data[(/*PULLEY_CX1*/33)] * jAcc;
        }
        else if (body === this.bodyD)
        {
            dst[0] = (data[(/*PULLEY_N34*/31)]     * jAcc);
            dst[1] = (data[(/*PULLEY_N34*/31) + 1] * jAcc);
            dst[2] = data[(/*PULLEY_CX4*/36)] * jAcc;
        }
        else
        {
            var sumX = 0;
            var sumY = 0;
            var sumW = 0;
            if (body === this.bodyB)
            {
                sumX += (data[(/*PULLEY_N12*/29)]     * jAcc);
                sumY += (data[(/*PULLEY_N12*/29) + 1] * jAcc);
                sumW += data[(/*PULLEY_CX2*/34)] * jAcc;
            }
            if (body === this.bodyC)
            {
                sumX -= (data[(/*PULLEY_N34*/31)]     * jAcc);
                sumY -= (data[(/*PULLEY_N34*/31) + 1] * jAcc);
                sumW -= data[(/*PULLEY_CX3*/35)] * jAcc;
            }
            dst[0] = sumX;
            dst[1] = sumY;
            dst[2] = sumW;
        }

        return dst;
    },

    _iterateVel : function _iterateVelFn()
    {
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;
        var b3 = this.bodyC._data;
        var b4 = this.bodyD._data;

        // x = Bias - VelocityError
        var n12x = data[(/*PULLEY_N12*/29)];
        var n12y = data[(/*PULLEY_N12*/29) + 1];
        var n34x = data[(/*PULLEY_N34*/31)];
        var n34y = data[(/*PULLEY_N34*/31) + 1];
        var cx1  = data[(/*PULLEY_CX1*/33)];
        var cx2  = data[(/*PULLEY_CX2*/34)];
        var cx3  = data[(/*PULLEY_CX3*/35)];
        var cx4  = data[(/*PULLEY_CX4*/36)];
        var x = (data[(/*PULLEY_BIAS*/28)] - ((n12x * (b2[(/*BODY_VEL*/7)]     - b1[(/*BODY_VEL*/7)])) +
                                              (n12y * (b2[(/*BODY_VEL*/7) + 1] - b1[(/*BODY_VEL*/7) + 1])) +
                                              (n34x * (b4[(/*BODY_VEL*/7)]     - b3[(/*BODY_VEL*/7)])) +
                                              (n34y * (b4[(/*BODY_VEL*/7) + 1] - b3[(/*BODY_VEL*/7) + 1])) +
                                              (cx2 * b2[(/*BODY_VEL*/7) + 2]) -
                                              (cx1 * b1[(/*BODY_VEL*/7) + 2]) +
                                              (cx4 * b4[(/*BODY_VEL*/7) + 2]) -
                                              (cx3 * b3[(/*BODY_VEL*/7) + 2])));

        var jOld = data[(/*PULLEY_JACC*/9)];
        // Impulse.
        // j = K * x - jAcc * gamma
        var j = ((data[(/*PULLEY_KMASS*/8)] * x) - (jOld * data[(/*PULLEY_GAMMA*/27)]));

        // Accumulate and clamp.
        var jAcc = (jOld + j);
        var jMax = data[(/*PULLEY_JMAX*/10)];
        if (!this._equal && jAcc > 0)
        {
            jAcc = 0;
        }
        if (this._breakUnderForce)
        {
            if (jAcc > jMax || jAcc < -jMax)
            {
                return true;
            }
        }
        else if (!this._stiff)
        {
            if (jAcc > jMax)
            {
                jAcc = jMax;
            }
            else if (jAcc < -jMax)
            {
                jAcc = -jMax;
            }
        }

        j = (jAcc - jOld);
        data[(/*PULLEY_JACC*/9)] = jAcc;

        // Apply impulse.
        var jx = (data[(/*PULLEY_N12*/29)]     * j);
        var jy = (data[(/*PULLEY_N12*/29) + 1] * j);

        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (jx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b1[(/*BODY_VEL*/7) + 2] -= (cx1 * j * b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (jx * im);
        b2[(/*BODY_VEL*/7) + 1] += (jy * im);
        b2[(/*BODY_VEL*/7) + 2] += (cx2 * j * b2[(/*BODY_IINERTIA*/1)]);

        jx = (data[(/*PULLEY_N34*/31)]     * j);
        jy = (data[(/*PULLEY_N34*/31) + 1] * j);

        im = b3[(/*BODY_IMASS*/0)];
        b3[(/*BODY_VEL*/7)]     -= (jx * im);
        b3[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b3[(/*BODY_VEL*/7) + 2] -= (cx3 * j * b3[(/*BODY_IINERTIA*/1)]);

        im = b4[(/*BODY_IMASS*/0)];
        b4[(/*BODY_VEL*/7)]     += (jx * im);
        b4[(/*BODY_VEL*/7) + 1] += (jy * im);
        b4[(/*BODY_VEL*/7) + 2] += (cx4 * j * b4[(/*BODY_IINERTIA*/1)]);

        return false;
    },

    _iteratePos : function _iteratePosFn()
    {
        this._posError();
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;
        var b3 = this.bodyC._data;
        var b4 = this.bodyD._data;

        var im1 = b1[(/*BODY_IMASS*/0)];
        var im2 = b2[(/*BODY_IMASS*/0)];
        var im3 = b3[(/*BODY_IMASS*/0)];
        var im4 = b4[(/*BODY_IMASS*/0)];
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];
        var ii3 = b3[(/*BODY_IINERTIA*/1)];
        var ii4 = b4[(/*BODY_IINERTIA*/1)];

        var err = data[(/*PULLEY_BIAS*/28)];
        var maxError = data[(/*JOINT_MAX_ERROR*/3)];

        if (this._breakUnderError && (err > maxError || err < -maxError))
        {
            return true;
        }

        var slop = Physics2DConfig.PULLEY_SLOP_SQ;
        if ((err * err) < slop)
        {
            return false;
        }

        err *= Physics2DConfig.PULLEY_BIAS_COEF;

        var ratioSq = data[(/*PULLEY_RATIO*/7)];
        ratioSq *= ratioSq;

        var K = (im1 + im2 + (ratioSq * (im3 + im4)));
        var n12x = data[(/*PULLEY_N12*/29)];
        var n12y = data[(/*PULLEY_N12*/29) + 1];
        var n34x = data[(/*PULLEY_N34*/31)];
        var n34y = data[(/*PULLEY_N34*/31) + 1];
        if (b2 === b3)
        {
            K -= 2 * ((n12x * n34x) + (n12y * n34y)) * im2;
        }

        var j, jx, jy;
        // Handle large error seperately.
        if ((err * err) > Physics2DConfig.PULLEY_LARGE_ERROR_SQ)
        {
            if (K > Physics2DConfig.EFF_MASS_EPSILON)
            {
                j = (err * Physics2DConfig.PULLEY_LARGE_ERROR_BIAS / K);
                if (this._equal || j < 0)
                {
                    jx = (n12x * j);
                    jy = (n12y * j);
                    b1[(/*BODY_POS*/2)]     -= (jx * im1);
                    b1[(/*BODY_POS*/2) + 1] -= (jy * im1);
                    b2[(/*BODY_POS*/2)]     += (jx * im2);
                    b2[(/*BODY_POS*/2) + 1] += (jy * im2);

                    jx = (n34x * j);
                    jy = (n34y * j);
                    b3[(/*BODY_POS*/2)]     -= (jx * im3);
                    b3[(/*BODY_POS*/2) + 1] -= (jy * im3);
                    b4[(/*BODY_POS*/2)]     += (jx * im4);
                    b4[(/*BODY_POS*/2) + 1] += (jy * im4);

                    // Recalculate error.
                    this._posError();
                    n12x = data[(/*PULLEY_N12*/29)];
                    n12y = data[(/*PULLEY_N12*/29) + 1];
                    n34x = data[(/*PULLEY_N34*/31)];
                    n34y = data[(/*PULLEY_N34*/31) + 1];
                    err = data[(/*PULLEY_BIAS*/28)] * Physics2DConfig.PULLEY_BIAS_COEF;
                }
            }
        }

        var cx1 = ((data[(/*PULLEY_RANCHOR1*/19)] * n12y) - (data[(/*PULLEY_RANCHOR1*/19) + 1] * n12x));
        var cx2 = ((data[(/*PULLEY_RANCHOR2*/21)] * n12y) - (data[(/*PULLEY_RANCHOR2*/21) + 1] * n12x));
        var cx3 = ((data[(/*PULLEY_RANCHOR3*/23)] * n34y) - (data[(/*PULLEY_RANCHOR3*/23) + 1] * n34x));
        var cx4 = ((data[(/*PULLEY_RANCHOR4*/25)] * n34y) - (data[(/*PULLEY_RANCHOR4*/25) + 1] * n34x));
        K += ((cx1 * ii1 * cx1) + (cx2 * ii2 * cx2) + (cx3 * ii3 * cx3) + (cx4 * ii4 * cx4));
        if (b2 === b2)
        {
            K -= (2 * cx2 * ii2 * cx3);
        }

        data[(/*PULLEY_KMASS*/8)] = K;
        data[(/*PULLEY_BIAS*/28)] = err;
        Physics2DConstraint.prototype.safe_solve(data, (/*PULLEY_KMASS*/8), (/*PULLEY_BIAS*/28), (/*PULLEY_BIAS*/28));
        j = data[(/*PULLEY_BIAS*/28)];

        if (this._equal || j < 0)
        {
            var dr;
            jx = (n12x * j);
            jy = (n12y * j);
            b1[(/*BODY_POS*/2)]     -= (jx * im1);
            b1[(/*BODY_POS*/2) + 1] -= (jy * im1);
            dr = (-cx1 * j * ii1);
            if (dr !== 0)
            {
                this.bodyA._deltaRotation(dr);
            }

            b2[(/*BODY_POS*/2)]     += (jx * im2);
            b2[(/*BODY_POS*/2) + 1] += (jy * im2);
            dr = (cx2 * j * ii2);
            if (dr !== 0)
            {
                this.bodyB._deltaRotation(dr);
            }

            jx = (n34x * j);
            jy = (n34y * j);
            b3[(/*BODY_POS*/2)]     -= (jx * im3);
            b3[(/*BODY_POS*/2) + 1] -= (jy * im3);
            dr = (-cx3 * j * ii3);
            if (dr !== 0)
            {
                this.bodyC._deltaRotation(dr);
            }

            b4[(/*BODY_POS*/2)]     += (jx * im4);
            b4[(/*BODY_POS*/2) + 1] += (jy * im4);
            dr = (cx4 * j * ii4);
            if (dr !== 0)
            {
                this.bodyD._deltaRotation(dr);
            }
        }

        return false;
    }
};


// params = {
//   bodyA, bodyB, bodyC, bodyD // bodyB permitted equal to bodyC
//   anchorA, anchorB, anchorC, anchorD
//   lowerBound, upperBound, ratio
//   .. common constraint params
// }
Physics2DPulleyConstraint.create = function pulleyConstraintFn(params)
{
    var p = new Physics2DPulleyConstraint();
    p.dimension = 1;
    var data = p._data = new Physics2DDevice.prototype.floatArray((/*PULLEY_DATA_SIZE*/37));
    Physics2DConstraint.prototype.init(p, params);

    var anchor = params.anchorA;
    data[(/*PULLEY_LANCHOR1*/11)]     = (anchor ? anchor[0] : 0);
    data[(/*PULLEY_LANCHOR1*/11) + 1] = (anchor ? anchor[1] : 0);

    anchor = params.anchorB;
    data[(/*PULLEY_LANCHOR2*/13)]     = (anchor ? anchor[0] : 0);
    data[(/*PULLEY_LANCHOR2*/13) + 1] = (anchor ? anchor[1] : 0);

    anchor = params.anchorC;
    data[(/*PULLEY_LANCHOR3*/15)]     = (anchor ? anchor[0] : 0);
    data[(/*PULLEY_LANCHOR3*/15) + 1] = (anchor ? anchor[1] : 0);

    anchor = params.anchorD;
    data[(/*PULLEY_LANCHOR4*/17)]     = (anchor ? anchor[0] : 0);
    data[(/*PULLEY_LANCHOR4*/17) + 1] = (anchor ? anchor[1] : 0);

    var min = data[(/*PULLEY_JOINTMIN*/5)] = (params.lowerBound !== undefined ? params.lowerBound : 0);
    var max = data[(/*PULLEY_JOINTMAX*/6)] = (params.upperBound !== undefined ? params.upperBound : 0);
    p._equal = (min === max);

    data[(/*PULLEY_RATIO*/7)] = (params.ratio !== undefined ? params.ratio : 1);

    p._slack = false;

    p.bodyA = params.bodyA;
    p.bodyB = params.bodyB;
    p.bodyC = params.bodyC;
    p.bodyD = params.bodyD;

    // Seed normal incase initial anchors are degenerate.
    data[(/*PULLEY_N12*/29)]     = 1;
    data[(/*PULLEY_N12*/29) + 1] = 0;
    data[(/*PULLEY_N34*/31)]     = 1;
    data[(/*PULLEY_N34*/31) + 1] = 0;

    return p;
};


// =========================================================================
//
// Motor Constraint
//

// MOTOR DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*MOTOR_RATE*/5   // Motor rate
///*MOTOR_RATIO*/6  // Motor ratio
///*MOTOR_KMASS*/7  // Effective mass (scalar)
///*MOTOR_JACC*/8   // Accumulated impulse (scalar)
///*MOTOR_JMAX*/9   // Maximum impulse (maxForce derived)
//
///*MOTOR_DATA_SIZE*/10

function Physics2DMotorConstraint() {}
Physics2DMotorConstraint.prototype = {

    type : "MOTOR",

    // Inherited
    wake  : Physics2DConstraint.prototype.wake,
    sleep : Physics2DConstraint.prototype.sleep,

    configure  : Physics2DConstraint.prototype.configure,
    isEnabled  : Physics2DConstraint.prototype.isEnabled,
    isDisabled : Physics2DConstraint.prototype.isDisabled,
    enable     : Physics2DConstraint.prototype.enable,
    disable    : Physics2DConstraint.prototype.disable,

    addEventListener    : Physics2DConstraint.prototype.addEventListener,
    removeEventListener : Physics2DConstraint.prototype.removeEventListener,

    // ===============================================

    getRate : function getRateFn()
    {
        return this._data[(/*MOTOR_RATE*/5)];
    },
    getRatio : function getRatioFn()
    {
        return this._data[(/*MOTOR_RATIO*/6)];
    },

    setRate : function setRateFn(rate)
    {
        var data = this._data;
        if (data[(/*MOTOR_RATE*/5)] !== rate)
        {
            data[(/*MOTOR_RATE*/5)] = rate;
            this.wake(true);
        }
    },
    setRatio : function setRatioFn(ratio)
    {
        var data = this._data;
        if (data[(/*MOTOR_RATIO*/6)] !== ratio)
        {
            data[(/*MOTOR_RATIO*/6)] = ratio;
            this.wake(true);
        }
    },

    // =========================================================

    // Inherited
    _inWorld          : Physics2DConstraint.prototype.twoBodyInWorld,
    _outWorld         : Physics2DConstraint.prototype.twoBodyOutWorld,
    _pairExists       : Physics2DConstraint.prototype.twoBodyPairExists,
    _wakeConnected    : Physics2DConstraint.prototype.twoBodyWakeConnected,
    _sleepComputation : Physics2DConstraint.prototype.twoBodySleepComputation,

    // ==========================================================

    // Inherited
    _JACC : (/*MOTOR_JACC*/8),
    _clearCache : Physics2DConstraint.prototype.clearCache,

    _preStep : function _preStepFn(deltaTime)
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        // Compute non-inverted effective mass
        var ratio = data[(/*MOTOR_RATIO*/6)];
        data[(/*MOTOR_KMASS*/7)] = (b1[(/*BODY_IINERTIA*/1)] + (ratio * ratio * b2[(/*BODY_IINERTIA*/1)]));

        // Invert eff-mass matrix
        Physics2DConstraint.prototype.safe_invert(data, (/*MOTOR_KMASS*/7), (/*MOTOR_JACC*/8));

        var dtRatio = Physics2DConstraint.prototype.dtRatio(data, deltaTime);
        data[(/*MOTOR_JACC*/8)] *= dtRatio;
        data[(/*MOTOR_JMAX*/9)] = (data[(/*JOINT_MAX_FORCE*/2)] * deltaTime);

        return false;
    },

    _warmStart : function _warmStartFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var j = data[(/*MOTOR_JACC*/8)];
        b1[(/*BODY_VEL*/7) + 2] -= (j * b1[(/*BODY_IINERTIA*/1)]);
        b2[(/*BODY_VEL*/7) + 2] += (data[(/*MOTOR_RATIO*/6)] * j * b2[(/*BODY_IINERTIA*/1)]);
    },

    getImpulseForBody : function getImpulseForBodyFn(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var data = this._data;

        dst[0] = dst[1] = 0;
        dst[2] = (body === this.bodyA ? -1 : (body === this.bodyB ? data[(/*MOTOR_RATIO*/6)] : 0)) * data[(/*MOTOR_JACC*/8)];
        return dst;
    },

    _iterateVel : function _iterateVelFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var ratio = data[(/*MOTOR_RATIO*/6)];
        var j = (data[(/*MOTOR_KMASS*/7)] * (data[(/*MOTOR_RATE*/5)] + b1[(/*BODY_VEL*/7) + 2] -
                                             (ratio * b2[(/*BODY_VEL*/7) + 2])));
        var jOld = data[(/*MOTOR_JACC*/8)];
        var jAcc = (jOld + j);
        var jMax = data[(/*MOTOR_JMAX*/9)];
        if (this._breakUnderForce && (jAcc > jMax || jAcc < -jMax))
        {
            return true;
        }
        else
        {
            if (jAcc > jMax)
            {
                jAcc = jMax;
            }
            else if (jAcc < -jMax)
            {
                jAcc = -jMax;
            }
        }

        j = (jAcc - jOld);
        data[(/*MOTOR_JACC*/8)] = jAcc;

        b1[(/*BODY_VEL*/7) + 2] -= (j * b1[(/*BODY_IINERTIA*/1)]);
        b2[(/*BODY_VEL*/7) + 2] += (ratio * j * b2[(/*BODY_IINERTIA*/1)]);

        return false;
    },

    // Velocity only constraint.
    _iteratePos : function _iteratePosFn()
    {
        return false;
    }

};

Physics2DMotorConstraint.create = function motorConstraintFn(params)
{
    var p = new Physics2DMotorConstraint();
    p.dimension = 1;
    var data = p._data = new Physics2DDevice.prototype.floatArray((/*MOTOR_DATA_SIZE*/10));
    Physics2DConstraint.prototype.init(p, params);

    data[(/*MOTOR_RATE*/5)]  = (params.rate  !== undefined ? params.rate  : 0);
    data[(/*MOTOR_RATIO*/6)] = (params.ratio !== undefined ? params.ratio : 1);

    p.bodyA = params.bodyA;
    p.bodyB = params.bodyB;

    return p;
};


// =========================================================================
//
// Line Constraint
//

// LINE DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*LINE_JOINTMIN*/5   // Joint limits (axial)
///*LINE_JOINTMAX*/6   //
///*LINE_LANCHOR1*/7   // Local anchor on bodyA (x, y)
///*LINE_LANCHOR2*/9   // Local anchor on bodyB (x, y)
///*LINE_LAXIS*/11     // Local axis on bodyA (x, y)
///*LINE_RANCHOR1*/13  // Relative anchor on bodyA (x, y)
///*LINE_RANCHOR2*/15  // Relative anchor on bodyB (x, y)
///*LINE_RAXIS*/17     // Relative/World axis on bodyA (x, y)
///*LINE_KMASS*/19     // Effective mass [a b; b c] (symmetric)
///*LINE_JACC*/22      // Accumulated impuse (x, y)
///*LINE_JMAX*/24      // Maximum impulse magnitude
///*LINE_GAMMA*/25     // Soft constraint gamma
///*LINE_BIAS*/26      // Soft constraint bias (x, y)
///*LINE_CX1*/28
///*LINE_CX2*/29
///*LINE_DOT1*/30
///*LINE_DOT2*/31
///*LINE_SCALE*/32     // Direction scaling of axis.
//
///*LINE_DATA_SIZE*/33

function Physics2DLineConstraint() {}
Physics2DLineConstraint.prototype = {

    type : "LINE",

    // Inherited
    wake  : Physics2DConstraint.prototype.wake,
    sleep : Physics2DConstraint.prototype.sleep,

    configure  : Physics2DConstraint.prototype.configure,
    isEnabled  : Physics2DConstraint.prototype.isEnabled,
    isDisabled : Physics2DConstraint.prototype.isDisabled,
    enable     : Physics2DConstraint.prototype.enable,
    disable    : Physics2DConstraint.prototype.disable,

    addEventListener    : Physics2DConstraint.prototype.addEventListener,
    removeEventListener : Physics2DConstraint.prototype.removeEventListener,

    // ===============================================

    getLowerBound : function getLowerBound()
    {
        return this._data[(/*LINE_JOINTMIN*/5)];
    },
    getUpperBound : function getUpperBound()
    {
        return this._data[(/*LINE_JOINTMAX*/6)];
    },

    setLowerBound : function setLowerBoundFn(lowerBound)
    {
        var data = this._data;
        if (data[(/*LINE_JOINTMIN*/5)] !== lowerBound)
        {
            data[(/*LINE_JOINTMIN*/5)] = lowerBound;
            this._equal = (lowerBound === data[(/*LINE_JOINTMAX*/6)]);
            this.wake(true);
        }
    },
    setUpperBound : function setUpperBoundFn(upperBound)
    {
        var data = this._data;
        if (data[(/*LINE_JOINTMAX*/6)] !== upperBound)
        {
            data[(/*LINE_JOINTMAX*/6)] = upperBound;
            this._equal = (upperBound === data[(/*LINE_JOINTMIN*/5)]);
            this.wake(true);
        }
    },

    // Inherited
    _ANCHOR_A : (/*LINE_LANCHOR1*/7),
    getAnchorA : Physics2DConstraint.prototype.getAnchorA,
    setAnchorA : Physics2DConstraint.prototype.setAnchorA,

    _ANCHOR_B : (/*LINE_LANCHOR2*/9),
    getAnchorB : Physics2DConstraint.prototype.getAnchorB,
    setAnchorB : Physics2DConstraint.prototype.setAnchorB,

    getAxis : function getAxisFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        dst[0] = data[(/*LINE_LAXIS*/11)];
        dst[1] = data[(/*LINE_LAXIS*/11) + 1];
        return dst;
    },
    setAxis : function setAxisFn(axis)
    {
        var data = this._data;
        var newX = axis[0];
        var newY = axis[1];
        if (newX !== data[(/*LINE_LAXIS*/11)] || newY !== data[(/*LINE_LAXIS*/11) + 1])
        {
            var nlsq = ((newX * newX) + (newY * newY));
            if (nlsq === 0)
            {
                return;
            }
            else
            {
                nlsq = (1 / Math.sqrt(nlsq));
                newX *= nlsq;
                newY *= nlsq;
            }
            data[(/*LINE_LAXIS*/11)]     = newX;
            data[(/*LINE_LAXIS*/11) + 1] = newY;
            this.wake(true);
        }
    },

    // =========================================================

    // Inherited
    _inWorld          : Physics2DConstraint.prototype.twoBodyInWorld,
    _outWorld         : Physics2DConstraint.prototype.twoBodyOutWorld,
    _pairExists       : Physics2DConstraint.prototype.twoBodyPairExists,
    _wakeConnected    : Physics2DConstraint.prototype.twoBodyWakeConnected,
    _sleepComputation : Physics2DConstraint.prototype.twoBodySleepComputation,

    // ==========================================================

    // Inherited
    _JACC : (/*LINE_JACC*/22),
    _clearCache : Physics2DConstraint.prototype.clearCache2,

    _posError : function _posErrorFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        Physics2DConstraint.prototype.rotateAnchor(data, b1, (/*LINE_LANCHOR1*/7), (/*LINE_RANCHOR1*/13));
        Physics2DConstraint.prototype.rotateAnchor(data, b2, (/*LINE_LANCHOR2*/9), (/*LINE_RANCHOR2*/15));
        Physics2DConstraint.prototype.rotateAnchor(data, b1, (/*LINE_LAXIS*/11), (/*LINE_RAXIS*/17));

        var jointMin = data[(/*LINE_JOINTMIN*/5)];
        var jointMax = data[(/*LINE_JOINTMAX*/6)];

        var rx1 = data[(/*LINE_RANCHOR1*/13)];
        var ry1 = data[(/*LINE_RANCHOR1*/13) + 1];
        var rx2 = data[(/*LINE_RANCHOR2*/15)];
        var ry2 = data[(/*LINE_RANCHOR2*/15) + 1];
        var nx  = data[(/*LINE_RAXIS*/17)];
        var ny  = data[(/*LINE_RAXIS*/17) + 1];

        // Store (dx, dy) in (cx1, cx2) temporarigly.
        // As this information is needed in subsequent calculations for eff-mass.
        // We take care not to alias values!
        var dx = data[(/*LINE_CX1*/28)] = ((b2[(/*BODY_POS*/2)]     + rx2) - (b1[(/*BODY_POS*/2)]     + rx1));
        var dy = data[(/*LINE_CX2*/29)] = ((b2[(/*BODY_POS*/2) + 1] + ry2) - (b1[(/*BODY_POS*/2) + 1] + ry1));

        var errX = ((nx * dy) - (ny * dx));
        var errY = ((nx * dx) + (ny * dy));
        if (this._equal)
        {
            errY -= jointMin;
            data[(/*LINE_SCALE*/32)] = 1.0;
        }
        else
        {
            if (errY > jointMax)
            {
                errY -= jointMax;
                data[(/*LINE_SCALE*/32)] = 1.0;
            }
            else if (errY < jointMin)
            {
                errY = (jointMin - errY);
                data[(/*LINE_SCALE*/32)] = -1.0;
            }
            else
            {
                errY = 0;
                data[(/*LINE_SCALE*/32)] = 0.0;
            }
        }

        data[(/*LINE_BIAS*/26)]     = (-errX);
        data[(/*LINE_BIAS*/26) + 1] = (-errY);
    },

    _preStep : function _preStepFn(deltaTime)
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        // Must compute (dx, dy) (stored into cx1/cx2)
        // As well as scale for eff-mass computation.
        this._posError();

        // Compute non-inverted effective mass.
        var rx1 = data[(/*LINE_RANCHOR1*/13)];
        var ry1 = data[(/*LINE_RANCHOR1*/13) + 1];
        var rx2 = data[(/*LINE_RANCHOR2*/15)];
        var ry2 = data[(/*LINE_RANCHOR2*/15) + 1];
        var nx  = data[(/*LINE_RAXIS*/17)];
        var ny  = data[(/*LINE_RAXIS*/17) + 1];
        var scale = data[(/*LINE_SCALE*/32)];
        var delX = (data[(/*LINE_CX1*/28)] + rx1);
        var delY = (data[(/*LINE_CX2*/29)] + ry1);

        var cx1  = data[(/*LINE_CX1*/28)]  = (nx * delY) - (ny * delX);
        var cx2  = data[(/*LINE_CX2*/29)]  = (nx * ry2)  - (ny * rx2);
        var dot1 = data[(/*LINE_DOT1*/30)] = (nx * delX) + (ny * delY);
        var dot2 = data[(/*LINE_DOT2*/31)] = (nx * rx2)  + (ny * ry2);

        var massSum = (b1[(/*BODY_IMASS*/0)] + b2[(/*BODY_IMASS*/0)]);
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];

        data[(/*LINE_KMASS*/19)]     = massSum + (dot1 * ii1 * dot1) + (dot2 * ii2 * dot2);
        data[(/*LINE_KMASS*/19) + 1] = -scale * ((dot1 * ii1 * cx1) + (dot2 * ii2 * cx2));
        data[(/*LINE_KMASS*/19) + 2] = scale * scale * (massSum + (cx1 * ii1 * cx1) + (cx2 * ii2 * cx2));

        // Invert effective mass.
        Physics2DConstraint.prototype.safe_invert2(data, (/*LINE_KMASS*/19), (/*LINE_JACC*/22));

        if (!this._stiff)
        {
            if (Physics2DConstraint.prototype.soft_params2(data, (/*LINE_KMASS*/19), (/*LINE_GAMMA*/25), (/*LINE_BIAS*/26), deltaTime, this._breakUnderError))
            {
                return true;
            }
        }
        else
        {
            data[(/*LINE_GAMMA*/25)]    = 0;
            data[(/*LINE_BIAS*/26)]     = 0;
            data[(/*LINE_BIAS*/26) + 1] = 0;
        }

        var dtRatio = Physics2DConstraint.prototype.dtRatio(data, deltaTime);
        data[(/*LINE_JACC*/22)]     *= dtRatio;
        data[(/*LINE_JACC*/22) + 1] *= dtRatio;
        data[(/*LINE_JMAX*/24)]     = (data[(/*JOINT_MAX_FORCE*/2)] * deltaTime);

        return false;
    },

    _warmStart : function _warmStartFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var jx    = data[(/*LINE_JACC*/22)];
        var jy    = data[(/*LINE_JACC*/22) + 1];
        var scale = data[(/*LINE_SCALE*/32)];
        var nx    = data[(/*LINE_RAXIS*/17)];
        var ny    = data[(/*LINE_RAXIS*/17) + 1];

        var lx = (scale * nx * jy) - (ny * jx);
        var ly = (nx * jx) + (scale * ny * jy);

        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (lx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (ly * im);
        b1[(/*BODY_VEL*/7) + 2] += (((scale * data[(/*LINE_CX1*/28)] * jy) -
                                     (data[(/*LINE_DOT1*/30)] * jx)) *
                                    b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (lx * im);
        b2[(/*BODY_VEL*/7) + 1] += (ly * im);
        b2[(/*BODY_VEL*/7) + 2] += (((data[(/*LINE_DOT2*/31)] * jx) -
                                     (scale * data[(/*LINE_CX2*/29)] * jy)) *
                                   b2[(/*BODY_IINERTIA*/1)]);
    },

    getImpulseForBody : function getImpulseForBodyFn(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var data = this._data;
        var jx    = data[(/*LINE_JACC*/22)];
        var jy    = data[(/*LINE_JACC*/22) + 1];
        var scale = data[(/*LINE_SCALE*/32)];
        var nx    = data[(/*LINE_RAXIS*/17)];
        var ny    = data[(/*LINE_RAXIS*/17) + 1];

        var lx = (scale * nx * jy) - (ny * jx);
        var ly = (nx * jx) + (scale * ny * jy);

        if (body === this.bodyA)
        {
            dst[0] = -lx;
            dst[1] = -ly;
            dst[2] = ((scale * data[(/*LINE_CX1*/28)] * jy) -
                      (data[(/*LINE_DOT1*/30)] * jx));
        }
        else if (body === this.bodyB)
        {
            dst[0] = lx;
            dst[1] = ly;
            dst[2] = ((data[(/*LINE_DOT2*/31)] * jx) -
                      (scale * data[(/*LINE_CX2*/29)] * jy));
        }
        else
        {
            dst[0] = dst[1] = dst[2] = 0;
        }

        return dst;
    },

    _iterateVel : function _iterateVelFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        // (x, y) = Bias - VelocityError
        var scale = data[(/*LINE_SCALE*/32)];
        var nx    = data[(/*LINE_RAXIS*/17)];
        var ny    = data[(/*LINE_RAXIS*/17) + 1];
        var cx1   = data[(/*LINE_CX1*/28)];
        var cx2   = data[(/*LINE_CX2*/29)];
        var dot1  = data[(/*LINE_DOT1*/30)];
        var dot2  = data[(/*LINE_DOT2*/31)];

        var vx = (b2[(/*BODY_VEL*/7)]     - b1[(/*BODY_VEL*/7)]);
        var vy = (b2[(/*BODY_VEL*/7) + 1] - b1[(/*BODY_VEL*/7) + 1]);
        var vw1 = b1[(/*BODY_VEL*/7) + 2];
        var vw2 = b2[(/*BODY_VEL*/7) + 2];
        var x = (data[(/*LINE_BIAS*/26)]     - ((nx * vy) - (ny * vx) + (vw2 * dot2) - (vw1 * dot1)));
        var y = (data[(/*LINE_BIAS*/26) + 1] - (scale * ((nx * vx) + (ny * vy) - (vw2 * cx2) + (vw1 * cx1))));

        var jOldX = data[(/*LINE_JACC*/22)];
        var jOldY = data[(/*LINE_JACC*/22) + 1];
        var gamma = data[(/*LINE_GAMMA*/25)];
        // Impulse.
        // (jx, jy) = K * (x, y) - Jacc * gamma
        var Kb = data[(/*LINE_KMASS*/19) + 1];
        var jx = ((data[(/*LINE_KMASS*/19)] * x)     + (Kb * y)) - (jOldX * gamma);
        var jy = ((Kb * x) + (data[(/*LINE_KMASS*/19) + 2] * y)) - (jOldY * gamma);

        // Accumulate and clamp
        var jAccX = (jOldX + jx);
        var jAccY = (jOldY + jy);
        if (!this._equal && jAccY > 0)
        {
            jAccY = 0;
        }

        var jlsq = ((jAccX * jAccX) + (jAccY * jAccY));
        var jMax = data[(/*LINE_JMAX*/24)];
        if (this._breakUnderForce)
        {
            if (jlsq > (jMax * jMax))
            {
                return true;
            }
        }
        else if (!this._stiff)
        {
            if (jlsq > (jMax * jMax))
            {
                jlsq = (jMax / Math.sqrt(jlsq));
                jAccX *= jlsq;
                jAccY *= jlsq;
            }
        }

        jx = (jAccX - jOldX);
        jy = (jAccY - jOldY);
        data[(/*LINE_JACC*/22)]     = jAccX;
        data[(/*LINE_JACC*/22) + 1] = jAccY;

        // Apply impulse.
        var lx = (scale * nx * jy) - (ny * jx);
        var ly = (nx * jx) + (scale * ny * jy);

        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (lx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (ly * im);
        b1[(/*BODY_VEL*/7) + 2] += (((scale * cx1 * jy) - (dot1 * jx)) * b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (lx * im);
        b2[(/*BODY_VEL*/7) + 1] += (ly * im);
        b2[(/*BODY_VEL*/7) + 2] += (((dot2 * jx) - (scale * cx2 * jy)) * b2[(/*BODY_IINERTIA*/1)]);

        return false;
    },

    _iteratePos : function _iteratePosFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        this._posError();
        var errX = data[(/*LINE_BIAS*/26)];
        var errY = data[(/*LINE_BIAS*/26) + 1];
        var elsq = ((errX * errX) + (errY * errY));

        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (this._breakUnderError && elsq > (maxError * maxError))
        {
            return true;
        }

        var slop = Physics2DConfig.LINE_SLOP_SQ;
        if (elsq < slop)
        {
            return false;
        }

        var bias = Physics2DConfig.LINE_BIAS_COEF;
        errX *= bias;
        errY *= bias;
        elsq *= (bias * bias);

        var im1 = b1[(/*BODY_MASS*/0)];
        var im2 = b2[(/*BODY_MASS*/0)];
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];
        var massSum = (im1 + im2);

        var nx = data[(/*LINE_RAXIS*/17)];
        var ny = data[(/*LINE_RAXIS*/17) + 1];
        var scale = data[(/*LINE_SCALE*/32)];

        var lx, ly;

        // Solve large error case seperately.
        if (elsq > Physics2DConfig.LINE_LARGE_ERROR_SQ)
        {
            if (massSum > Physics2DConfig.EFF_MASS_EPSILON)
            {
                var K = (Physics2DConfig.LINE_LARGE_ERROR_BIAS / massSum);
                lx = K * ((ny * errX) - (scale * nx * errY));
                ly = K * ((nx * errX * scale) - (ny * errX));

                b1[(/*BODY_POS*/2)]     -= (lx * im1);
                b1[(/*BODY_POS*/2) + 1] -= (ly * im1);
                b2[(/*BODY_POS*/2)]     += (lx * im2);
                b2[(/*BODY_POS*/2) + 1] += (ly * im2);

                this._posError();
                nx = data[(/*LINE_RAXIS*/17)];
                ny = data[(/*LINE_RAXIS*/17) + 1];
                scale = data[(/*LINE_SCALE*/32)];

                errX = (data[(/*LINE_BIAS*/26)]     * bias);
                errY = (data[(/*LINE_BIAS*/26) + 1] * bias);
            }
        }

        // Compute non-inverted effective mass.
        var rx1 = data[(/*LINE_RANCHOR1*/13)];
        var ry1 = data[(/*LINE_RANCHOR1*/13) + 1];
        var rx2 = data[(/*LINE_RANCHOR2*/15)];
        var ry2 = data[(/*LINE_RANCHOR2*/15) + 1];
        var delX = (data[(/*LINE_CX1*/28)] + rx1);
        var delY = (data[(/*LINE_CX2*/29)] + ry1);

        var cx1  = (nx * delY) - (ny * delX);
        var cx2  = (nx * ry2)  - (ny * rx2);
        var dot1 = (nx * delX) + (ny * delY);
        var dot2 = (nx * rx2)  + (ny * ry2);

        data[(/*LINE_KMASS*/19)]     = massSum + (dot1 * ii1 * dot1) + (dot2 * ii2 * dot2);
        data[(/*LINE_KMASS*/19) + 1] = -scale * ((dot1 * ii1 * cx1) + (dot2 * ii2 * cx2));
        data[(/*LINE_KMASS*/19) + 2] = scale * scale * (massSum + (cx1 * ii1 * cx1) + (cx2 * ii2 * cx2));

        data[(/*LINE_BIAS*/26)]     = errX;
        data[(/*LINE_BIAS*/26) + 1] = errY;
        Physics2DConstraint.prototype.safe_solve2(data, (/*LINE_KMASS*/19), (/*LINE_BIAS*/26), (/*LINE_BIAS*/26));
        var jx = data[(/*LINE_BIAS*/26)];
        var jy = data[(/*LINE_BIAS*/26) + 1];

        if (!this._equal && jy > 0)
        {
            jy = 0;
        }

        lx = (scale * nx * jy) - (ny * jx);
        ly = (nx * jx) + (scale * ny * jy);

        b1[(/*BODY_POS*/2)]     -= (lx * im1);
        b1[(/*BODY_POS*/2) + 1] -= (ly * im1);
        var dr = (((scale * cx1 * jy) - (dot1 * jx)) * ii1);
        if (dr !== 0)
        {
            this.bodyA._deltaRotation(dr);
        }

        b2[(/*BODY_POS*/2)]     += (lx * im2);
        b2[(/*BODY_POS*/2) + 1] += (ly * im2);
        dr = (((dot2 * jx) - (scale * cx2 * jy)) * ii2);
        if (dr !== 0)
        {
            this.bodyB._deltaRotation(dr);
        }

        return false;
    }
};


// params = {
//   bodyA, bodyB
//   anchorA, anchorB, axis
//   lowerBound, upperBound
//   .. common constraint params
// }
Physics2DLineConstraint.create = function lineConstraintFn(params)
{
    var p = new Physics2DLineConstraint();
    p.dimension = 2;
    var data = p._data = new Physics2DDevice.prototype.floatArray((/*LINE_DATA_SIZE*/33));
    Physics2DConstraint.prototype.init(p, params);

    var anchor = params.anchorA;
    data[(/*LINE_LANCHOR1*/7)]     = (anchor ? anchor[0] : 0);
    data[(/*LINE_LANCHOR1*/7) + 1] = (anchor ? anchor[1] : 0);

    anchor = params.anchorB;
    data[(/*LINE_LANCHOR2*/9)]     = (anchor ? anchor[0] : 0);
    data[(/*LINE_LANCHOR2*/9) + 1] = (anchor ? anchor[1] : 0);

    anchor = params.axis;
    data[(/*LINE_LAXIS*/11)]     = anchor[0];
    data[(/*LINE_LAXIS*/11) + 1] = anchor[1];

    var min = data[(/*LINE_JOINTMIN*/5)] = (params.lowerBound !== undefined ? params.lowerBound : Number.NEGATIVE_INFINITY);
    var max = data[(/*LINE_JOINTMAX*/6)] = (params.upperBound !== undefined ? params.upperBound : Number.POSITIVE_INFINITY);
    p._equal = (min === max);

    p.bodyA = params.bodyA;
    p.bodyB = params.bodyB;

    return p;
};


// =========================================================================
//
// Distance Constraint
//

// DIST DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*DIST_JOINTMIN*/5   // Joint limits
///*DIST_JOINTMAX*/6   //
///*DIST_LANCHOR1*/7   // Local anchor on bodyA (x, y)
///*DIST_LANCHOR2*/9   // Local anchor on bodyB (x, y)
///*DIST_RANCHOR1*/11  // Relative anchor on bodyA (x, y)
///*DIST_RANCHOR2*/13  // Relative anchor on bodyB (x, y)
///*DIST_KMASS*/15     // Effective mass matrix (scalar)
///*DIST_JACC*/16      // Accumulated impulse
///*DIST_JMAX*/17      // Maximum impulse (maxForce derived)
///*DIST_GAMMA*/18     // Soft constraint gamma
///*DIST_BIAS*/19      // Bias for soft constraint (scalar)
///*DIST_NORMAL*/20    // Direction of constraint error (x, y)
///*DIST_CX1*/22       // (RANCHOR1 cross NORMAL)
///*DIST_CX2*/23       // (RANCHOR2 cross NORMAL)
//
///*DIST_DATA_SIZE*/24

function Physics2DDistanceConstraint() {}
Physics2DDistanceConstraint.prototype = {

    type : "DISTANCE",

    // Inherited
    wake  : Physics2DConstraint.prototype.wake,
    sleep : Physics2DConstraint.prototype.sleep,

    configure  : Physics2DConstraint.prototype.configure,
    isEnabled  : Physics2DConstraint.prototype.isEnabled,
    isDisabled : Physics2DConstraint.prototype.isDisabled,
    enable     : Physics2DConstraint.prototype.enable,
    disable    : Physics2DConstraint.prototype.disable,

    addEventListener    : Physics2DConstraint.prototype.addEventListener,
    removeEventListener : Physics2DConstraint.prototype.removeEventListener,

    // ===============================================

    getLowerBound : function getLowerBound()
    {
        return this._data[(/*DIST_JOINTMIN*/5)];
    },
    getUpperBound : function getUpperBound()
    {
        return this._data[(/*DIST_JOINTMAX*/6)];
    },

    setLowerBound : function setLowerBoundFn(lowerBound)
    {
        var data = this._data;
        if (data[(/*DIST_JOINTMIN*/5)] !== lowerBound)
        {
            data[(/*DIST_JOINTMIN*/5)] = lowerBound;
            this._equal = (lowerBound === data[(/*DIST_JOINTMAX*/6)]);
            this.wake(true);
        }
    },
    setUpperBound : function setUpperBoundFn(upperBound)
    {
        var data = this._data;
        if (data[(/*DIST_JOINTMAX*/6)] !== upperBound)
        {
            data[(/*DIST_JOINTMAX*/6)] = upperBound;
            this._equal = (upperBound === data[(/*DIST_JOINTMIN*/5)]);
            this.wake(true);
        }
    },

    // Inherited
    _ANCHOR_A : (/*DIST_LANCHOR1*/7),
    getAnchorA : Physics2DConstraint.prototype.getAnchorA,
    setAnchorA : Physics2DConstraint.prototype.setAnchorA,

    _ANCHOR_B : (/*DIST_LANCHOR2*/9),
    getAnchorB : Physics2DConstraint.prototype.getAnchorB,
    setAnchorB : Physics2DConstraint.prototype.setAnchorB,

    // =========================================================

    // Inherited
    _inWorld          : Physics2DConstraint.prototype.twoBodyInWorld,
    _outWorld         : Physics2DConstraint.prototype.twoBodyOutWorld,
    _pairExists       : Physics2DConstraint.prototype.twoBodyPairExists,
    _wakeConnected    : Physics2DConstraint.prototype.twoBodyWakeConnected,
    _sleepComputation : Physics2DConstraint.prototype.twoBodySleepComputation,

    // =======================================================

    // Inherited
    _JACC : (/*DIST_JACC*/16),
    _clearCache : Physics2DConstraint.prototype.clearCache,

    _posError : function _posErrorFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var jointMin = data[(/*DIST_JOINTMIN*/5)];
        var jointMax = data[(/*DIST_JOINTMAX*/6)];

        Physics2DConstraint.prototype.rotateAnchor(data, b1, (/*DIST_LANCHOR1*/7), (/*DIST_RANCHOR1*/11));
        Physics2DConstraint.prototype.rotateAnchor(data, b2, (/*DIST_LANCHOR2*/9), (/*DIST_RANCHOR2*/13));

        var nx = ((b2[(/*BODY_POS*/2)]     + data[(/*DIST_RANCHOR2*/13)])     -
                  (b1[(/*BODY_POS*/2)]     + data[(/*DIST_RANCHOR1*/11)]));
        var ny = ((b2[(/*BODY_POS*/2) + 1] + data[(/*DIST_RANCHOR2*/13) + 1]) -
                  (b1[(/*BODY_POS*/2) + 1] + data[(/*DIST_RANCHOR1*/11) + 1]));

        var err = ((nx * nx) + (ny * ny));
        if (err < Physics2DConfig.NORMALIZE_SQ_EPSILON)
        {
            nx = data[(/*DIST_NORMAL*/20)];
            ny = data[(/*DIST_NORMAL*/20) + 1];
            err = 0;
        }
        else
        {
            err = Math.sqrt(err);
            var rec = (1 / err);
            nx *= rec;
            ny *= rec;
        }

        if (this._equal)
        {
            err -= jointMin;
            this._slack = false;
        }
        else if (err < jointMin)
        {
            err = (jointMin - err);
            nx = -nx;
            ny = -ny;
            this._slack = false;
        }
        else if (err > jointMax)
        {
            err -= jointMax;
            this._slack = false;
        }
        else
        {
            // Don't set normals to 0.
            // In this case that _slack is true, we do no further work
            // So we permit normals to persist so that should constraint
            // become degenerate we can still choose a 'good' direction.
            //
            // Constraint only becomes degenerate when jointMin = 0 and we reach this
            // limit. In this condition we want negated normals, so that's what we
            // allow to persist.
            nx = -nx;
            ny = -ny;

            err = 0;
            this._slack = true;
        }

        data[(/*DIST_NORMAL*/20)]     = nx;
        data[(/*DIST_NORMAL*/20) + 1] = ny;
        data[(/*DIST_BIAS*/19)]       = (-err);
    },

    _preStep : function _preStepFn(deltaTime)
    {
        this._posError();
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        // Compute non-inverted effective mass.
        var nx = data[(/*DIST_NORMAL*/20)];
        var ny = data[(/*DIST_NORMAL*/20) + 1];
        var cx1 = data[(/*DIST_CX1*/22)] = ((data[(/*DIST_RANCHOR1*/11)] * ny) - (data[(/*DIST_RANCHOR1*/11) + 1] * nx));
        var cx2 = data[(/*DIST_CX2*/23)] = ((data[(/*DIST_RANCHOR2*/13)] * ny) - (data[(/*DIST_RANCHOR2*/13) + 1] * nx));
        data[(/*DIST_KMASS*/15)] = (b1[(/*BODY_IMASS*/0)] + (cx1 * b1[(/*BODY_IINERTIA*/1)] * cx1) +
                                    b2[(/*BODY_IMASS*/0)] + (cx2 * b2[(/*BODY_IINERTIA*/1)] * cx2));

        // Invert effective mass
        Physics2DConstraint.prototype.safe_invert(data, (/*DIST_KMASS*/15), (/*DIST_JACC*/16));

        if (!this._stiff)
        {
            if (Physics2DConstraint.prototype.soft_params(data, (/*DIST_KMASS*/15), (/*DIST_GAMMA*/18), (/*DIST_BIAS*/19), deltaTime, this._breakUnderError))
            {
                return true;
            }
        }
        else
        {
            data[(/*DIST_GAMMA*/18)] = 0.0;
            data[(/*DIST_BIAS*/19)]  = 0.0;
        }

        var dtRatio = Physics2DConstraint.prototype.dtRatio(data, deltaTime);
        data[(/*DIST_JACC*/16)] *= dtRatio;
        data[(/*DIST_JMAX*/17)] = (data[(/*JOINT_MAX_FORCE*/2)] * deltaTime);

        return false;
    },

    _warmStart : function _warmStartFn()
    {
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var jAcc = data[(/*DIST_JACC*/16)];
        var jx = (data[(/*DIST_NORMAL*/20)]     * jAcc);
        var jy = (data[(/*DIST_NORMAL*/20) + 1] * jAcc);

        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (jx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b1[(/*BODY_VEL*/7) + 2] -= (data[(/*DIST_CX1*/22)] * jAcc * b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (jx * im);
        b2[(/*BODY_VEL*/7) + 1] += (jy * im);
        b2[(/*BODY_VEL*/7) + 2] += (data[(/*DIST_CX2*/23)] * jAcc * b2[(/*BODY_IINERTIA*/1)]);
    },

    getImpulseForBody : function getImpulseForBodyFn(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var data = this._data;

        var jAcc = data[(/*DIST_JACC*/16)];
        var jx = (data[(/*DIST_NORMAL*/20)]     * jAcc);
        var jy = (data[(/*DIST_NORMAL*/20) + 1] * jAcc);

        if (body === this.bodyA)
        {
            dst[0] = -jx;
            dst[1] = -jy;
            dst[2] = -(data[(/*DIST_CX1*/22)] * jAcc);
        }
        else if (body === this.bodyB)
        {
            dst[0] = jx;
            dst[1] = jy;
            dst[2] = (data[(/*DIST_CX2*/23)] * jAcc);
        }
        else
        {
            dst[0] = dst[1] = dst[2] = 0;
        }

        return dst;
    },

    _iterateVel : function _iterateVelFn()
    {
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        // x = Bias - VelocityError
        var nx = data[(/*DIST_NORMAL*/20)];
        var ny = data[(/*DIST_NORMAL*/20) + 1];
        var cx1 = data[(/*DIST_CX1*/22)];
        var cx2 = data[(/*DIST_CX2*/23)];
        var x = (data[(/*DIST_BIAS*/19)] - ((nx * (b2[(/*BODY_VEL*/7)]     - b1[(/*BODY_VEL*/7)])) +
                                            (ny * (b2[(/*BODY_VEL*/7) + 1] - b1[(/*BODY_VEL*/7) + 1])) +
                                            (cx2 * b2[(/*BODY_VEL*/7) + 2]) -
                                            (cx1 * b1[(/*BODY_VEL*/7) + 2])));

        var jOld = data[(/*DIST_JACC*/16)];
        // Impulse.
        // j = K * x - Jacc * gamma
        var j = ((data[(/*DIST_KMASS*/15)] * x) - (jOld * data[(/*DIST_GAMMA*/18)]));

        // Accumulate and clamp.
        var jAcc = (jOld + j);
        var jMax = data[(/*DIST_JMAX*/17)];
        if (!this._equal && jAcc > 0)
        {
            jAcc = 0;
        }
        if (this._breakUnderForce)
        {
            if (jAcc > jMax || jAcc < -jMax)
            {
                return true;
            }
        }
        else if (!this._stiff)
        {
            if (jAcc > jMax)
            {
                jAcc = jMax;
            }
            else if (jAcc < -jMax)
            {
                jAcc = -jMax;
            }
        }

        j = (jAcc - jOld);
        data[(/*DIST_JACC*/16)] = jAcc;

        // Apply impulse.
        var jx = (nx * j);
        var jy = (ny * j);

        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (jx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b1[(/*BODY_VEL*/7) + 2] -= (data[(/*DIST_CX1*/22)] * j * b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (jx * im);
        b2[(/*BODY_VEL*/7) + 1] += (jy * im);
        b2[(/*BODY_VEL*/7) + 2] += (data[(/*DIST_CX2*/23)] * j * b2[(/*BODY_IINERTIA*/1)]);

        return false;
    },

    _iteratePos : function _iteratePosFn()
    {
        this._posError();
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var im1 = b1[(/*BODY_IMASS*/0)];
        var im2 = b2[(/*BODY_IMASS*/0)];
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];

        var err = data[(/*DIST_BIAS*/19)];
        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (this._breakUnderError && (err > maxError || err < -maxError))
        {
            return true;
        }

        var slop = Physics2DConfig.DIST_SLOP_SQ;
        if ((err * err) < slop)
        {
            return false;
        }

        err *= Physics2DConfig.DIST_BIAS_COEF;

        var massSum = (im1 + im2);
        var nx = data[(/*DIST_NORMAL*/20)];
        var ny = data[(/*DIST_NORMAL*/20) + 1];

        var j, jx, jy;
        // Handle large error seperately
        if ((err * err) > Physics2DConfig.DIST_LARGE_ERROR_SQ)
        {
            if (massSum > Physics2DConfig.EFF_MASS_EPSILON)
            {
                j = (err * Physics2DConfig.DIST_LARGE_ERROR_BIAS / massSum);
                if (this._equal || j < 0)
                {
                    jx = (nx * j);
                    jy = (ny * j);
                    b1[(/*BODY_POS*/2)]     -= (jx * im1);
                    b1[(/*BODY_POS*/2) + 1] -= (jy * im1);
                    b2[(/*BODY_POS*/2)]     += (jx * im2);
                    b2[(/*BODY_POS*/2) + 1] += (jy * im2);

                    // Recalculate error.
                    this._posError();
                    err = data[(/*DIST_BIAS*/19)] * Physics2DConfig.DIST_BIAS_COEF;
                    nx = data[(/*DIST_NORMAL*/20)];
                    ny = data[(/*DIST_NORMAL*/20) + 1];
                }
            }
        }

        var cx1 = ((data[(/*DIST_RANCHOR1*/11)] * ny) - (data[(/*DIST_RANCHOR1*/11) + 1] * nx));
        var cx2 = ((data[(/*DIST_RANCHOR2*/13)] * ny) - (data[(/*DIST_RANCHOR2*/13) + 1] * nx));
        data[(/*DIST_KMASS*/15)] = (massSum + (cx1 * ii1 * cx1) + (cx2 * ii2 * cx2));

        data[(/*DIST_BIAS*/19)] = err;
        Physics2DConstraint.prototype.safe_solve(data, (/*DIST_KMASS*/15), (/*DIST_BIAS*/19), (/*DIST_BIAS*/19));
        j = data[(/*DIST_BIAS*/19)];

        if (this._equal || j < 0)
        {
            jx = (nx * j);
            jy = (ny * j);

            b1[(/*BODY_POS*/2)]     -= (jx * im1);
            b1[(/*BODY_POS*/2) + 1] -= (jy * im1);
            var dr = (-cx1 * ii1 * j);
            if (dr !== 0)
            {
                this.bodyA._deltaRotation(dr);
            }

            b2[(/*BODY_POS*/2)]     += (jx * im2);
            b2[(/*BODY_POS*/2) + 1] += (jy * im2);
            dr = (cx2 * ii2 * j);
            if (dr !== 0)
            {
                this.bodyB._deltaRotation(dr);
            }
        }

        return false;
    }
};

// params = {
//   bodyA, bodyB
//   anchorA, anchorB,
//   lowerBound, upperBound
//   .. common constraint params
// }
Physics2DDistanceConstraint.create = function distanceConstraintFn(params)
{
    var p = new Physics2DDistanceConstraint();
    p.dimension = 1;
    var data = p._data = new Physics2DDevice.prototype.floatArray((/*DIST_DATA_SIZE*/24));
    Physics2DConstraint.prototype.init(p, params);

    var anchor = params.anchorA;
    data[(/*DIST_LANCHOR1*/7)]     = (anchor ? anchor[0] : 0);
    data[(/*DIST_LANCHOR1*/7) + 1] = (anchor ? anchor[1] : 0);

    anchor = params.anchorB;
    data[(/*DIST_LANCHOR2*/9)]     = (anchor ? anchor[0] : 0);
    data[(/*DIST_LANCHOR2*/9) + 1] = (anchor ? anchor[1] : 0);

    var min = data[(/*DIST_JOINTMIN*/5)] = (params.lowerBound !== undefined ? params.lowerBound : 0);
    var max = data[(/*DIST_JOINTMAX*/6)] = (params.upperBound !== undefined ? params.upperBound : 0);
    p._equal = (min === max);

    p._slack = false;

    p.bodyA = params.bodyA;
    p.bodyB = params.bodyB;

    // Seed normal incase initial anchors are degenerate.
    data[(/*DIST_NORMAL*/20)]     = 1;
    data[(/*DIST_NORMAL*/20) + 1] = 0;

    return p;
};


// =========================================================================
//
// Angle Constraint
//

// ANGLE DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*ANGLE_JOINTMIN*/5 // Joint limits
///*ANGLE_JOINTMAX*/6 //
///*ANGLE_RATIO*/7    // Angle ratio for constraint
///*ANGLE_KMASS*/8    // Effective mass matrix (Scalar)
///*ANGLE_JACC*/9     // Accumulated impulse
///*ANGLE_JMAX*/10    // Maximum impulse (maxForce derived)
///*ANGLE_GAMMA*/11   // Gamma for soft constraint
///*ANGLE_BIAS*/12    // Bias for soft constraint (scalar)
///*ANGLE_SCALE*/13   // Scaling for impulse direction.
//
///*ANGLE_DATA_SIZE*/14

function Physics2DAngleConstraint() {}
Physics2DAngleConstraint.prototype = {

    type : "ANGLE",

    // Inherited
    wake  : Physics2DConstraint.prototype.wake,
    sleep : Physics2DConstraint.prototype.sleep,

    configure  : Physics2DConstraint.prototype.configure,
    isEnabled  : Physics2DConstraint.prototype.isEnabled,
    isDisabled : Physics2DConstraint.prototype.isDisabled,
    enable     : Physics2DConstraint.prototype.enable,
    disable    : Physics2DConstraint.prototype.disable,

    addEventListener    : Physics2DConstraint.prototype.addEventListener,
    removeEventListener : Physics2DConstraint.prototype.removeEventListener,

    // ===============================================

    getLowerBound : function getLowerBound()
    {
        return this._data[(/*ANGLE_JOINTMIN*/5)];
    },
    getUpperBound : function getUpperBound()
    {
        return this._data[(/*ANGLE_JOINTMAX*/6)];
    },
    getRatio : function getRatioFn()
    {
        return this._data[(/*ANGLE_RATIO*/7)];
    },

    setLowerBound : function setLowerBoundFn(lowerBound)
    {
        var data = this._data;
        if (data[(/*ANGLE_JOINTMIN*/5)] !== lowerBound)
        {
            data[(/*ANGLE_JOINTMIN*/5)] = lowerBound;
            this._equal = (lowerBound === data[(/*ANGLE_JOINTMAX*/6)]);
            this.wake(true);
        }
    },
    setUpperBound : function setUpperBoundFn(upperBound)
    {
        var data = this._data;
        if (data[(/*ANGLE_JOINTMAX*/6)] !== upperBound)
        {
            data[(/*ANGLE_JOINTMAX*/6)] = upperBound;
            this._equal = (upperBound === data[(/*ANGLE_JOINTMIN*/5)]);
            this.wake(true);
        }
    },
    setRatio : function setRatioFn(ratio)
    {
        var data = this._data;
        if (data[(/*ANGLE_RATIO*/7)] !== ratio)
        {
            data[(/*ANGLE_RATIO*/7)] = ratio;
            this.wake(true);
        }
    },

    // =========================================================

    // Inherited
    _inWorld          : Physics2DConstraint.prototype.twoBodyInWorld,
    _outWorld         : Physics2DConstraint.prototype.twoBodyOutWorld,
    _pairExists       : Physics2DConstraint.prototype.twoBodyPairExists,
    _wakeConnected    : Physics2DConstraint.prototype.twoBodyWakeConnected,
    _sleepComputation : Physics2DConstraint.prototype.twoBodySleepComputation,

    // =======================================================

    // Inherited
    _JACC : (/*ANGLE_JACC*/9),
    _clearCache : Physics2DConstraint.prototype.clearCache,

    _posError : function _posErrorFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var ratio = data[(/*ANGLE_RATIO*/7)];
        var jointMin = data[(/*ANGLE_JOINTMIN*/5)];
        var jointMax = data[(/*ANGLE_JOINTMAX*/6)];

        var err = ((ratio * b2[(/*BODY_POS*/2) + 2]) - b1[(/*BODY_POS*/2) + 2]);
        if (this._equal)
        {
            err -= jointMax;
            this._slack = false;
            data[(/*ANGLE_SCALE*/13)] = 1;
        }
        else
        {
            if (err < jointMin)
            {
                err = (jointMin - err);
                this._slack = false;
                data[(/*ANGLE_SCALE*/13)] = -1;
            }
            else if (err > jointMax)
            {
                err -= jointMax;
                this._slack = false;
                data[(/*ANGLE_SCALE*/13)] = 1;
            }
            else
            {
                err = 0;
                this._slack = true;
                data[(/*ANGLE_SCALE*/13)] = 0;
            }
        }
        data[(/*ANGLE_BIAS*/12)] = (-err);
    },

    _preStep : function _preStepFn(deltaTime)
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        // Compute effective mass before existing on _slack
        // As effective-mass is not recomputed in iteratePos
        // for stiff constraints.

        var ratio = data[(/*ANGLE_RATIO*/7)];
        // Compute non-inverted effective mass.
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];
        data[(/*ANGLE_KMASS*/8)] = ii1 + (ratio * ratio * ii2);

        // Invert effective mass
        Physics2DConstraint.prototype.safe_invert(data, (/*ANGLE_KMASS*/8), (/*ANGLE_JACC*/9));

        this._posError();
        if (this._slack)
        {
            return false;
        }

        if (!this._stiff)
        {
            if (Physics2DConstraint.prototype.soft_params(data, (/*ANGLE_KMASS*/8), (/*ANGLE_GAMMA*/11), (/*ANGLE_BIAS*/12), deltaTime, this._breakUnderError))
            {
                return true;
            }
        }
        else
        {
            data[(/*ANGLE_GAMMA*/11)] = 0;
            data[(/*ANGLE_BIAS*/12)] = 0;
        }

        var dtRatio = Physics2DConstraint.prototype.dtRatio(data, deltaTime);
        data[(/*ANGLE_JACC*/9)] *= dtRatio;
        data[(/*ANGLE_JMAX*/10)] = (data[(/*JOINT_MAX_FORCE*/2)] * deltaTime);

        return false;
    },

    _warmStart : function _warmStartFn()
    {
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var j = (data[(/*ANGLE_JACC*/9)] * data[(/*ANGLE_SCALE*/13)]);
        b1[(/*BODY_VEL*/7) + 2] -= (j * b1[(/*BODY_IINERTIA*/1)]);
        b2[(/*BODY_VEL*/7) + 2] += (j * data[(/*ANGLE_RATIO*/7)] * b2[(/*BODY_IINERTIA*/1)]);
    },

    getImpulseForBody : function getImpulseForBodyFn(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var data = this._data;
        var j = (data[(/*ANGLE_JACC*/9)] * data[(/*ANGLE_SCALE*/13)]);

        dst[0] = dst[1] = 0;
        dst[2] = (body === this.bodyA ? -1 : (body === this.bodyB ? data[(/*ANGLE_RATIO*/7)] : 0)) * j;

        return dst;
    },

    _iterateVel : function _iterateVelFn()
    {
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        // x = Bias - VelocityError
        var scale = data[(/*ANGLE_SCALE*/13)];
        var ratio = data[(/*ANGLE_RATIO*/7)];
        var x = (data[(/*ANGLE_BIAS*/12)] - (scale * ((ratio * b2[(/*BODY_VEL*/7) + 2]) - b1[(/*BODY_VEL*/7) + 2])));

        var jOld = data[(/*ANGLE_JACC*/9)];
        // Impulse.
        // j = K * x - Jacc * gamma
        var j = (data[(/*ANGLE_KMASS*/8)] * x) - (jOld * data[(/*ANGLE_GAMMA*/11)]);

        // Accumulate and clamp
        var jAcc = (jOld + j);
        var jMax = data[(/*ANGLE_JMAX*/10)];
        if (this._breakUnderForce)
        {
            if (jAcc > jMax || jAcc < -jMax)
            {
                return true;
            }
            else if (!this._equal && jAcc > 0)
            {
                jAcc = 0;
            }
        }
        else if (!this._stiff)
        {
            if (!this._equal)
            {
                if (jAcc > 0)
                {
                    jAcc = 0;
                }
                else if (jAcc < -jMax)
                {
                    jAcc = -jMax;
                }
            }
            else
            {
                if (jAcc > jMax)
                {
                    jAcc = jMax;
                }
                else if (jAcc < -jMax)
                {
                    jAcc = -jMax;
                }
            }
        }
        else if (!this._equal && jAcc > 0)
        {
            jAcc = 0;
        }

        j = (jAcc - jOld);
        data[(/*ANGLE_JACC*/9)] = jAcc;

        // Apply impulse
        j *= scale;
        b1[(/*BODY_VEL*/7) + 2] -= (j * b1[(/*BODY_IINERTIA*/1)]);
        b2[(/*BODY_VEL*/7) + 2] += (j * ratio * b2[(/*BODY_IINERTIA*/1)]);

        return false;
    },

    _iteratePos : function _iteratePosFn()
    {
        this._posError();
        if (this._slack)
        {
            return false;
        }

        var data = this._data;
        var err = data[(/*ANGLE_BIAS*/12)];
        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (this._breakUnderError && (err > maxError || err < -maxError))
        {
            return true;
        }

        var slop = Physics2DConfig.ANGLE_SLOP_SQ;
        if ((err * err) < slop)
        {
            return false;
        }

        err *= Physics2DConfig.ANGLE_BIAS_COEF;
        var j = (err * Physics2DConfig.ANGLE_BIAS_COEF * data[(/*ANGLE_KMASS*/8)]);

        if (this._equal || j < 0)
        {
            var b = this.bodyA;
            j *= data[(/*ANGLE_SCALE*/13)];
            var dr = (-j * b._data[(/*BODY_IINERTIA*/1)]);
            if (dr !== 0)
            {
                b._deltaRotation(dr);
            }

            b = this.bodyB;
            dr = (j * b._data[(/*BODY_IINERTIA*/1)]);
            if (dr !== 0)
            {
                b._deltaRotation(dr);
            }
        }

        return false;
    }
};

// params = {
//   bodyA, bodyB,
//   lowerBound, upperBound, ratio
//   ... common constraint params
// }
Physics2DAngleConstraint.create = function angleConstraintFn(params)
{
    var p = new Physics2DAngleConstraint();
    p.dimension = 1;
    var data = p._data = new Physics2DDevice.prototype.floatArray((/*ANGLE_DATA_SIZE*/14));
    Physics2DConstraint.prototype.init(p, params);

    data[(/*ANGLE_RATIO*/7)] = (params.ratio !== undefined ? params.ratio : 1);
    var min = data[(/*ANGLE_JOINTMIN*/5)] = (params.lowerBound !== undefined ? params.lowerBound : 0);
    var max = data[(/*ANGLE_JOINTMAX*/6)] = (params.upperBound !== undefined ? params.upperBound : 0);
    p._equal = (min === max);

    p._slack = false;

    p.bodyA = params.bodyA;
    p.bodyB = params.bodyB;

    return p;
};

// =========================================================================
//
// Weld Constraint
//

// WELD DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*WELD_LANCHOR1*/5  // Locally defined anchor on first body.
///*WELD_LANCHOR2*/7  // Locally defined anchor on second body.
///*WELD_RANCHOR1*/9  // Relatively defined anchor on first body.
///*WELD_RANCHOR2*/11 // Relatively defined anchor on second body.
///*WELD_PHASE*/13    // Rotational phase between bodies
///*WELD_KMASS*/14    // Effective mass matrix [ a b c ; b d e ; c e f ] symmetric.
///*WELD_JACC*/20     // Accumulated impulse (x, y, w).
///*WELD_JMAX*/23     // Maximum impulse magnitude (maxForce derived).
///*WELD_GAMMA*/24    // Gamma for soft constraint
///*WELD_BIAS*/25     // Bias for soft constraint (x, y, w) (maxError derived).
//
///*WELD_DATA_SIZE*/28

function Physics2DWeldConstraint() {}
Physics2DWeldConstraint.prototype = {

    type : "WELD",

    // Inherited
    wake  : Physics2DConstraint.prototype.wake,
    sleep : Physics2DConstraint.prototype.sleep,

    configure  : Physics2DConstraint.prototype.configure,
    isEnabled  : Physics2DConstraint.prototype.isEnabled,
    isDisabled : Physics2DConstraint.prototype.isDisabled,
    enable     : Physics2DConstraint.prototype.enable,
    disable    : Physics2DConstraint.prototype.disable,

    addEventListener    : Physics2DConstraint.prototype.addEventListener,
    removeEventListener : Physics2DConstraint.prototype.removeEventListener,

    // ===============================================

    // Inherited
    _ANCHOR_A : (/*WELD_LANCHOR1*/5),
    getAnchorA : Physics2DConstraint.prototype.getAnchorA,
    setAnchorA : Physics2DConstraint.prototype.setAnchorA,

    _ANCHOR_B : (/*WELD_LANCHOR2*/7),
    getAnchorB : Physics2DConstraint.prototype.getAnchorB,
    setAnchorB : Physics2DConstraint.prototype.setAnchorB,

    getPhase : function getPhaseFn()
    {
        return this._data[(/*WELD_PHASE*/13)];
    },
    setPhase : function setPhaseFn(phase)
    {
        var data = this._data;
        if (phase !== data[(/*WELD_PHASE*/13)])
        {
            data[(/*WELD_PHASE*/13)] = phase;
            this.wake(true);
        }
    },

    // =========================================================

    // Inherited
    _inWorld          : Physics2DConstraint.prototype.twoBodyInWorld,
    _outWorld         : Physics2DConstraint.prototype.twoBodyOutWorld,
    _pairExists       : Physics2DConstraint.prototype.twoBodyPairExists,
    _wakeConnected    : Physics2DConstraint.prototype.twoBodyWakeConnected,
    _sleepComputation : Physics2DConstraint.prototype.twoBodySleepComputation,

    // =======================================================

    // Inherited
    _JACC : (/*WELD_JACC*/20),
    _clearCache : Physics2DConstraint.prototype.clearCache3,

    _preStep : function _preStepFn(deltaTime)
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        Physics2DConstraint.prototype.rotateAnchor(data, b1, (/*WELD_LANCHOR1*/5), (/*WELD_RANCHOR1*/9));
        var rx1 = data[(/*WELD_RANCHOR1*/9)];
        var ry1 = data[(/*WELD_RANCHOR1*/9) + 1];

        Physics2DConstraint.prototype.rotateAnchor(data, b2, (/*WELD_LANCHOR2*/7), (/*WELD_RANCHOR2*/11));
        var rx2 = data[(/*WELD_RANCHOR2*/11)];
        var ry2 = data[(/*WELD_RANCHOR2*/11) + 1];

        // Compute non-inverted effective mass.
        var massSum = (b1[(/*BODY_IMASS*/0)] + b2[(/*BODY_IMASS*/0)]);
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];
        data[(/*WELD_KMASS*/14)]     = massSum + (ry1 * ii1 * ry1) + (ry2 * ii2 * ry2);
        data[(/*WELD_KMASS*/14) + 1] =         - (rx1 * ii1 * ry1) - (rx2 * ii2 * ry2);
        data[(/*WELD_KMASS*/14) + 2] =         - (ry1 * ii1)       - (ry2 * ii2);
        data[(/*WELD_KMASS*/14) + 3] = massSum + (rx1 * ii1 * rx1) + (rx2 * ii2 * rx2);
        data[(/*WELD_KMASS*/14) + 4] =           (rx1 * ii1)       + (rx2 * ii2);
        data[(/*WELD_KMASS*/14) + 5] = ii1 + ii2;

        // Invert effective mass
        Physics2DConstraint.prototype.safe_invert3(data, (/*WELD_KMASS*/14), (/*WELD_JACC*/20));

        if (!this._stiff)
        {
            data[(/*WELD_BIAS*/25)]     = ((b1[(/*BODY_POS*/2)]     + rx1) - (b2[(/*BODY_POS*/2)]     + rx2));
            data[(/*WELD_BIAS*/25) + 1] = ((b1[(/*BODY_POS*/2) + 1] + ry1) - (b2[(/*BODY_POS*/2) + 1] + ry2));
            data[(/*WELD_BIAS*/25) + 2] = ((b1[(/*BODY_POS*/2) + 2] + data[(/*WELD_PHASE*/13)]) - b2[(/*BODY_POS*/2) + 2]);
            if (Physics2DConstraint.prototype.soft_params3(data, (/*WELD_KMASS*/14), (/*WELD_GAMMA*/24), (/*WELD_BIAS*/25),
                                                        deltaTime, this._breakUnderError))
            {
                return true;
            }
        }
        else
        {
            data[(/*WELD_GAMMA*/24)]    = 0.0;
            data[(/*WELD_BIAS*/25)]     = 0.0;
            data[(/*WELD_BIAS*/25) + 1] = 0.0;
            data[(/*WELD_BIAS*/25) + 2] = 0.0;
        }

        var dtRatio = Physics2DConstraint.prototype.dtRatio(data, deltaTime);
        data[(/*WELD_JACC*/20)]     *= dtRatio;
        data[(/*WELD_JACC*/20) + 1] *= dtRatio;
        data[(/*WELD_JACC*/20) + 2] *= dtRatio;
        data[(/*WELD_JMAX*/23)]     = (data[(/*JOINT_MAX_FORCE*/2)] * deltaTime);

        return false;
    },

    _warmStart : function _warmStartFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var jx = data[(/*WELD_JACC*/20)];
        var jy = data[(/*WELD_JACC*/20) + 1];
        var jz = data[(/*WELD_JACC*/20) + 2];

        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (jx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b1[(/*BODY_VEL*/7) + 2] -= (((data[(/*WELD_RANCHOR1*/9)]     * jy) -
                                     (data[(/*WELD_RANCHOR1*/9) + 1] * jx) +
                                     jz) *
                                    b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (jx * im);
        b2[(/*BODY_VEL*/7) + 1] += (jy * im);
        b2[(/*BODY_VEL*/7) + 2] += (((data[(/*WELD_RANCHOR2*/11)]     * jy) -
                                     (data[(/*WELD_RANCHOR2*/11) + 1] * jx) +
                                     jz) *
                                    b2[(/*BODY_IINERTIA*/1)]);
    },

    getImpulseForBody : function getImpulseForBodyFn(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var data = this._data;
        var jx = data[(/*WELD_JACC*/20)];
        var jy = data[(/*WELD_JACC*/20) + 1];
        var jz = data[(/*WELD_JACC*/20) + 2];

        if (body === this.bodyA)
        {
            dst[0] = -jx;
            dst[1] = -jy;
            dst[2] = -((data[(/*WELD_RANCHOR1*/9)]     * jy) -
                       (data[(/*WELD_RANCHOR1*/9) + 1] * jx) +
                       jz);
        }
        else if (body === this.bodyB)
        {
            dst[0] = jx;
            dst[1] = jy;
            dst[2] = ((data[(/*WELD_RANCHOR2*/11)]     * jy) -
                      (data[(/*WELD_RANCHOR2*/11) + 1] * jx) +
                      jz);
        }
        else
        {
            dst[0] = dst[1] = dst[2] = 0;
        }

        return dst;
    },

    _iterateVel : function _iterateVelFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var rx1 = data[(/*WELD_RANCHOR1*/9)];
        var ry1 = data[(/*WELD_RANCHOR1*/9) + 1];
        var rx2 = data[(/*WELD_RANCHOR2*/11)];
        var ry2 = data[(/*WELD_RANCHOR2*/11) + 1];

        // (x, y, z) = Bias - VelocityError
        var vw1 = b1[(/*BODY_VEL*/7) + 2];
        var vw2 = b2[(/*BODY_VEL*/7) + 2];
        var x = (data[(/*WELD_BIAS*/25)]     - (b2[(/*BODY_VEL*/7)]     - (ry2 * vw2)) + (b1[(/*BODY_VEL*/7)]     - (ry1 * vw1)));
        var y = (data[(/*WELD_BIAS*/25) + 1] - (b2[(/*BODY_VEL*/7) + 1] + (rx2 * vw2)) + (b1[(/*BODY_VEL*/7) + 1] + (rx1 * vw1)));
        var z = (data[(/*WELD_BIAS*/25) + 2] - vw2 + vw1);

        var jOldX = data[(/*WELD_JACC*/20)];
        var jOldY = data[(/*WELD_JACC*/20) + 1];
        var jOldZ = data[(/*WELD_JACC*/20) + 2];
        var gamma = data[(/*WELD_GAMMA*/24)];

        // Impulse.
        // (jx, jy, jz) = K * (x, y, z) - (JAcc * gamma);
        var Kb = data[(/*WELD_KMASS*/14) + 1];
        var Kc = data[(/*WELD_KMASS*/14) + 2];
        var Ke = data[(/*WELD_KMASS*/14) + 4];
        var jx = ((data[(/*WELD_KMASS*/14)]     * x) + (Kb * y) + (Kc * z)) - (jOldX * gamma);
        var jy = ((Kb * x) + (data[(/*WELD_KMASS*/14) + 3] * y) + (Ke * z)) - (jOldY * gamma);
        var jz = ((Kc * x) + (Ke * y) + (data[(/*WELD_KMASS*/14) + 5] * z)) - (jOldZ * gamma);

        // Accumulate and clamp.
        var jAccX = (jOldX + jx);
        var jAccY = (jOldY + jy);
        var jAccZ = (jOldZ + jz);
        var jsq = ((jAccX * jAccX) + (jAccY * jAccY) + (jAccZ * jAccZ));
        var jMax = data[(/*WELD_JMAX*/23)];
        if (this._breakUnderForce)
        {
            if (jsq > (jMax * jMax))
            {
                return true;
            }
        }
        else if (!this._stiff)
        {
            if (jsq > (jMax * jMax))
            {
                jsq = (jMax / Math.sqrt(jsq));
                jAccX *= jsq;
                jAccY *= jsq;
                jAccZ *= jsq;
            }
        }

        jx = (jAccX - jOldX);
        jy = (jAccY - jOldY);
        jz = (jAccZ - jOldZ);
        data[(/*WELD_JACC*/20)]     = jAccX;
        data[(/*WELD_JACC*/20) + 1] = jAccY;
        data[(/*WELD_JACC*/20) + 2] = jAccZ;

        // Apply impulse
        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (jx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b1[(/*BODY_VEL*/7) + 2] -= (((rx1 * jy) - (ry1 * jx) + jz) * b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (jx * im);
        b2[(/*BODY_VEL*/7) + 1] += (jy * im);
        b2[(/*BODY_VEL*/7) + 2] += (((rx2 * jy) - (ry2 * jx) + jz) * b2[(/*BODY_IINERTIA*/1)]);

        return false;
    },

    _iteratePos : function _iteratePosFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var im1 = b1[(/*BODY_IMASS*/0)];
        var im2 = b2[(/*BODY_IMASS*/0)];
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];

        Physics2DConstraint.prototype.rotateAnchor(data, b1, (/*WELD_LANCHOR1*/5), (/*WELD_RANCHOR1*/9));
        var rx1 = data[(/*WELD_RANCHOR1*/9)];
        var ry1 = data[(/*WELD_RANCHOR1*/9) + 1];

        Physics2DConstraint.prototype.rotateAnchor(data, b2, (/*WELD_LANCHOR2*/7), (/*WELD_RANCHOR2*/11));
        var rx2 = data[(/*WELD_RANCHOR2*/11)];
        var ry2 = data[(/*WELD_RANCHOR2*/11) + 1];

        // Positional error
        var errX = ((b1[(/*BODY_POS*/2)]     + rx1) - (b2[(/*BODY_POS*/2)]     + rx2));
        var errY = ((b1[(/*BODY_POS*/2) + 1] + ry1) - (b2[(/*BODY_POS*/2) + 1] + ry2));
        var errZ = ((b1[(/*BODY_POS*/2) + 2] + data[(/*WELD_PHASE*/13)]) - b2[(/*BODY_POS*/2) + 2]);

        var elsq = ((errX * errX) + (errY * errY));
        var wlsq = (errZ * errZ);
        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (this._breakUnderError && (elsq + wlsq > (maxError * maxError)))
        {
            return true;
        }

        if (elsq < Physics2DConfig.WELD_LINEAR_SLOP_SQ && wlsq < Physics2DConfig.WELD_ANGULAR_SLOP_SQ)
        {
            return false;
        }

        var scale = Physics2DConfig.WELD_BIAS_COEF;
        errX *= scale;
        errY *= scale;
        errZ *= scale;
        elsq *= (scale * scale);

        var massSum = (im1 + im2);
        var jx, jy;
        // Handle large error seperately.
        if (elsq > Physics2DConfig.WELD_LARGE_ERROR_SQ)
        {
            if (massSum > Physics2DConfig.EFF_MASS_EPSILON)
            {
                var K = (Physics2DConfig.WELD_BIAS_COEF / massSum);
                jx = (errX * K);
                jy = (errY * K);

                // Clamp
                var jsq = ((jx * jx) + (jy * jy));
                var maxJ = Physics2DConfig.WELD_LARGE_ERROR_MAX;
                if (jsq > (maxJ * maxJ))
                {
                    jsq = (maxJ / Math.sqrt(jsq));
                    jx *= jsq;
                    jy *= jsq;
                }

                // Apply impulse
                b1[(/*BODY_POS*/2)]     -= (jx * im1);
                b1[(/*BODY_POS*/2) + 1] -= (jy * im1);
                b2[(/*BODY_POS*/2)]     += (jx * im1);
                b2[(/*BODY_POS*/2) + 1] += (jy * im1);

                // Recompute error.
                errX = ((b1[(/*BODY_POS*/2)]     + rx1) - (b2[(/*BODY_POS*/2)]     + rx2));
                errY = ((b1[(/*BODY_POS*/2) + 1] + ry1) - (b2[(/*BODY_POS*/2) + 1] + ry2));
                errX *= scale;
                errY *= scale;
                elsq = ((errX * errX) + (errY * errY));
            }
        }

        // Compute non-inverted effective mass.
        data[(/*WELD_KMASS*/14)]     = massSum + (ry1 * ii1 * ry1) + (ry2 * ii2 * ry2);
        data[(/*WELD_KMASS*/14) + 1] =         - (rx1 * ii1 * ry1) - (rx2 * ii2 * ry2);
        data[(/*WELD_KMASS*/14) + 2] =         - (ry1 * ii1)       - (ry2 * ii2);
        data[(/*WELD_KMASS*/14) + 3] = massSum + (rx1 * ii1 * rx1) + (rx2 * ii2 * rx2);
        data[(/*WELD_KMASS*/14) + 4] =           (rx1 * ii1)       + (rx2 * ii2);
        data[(/*WELD_KMASS*/14) + 5] = ii1 + ii2;

        if (elsq > Physics2DConfig.WELD_MAX_LINEAR_ERROR_SQ)
        {
            elsq = (Physics2DConfig.WELD_MAX_LINEAR_ERROR / Math.sqrt(elsq));
            errX *= elsq;
            errY *= elsq;
        }

        var maxW = Physics2DConfig.WELD_MAX_ANGULAR_ERROR;
        if (errZ > maxW)
        {
            errZ = maxW;
        }
        else if (errZ < -maxW)
        {
            errZ = -maxW;
        }

        data[(/*WELD_BIAS*/25)]     = errX;
        data[(/*WELD_BIAS*/25) + 1] = errY;
        data[(/*WELD_BIAS*/25) + 2] = errZ;
        Physics2DConstraint.prototype.safe_solve3(data, (/*WELD_KMASS*/14), (/*WELD_BIAS*/25), (/*WELD_BIAS*/25));
        jx = data[(/*WELD_BIAS*/25)];
        jy = data[(/*WELD_BIAS*/25) + 1];
        var jz = data[(/*WELD_BIAS*/25) + 2];

        // Apply impulse
        b1[(/*BODY_POS*/2)]     -= (jx * im1);
        b1[(/*BODY_POS*/2) + 1] -= (jy * im1);
        var dW = -(((rx1 * jy) - (ry1 * jx) + jz) * ii1);
        if (dW !== 0)
        {
            this.bodyA._deltaRotation(dW);
        }

        b2[(/*BODY_POS*/2)]     += (jx * im2);
        b2[(/*BODY_POS*/2) + 1] += (jy * im2);
        dW = (((rx2 * jy) - (ry2 * jx) + jz) * ii2);
        if (dW !== 0)
        {
            this.bodyB._deltaRotation(dW);
        }

        return false;
    }
};

// params = {
//   bodyA, bodyB,
//   anchorA, anchorB,
//   phase
//   ... common constraint params
// }
Physics2DWeldConstraint.create = function weldConstraintFn(params)
{
    var p = new Physics2DWeldConstraint();
    p.dimension = 3;
    var data = p._data = new Physics2DDevice.prototype.floatArray((/*WELD_DATA_SIZE*/28));
    Physics2DConstraint.prototype.init(p, params);

    var anchor = params.anchorA;
    data[(/*WELD_LANCHOR1*/5)]     = (anchor ? anchor[0] : 0);
    data[(/*WELD_LANCHOR1*/5) + 1] = (anchor ? anchor[1] : 0);

    anchor = params.anchorB;
    data[(/*WELD_LANCHOR2*/7)]     = (anchor ? anchor[0] : 0);
    data[(/*WELD_LANCHOR2*/7) + 1] = (anchor ? anchor[1] : 0);

    data[(/*WELD_PHASE*/13)] = (params.phase !== undefined ? params.phase : 0);

    p.bodyA = params.bodyA;
    p.bodyB = params.bodyB;

    return p;
};

// =========================================================================
//
// Point Constraint
//

// POINT DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*POINT_LANCHOR1*/5  // Locally defined anchor on first body.
///*POINT_LANCHOR2*/7  // Locally defined anchor on second body.
///*POINT_RANCHOR1*/9  // Relatively defined anchor on first body.
///*POINT_RANCHOR2*/11 // Relatively defined anchor on second body.
///*POINT_KMASS*/13    // Effective mass matrix [ a b ; b c] symmetric.
///*POINT_JACC*/16     // Accumulated impulses (x, y).
///*POINT_JMAX*/18     // Maximimum impulse magnitude (maxForce derived).
///*POINT_GAMMA*/19    // Gamma for soft constraint.
///*POINT_BIAS*/20     // Bias for soft constraint (x, y) (maxError derived).
//
///*POINT_DATA_SIZE*/22

function Physics2DPointConstraint() {}
Physics2DPointConstraint.prototype = {

    type : "POINT",

    // Inherited
    wake  : Physics2DConstraint.prototype.wake,
    sleep : Physics2DConstraint.prototype.sleep,

    configure  : Physics2DConstraint.prototype.configure,
    isEnabled  : Physics2DConstraint.prototype.isEnabled,
    isDisabled : Physics2DConstraint.prototype.isDisabled,
    enable     : Physics2DConstraint.prototype.enable,
    disable    : Physics2DConstraint.prototype.disable,

    addEventListener    : Physics2DConstraint.prototype.addEventListener,
    removeEventListener : Physics2DConstraint.prototype.removeEventListener,

    // ===============================================

    // Inherited
    _ANCHOR_A : (/*POINT_LANCHOR1*/5),
    getAnchorA : Physics2DConstraint.prototype.getAnchorA,
    setAnchorA : Physics2DConstraint.prototype.setAnchorA,

    _ANCHOR_B : (/*POINT_LANCHOR2*/7),
    getAnchorB : Physics2DConstraint.prototype.getAnchorB,
    setAnchorB : Physics2DConstraint.prototype.setAnchorB,

    // =========================================================

    // Inherited
    _inWorld          : Physics2DConstraint.prototype.twoBodyInWorld,
    _outWorld         : Physics2DConstraint.prototype.twoBodyOutWorld,
    _pairExists       : Physics2DConstraint.prototype.twoBodyPairExists,
    _wakeConnected    : Physics2DConstraint.prototype.twoBodyWakeConnected,
    _sleepComputation : Physics2DConstraint.prototype.twoBodySleepComputation,

    // =======================================================

    // Inherited
    _JACC : (/*POINT_JACC*/16),
    _clearCache : Physics2DConstraint.prototype.clearCache2,

    _preStep : function _preStepFn(deltaTime)
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        Physics2DConstraint.prototype.rotateAnchor(data, b1, (/*POINT_LANCHOR1*/5), (/*POINT_RANCHOR1*/9));
        var rx1 = data[(/*POINT_RANCHOR1*/9)];
        var ry1 = data[(/*POINT_RANCHOR1*/9) + 1];

        Physics2DConstraint.prototype.rotateAnchor(data, b2, (/*POINT_LANCHOR2*/7), (/*POINT_RANCHOR2*/11));
        var rx2 = data[(/*POINT_RANCHOR2*/11)];
        var ry2 = data[(/*POINT_RANCHOR2*/11) + 1];

        // Compute non-inverted effective mass.
        var massSum = (b1[(/*BODY_IMASS*/0)] + b2[(/*BODY_IMASS*/0)]);
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];
        data[(/*POINT_KMASS*/13)]     = massSum + (ry1 * ii1 * ry1) + (ry2 * ii2 * ry2);
        data[(/*POINT_KMASS*/13) + 1] =         - (rx1 * ii1 * ry1) - (rx2 * ii2 * ry2);
        data[(/*POINT_KMASS*/13) + 2] = massSum + (rx1 * ii1 * rx1) + (rx2 * ii2 * rx2);

        // Invert effective mass
        Physics2DConstraint.prototype.safe_invert2(data, (/*POINT_KMASS*/13), (/*POINT_JACC*/16));

        if (!this._stiff)
        {
            data[(/*POINT_BIAS*/20)]     = ((b1[(/*BODY_POS*/2)]     + rx1) - (b2[(/*BODY_POS*/2)]     + rx2));
            data[(/*POINT_BIAS*/20) + 1] = ((b1[(/*BODY_POS*/2) + 1] + ry1) - (b2[(/*BODY_POS*/2) + 1] + ry2));
            if (Physics2DConstraint.prototype.soft_params2(data, (/*POINT_KMASS*/13), (/*POINT_GAMMA*/19), (/*POINT_BIAS*/20),
                                                        deltaTime, this._breakUnderError))
            {
                return true;
            }
        }
        else
        {
            data[(/*POINT_GAMMA*/19)]    = 0.0;
            data[(/*POINT_BIAS*/20)]     = 0.0;
            data[(/*POINT_BIAS*/20) + 1] = 0.0;
        }

        var dtRatio = Physics2DConstraint.prototype.dtRatio(data, deltaTime);
        data[(/*POINT_JACC*/16)]     *= dtRatio;
        data[(/*POINT_JACC*/16) + 1] *= dtRatio;
        data[(/*POINT_JMAX*/18)]     = (data[(/*JOINT_MAX_FORCE*/2)] * deltaTime);

        return false;
    },

    _warmStart : function _warmStartFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var jx = data[(/*POINT_JACC*/16)];
        var jy = data[(/*POINT_JACC*/16) + 1];

        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (jx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b1[(/*BODY_VEL*/7) + 2] -= (((data[(/*POINT_RANCHOR1*/9)]     * jy) -
                                     (data[(/*POINT_RANCHOR1*/9) + 1] * jx)) *
                                    b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (jx * im);
        b2[(/*BODY_VEL*/7) + 1] += (jy * im);
        b2[(/*BODY_VEL*/7) + 2] += (((data[(/*POINT_RANCHOR2*/11)]     * jy) -
                                     (data[(/*POINT_RANCHOR2*/11) + 1] * jx)) *
                                    b2[(/*BODY_IINERTIA*/1)]);
    },

    getImpulseForBody : function getImpulseForBodyFn(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var data = this._data;

        var jx = data[(/*POINT_JACC*/16)];
        var jy = data[(/*POINT_JACC*/16) + 1];

        if (body === this.bodyA)
        {
            dst[0] = -jx;
            dst[1] = -jy;
            dst[2] = -((data[(/*WELD_RANCHOR1*/9)]     * jy) -
                       (data[(/*WELD_RANCHOR1*/9) + 1] * jx));
        }
        else if (body === this.bodyB)
        {
            dst[0] = jx;
            dst[1] = jy;
            dst[2] = ((data[(/*WELD_RANCHOR2*/11)]     * jy) -
                      (data[(/*WELD_RANCHOR2*/11) + 1] * jx));
        }
        else
        {
            dst[0] = dst[1] = dst[2] = 0;
        }

        return dst;
    },

    _iterateVel : function _iterateVelFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var rx1 = data[(/*POINT_RANCHOR1*/9)];
        var ry1 = data[(/*POINT_RANCHOR1*/9) + 1];
        var rx2 = data[(/*POINT_RANCHOR2*/11)];
        var ry2 = data[(/*POINT_RANCHOR2*/11) + 1];

        // (x, y) = Bias - VelocityError
        var vw1 = b1[(/*BODY_VEL*/7) + 2];
        var vw2 = b2[(/*BODY_VEL*/7) + 2];
        var x = (data[(/*POINT_BIAS*/20)]     - (b2[(/*BODY_VEL*/7)]     - (ry2 * vw2)) + (b1[(/*BODY_VEL*/7)]     - (ry1 * vw1)));
        var y = (data[(/*POINT_BIAS*/20) + 1] - (b2[(/*BODY_VEL*/7) + 1] + (rx2 * vw2)) + (b1[(/*BODY_VEL*/7) + 1] + (rx1 * vw1)));

        var jOldX = data[(/*POINT_JACC*/16)];
        var jOldY = data[(/*POINT_JACC*/16) + 1];
        var Kb = data[(/*POINT_KMASS*/13) + 1];
        var gamma = data[(/*POINT_GAMMA*/19)];

        // Impulse.
        // (jx, jy) = K * (x, y) - (JAcc * gamma);
        var jx = ((data[(/*POINT_KMASS*/13)]     * x)  + (Kb * y)) - (jOldX * gamma);
        var jy = ((Kb * x) + (data[(/*POINT_KMASS*/13) + 2] * y)) - (jOldY * gamma);

        // Accumulate and clamp.
        var jAccX = (jOldX + jx);
        var jAccY = (jOldY + jy);
        var jsq = ((jAccX * jAccX) + (jAccY * jAccY));
        var jMax = data[(/*POINT_JMAX*/18)];
        if (this._breakUnderForce)
        {
            if (jsq > (jMax * jMax))
            {
                return true;
            }
        }
        else if (!this._stiff)
        {
            if (jsq > (jMax * jMax))
            {
                jsq = (jMax / Math.sqrt(jsq));
                jAccX *= jsq;
                jAccY *= jsq;
            }
        }

        jx = (jAccX - jOldX);
        jy = (jAccY - jOldY);
        data[(/*POINT_JACC*/16)]     = jAccX;
        data[(/*POINT_JACC*/16) + 1] = jAccY;

        // Apply impulse
        var im = b1[(/*BODY_IMASS*/0)];
        b1[(/*BODY_VEL*/7)]     -= (jx * im);
        b1[(/*BODY_VEL*/7) + 1] -= (jy * im);
        b1[(/*BODY_VEL*/7) + 2] -= (((rx1 * jy) - (ry1 * jx)) * b1[(/*BODY_IINERTIA*/1)]);

        im = b2[(/*BODY_IMASS*/0)];
        b2[(/*BODY_VEL*/7)]     += (jx * im);
        b2[(/*BODY_VEL*/7) + 1] += (jy * im);
        b2[(/*BODY_VEL*/7) + 2] += (((rx2 * jy) - (ry2 * jx)) * b2[(/*BODY_IINERTIA*/1)]);

        return false;
    },

    _iteratePos : function _iteratePosFn()
    {
        var data = this._data;
        var b1 = this.bodyA._data;
        var b2 = this.bodyB._data;

        var im1 = b1[(/*BODY_IMASS*/0)];
        var im2 = b2[(/*BODY_IMASS*/0)];
        var ii1 = b1[(/*BODY_IINERTIA*/1)];
        var ii2 = b2[(/*BODY_IINERTIA*/1)];

        Physics2DConstraint.prototype.rotateAnchor(data, b1, (/*POINT_LANCHOR1*/5), (/*POINT_RANCHOR1*/9));
        var rx1 = data[(/*POINT_RANCHOR1*/9)];
        var ry1 = data[(/*POINT_RANCHOR1*/9) + 1];

        Physics2DConstraint.prototype.rotateAnchor(data, b2, (/*POINT_LANCHOR2*/7), (/*POINT_RANCHOR2*/11));
        var rx2 = data[(/*POINT_RANCHOR2*/11)];
        var ry2 = data[(/*POINT_RANCHOR2*/11) + 1];

        // Positional error
        var errX = ((b1[(/*BODY_POS*/2)]     + rx1) - (b2[(/*BODY_POS*/2)]     + rx2));
        var errY = ((b1[(/*BODY_POS*/2) + 1] + ry1) - (b2[(/*BODY_POS*/2) + 1] + ry2));
        var elsq = ((errX * errX) + (errY * errY));
        var maxError = data[(/*JOINT_MAX_ERROR*/3)];
        if (this._breakUnderError && (elsq > (maxError * maxError)))
        {
            return true;
        }

        if (elsq < Physics2DConfig.POINT_SLOP_SQ)
        {
            return false;
        }

        var scale = Physics2DConfig.POINT_BIAS_COEF;
        errX *= scale;
        errY *= scale;
        elsq *= (scale * scale);

        var massSum = (im1 + im2);
        var jx, jy;
        // Handle large seperation  for stability
        if (elsq > Physics2DConfig.POINT_LARGE_ERROR_SQ)
        {
            if (massSum > Physics2DConfig.EFF_MASS_EPSILON)
            {
                // We resolve error assuming infinite inertia (ignore rotation).
                var K = (Physics2DConfig.POINT_LARGE_ERROR_BIAS / massSum);
                jx = (errX * K);
                jy = (errY * K);

                // Clamp
                var jsq = ((jx * jx) + (jy * jy));
                var maxJ = Physics2DConfig.POINT_LARGE_ERROR_MAX;
                if (jsq > (maxJ * maxJ))
                {
                    jsq = (maxJ / Math.sqrt(jsq));
                    jx *= jsq;
                    jy *= jsq;
                }

                // Apply impulse
                b1[(/*BODY_POS*/2)]     -= (jx * im1);
                b1[(/*BODY_POS*/2) + 1] -= (jy * im1);
                b2[(/*BODY_POS*/2)]     += (jx * im1);
                b2[(/*BODY_POS*/2) + 1] += (jy * im1);

                // Recompute error.
                errX = ((b1[(/*BODY_POS*/2)]     + rx1) - (b2[(/*BODY_POS*/2)]     + rx2));
                errY = ((b1[(/*BODY_POS*/2) + 1] + ry1) - (b2[(/*BODY_POS*/2) + 1] + ry2));
                errX *= scale;
                errY *= scale;
                elsq = ((errX * errX) + (errY * errY));
            }
        }

        // Compute non-inverted effective mass.
        data[(/*POINT_KMASS*/13)]     = (massSum + (ry1 * ii1 * ry1) + (ry2 * ii2 * ry2));
        data[(/*POINT_KMASS*/13) + 1] = (        - (rx1 * ii1 * ry1) - (rx2 * ii2 * ry2));
        data[(/*POINT_KMASS*/13) + 2] = (massSum + (rx1 * ii1 * rx1) + (rx2 * ii2 * rx2));

        if (elsq > Physics2DConfig.POINT_MAX_ERROR_SQ)
        {
            elsq = (Physics2DConfig.POINT_MAX_ERROR / Math.sqrt(elsq));
            errX *= elsq;
            errY *= elsq;
        }

        data[(/*POINT_BIAS*/20)]     = errX;
        data[(/*POINT_BIAS*/20) + 1] = errY;
        Physics2DConstraint.prototype.safe_solve2(data, (/*POINT_KMASS*/13), (/*POINT_BIAS*/20), (/*POINT_BIAS*/20));
        jx = data[(/*POINT_BIAS*/20)];
        jy = data[(/*POINT_BIAS*/20) + 1];

        // Apply impulse
        b1[(/*BODY_POS*/2)]     -= (jx * im1);
        b1[(/*BODY_POS*/2) + 1] -= (jy * im1);
        var dW = -(((rx1 * jy) - (ry1 * jx)) * ii1);
        if (dW !== 0)
        {
            this.bodyA._deltaRotation(dW);
        }

        b2[(/*BODY_POS*/2)]     += (jx * im2);
        b2[(/*BODY_POS*/2) + 1] += (jy * im2);
        dW = (((rx2 * jy) - (ry2 * jx)) * ii2);
        if (dW !== 0)
        {
            this.bodyB._deltaRotation(dW);
        }

        return false;
    }
};

// params = {
//   bodyA, bodyB,
//   anchorA, anchorB,
//   ... common constraint params
// }
Physics2DPointConstraint.create = function pointConstraintFn(params)
{
    var p = new Physics2DPointConstraint();
    p.dimension = 2;
    var data = p._data = new Physics2DDevice.prototype.floatArray((/*POINT_DATA_SIZE*/22));
    Physics2DConstraint.prototype.init(p, params);

    var anchor = params.anchorA;
    data[(/*POINT_LANCHOR1*/5)]     = (anchor ? anchor[0] : 0);
    data[(/*POINT_LANCHOR1*/5) + 1] = (anchor ? anchor[1] : 0);

    anchor = params.anchorB;
    data[(/*POINT_LANCHOR2*/7)]     = (anchor ? anchor[0] : 0);
    data[(/*POINT_LANCHOR2*/7) + 1] = (anchor ? anchor[1] : 0);

    p.bodyA = params.bodyA;
    p.bodyB = params.bodyB;

    return p;
};

// =========================================================================
//
// Common to both circles and polygons
//

// SHAPE DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*SHAPE_AABB*/0           // World space AABB of shape (minX, minY, maxx, maxy)
//   index of 0 required for Broadphase
///*SHAPE_SWEEP_RADIUS*/4   // Radius of shape about (0,0)
///*SHAPE_SWEEP_FACTOR*/5   // Sweep factor to bias conservative advancement


// SHAPE TYPE IDENTIFIERS
// !! Must use regexp to change these globally (in all files) !!
//
///*TYPE_CIRCLE*/0
///*TYPE_POLYGON*/1
//

function Physics2DShape() {}
Physics2DShape.uniqueId = 0;
Physics2DShape.prototype = {

    getGroup : function getGroupFn()
    {
        return this._group;
    },

    setGroup : function setGroupFn(group)
    {
        this._group = group;
        if (this.body)
        {
            this.body.wake(true);
        }
    },

    getMask : function getMaskFn()
    {
        return this._mask;
    },

    setMask : function setMaskFn(mask)
    {
        this._mask = mask;
        if (this.body)
        {
            this.body.wake(true);
        }
    },

    getMaterial : function getMaterialFn(material)
    {
        return this._material;
    },

    setMaterial : function setMaterialFn(material)
    {
        if (this._material !== material)
        {
            this._material = material;
            if (this.body)
            {
                this.body._invalidate();
            }

            var arbiters = this.arbiters;
            var limit2 = arbiters.length;
            var j;
            for (j = 0; j < limit2; j += 1)
            {
                arbiters[j]._invalidate();
            }
        }
    },

    copyCommon : function copyCommonFn(from, to)
    {
        to._type = from._type;

        to._material = from._material;
        to._group = from._group;
        to._mask  = from._mask;
        to.sensor = from.sensor;

        to.id = Physics2DShape.uniqueId;
        Physics2DShape.uniqueId += 1;

        to.arbiters = [];
        to._bphaseHandle = null;

        to.userData = from.userData;

        var fromData = from._data;
        var limit = from._data.length;
        var toData = to._data = new Physics2DDevice.prototype.floatArray(limit);
        var i;
        for (i = 0; i < limit; i += 1)
        {
            toData[i] = fromData[i];
        }

        to._onPreSolve = [];
        to._events = []; // onBegin, onEnd, onProgress combined.
    },

    init : function shapeInit(shape, params)
    {
        shape._material = params.material || Physics2DMaterial.create();
        shape._group = (params.group !== undefined) ? params.group : 1;
        shape._mask  = (params.mask  !== undefined) ? params.mask  : 0xffffffff;
        shape.sensor = (params.sensor !== undefined) ? params.sensor : false;

        shape.arbiters = [];
        shape._bphaseHandle = null;
        shape.userData = (params.userData !== undefined) ? params.userData : null;

        shape.id = Physics2DShape.uniqueId;
        Physics2DShape.uniqueId += 1;

        shape._onPreSolve = [];
        shape._events = []; // onBegin, onEnd, onProgress combined.
    },

    // =============================================================================

    eventIndex : function shapeEventIndexFn(events, type, callback, callbackMask)
    {
        var limit = events.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var eventObject = events[i];
            if (eventObject.callback === callback &&
                eventObject.mask === callbackMask &&
                eventObject.type === type)
            {
                return i;
            }
        }

        return -1;
    },

    addEventListener : function shapeAddEventListenerFn(eventType, callback, callbackMask, deterministic)
    {
        var events, type;
        if (eventType === 'preSolve')
        {
            events = this._onPreSolve;
            type = (/*EVENT_PRESOLVE*/6);
        }
        else
        {
            events = this._events;
            type = (eventType === 'begin'    ? (/*EVENT_BEGIN*/1) :
                    eventType === 'progress' ? (/*EVENT_PROGRESS*/2) :
                    eventType === 'end'      ? (/*EVENT_END*/3) :
                    null);
        }

        if (type === null)
        {
            return false;
        }

        if (eventType !== 'preSolve')
        {
            deterministic = undefined;
        }
        else if (deterministic === undefined)
        {
            deterministic = false;
        }

        var index = Physics2DShape.prototype.eventIndex(events, type, callback, callbackMask);
        if (index !== -1)
        {
            return false;
        }

        events.push({
            callback : callback,
            mask : callbackMask,
            type : type,
            deterministic : deterministic
        });

        if (this.body)
        {
            this.body.wake(true);
        }

        return true;
    },

    removeEventListener : function shapeRemoveEventListenerFn(eventType, callback, callbackMask)
    {
        var events, type;
        if (eventType === 'preSolve')
        {
            events = this._onPreSolve;
            type = (/*EVENT_PRESOLVE*/6);
        }
        else
        {
            events = this._events;
            type = (eventType === 'begin'    ? (/*EVENT_BEGIN*/1) :
                    eventType === 'progress' ? (/*EVENT_PROGRESS*/2) :
                    eventType === 'end'      ? (/*EVENT_END*/3) :
                    null);
        }

        if (type === null)
        {
            return false;
        }

        var index = Physics2DShape.prototype.eventIndex(events, type, callback, callbackMask);
        if (index === -1)
        {
            return false;
        }

        // Need to keep order, cannot use swap-pop
        events.splice(index, 1);

        if (this.body)
        {
            this.body.wake(true);
        }

        return true;
    }
};


// =========================================================================

//
// Physics2D Circle
//

// CIRCLE DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*CIRCLE_RADIUS*/6    // Radius of circle about its origin
///*CIRCLE_LOCAL*/7     // Local position of circle origin (x, y)
///*CIRCLE_WORLD*/9     // World position of circle origin (x, y)
//
///*CIRCLE_DATA_SIZE*/11

function Physics2DCircle() {}
Physics2DCircle.prototype = {

    version : 1,
    type : "CIRCLE",

    // Inherited
    getMaterial : Physics2DShape.prototype.getMaterial,
    setMaterial : Physics2DShape.prototype.setMaterial,
    getGroup    : Physics2DShape.prototype.getGroup,
    setGroup    : Physics2DShape.prototype.setGroup,
    getMask     : Physics2DShape.prototype.getMask,
    setMask     : Physics2DShape.prototype.setMask,

    addEventListener    : Physics2DShape.prototype.addEventListener,
    removeEventListener : Physics2DShape.prototype.removeEventListener,

    // ==============================================================

    computeArea : function computeAreaFn()
    {
        var r = this._data[(/*CIRCLE_RADIUS*/6)];
        return (Math.PI * r * r);
    },

    computeMasslessInertia : function getInertiaFn()
    {
        var data = this._data;
        var r = this._data[(/*CIRCLE_RADIUS*/6)];
        var x = data[(/*CIRCLE_LOCAL*/7)];
        var y = data[(/*CIRCLE_LOCAL*/7) + 1];
        return ((0.5 * r * r) + ((x * x) + (y * y)));
    },

    // ==============================================================

    getRadius : function getCircleRadiusFn()
    {
        return this._data[(/*CIRCLE_RADIUS*/6)];
    },

    setRadius : function setRadiusFn(radius)
    {
        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        var data = this._data;
        if (radius !== data[(/*CIRCLE_RADIUS*/6)])
        {
            data[(/*CIRCLE_RADIUS*/6)] = radius;
            this._validate();
            if (body)
            {
                body._invalidate();
            }
        }
    },

    // ==============================================================

    getOrigin : function getOriginFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        dst[0] = data[(/*CIRCLE_LOCAL*/7)];
        dst[1] = data[(/*CIRCLE_LOCAL*/7) + 1];
        return dst;
    },

    setOrigin : function setOriginFn(origin)
    {
        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        var data = this._data;
        var originX = origin[0];
        var originY = origin[1];

        if (data[(/*CIRCLE_LOCAL*/7)] !== originX || data[(/*CIRCLE_LOCAL*/7) + 1] !== originY)
        {
            data[(/*CIRCLE_LOCAL*/7)]     = originX;
            data[(/*CIRCLE_LOCAL*/7) + 1] = originY;
            this._validate();
            if (body)
            {
                body._invalidate();
            }
        }
    },

    // ==============================================================

    clone : function circleCopyFn()
    {
        var c = new Physics2DCircle();
        Physics2DShape.prototype.copyCommon(this, c);
        return c;
    },

    // ==============================================================

    scale : function scaleFn(scale)
    {
        if (scale <= 0)
        {
            return;
        }

        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        var data = this._data;
        data[(/*CIRCLE_LOCAL*/7)]     *= scale;
        data[(/*CIRCLE_LOCAL*/7) + 1] *= scale;
        data[(/*CIRCLE_RADIUS*/6)]    *= scale;

        this._validate();
        if (body)
        {
            body._invalidate();
        }
    },

    translate : function translateFn(translation, skip)
    {
        var body = this.body;
        if (!skip && body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        var data = this._data;
        data[(/*CIRCLE_LOCAL*/7)]     += translation[0];
        data[(/*CIRCLE_LOCAL*/7) + 1] += translation[1];

        this._validate();
        if (!skip && body)
        {
            body._invalidate();
        }
    },

    rotate : function rotateFn(rotation)
    {
        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);
        var data = this._data;
        var x = data[(/*CIRCLE_LOCAL*/7)];
        var y = data[(/*CIRCLE_LOCAL*/7) + 1];
        data[(/*CIRCLE_LOCAL*/7)]     = ((cos * x) - (sin * y));
        data[(/*CIRCLE_LOCAL*/7) + 1] = ((sin * x) + (cos * y));

        this._validate();
        if (body)
        {
            body._invalidate();
        }
    },

    transform : function transformFn(matrix)
    {
        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        // a b tx
        // c d ty
        var a = matrix[0];
        var b = matrix[2];
        var c = matrix[1];
        var d = matrix[3];

        var data = this._data;
        var det = ((a * d) - (b * c));
        if (det <= 0)
        {
            return;
        }

        data[(/*CIRCLE_RADIUS*/6)] *= Math.sqrt(det);

        var x = data[(/*CIRCLE_LOCAL*/7)];
        var y = data[(/*CIRCLE_LOCAL*/7) + 1];
        data[(/*CIRCLE_LOCAL*/7)]     = ((a * x) + (b * y) + matrix[4]);
        data[(/*CIRCLE_LOCAL*/7) + 1] = ((c * x) + (d * y) + matrix[5]);

        this._validate();
        if (body)
        {
            body._invalidate();
        }
    },

    // ==============================================================

    _update : function circleUpdateFn(posX, posY, cos, sin, skipAABB)
    {
        var data = this._data;
        var originX = data[(/*CIRCLE_LOCAL*/7)];
        var originY = data[(/*CIRCLE_LOCAL*/7) + 1];
        var ox = data[(/*CIRCLE_WORLD*/9)]     = posX + (cos * originX) - (sin * originY);
        var oy = data[(/*CIRCLE_WORLD*/9) + 1] = posY + (sin * originX) + (cos * originY);

        if (!skipAABB)
        {
            var radius = data[(/*CIRCLE_RADIUS*/6)];
            data[(/*SHAPE_AABB*/0)]     = (ox - radius);
            data[(/*SHAPE_AABB*/0) + 1] = (oy - radius);
            data[(/*SHAPE_AABB*/0) + 2] = (ox + radius);
            data[(/*SHAPE_AABB*/0) + 3] = (oy + radius);
        }
    },

    _validate : function _validateFn()
    {
        var data = this._data;
        var originX = data[(/*CIRCLE_LOCAL*/7)];
        var originY = data[(/*CIRCLE_LOCAL*/7) + 1];
        var radius  = data[(/*CIRCLE_RADIUS*/6)];

        var olength = Math.sqrt((originX * originX) + (originY * originY));
        data[(/*SHAPE_SWEEP_RADIUS*/4)] = (radius + olength);
        data[(/*SHAPE_SWEEP_FACTOR*/5)] = (data[(/*SHAPE_SWEEP_RADIUS*/4)] - Math.max(radius - olength, 0));
    }
};

Physics2DCircle.prototype.computeCenterOfMass = Physics2DCircle.prototype.getOrigin;

// params = {
//      radius : ##,
//      origin : [##, ##] = [0, 0],
//      ... common shape props.
// }
Physics2DCircle.create = function circle2DFn(params)
{
    var c = new Physics2DCircle();
    c._type = (/*TYPE_CIRCLE*/0);
    Physics2DShape.prototype.init(c, params);

    var radius = params.radius;
    var originX = (params.origin ? params.origin[0] : 0);
    var originY = (params.origin ? params.origin[1] : 0);

    var data = c._data = new Physics2DDevice.prototype.floatArray((/*CIRCLE_DATA_SIZE*/11));
    data[(/*CIRCLE_RADIUS*/6)] = radius;
    data[(/*CIRCLE_LOCAL*/7)]     = originX;
    data[(/*CIRCLE_LOCAL*/7) + 1] = originY;
    c._validate();

    return c;
};

// =========================================================================

//
// Physics2D Polygon
//

// POLYGON DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*POLY_VERTICES*/6   // Start of vertex data
///*POLY_STRIDE*/13    // Values per vertex till end of object.
//
// PER VERTEX CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*POLY_LOCAL*/0     // Local position of vertex (x, y)
///*POLY_WORLD*/2     // World position of vertex (x, y)
///*POLY_LNORMAL*/4   // Local normal of edge starting at vertex (x, y)
///*POLY_WNORMAL*/6   // World normal of edge starting at vertex (x, y)
///*POLY_LPROJ*/8     // Local projection of polygon to edge.
///*POLY_WPROJ*/9      // World projection of polygon to edge.
///*POLY_CROSS1*/10    // World cross-projection of vertex to its edge.
///*POLY_CROSS2*/11   // World cross-projection of 'next' vertex to this edge.
///*POLY_LENGTH*/12   // Length of edge startinga t this vertex.

function Physics2DPolygon() {}
Physics2DPolygon.prototype = {

    version : 1,
    type : "POLYGON",

    // Inherited
    getMaterial : Physics2DShape.prototype.getMaterial,
    setMaterial : Physics2DShape.prototype.setMaterial,
    getGroup    : Physics2DShape.prototype.getGroup,
    setGroup    : Physics2DShape.prototype.setGroup,
    getMask     : Physics2DShape.prototype.getMask,
    setMask     : Physics2DShape.prototype.setMask,

    addEventListener    : Physics2DShape.prototype.addEventListener,
    removeEventListener : Physics2DShape.prototype.removeEventListener,

    // ===========================================================================

    computeArea : function getPolyAreaFn()
    {
        var data = this._data;
        var index = (/*POLY_VERTICES*/6);
        var limit = data.length;
        var doubleArea = 0;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            var next = index + (/*POLY_STRIDE*/13);
            if (next === limit)
            {
                next = (/*POLY_VERTICES*/6);
            }

            doubleArea += ((data[index + (/*POLY_LOCAL*/0)] * data[next + (/*POLY_LOCAL*/0) + 1]) -
                           (data[index + (/*POLY_LOCAL*/0) + 1] * data[next + (/*POLY_LOCAL*/0)]));
        }
        return (doubleArea * 0.5);
    },

    computeMasslessInertia : function getPolyInertiaFn()
    {
        var data = this._data;
        var index = (/*POLY_VERTICES*/6);
        var limit = data.length;
        var s1 = 0;
        var s2 = 0;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            var next = index + (/*POLY_STRIDE*/13);
            if (next === limit)
            {
                next = (/*POLY_VERTICES*/6);
            }

            var x1 = data[index + (/*POLY_LOCAL*/0)];
            var y1 = data[index + (/*POLY_LOCAL*/0) + 1];
            var x2 = data[next + (/*POLY_LOCAL*/0)];
            var y2 = data[next + (/*POLY_LOCAL*/0) + 1];

            var a = (x1 * y2) - (x2 * y1);
            var b = ((x1 * x1) + (y1 * y1)) + ((x2 * x2) + (y2 * y2)) + ((x1 * x2) + (y1 * y2));

            s1 += (a * b);
            s2 += a;
        }

        return (s1 / (6 * s2));
    },

    computeCenterOfMass : function computeCenterOfMassFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }

        var data = this._data;
        var index = (/*POLY_VERTICES*/6);
        var limit = data.length;
        var doubleArea = 0;
        var cx = 0;
        var cy = 0;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            var next = index + (/*POLY_STRIDE*/13);
            if (next === limit)
            {
                next = (/*POLY_VERTICES*/6);
            }

            var x1 = data[index + (/*POLY_LOCAL*/0)];
            var y1 = data[index + (/*POLY_LOCAL*/0) + 1];
            var x2 = data[next  + (/*POLY_LOCAL*/0)];
            var y2 = data[next  + (/*POLY_LOCAL*/0) + 1];

            var cross = ((x1 * y2) - (y1 * x2));
            doubleArea += cross;
            cx += ((x1 + x2) * cross);
            cy += ((y1 + y2) * cross);
        }

        var rec = (1 / (3 * doubleArea));
        dst[0] = (cx * rec);
        dst[1] = (cy * rec);
    },

    // ===========================================================================

    setVertices : function setVerticesFn(vertices)
    {
        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        this._validate(vertices);
        if (body)
        {
            body._invalidate();
        }
    },

    // ===========================================================================

    clone : function polygonCopyFn()
    {
        var c = new Physics2DPolygon();
        Physics2DShape.prototype.copyCommon(this, c);
        return c;
    },

    // ===========================================================================

    scale : function scaleFn(scaleX, scaleY)
    {
        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        if (scaleY === undefined)
        {
            scaleY = scaleX;
        }

        if (scaleX <= 0 || scaleY <= 0)
        {
            return;
        }

        var iscaleX = (1 / scaleX);
        var iscaleY = (1 / scaleY);

        var data = this._data;
        var limit = data.length;
        var index = (/*POLY_VERTICES*/6);

        var radius = 0.0;
        var minProj = Number.POSITIVE_INFINITY;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            var x = (data[index + (/*POLY_LOCAL*/0)]     *= scaleX);
            var y = (data[index + (/*POLY_LOCAL*/0) + 1] *= scaleY);

            var nx = (data[index + (/*POLY_LNORMAL*/4)]     * iscaleX);
            var ny = (data[index + (/*POLY_LNORMAL*/4) + 1] * iscaleY);
            var rec = (1 / Math.sqrt((nx * nx) + (ny * ny)));

            data[index + (/*POLY_LNORMAL*/4)]     = (nx *= rec);
            data[index + (/*POLY_LNORMAL*/4) + 1] = (ny *= rec);
            var lproj = data[index + (/*POLY_LPROJ*/8)] = ((nx * x) + (ny * y));
            if (lproj < minProj)
            {
                minProj = lproj;
            }
            var vlsq = ((x * x) + (y * y));
            if (vlsq > radius)
            {
                radius = vlsq;
            }

            var next = (index + (/*POLY_STRIDE*/13));
            if (next === limit)
            {
                next = (/*POLY_VERTICES*/6);
            }

            var dx = ((data[next + (/*POLY_LOCAL*/0)]     * scaleX) - x);
            var dy = ((data[next + (/*POLY_LOCAL*/0) + 1] * scaleY) - y);
            var dL = Math.sqrt((dx * dx) + (dy * dy));
            data[index + (/*POLY_LENGTH*/12)] = dL;
        }

        data[(/*SHAPE_SWEEP_RADIUS*/4)] = Math.sqrt(radius);
        data[(/*SHAPE_SWEEP_FACTOR*/5)] = (data[(/*SHAPE_SWEEP_RADIUS*/4)] - Math.max(minProj, 0));
        if (body)
        {
            body._invalidate();
        }
    },

    translate : function translateFn(translation, skip)
    {
        var body = this.body;
        if (!skip && body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        var data = this._data;
        var limit = data.length;
        var index = (/*POLY_VERTICES*/6);

        var tx = translation[0];
        var ty = translation[1];

        var radius = 0.0;
        var minProj = Number.POSITIVE_INFINITY;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            var x = (data[index + (/*POLY_LOCAL*/0)]     += tx);
            var y = (data[index + (/*POLY_LOCAL*/0) + 1] += ty);

            var nx = data[index + (/*POLY_LNORMAL*/4)];
            var ny = data[index + (/*POLY_LNORMAL*/4) + 1];
            var lproj = (data[index + (/*POLY_LPROJ*/8)] += ((nx * tx) + (ny * ty)));
            if (lproj < minProj)
            {
                minProj = lproj;
            }
            var vlsq = ((x * x) + (y * y));
            if (vlsq > radius)
            {
                radius = vlsq;
            }

            // Translation does not effect local normal or edge length.
        }

        data[(/*SHAPE_SWEEP_RADIUS*/4)] = Math.sqrt(radius);
        data[(/*SHAPE_SWEEP_FACTOR*/5)] = (data[(/*SHAPE_SWEEP_RADIUS*/4)] - Math.max(minProj, 0));
        if (!skip && body)
        {
            body._invalidate();
        }
    },

    rotate : function rotateFn(rotation)
    {
        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        var data = this._data;
        var limit = data.length;
        var index = (/*POLY_VERTICES*/6);

        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);

        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            var x = data[index + (/*POLY_LOCAL*/0)];
            var y = data[index + (/*POLY_LOCAL*/0) + 1];
            data[index + (/*POLY_LOCAL*/0)]     = ((x * cos) - (y * sin));
            data[index + (/*POLY_LOCAL*/0) + 1] = ((x * sin) + (y * cos));

            x = data[index + (/*POLY_LNORMAL*/4)];
            y = data[index + (/*POLY_LNORMAL*/4) + 1];
            data[index + (/*POLY_LNORMAL*/4)]     = ((x * cos) - (y * sin));
            data[index + (/*POLY_LNORMAL*/4) + 1] = ((x * sin) + (y * cos));

            // Rotation does not effect local projection, edge length
            // nor does it effect radius and sweep factor.
        }

        if (body)
        {
            body._invalidate();
        }
    },

    transform : function transformFn(matrix)
    {
        var body = this.body;
        if (body && body.world && (body._type === (/*TYPE_STATIC*/2) || body.world._midStep))
        {
            return;
        }

        // a b tx
        // c d ty
        var a  = matrix[0];
        var b  = matrix[2];
        var c  = matrix[1];
        var d  = matrix[3];
        var tx = matrix[4];
        var ty = matrix[5];

        if (((a * d) - (b * c)) <= 0)
        {
            return;
        }

        var data = this._data;
        var limit = data.length;
        var index = (/*POLY_VERTICES*/6);
        var x, y;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            x = data[index + (/*POLY_LOCAL*/0)];
            y = data[index + (/*POLY_LOCAL*/0) + 1];
            data[index + (/*POLY_LOCAL*/0)]     = ((a * x) + (b * y) + tx);
            data[index + (/*POLY_LOCAL*/0) + 1] = ((c * x) + (d * y) + ty);
        }

        var radius = 0.0;
        var minProj = Number.POSITIVE_INFINITY;
        index = (/*POLY_VERTICES*/6);
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            x = data[index + (/*POLY_LOCAL*/0)];
            y = data[index + (/*POLY_LOCAL*/0) + 1];

            var next = (index + (/*POLY_STRIDE*/13));
            if (next === limit)
            {
                next = (/*POLY_VERTICES*/6);
            }

            var dx = -(data[next + (/*POLY_LOCAL*/0)]     - x);
            var dy = -(data[next + (/*POLY_LOCAL*/0) + 1] - y);
            var dL = Math.sqrt((dx * dx) + (dy * dy));
            var rec = (1 / dL);

            var nx = (-dy * rec);
            var ny = (dx * rec);

            data[index + (/*POLY_LNORMAL*/4)]     = nx;
            data[index + (/*POLY_LNORMAL*/4) + 1] = ny;
            data[index + (/*POLY_LENGTH*/12)] = dL;
            var lproj = data[index + (/*POLY_LPROJ*/8)] = ((nx * x) + (ny * y));

            var vlsq = ((x * x) + (y * y));
            if (vlsq > radius)
            {
                radius = vlsq;
            }
            if (lproj < minProj)
            {
                minProj = lproj;
            }
        }

        data[(/*SHAPE_SWEEP_RADIUS*/4)] = Math.sqrt(radius);
        data[(/*SHAPE_SWEEP_FACTOR*/5)] = (data[(/*SHAPE_SWEEP_RADIUS*/4)] - Math.max(minProj, 0));
        if (body)
        {
            body._invalidate();
        }
    },

    // ===========================================================================

    _update : function polygonUpdateFn(posX, posY, cos, sin, skipAABB)
    {
        var data = this._data;
        var limit = data.length;
        var index = (/*POLY_VERTICES*/6);
        var j;

        var minX, minY, maxX, maxY;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            // Compute world-space vertex.
            var x = data[index + (/*POLY_LOCAL*/0)];
            var y = data[index + (/*POLY_LOCAL*/0) + 1];
            var vX = data[index + (/*POLY_WORLD*/2)]     = posX + (cos * x) - (sin * y);
            var vY = data[index + (/*POLY_WORLD*/2) + 1] = posY + (sin * x) + (cos * y);

            // Compute world-space normal.
            x = data[index + (/*POLY_LNORMAL*/4)];
            y = data[index + (/*POLY_LNORMAL*/4) + 1];
            var nx = data[index + (/*POLY_WNORMAL*/6)]     = (cos * x) - (sin * y);
            var ny = data[index + (/*POLY_WNORMAL*/6) + 1] = (sin * x) + (cos * y);

            // Compute world-space projections.
            data[index + (/*POLY_WPROJ*/9)]   = (nx * vX) + (ny * vY);
            data[index + (/*POLY_CROSS1*/10)] = (nx * vY) - (ny * vX);
            if (index !== (/*POLY_VERTICES*/6))
            {
                j = index - (/*POLY_STRIDE*/13);
                data[j + (/*POLY_CROSS2*/11)] =
                    ((data[j + (/*POLY_WNORMAL*/6)]     * vY) -
                     (data[j + (/*POLY_WNORMAL*/6) + 1] * vX));

                if (!skipAABB)
                {
                    // Update partial AABB.
                    if (vX < minX)
                    {
                        minX = vX;
                    }
                    else if (vX > maxX)
                    {
                        maxX = vX;
                    }

                    if (vY < minY)
                    {
                        minY = vY;
                    }
                    else if (vY > maxY)
                    {
                        maxY = vY;
                    }
                }
            }
            else if (!skipAABB)
            {
                // Init. partial AABB.
                minX = maxX = vX;
                minY = maxY = vY;
            }
        }

        // Compute remaining projection
        index = (/*POLY_VERTICES*/6);
        j = data.length - (/*POLY_STRIDE*/13);
        data[j + (/*POLY_CROSS2*/11)] =
            ((data[j + (/*POLY_WNORMAL*/6)] * data[index + (/*POLY_WORLD*/2) + 1]) -
             (data[j + (/*POLY_WNORMAL*/6) + 1] * data[index + (/*POLY_WORLD*/2)]));

        if (!skipAABB)
        {
            // AABB
            data[(/*SHAPE_AABB*/0)]     = minX;
            data[(/*SHAPE_AABB*/0) + 1] = minY;
            data[(/*SHAPE_AABB*/0) + 2] = maxX;
            data[(/*SHAPE_AABB*/0) + 3] = maxY;
        }
    },

    _validate : function _validateFn(vertices)
    {
        var vCount = vertices.length;
        var data = this._data;

        // Avoid recreating array if number of vertices is unchanged!
        var newLimit = (/*POLY_VERTICES*/6) + (vCount * (/*POLY_STRIDE*/13));
        if (!data || newLimit !== data.length)
        {
            data = this._data = new Physics2DDevice.prototype.floatArray(newLimit);
        }

        var radius = 0.0;
        var minProj = Number.POSITIVE_INFINITY;

        var index = (/*POLY_VERTICES*/6);
        var i;
        for (i = 0; i < vCount; i += 1, index += (/*POLY_STRIDE*/13))
        {
            var v1 = vertices[i];
            var v2 = vertices[(i === (vCount - 1) ? 0 : (i + 1))];

            var x = v1[0];
            var y = v1[1];
            var dx = x - v2[0];
            var dy = y - v2[1];
            var dL = Math.sqrt((dx * dx) + (dy * dy));
            var rec = (1 / dL);

            var nx = (-dy * rec);
            var ny = (dx * rec);

            data[index + (/*POLY_LOCAL*/0)]       = x;
            data[index + (/*POLY_LOCAL*/0) + 1]   = y;
            data[index + (/*POLY_LNORMAL*/4)]     = nx;
            data[index + (/*POLY_LNORMAL*/4) + 1] = ny;
            data[index + (/*POLY_LENGTH*/12)] = dL;
            var lproj = data[index + (/*POLY_LPROJ*/8)] = ((nx * x) + (ny * y));

            // ---

            var vlsq = ((x * x) + (y * y));
            if (vlsq > radius)
            {
                radius = vlsq;
            }
            if (lproj < minProj)
            {
                minProj = lproj;
            }
        }

        data[(/*SHAPE_SWEEP_RADIUS*/4)] = Math.sqrt(radius);
        data[(/*SHAPE_SWEEP_FACTOR*/5)] = (data[(/*SHAPE_SWEEP_RADIUS*/4)] - Math.max(minProj, 0));
    }
};

// params = {
//      vertices : [v2, v2, ...]  (CLOCKWISE)
//      ... common shape props.
// }
// inVertices optionally replacing params.vertices
Physics2DPolygon.create = function polygon2DFn(params, inVertices)
{
    var p = new Physics2DPolygon();
    p._type = (/*TYPE_POLYGON*/1);
    Physics2DShape.prototype.init(p, params);

    p._validate(inVertices || params.vertices);
    return p;
};


// =========================================================================

//
// Physics2D Rigid Body
//

// BODY DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*BODY_IMASS*/0           // 1 / mass (possibly 0) for body. Always 0 for non-dynamic
///*BODY_IINERTIA*/1        // 1 / inertia (possibly 0) for body. Always 0 for non-dynamic
///*BODY_POS*/2             // World position and rotation (CW rad) of body (x, y, r)
///*BODY_AXIS*/5            // (cos(rotation), sin(rotation))
///*BODY_VEL*/7             // World velocity and ang.vel of body (vx, vy, w)
///*BODY_FORCE*/10          // World force + torque, persistently applied (fx, fy, t)
///*BODY_SURFACE_VEL*/13    // Surface velocity biasing contact physics (vt, vn)
///*BODY_PRE_POS*/15        // Previous position and rotation (x, y, r)
///*BODY_SWEEP_TIME*/18     // Time alpha for current partial integration of body.
///*BODY_RADIUS*/19         // Approximate radius of body about its origin.
///*BODY_SWEEP_ANGVEL*/20   // Angular velocity % (2 * pi / timeStep) for sweeps.
///*BODY_LIN_DRAG*/21       // Log of (1 - linear drag).
///*BODY_ANG_DRAG*/22       // Log of (1 - angular drag).
///*BODY_MASS*/23           // Untainted by body type mass.
///*BODY_INERTIA*/24        // Untainted by body type inertia.
//
///*BODY_DATA_SIZE*/25
//
// BODY TYPE CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*TYPE_DYNAMIC*/0
///*TYPE_KINEMATIC*/1
///*TYPE_STATIC*/2


function Physics2DRigidBody() {}
Physics2DRigidBody.prototype = {

    version : 1,

    isDynamic : function isDynamicFn()
    {
        return (this._type === (/*TYPE_DYNAMIC*/0));
    },

    setAsDynamic : function setAsDynamicFn()
    {
        if (this.world && this.world._midStep)
        {
            return;
        }

        this._setTypeValue((/*TYPE_DYNAMIC*/0));
        var data = this._data;

        var mass    = data[(/*BODY_MASS*/23)];
        var inertia = data[(/*BODY_INERTIA*/24)];
        data[(/*BODY_IMASS*/0)]    = (mass    === Number.POSITIVE_INFINITY ? 0 : (1 / mass));
        data[(/*BODY_IINERTIA*/1)] = (inertia === Number.POSITIVE_INFINITY ? 0 : (1 / inertia));
    },

    isStatic : function isStaticFn()
    {
        return (this._type === (/*TYPE_STATIC*/2));
    },

    setAsStatic : function setAsStaticFn()
    {
        if (this.world && this.world._midStep)
        {
            return;
        }

        this._setTypeValue((/*TYPE_STATIC*/2));
        var data = this._data;
        data[(/*BODY_IMASS*/0)] = data[(/*BODY_IINERTIA*/1)] = 0;
        // Static body cannot have velocity
        data[(/*BODY_VEL*/7)] = data[(/*BODY_VEL*/7) + 1] = data[(/*BODY_VEL*/7) + 2] = 0;
    },

    isKinematic : function isKinematicFn()
    {
        return (this._type === (/*TYPE_KINEMATIC*/1));
    },

    setAsKinematic : function setAsKinematicFn()
    {
        if (this.world && this.world._midStep)
        {
            return;
        }

        this._setTypeValue((/*TYPE_KINEMATIC*/1));
        var data = this._data;
        data[(/*BODY_IMASS*/0)] = data[(/*BODY_IINERTIA*/1)] = 0;
    },

    _setTypeValue : function _setTypeValueFn(newType)
    {
        if (newType === this._type)
        {
            return;
        }

        if (!this.world)
        {
            this._type = newType;
            return;
        }

        this.world._transmitBodyType(this, newType);
    },

    // ===============================================================================

    applyImpulse : function applyImpulse(impulse, position)
    {
        // Static cannot have velocity
        // Kinematic always has infinite mass/inertia (physics wise) so impulse has no effect.
        if (this._type !== (/*TYPE_DYNAMIC*/0))
        {
            return;
        }

        var data = this._data;
        var x, y;
        if (position)
        {
            x = (position[0] - data[(/*BODY_POS*/2)]);
            y = (position[1] - data[(/*BODY_POS*/2) + 1]);
        }
        else
        {
            x = 0;
            y = 0;
        }
        var ix = impulse[0];
        var iy = impulse[1];
        var im = data[(/*BODY_IMASS*/0)];
        data[(/*BODY_VEL*/7)]     += (ix * im);
        data[(/*BODY_VEL*/7) + 1] += (iy * im);
        data[(/*BODY_VEL*/7) + 2] += (((x * iy) - (y * ix)) * data[(/*BODY_IINERTIA*/1)]);
        this.wake(true);
    },

    setVelocityFromPosition : function setVelocityFromPositionFn(newPosition, newRotation, deltaTime)
    {
        if (this._type === (/*TYPE_STATIC*/2))
        {
            return;
        }

        var data = this._data;
        var idt = (1 / deltaTime);
        data[(/*BODY_VEL*/7)]     = ((newPosition[0] - data[(/*BODY_POS*/2)])     * idt);
        data[(/*BODY_VEL*/7) + 1] = ((newPosition[1] - data[(/*BODY_POS*/2) + 1]) * idt);
        data[(/*BODY_VEL*/7) + 2] = ((newRotation    - data[(/*BODY_POS*/2) + 2]) * idt);
        this.wake(true);
    },

    // ===============================================================================

    transformWorldPointToLocal : function transformWorldPointToLocalFn(src, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        var cos = data[(/*BODY_AXIS*/5)];
        var sin = data[(/*BODY_AXIS*/5) + 1];
        var x = (src[0] - data[(/*BODY_POS*/2)]);
        var y = (src[1] - data[(/*BODY_POS*/2) + 1]);
        dst[0] = ((cos * x) + (sin * y));
        dst[1] = ((cos * y) - (sin * x));
        return dst;
    },

    transformWorldVectorToLocal : function transformWorldVectorToLocalFn(src, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        var cos = data[(/*BODY_AXIS*/5)];
        var sin = data[(/*BODY_AXIS*/5) + 1];
        var x = src[0];
        var y = src[1];
        dst[0] = ((cos * x) + (sin * y));
        dst[1] = ((cos * y) - (sin * x));
        return dst;
    },

    transformLocalPointToWorld : function transformLocalPointToWorldFn(src, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        var cos = data[(/*BODY_AXIS*/5)];
        var sin = data[(/*BODY_AXIS*/5) + 1];
        var x = src[0];
        var y = src[1];
        dst[0] = ((cos * x) - (sin * y) + data[(/*BODY_POS*/2)]);
        dst[1] = ((sin * x) + (cos * y) + data[(/*BODY_POS*/2) + 1]);
        return dst;
    },

    transformLocalVectorToWorld : function transformLocalVectorToWorldFn(src, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        var cos = data[(/*BODY_AXIS*/5)];
        var sin = data[(/*BODY_AXIS*/5) + 1];
        var x = src[0];
        var y = src[1];
        dst[0] = ((cos * x) - (sin * y));
        dst[1] = ((sin * x) + (cos * y));
        return dst;
    },

    // ===============================================================================

    getPosition : function getPositionFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }

        var data = this._data;
        dst[0] = data[(/*BODY_POS*/2)];
        dst[1] = data[(/*BODY_POS*/2) + 1];
        return dst;
    },

    setPosition : function setPosition(position)
    {
        if (this.world && (this.world._midStep || this._type === (/*TYPE_STATIC*/2)))
        {
            return;
        }

        var data = this._data;
        var newX = position[0];
        var newY = position[1];
        if ((data[(/*BODY_POS*/2)] !== newX) || (data[(/*BODY_POS*/2) + 1] !== newY))
        {
            data[(/*BODY_POS*/2)]     = newX;
            data[(/*BODY_POS*/2) + 1] = newY;
            this._invalidated = true;
            this.wake(true);
        }
    },

    getRotation : function getRotationFn()
    {
        return this._data[(/*BODY_POS*/2) + 2];
    },

    setRotation : function setRotationFn(rotation)
    {
        if (this.world && (this.world._midStep || this._type === (/*TYPE_STATIC*/2)))
        {
            return;
        }

        var data = this._data;
        if (data[(/*BODY_POS*/2) + 2] !== rotation)
        {
            this._data[(/*BODY_POS*/2) + 2]  = rotation;
            this._data[(/*BODY_AXIS*/5)]     = Math.cos(rotation);
            this._data[(/*BODY_AXIS*/5) + 1] = Math.sin(rotation);
            this._invalidated = true;
            this.wake(true);
        }
    },

    // ===============================================================================

    getVelocity : function getVelocityFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }

        var data = this._data;
        dst[0] = data[(/*BODY_VEL*/7)];
        dst[1] = data[(/*BODY_VEL*/7) + 1];
        return dst;
    },

    setVelocity : function setVelocity(velocity)
    {
        // Static body cannot have velocity.
        if (this._type === (/*TYPE_STATIC*/2))
        {
            return;
        }

        var data = this._data;
        var newX = velocity[0];
        var newY = velocity[1];
        if ((data[(/*BODY_VEL*/7)] !== newX) || (data[(/*BODY_VEL*/7) + 1] !== newY))
        {
            data[(/*BODY_VEL*/7)]     = newX;
            data[(/*BODY_VEL*/7) + 1] = newY;
            this.wake(true);
        }
    },

    getAngularVelocity : function getAngularVelocity()
    {
        return this._data[(/*BODY_VEL*/7) + 2];
    },

    setAngularVelocity : function setAngularVelocityFn(angularVelocity)
    {
        // Static body cannot have velocity.
        if (this._type === (/*TYPE_STATIC*/2))
        {
            return;
        }

        var data = this._data;
        if (data[(/*BODY_VEL*/7) + 2] !== angularVelocity)
        {
            data[(/*BODY_VEL*/7) + 2] = angularVelocity;
            this.wake(true);
        }
    },

    // ===============================================================================

    getForce : function getForceFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }

        var data = this._data;
        dst[0] = data[(/*BODY_FORCE*/10)];
        dst[1] = data[(/*BODY_FORCE*/10) + 1];
        return dst;
    },

    setForce : function setForce(force)
    {
        var data = this._data;
        var newX = force[0];
        var newY = force[1];
        if ((data[(/*BODY_FORCE*/10)] !== newX) || (data[(/*BODY_FORCE*/10) + 1] !== newY))
        {
            data[(/*BODY_FORCE*/10)]     = newX;
            data[(/*BODY_FORCE*/10) + 1] = newY;
            // we wake static/kinematic bodies even if force has no effect
            // incase user has some crazy callback that queries force to
            // make a decision
            this.wake(true);
        }
    },

    getTorque : function getTorque()
    {
        return this._data[(/*BODY_FORCE*/10) + 2];
    },

    setTorque : function setTorqueFn(torque)
    {
        var data = this._data;
        if (data[(/*BODY_FORCE*/10) + 2] !== torque)
        {
            data[(/*BODY_FORCE*/10) + 2] = torque;
            // we wake static/kinematic bodies even if force has no effect
            // incase user has some crazy callback that queries torque to
            // make a decision
            this.wake(true);
        }
    },

    // ===============================================================================

    getSurfaceVelocity : function getSurfaceVelocity(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }

        var data = this._data;
        dst[0] = data[(/*BODY_SURFACE_VEL*/13)];
        dst[1] = data[(/*BODY_SURFACE_VEL*/13) + 1];
        return dst;
    },

    setSurfaceVelocity : function setSurfaceVelocity(surfaceVelocity)
    {
        var data = this._data;
        data[(/*BODY_SURFACE_VEL*/13)]     = surfaceVelocity[0];
        data[(/*BODY_SURFACE_VEL*/13) + 1] = surfaceVelocity[1];
        this.wake(true);
    },

    // ===============================================================================

    getMass : function getMassFn()
    {
        return this._data[(/*BODY_MASS*/23)];
    },

    getInertia : function getInertiaFn()
    {
        return this._data[(/*BODY_INERTIA*/24)];
    },

    setMass : function setMassFn(mass)
    {
        var data = this._data;
        var oldMass = data[(/*BODY_MASS*/23)];
        if (!this._customMass || (oldMass !== mass))
        {
            data[(/*BODY_MASS*/23)] = mass;
            this._customMass = true;
            this._invalidateMassInertia();
        }
    },

    setMassFromShapes : function setMassFromShapesFn()
    {
        if (this._customMass)
        {
            this._customMass = false;
            this._data[(/*BODY_MASS*/23)] = this.computeMassFromShapes();
            this._invalidateMassInertia();
        }
    },

    setInertia : function setInertiaFn(inertia)
    {
        var data = this._data;
        var oldInertia = data[(/*BODY_INERTIA*/24)];
        if (!this._customInertia || (oldInertia !== inertia))
        {
            data[(/*BODY_INERTIA*/24)] = inertia;
            this._customInertia = true;
            this._invalidateMassInertia();
        }
    },

    setInertiaFromShapes : function setInertiaFromShapesFn()
    {
        if (this._customInertia)
        {
            this._customInertia = false;
            this._data[(/*BODY_INERTIA*/24)] = this.computeInertiaFromShapes();
            this._invalidateMassInertia();
        }
    },

    _invalidateMassInertia : function _invalidateMassInertiaFn()
    {
        var data = this._data;
        var mass    = data[(/*BODY_MASS*/23)];
        var inertia = data[(/*BODY_INERTIA*/24)];

        var staticType = (this._type !== (/*TYPE_DYNAMIC*/0));
        var inf = Number.POSITIVE_INFINITY;
        data[(/*BODY_IMASS*/0)]    = (staticType || mass    === inf) ? 0 : (1 / mass);
        data[(/*BODY_IINERTIA*/1)] = (staticType || inertia === inf) ? 0 : (1 / inertia);

        // We wake body, even if static/kinematic incase user has some crazy
        // callback which queries mass/inertia to make decision
        this.wake(true);
    },

    // ===============================================================================

    getLinearDrag : function getLinearDragFn()
    {
        return (1 - Math.exp(this._data[(/*BODY_LIN_DRAG*/21)]));
    },

    setLinearDrag : function setLinearDragFn(linearDrag)
    {
        this._data[(/*BODY_LIN_DRAG*/21)] = Math.log(1 - linearDrag);
        // We wake body, even if static/kinematic incase user has some crazy
        // callback which queries mass/inertia to make decision
        this.wake(true);
    },

    getAngularDrag : function getAngularDragFn()
    {
        return (1 - Math.exp(this._data[(/*BODY_ANG_DRAG*/22)]));
    },

    setAngularDrag : function setAngularDragFn(angularDrag)
    {
        this._data[(/*BODY_ANG_DRAG*/22)] = Math.log(1 - angularDrag);
        // We wake body, even if static/kinematic incase user has some crazy
        // callback which queries mass/inertia to make decision
        this.wake(true);
    },

    // ===============================================================================

    addShape : function addShapeFn(shape)
    {
        if (this.world && (this.world._midStep || this._type === (/*TYPE_STATIC*/2)))
        {
            return false;
        }

        if (shape.body)
        {
            return false;
        }

        shape.body = this;
        this.shapes.push(shape);

        if (this.world)
        {
            this.wake(true);
            this.world._addShape(shape);
        }

        // Recompute body radius
        var rad = shape._data[(/*SHAPE_SWEEP_RADIUS*/4)];
        var data = this._data;
        if (rad > data[(/*BODY_RADIUS*/19)])
        {
            data[(/*BODY_RADIUS*/19)] = rad;
        }

        this._invalidate();

        return true;
    },

    removeShape : function removeShapeFn(shape)
    {
        if (this.world && (this.world._midStep || this._type === (/*TYPE_STATIC*/2)))
        {
            return false;
        }

        if (shape.body !== this)
        {
            return false;
        }

        if (this.world)
        {
            this.wake(true);
            this.world._removeShape(shape);
        }

        shape.body = null;
        var shapes = this.shapes;
        var limit = (shapes.length - 1);
        var index = shapes.indexOf(shape);
        shapes[index] = shapes[limit];
        shapes.pop();

        // Recompute body radius.
        var i;
        var radius = 0;
        for (i = 0; i < limit; i += 1)
        {
            shape = shapes[i];
            var rad = shape._data[(/*SHAPE_SWEEP_RADIUS*/4)];
            if (rad > radius)
            {
                radius = rad;
            }
        }
        this._data[(/*BODY_RADIUS*/19)] = radius;

        this._invalidate();

        return true;
    },

    // ===============================================================================

    computeMassFromShapes : function computeMassFromShapesFn()
    {
        var mass = 0;
        var i;
        var shapes = this.shapes;
        var limit = shapes.length;
        for (i = 0; i < limit; i += 1)
        {
            var shape = shapes[i];
            mass += shape._material._data[(/*MAT_DENSITY*/4)] * shape.computeArea();
        }
        return mass;
    },

    computeInertiaFromShapes : function computeInertiaFromShapesFn()
    {
        var inertia = 0;
        var i;
        var shapes = this.shapes;
        var limit = shapes.length;
        for (i = 0; i < limit; i += 1)
        {
            var shape = shapes[i];
            inertia += shape._material._data[(/*MAT_DENSITY*/4)] * shape.computeMasslessInertia() * shape.computeArea();
        }
        return inertia;
    },

    // ===============================================================================

    wake : function wakeFn(automated)
    {
        if (!this.world)
        {
            this.sleeping = false;
            return;
        }

        this.world._wakeBody(this, !automated);
    },

    sleep : function sleepFn()
    {
        if (!this.world)
        {
            this.sleeping = true;
            return;
        }

        this.world._forceSleepBody(this);
    },

    // ===============================================================================

    computeLocalCenterOfMass : function computeLocalCenterOfMassFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var comX = 0;
        var comY = 0;
        var totalMass = 0;

        var shapes = this.shapes;
        var limit = shapes.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var shape = shapes[i];
            shape.computeCenterOfMass(dst);
            var mass = shape.computeArea() * shape._material._data[(/*MAT_DENSITY*/4)];
            comX += (dst[0] * mass);
            comY += (dst[1] * mass);
            totalMass += mass;
        }

        var imass = (1 / totalMass);
        dst[0] = (comX * imass);
        dst[1] = (comY * imass);
        return dst;
    },

    computeWorldBounds : function computeWorldBoundsFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(4);
        }
        var inf = Number.POSITIVE_INFINITY;
        var minX = inf;
        var minY = inf;
        var maxX = -inf;
        var maxY = -inf;

        this._update();
        var shapes = this.shapes;
        var limit = shapes.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var shape = shapes[i]._data;
            var x0 = shape[(/*SHAPE_AABB*/0)];
            var y0 = shape[(/*SHAPE_AABB*/0) + 1];
            var x1 = shape[(/*SHAPE_AABB*/0) + 2];
            var y1 = shape[(/*SHAPE_AABB*/0) + 3];
            if (x0 < minX)
            {
                minX = x0;
            }
            if (x1 > maxX)
            {
                maxX = x1;
            }
            if (y0 < minY)
            {
                minY = y0;
            }
            if (y1 > maxY)
            {
                maxY = y1;
            }
        }

        dst[0] = minX;
        dst[1] = minY;
        dst[2] = maxX;
        dst[3] = maxY;
        return dst;
    },

    // ===============================================================================

    alignWithOrigin : function alignWithOriginFn()
    {
        if (this.world && (this.world._midStep || this._type === (/*TYPE_STATIC*/2)))
        {
            return;
        }

        var negCOM = this.computeLocalCenterOfMass();
        negCOM[0] *= -1;
        negCOM[1] *= -1;

        var shapes = this.shapes;
        var limit = shapes.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            shapes[i].translate(negCOM, true);
        }
        this._invalidate();
    },

    // ===============================================================================

    _invalidate : function _invalidateFn()
    {
        this._invalidated = true;

        var customMass    = this._customMass;
        var customInertia = this._customInertia;
        if ((!customMass) || (!customInertia))
        {
            if (!customMass)
            {
                this._data[(/*BODY_MASS*/23)] = this.computeMassFromShapes();
            }
            if (!customInertia)
            {
                this._data[(/*BODY_INERTIA*/24)] = this.computeInertiaFromShapes();
            }

            this._invalidateMassInertia();
        }

        this.wake(true);
    },

    _update : function _updateFn()
    {
        if (this._invalidated)
        {
            this._invalidated = false;
            var data = this._data;
            var shapes = this.shapes;
            var limit = shapes.length;
            var i;
            for (i = 0; i < limit; i += 1)
            {
                shapes[i]._update(
                    data[(/*BODY_POS*/2)],
                    data[(/*BODY_POS*/2) + 1],
                    data[(/*BODY_AXIS*/5)],
                    data[(/*BODY_AXIS*/5) + 1]
                );
            }
        }
    },

    // =====================================================================

    _atRest : function _atRestFn(deltaTime, timeStamp)
    {
        if (this._type !== (/*TYPE_DYNAMIC*/0))
        {
            return this.sleeping;
        }
        else
        {
            var data = this._data;
            var canSleep;

            do {
                var x = data[(/*BODY_VEL*/7)];
                var y = data[(/*BODY_VEL*/7) + 1];
                var conf = Physics2DConfig.SLEEP_LINEAR_SQ;
                if (((x * x) + (y * y)) > conf)
                {
                    canSleep = false;
                    break;
                }

                x = (data[(/*BODY_POS*/2)]     - data[(/*BODY_PRE_POS*/15)]);
                y = (data[(/*BODY_POS*/2) + 1] - data[(/*BODY_PRE_POS*/15) + 1]);
                var threshold = (deltaTime * deltaTime * conf);
                if (((x * x) + (y * y)) > threshold)
                {
                    canSleep = false;
                    break;
                }

                y = data[(/*BODY_RADIUS*/19)];
                x = data[(/*BODY_VEL*/7) + 2] * y;
                conf = Physics2DConfig.SLEEP_ANGULAR_SQ;
                if ((x * x) > conf)
                {
                    canSleep = false;
                    break;
                }

                x = (data[(/*BODY_POS*/2) + 2] - data[(/*BODY_PRE_POS*/15) + 2]) * y;
                threshold = (deltaTime * deltaTime * conf);
                canSleep = (x * x <= threshold);
            }
            while (false);

            if (!canSleep)
            {
                this._wakeTime = timeStamp;
                return false;
            }
            else
            {
                return ((this._wakeTime + Physics2DConfig.SLEEP_DELAY) < timeStamp);
            }
        }
    },

    // =====================================================================

    _deltaRotation : function _deltaRotationFn(delta)
    {
        var data = this._data;
        var rotation = (data[(/*BODY_POS*/2) + 2] += delta);
        if ((delta * delta) > Physics2DConfig.DELTA_ROTATION_EPSILON)
        {
            data[(/*BODY_AXIS*/5)]     = Math.cos(rotation);
            data[(/*BODY_AXIS*/5) + 1] = Math.sin(rotation);
        }
        else
        {
            // approximation of axis rotation
            // p, delta provide small angle approximations
            // whilst m provides an approximation to 1/|axis| after
            // the small angle rotation approximation, so as to
            // approximate the the normalization and hugely reduce
            // errors over many calls
            //
            // in testing even with an epsilon above of 0.01
            // the error in the axis is limited to 0.00002 after 100
            // updates.
            //
            // each update of the world, sin/cos is recomputed fully
            // so the accumulate error here is limited to a single step
            // and is really, very, very small.
            var d2 = (delta * delta);
            var p = (1 - (0.5 * d2));
            var m = (1 - (d2 * d2 * 0.125));

            var cos = data[(/*BODY_AXIS*/5)];
            var sin = data[(/*BODY_AXIS*/5) + 1];

            var nSin = ((p * sin) + (delta * cos)) * m;
            var nCos = ((p * cos) - (delta * sin)) * m;
            data[(/*BODY_AXIS*/5)]     = nCos;
            data[(/*BODY_AXIS*/5) + 1] = nSin;
        }
        return rotation;
    },

    // Integrate to deltaTime from current sweepTime (back or forth).
    _sweepIntegrate : function _sweepIntegrateFn(deltaTime)
    {
        var data = this._data;
        var delta = (deltaTime - data[(/*BODY_SWEEP_TIME*/18)]);
        if (delta !== 0)
        {
            data[(/*BODY_SWEEP_TIME*/18)] = deltaTime;
            data[(/*BODY_POS*/2)]     += (data[(/*BODY_VEL*/7)]     * delta);
            data[(/*BODY_POS*/2) + 1] += (data[(/*BODY_VEL*/7) + 1] * delta);

            var angVel = data[(/*BODY_SWEEP_ANGVEL*/20)];
            if (angVel !== 0)
            {
                this._deltaRotation(data[(/*BODY_SWEEP_ANGVEL*/20)] * delta);
            }
        }
    },

    integrate : function integrateFn(deltaTime)
    {
        if (this.world && (this.world._midStep || this._type === (/*TYPE_STATIC*/2)))
        {
            return;
        }

        var data = this._data;
        data[(/*BODY_SWEEP_TIME*/18)] = 0;
        data[(/*BODY_SWEEP_ANGVEL*/20)] = data[(/*BODY_VEL*/7) + 2];
        this._sweepIntegrate(deltaTime);
        data[(/*BODY_SWEEP_TIME*/18)] = 0;
        this._invalidated = true;
        this.wake(true);
    },

    // ==========================================================

    addEventListener : function bodyAddEventListener(eventType, callback)
    {
        var events = (eventType === 'wake'  ? this._onWake  :
                      eventType === 'sleep' ? this._onSleep :
                      null);

        if (events === null)
        {
            return false;
        }

        var index = events.indexOf(callback);
        if (index !== -1)
        {
            return false;
        }

        events.push(callback);

        this.wake();

        return true;
    },

    removeEventListener : function removeEventListener(eventType, callback)
    {
        var events = (eventType === 'wake'  ? this._onWake  :
                      eventType === 'sleep' ? this._onSleep :
                      null);

        if (events === null)
        {
            return false;
        }

        var index = events.indexOf(callback);
        if (index === -1)
        {
            return false;
        }

        // Need to keep order, cannot use swap-pop
        events.splice(index, 1);

        this.wake();

        return true;
    }
};


// params = {
//      shapes : [...],
//      mass : [...] = computed from shapes + type
//      inertia : [...] = computed from shapes + type
//      type : 'static', 'kinematic', 'dynamic' = 'kinematic'
//      sleeping : = false,
//      force : [, ] = [0,0],
//      torque : = 0
//      position : [...] = [0,0],
//      rotation : = 0
//      surfaceVelocity = [0,0]
//      velocity : = [0,0],
//      angularVelocity : = 0,
//      bullet = false,
//      linearDrag = 0.05,
//      angularDrag = 0.05
// }
Physics2DRigidBody.create = function phys2DRigidBodyFn(params)
{
    var b = new Physics2DRigidBody();
    var data = b._data = new Physics2DDevice.prototype.floatArray((/*BODY_DATA_SIZE*/25));

    var inf = Number.POSITIVE_INFINITY;

    b._type = (params.type === 'dynamic'   ? (/*TYPE_DYNAMIC*/0) :
               params.type === 'static'    ? (/*TYPE_STATIC*/2) :
               params.type === 'kinematic' ? (/*TYPE_KINEMATIC*/1) :
               (/*TYPE_DYNAMIC*/0));

    var shapes = params.shapes;
    b.shapes = [];
    b.constraints = [];
    b.world = null;

    var radius = 0;
    if (shapes)
    {
        var limit = shapes.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var shape = shapes[i];
            if (shape.body === b)
            {
                continue;
            }

            shape.body = b;
            b.shapes.push(shape);

            var rad = shape._data[(/*SHAPE_SWEEP_RADIUS*/4)];
            if (rad > radius)
            {
                radius = rad;
            }
        }
    }

    data[(/*BODY_RADIUS*/19)] = radius;

    b._customMass    = (params.mass    !== undefined);
    b._customInertia = (params.inertia !== undefined);
    var mass    = (b._customMass    ? params.mass    : b.computeMassFromShapes());
    var inertia = (b._customInertia ? params.inertia : b.computeInertiaFromShapes());

    var isDynamic = (b._type === (/*TYPE_DYNAMIC*/0));
    var isStatic  = (b._type === (/*TYPE_STATIC*/2));

    data[(/*BODY_IMASS*/0)]    = ((!isDynamic) || mass    === inf) ? 0 : (1 / mass);
    data[(/*BODY_IINERTIA*/1)] = ((!isDynamic) || inertia === inf) ? 0 : (1 / inertia);
    data[(/*BODY_MASS*/23)]    = mass;
    data[(/*BODY_INERTIA*/24)] = inertia;

    var vec = params.position;
    var x = data[(/*BODY_POS*/2)]       = (vec ? vec[0] : 0);
    var y = data[(/*BODY_POS*/2) + 1]   = (vec ? vec[1] : 0);
    var rot = data[(/*BODY_POS*/2) + 2] = (params.rotation || 0);

    data[(/*BODY_AXIS*/5)]     = Math.cos(rot);
    data[(/*BODY_AXIS*/5) + 1] = Math.sin(rot);

    data[(/*BODY_PRE_POS*/15)]     = x;
    data[(/*BODY_PRE_POS*/15) + 1] = y;
    data[(/*BODY_PRE_POS*/15) + 2] = rot;

    vec = params.velocity;
    data[(/*BODY_VEL*/7)]     = (((!isStatic) && vec) ? vec[0] : 0);
    data[(/*BODY_VEL*/7) + 1] = (((!isStatic) && vec) ? vec[1] : 0);
    data[(/*BODY_VEL*/7) + 2] = (((!isStatic) && params.angularVelocity) || 0);

    vec = params.force;
    data[(/*BODY_FORCE*/10)]     = (vec ? vec[0] : 0);
    data[(/*BODY_FORCE*/10) + 1] = (vec ? vec[1] : 0);
    data[(/*BODY_FORCE*/10) + 2] = (params.torque || 0);

    vec = params.surfaceVelocity;
    data[(/*BODY_SURFACE_VEL*/13)]     = (vec ? vec[0] : 0);
    data[(/*BODY_SURFACE_VEL*/13) + 1] = (vec ? vec[1] : 0);

    b.sleeping = (params.sleeping || false);
    b.bullet = (params.bullet || false);

    // Static/kinematic always 'frozen'
    b._sweepFrozen = (b._type !== (/*TYPE_DYNAMIC*/0));
    b._deferred = false;

    b._island = null;
    b._islandRank = 0;
    b._islandRoot = null;

    b._isBody = true;
    b._wakeTime = 0;
    b._woken = false; // for deferred WAKE callbacks.

    b._invalidated = true;

    data[(/*BODY_LIN_DRAG*/21)] = Math.log(1 - (params.linearDrag  !== undefined ? params.linearDrag  : 0.05));
    data[(/*BODY_ANG_DRAG*/22)] = Math.log(1 - (params.angularDrag !== undefined ? params.angularDrag : 0.05));

    b.userData = (params.userData || null);

    b._onWake = [];
    b._onSleep = [];

    return b;
};


// =====================================================================

//
// Physics2D Callback
//

// EVENT TYPES
// !! Must use regexp to change these globally (in all files) !!
//
// (Order here is used to order deferred event dispatch)
///*EVENT_WAKE*/0
///*EVENT_BEGIN*/1
///*EVENT_PROGRESS*/2
///*EVENT_END*/3
///*EVENT_SLEEP*/4
///*EVENT_BREAK*/5
//
// (not deferred)
///*EVENT_PRESOLVE*/6

///*EVENT_TIME_PRE*/-1
///*EVENT_TIME_STANDARD*/0
///*EVENT_TIME_CONTINUOUS*/1

function Physics2DCallback() {
    // All events
    this.thisObject = null;
    this.callback = null;

    // Used to ensure time ordering of deferred events.
    // -1 if event corresponds to action performed before step()
    // 0  if event is a standard event during step()
    // 1  if event is result of a continuous collision during step()
    this.time = 0;

    // Interaction events
    this.index = 0;
    this.arbiter = null;

    this.next = null;
}
// Object pooled;
Physics2DCallback.pool = null;
Physics2DCallback.allocate = function ()
{
    if (Physics2DCallback.pool)
    {
        var ret = Physics2DCallback.pool;
        Physics2DCallback.pool = ret.next;
        ret.next = null;
        return ret;
    }
    else
    {
        return (new Physics2DCallback());
    }
};

Physics2DCallback.deallocate = function (callback)
{
    callback.next = Physics2DCallback.pool;
    Physics2DCallback.pool = callback;

    callback.thisObject = null;
    callback.callback = null;
    callback.arbiter = null;
};

// =====================================================================

//
// Physics2D Island
//
function Physics2DIsland() {
    this.components = [];
    this.sleeping = false;
    this.wakeTime = 0;
    this.next = null;
}
// Object pooled.
Physics2DIsland.pool = null;
Physics2DIsland.allocate = function ()
{
    if (Physics2DIsland.pool)
    {
        var ret = Physics2DIsland.pool;
        Physics2DIsland.pool = ret.next;
        ret.next = null;
        return ret;
    }
    else
    {
        return (new Physics2DIsland());
    }
};

Physics2DIsland.deallocate = function (island)
{
    island.next = Physics2DIsland.pool;
    Physics2DIsland.pool = island;
    island.wakeTime = 0;
};


// =====================================================================

//
// Physics2D TOI Event
//

// TOI DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*TOI_AXIS*/0       - seperating/MTV axis (x, y)
///*TOI_WITNESS_A*/2  - witness on shape A (x, y)
///*TOI_WITNESS_B*/4  - witness on shape B (x, y)
///*TOI_TOI_ALPHA*/6  - time of impact.
//
///*TOI_DATA_SIZE*/7

function Physics2DTOIEvent() {
    this.next = null;
    this.shapeA = null;
    this.shapeB = null;
    this.frozenA = this.frozenB = false;
    this.arbiter = null;
    this.failed = false;
    this.slipped = false;
    this._data = new Physics2DDevice.prototype.floatArray((/*TOI_DATA_SIZE*/7));
}

// Object pooled.
Physics2DTOIEvent.pool = null;
Physics2DTOIEvent.allocate = function ()
{
    if (Physics2DTOIEvent.pool)
    {
        var ret = Physics2DTOIEvent.pool;
        Physics2DTOIEvent.pool = ret.next;
        ret.next = null;
        return ret;
    }
    else
    {
        return (new Physics2DTOIEvent());
    }
};

Physics2DTOIEvent.deallocate = function (toi)
{
    toi.next = Physics2DTOIEvent.pool;
    Physics2DTOIEvent.pool = toi;

    toi.shapeA = toi.shapeB = null;
    toi.failed = false;
    toi.slipped = false;
    toi.arbiter = null;
};


// =====================================================================

//
// Physics2D Box Tree Broadphase
//
function Physics2DBoxTreeBroadphaseHandle()
{
    this.boxTreeIndex = -1;

    this.data = null;
    this.isStatic = false;
}

Physics2DBoxTreeBroadphaseHandle.pool = [];
Physics2DBoxTreeBroadphaseHandle.allocate = function allocateBTHandle()
{
    if (0 < this.pool.length)
    {
        return this.pool.pop();
    }
    else
    {
        return new Physics2DBoxTreeBroadphaseHandle();
    }
};

Physics2DBoxTreeBroadphaseHandle.deallocate = function deallocateBTHandle(handle)
{
    this.pool.push(handle);

    handle.data = null;
};


function Physics2DBoxTreeBroadphase()
{
    this.staticTree = BoxTree.create(true);
    this.dynamicTree = BoxTree.create(false);
    this.overlappingNodes = [];
}

Physics2DBoxTreeBroadphase.prototype = {

    version : 1,

    sample : function sampleFn(box, lambda, thisObject)
    {
        var overlappingNodes = this.overlappingNodes;

        var numOverlappingNodes = this.staticTree.getOverlappingNodes(box, overlappingNodes, 0);
        numOverlappingNodes += this.dynamicTree.getOverlappingNodes(box, overlappingNodes, numOverlappingNodes);

        var n;
        for (n = 0; n < numOverlappingNodes; n += 1)
        {
            lambda.call(thisObject, overlappingNodes[n], box);
        }
    },

    insert : function insertFn(data, box, isStatic)
    {
        var handle = Physics2DBoxTreeBroadphaseHandle.allocate();
        handle.data = data;
        handle.isStatic = isStatic;

        if (isStatic)
        {
            this.staticTree.add(handle, box);
        }
        else
        {
            this.dynamicTree.add(handle, box);
        }

        return handle;
    },

    update : function updateFn(handle, box, isStatic)
    {
        if (isStatic !== undefined &&
            handle.isStatic !== isStatic)
        {
            if (handle.isStatic)
            {
                this.staticTree.remove(handle);
                this.dynamicTree.add(handle, box);
            }
            else
            {
                this.dynamicTree.remove(handle);
                this.staticTree.add(handle, box);
            }
            handle.isStatic = isStatic;
        }
        else
        {
            if (isStatic)
            {
                this.staticTree.update(handle, box);
            }
            else
            {
                this.dynamicTree.update(handle, box);
            }
        }
    },

    remove : function removeFn(handle)
    {
        if (handle.isStatic)
        {
            this.staticTree.remove(handle);
        }
        else
        {
            this.dynamicTree.remove(handle);
        }

        Physics2DBoxTreeBroadphaseHandle.deallocate(handle);
    },

    clear : function clearFn(callback, thisObject)
    {
        this._clearTree(this.staticTree, callback, thisObject);
        this._clearTree(this.dynamicTree, callback, thisObject);
    },

    _clearTree : function _clearTreeFn(tree, callback, thisObject)
    {
        var nodes = tree.getNodes();
        var numNodes = nodes.length;
        var n;
        for (n = 0; n < numNodes; n += 1)
        {
            var handle = nodes[n].externalNode;
            if (handle)
            {
                if (callback)
                {
                    callback.call(thisObject, handle);
                }
                Physics2DBoxTreeBroadphaseHandle.deallocate(handle);
            }
        }
        tree.clear();
    },

    _validate : function validateFn()
    {
        this.staticTree.finalize();
        this.dynamicTree.finalize();
    },

    perform : function performFn(lambda, thisObject)
    {
        this._validate();

        var overlappingNodes = this.overlappingNodes;

        var staticTree = this.staticTree;
        var dynamicTree = this.dynamicTree;

        var dynamicNodes = dynamicTree.getNodes();
        var numDynamicNodes = dynamicNodes.length;
        var n;
        for (n = 0; n < numDynamicNodes; n += 1)
        {
            var dynamicNode = dynamicNodes[n];
            var handle = dynamicNode.externalNode;
            if (handle)
            {
                var numOverlappingNodes = staticTree.getOverlappingNodes(dynamicNode.extents,
                                                                         overlappingNodes,
                                                                         0);
                var i;
                for (i = 0; i < numOverlappingNodes; i += 1)
                {
                    lambda.call(thisObject, handle, overlappingNodes[i]);
                }
            }
        }

        var numPairs = dynamicTree.getOverlappingPairs(overlappingNodes, 0);
        for (n = 0; n < numPairs; n += 2)
        {
            lambda.call(thisObject, overlappingNodes[n], overlappingNodes[n + 1]);
        }
    }
};

Physics2DBoxTreeBroadphase.create = function phys2DSAPFn()
{
    return new Physics2DBoxTreeBroadphase();
};

// =====================================================================

//
// Physics2D 1D (x) Sweep and Prune Broadphase
//
function Physics2DSweepAndPruneHandle() {
    this._next = null;
    this._prev = null;
    this._aabb = new Physics2DDevice.prototype.floatArray(4);

    this.data = null;
    this.isStatic = false;
}

Physics2DSweepAndPruneHandle.pool = null;
Physics2DSweepAndPruneHandle.allocate = function allocateSAPHandle()
{
    if (!this.pool)
    {
        return new Physics2DSweepAndPruneHandle();
    }
    else
    {
        var ret = this.pool;
        this.pool = ret._next;
        ret._next = null;
        return ret;
    }
};

Physics2DSweepAndPruneHandle.deallocate = function deallocateSAPHandle(handle)
{
    handle._prev = null;
    handle._next = this.pool;
    this.pool = handle;

    handle.data = null;
};


function Physics2DSweepAndPrune() {}
Physics2DSweepAndPrune.prototype = {

    version : 1,

    sample : function sampleFn(rectangle, lambda, thisObject)
    {
        var minX = rectangle[0];
        var minY = rectangle[1];
        var maxX = rectangle[2];
        var maxY = rectangle[3];

        this._validate();

        var d1 = this._list;
        while (d1)
        {
            var aabb = d1._aabb;
            // Slip element preceeding rectangle.
            if (aabb[2] < minX)
            {
                d1 = d1._next;
                continue;
            }

            // Discard all list proceeding rectangle.
            if (aabb[0] > maxX)
            {
                break;
            }

            // Full AABB check (only y-check needed)
            if (aabb[1] <= maxY &&
                minY <= aabb[3])
            {
                lambda.call(thisObject, d1, rectangle);
            }
            d1 = d1._next;
        }
    },

    insert : function insertFn(data, aabb, isStatic)
    {
        var handle = Physics2DSweepAndPruneHandle.allocate();
        var ab = handle._aabb;
        ab[0] = aabb[0];
        ab[1] = aabb[1];
        ab[2] = aabb[2];
        ab[3] = aabb[3];

        handle.data = data;
        handle.isStatic = isStatic;

        // Insert at beginning, let broadphase update deal with it.
        var list = this._list;
        handle._next = list;
        if (list)
        {
            list._prev = handle;
        }
        this._list = handle;

        return handle;
    },

    update : function updateFn(handle, aabb, isStatic)
    {
        var ab = handle._aabb;
        ab[0] = aabb[0];
        ab[1] = aabb[1];
        ab[2] = aabb[2];
        ab[3] = aabb[3];

        // Not used in this broadphase, but must provide consistency
        if (isStatic !== undefined)
        {
            handle.isStatic = isStatic;
        }
    },

    remove : function removeFn(handle)
    {
        if (!handle._prev)
        {
            this._list = handle._next;
        }
        else
        {
            handle._prev._next = handle._next;
        }

        if (handle._next)
        {
            handle._next._prev = handle._prev;
        }

        Physics2DSweepAndPruneHandle.deallocate(handle);
    },

    clear : function clearFn(callback, thisObject)
    {
        var handle = this._list;
        while (handle)
        {
            var next = handle._next;
            if (callback)
            {
                callback.call(thisObject, handle);
            }
            Physics2DSweepAndPruneHandle.deallocate(handle);
            handle = next;
        }
        this._list = null;
    },

    _validate : function validateFn()
    {
        if (!this._list)
        {
            return;
        }

        var a = this._list._next;
        while (a)
        {
            var next = a._next;
            var b = a._prev;

            var aMinX = a._aabb[0];
            if (aMinX > b._aabb[0])
            {
                // Nothing to do.
                a = next;
                continue;
            }

            // Find insertion point.
            while (b._prev && b._prev._aabb[0] > aMinX)
            {
                b = b._prev;
            }

            // Remove a
            var prev = a._prev;
            prev._next = next;
            if (next)
            {
                next._prev = prev;
            }

            // Insert a before b
            if (!b._prev)
            {
                a._prev = null;
                this._list = a;
                a._next = b;
                b._prev = a;
            }
            else
            {
                a._prev = b._prev;
                b._prev = a;
                a._prev._next = a;
                a._next = b;
            }

            a = next;
        }
    },

    perform : function performFn(lambda, thisObject)
    {
        this._validate();

        var d1 = this._list;
        while (d1)
        {
            var d2 = d1._next;
            var aabb1 = d1._aabb;
            var d1Static = d1.isStatic;

            var maxX = aabb1[2];
            while (d2)
            {
                var aabb2 = d2._aabb;
                if (aabb2[0] > maxX)
                {
                    break;
                }

                if (d1Static && d2.isStatic)
                {
                    d2 = d2._next;
                    continue;
                }

                // Check AABB's fully. (test y-axis, x-axis already checked)
                if (aabb1[1] > aabb2[3] ||
                    aabb2[1] > aabb1[3])
                {
                    d2 = d2._next;
                    continue;
                }

                lambda.call(thisObject, d1, d2);
                d2 = d2._next;
            }

            d1 = d1._next;
        }
    }
};

Physics2DSweepAndPrune.create = function phys2DSAPFn()
{
    var b = new Physics2DSweepAndPrune();
    b._list = null;
    return b;
};


// =====================================================================

//
// Physics2D Contact
//

//
// CONTACT DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
///*CON_POS*/0         // World position of contact (x, y)
///*CON_DIST*/2        // Penetration distance of contact
///*CON_BOUNCE*/3      // Per-contact bounce error.
///*CON_FRICTION*/4    // Per-contact friction (based on arbiter and rel. velocity)
///*CON_NMASS*/5       // Normal effective mass
///*CON_TMASS*/6       // Tangent effective mass
///*CON_REL1*/7        // Contact relative to object 1 (x, y)
///*CON_REL2*/9        // Contact relative to object 2 (x, y)
///*CON_JNACC*/11      // Normal accumulated impulse
///*CON_JTACC*/12      // Tangent accumulated impulse
///*CON_LREL1*/13      // Local contact point on object 1 (position iteration) (x, y)
///*CON_LREL2*/15      // Local contact point on object 2 (position iteration) (x, y)
//
///*CON_DATA_SIZE*/17

function Physics2DContact()
{
    this._data = new Physics2DDevice.prototype.floatArray((/*CON_DATA_SIZE*/17));
    this.fresh = false;
    this._hash = 0;
    this._timeStamp = 0;
    this._next = null;
    this.active = false;
    this.virtual = false;
}

Physics2DContact.prototype = {

    version : 1,

    getPosition : function getPositionFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        var data = this._data;
        dst[0] = data[(/*CON_POS*/0)];
        dst[1] = data[(/*CON_POS*/0) + 1];
        return dst;
    },

    getPenetration : function getPenetrationFn()
    {
        return (-this._data[(/*CON_DIST*/2)]);
    },

    getNormalImpulse : function getNormalImpulseFn()
    {
        return (this.virtual ? 0 : this._data[(/*CON_JNACC*/11)]);
    },

    getTangentImpulse : function getTangentImpulseFn()
    {
        return (this.virtual ? 0 : this._data[(/*CON_JTACC*/12)]);
    }
};


Physics2DContact.pool = null;
Physics2DContact.allocate = function allocateContactFn()
{
    if (!this.pool)
    {
        return new Physics2DContact();
    }
    else
    {
        var ret = this.pool;
        this.pool = ret._next;
        ret._next = null;
        return ret;
    }
};

Physics2DContact.deallocate = function deallocateContactFn(contact)
{
    contact._next = this.pool;
    this.pool = contact;
};


// =====================================================================

//
// Physics2D Arbiter
//

//
// ARBITER DATA CONSTANTS
// !! Must use regexp to change these globally (in all files) !!
//
// Velocity iterations.
// these values must remain below (31) as used as bit accessors
// on userdef flag.
///*ARB_DYN_FRIC*/0      // Coef. dynamic friction
///*ARB_STATIC_FRIC*/1   // Coef. static friction
///*ARB_ELASTICITY*/2    // Coef. elasticity
///*ARB_ROLLING_FRIC*/3  // Coef. rolling friction
//
///*ARB_NORMAL*/4        // World space normal (velocity iterations) (x, y)
///*ARB_PREDT*/6         // Previous time-step on computation for scaling.
//
// Jacobian (first contact)
///*ARB_RN1A*/7          // (contact1.ra cross normal)
///*ARB_RN1B*/8          // (contact1.rb cross normal)
///*ARB_RT1A*/9          // (contact1.ra dot normal)
///*ARB_RT1B*/10          // (contact1.rb dot normal)
//
// Position iterations.
///*ARB_LNORM*/11         // Local normal of reference edge (x, y)
///*ARB_LPROJ*/13         // Local projection onto reference edge.
///*ARB_RADIUS*/14        // Sum radius of shapes (0 poly, radius circle)
///*ARB_BIAS*/15          // Bias coeffecient
//
// 2-contact arbiter only.
// Jacobian second contact
///*ARB_RN2A*/16          // (contact2.ra cross normal)
///*ARB_RN2B*/17          // (contact2.rb cross normal)
///*ARB_RT2A*/18          // (contact2.ra dot normal)
///*ARB_RT2B*/19          // (contact2.rb dot normal)
////**/
///*ARB_K*/20             // Block solver non-inverted effectivemass [a b; b c] (sym. matrix)
///*ARB_KMASS*/23         // (1 / det) of ARB_K for on the fly inversion.
//
// 1-contact arbiter only. (when one is a circle)
///*ARB_JRACC*/16         // Accumulated rolling friction impulse
///*ARB_RMASS*/17         // Rolling friction effectivemass.
//
//
//
///*ARB_DATA_SIZE*/24
//
//
// Flags for when user has explicitly set values on arbiter.
///*USERDEF_DYN*/1
///*USERDEF_STAT*/2
///*USERDEF_ROLLING*/4
///*USERDEF_ELASTICITY*/8
//
// Face flags
///*FACE_CIRCLE*/0
///*FACE_1*/1
///*FACE_2*/2
//
// Hash flags
///*HASH_CIRCLE*/0
///*HASH_LEFT*/1
///*HASH_RIGHT*/2
//
// State flags
///*STATE_ACCEPT*/1
///*STATE_ALWAYS*/2

function Physics2DArbiter()
{
    this.shapeA = null;
    this.shapeB = null;
    this.bodyA = null;
    this.bodyB = null;
    this._next = null;

    this._retired = false; // set to true when arbiter is lazily retired to be removed in step()
    this._lazyRetired = false;
    this._static = false;
    this._state = 0;
    this.sensor = false;

    this._createStamp = 0; // time stamp at which arbiter was created.
    this._updateStamp = 0; // time stamp at which arbiter was updated.
    this._sleepStamp = 0;  // time stamp at which arbiter was put to sleep
    this._timeStamp = 0;   // time stamp set before collision detection so that
                           // injected contacts have correct time set without later
                           // iteration.
    this._createContinuous = false; // Marks createStamp as having been set during
                                    // continuous collisions for callbacks.
    this._endGenerated = 0; // time stamp at which end event was generated.
                            // This deals with another corner case where
                            // object seperates (end event), then continuously collide
                            // needing to generate a begin even for the same pair of
                            // objects (same arbiter) in the same step!.

    this._midStep = false; // Set to true before preSolve events are called to avoid waking bodies.

    this.sleeping = false;
    this.active = false;
    this._invalidated = false;

    this._data = new Physics2DDevice.prototype.floatArray((/*ARB_DATA_SIZE*/24));
    this.contacts = [];

    this._userdef = 0; // bit-flags for if user has set an elasticity/friction value.
    this._velocity2Contact = false;
    this._position2Contact = false;
    this._contact1 = this._contact2 = null;
    this._faceType = 0; // FACE_CIRCLE/FACE_1/FACE_2
}

Physics2DArbiter.prototype = {

    version : 1,

    getNormal : function getNormalFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }
        if (this.sensor)
        {
            dst[0] = dst[1] = 0;
        }
        else
        {
            var data = this._data;
            dst[0] = data[(/*ARB_NORMAL*/4)];
            dst[1] = data[(/*ARB_NORMAL*/4) + 1];
        }
        return dst;
    },

    getRollingImpulse : function getRollingImpulseFn()
    {
        if (this.sensor || this._velocity2Contact || this._contact1._hash !== (/*HASH_CIRCLE*/0))
        {
            return 0;
        }
        else
        {
            return this._data[(/*ARB_JRACC*/16)];
        }
    },

    // =========================================================

    getElasticity : function getElasticityFn()
    {
        if (this.sensor)
        {
            return undefined;
        }

        this._validate();
        return this._data[(/*ARB_ELASTICITY*/2)];
    },

    getDynamicFriction : function getDynamicFrictionFn()
    {
        if (this.sensor)
        {
            return undefined;
        }

        this._validate();
        return this._data[(/*ARB_DYN_FRIC*/0)];
    },

    getStaticFriction : function getStaticFrictionFn()
    {
        if (this.sensor)
        {
            return undefined;
        }

        this._validate();
        return this._data[(/*ARB_STATIC_FRIC*/1)];
    },

    getRollingFriction : function getRollingFrictionFn()
    {
        if (this.sensor)
        {
            return undefined;
        }

        this._validate();
        return this._data[(/*ARB_ROLLING_FRIC*/3)];
    },

    /*jshint bitwise: false*/
    setElasticity : function setElasticityFn(elasticity)
    {
        if (this.sensor)
        {
            return;
        }

        this._data[(/*ARB_ELASTICITY*/2)] = elasticity;
        this._userdef |= (1 << (/*ARB_ELASTICITY*/2));
        this._invalidate(true);
    },

    setDynamicFriction : function setDynamicFrictionFn(dynamicFriction)
    {
        if (this.sensor)
        {
            return;
        }

        this._data[(/*ARB_DYN_FRIC*/0)] = dynamicFriction;
        this._userdef |= (1 << (/*ARB_DYN_FRIC*/0));
        this._invalidate(true);
    },

    setStaticFriction : function setStaticFrictionFn(staticFriction)
    {
        if (this.sensor)
        {
            return;
        }

        this._data[(/*ARB_STAT_FRIC*/1)] = staticFriction;
        this._userdef |= (1 << (/*ARB_STAT_FRIC*/1));
        this._invalidate(true);
    },

    setRollingFriction : function setRollingFrictionFn(rollingFriction)
    {
        if (this.sensor)
        {
            return;
        }

        this._data[(/*ARB_ROLLING_FRIC*/3)] = rollingFriction;
        this._userdef |= (1 << (/*ARB_ROLLING_FRIC*/3));
        this._invalidate(true);
    },

    setElasticityFromShapes : function setElasticityFromShapesFn()
    {
        if (this.sensor)
        {
            return;
        }

        this._userdef &= ~(1 << (/*ARB_ELASTICITY*/2));
        this._invalidate(true);
    },

    setDynamicFrictionFromShapes : function setDynamicFrictionFromShapesFn()
    {
        if (this.sensor)
        {
            return;
        }

        this._userdef &= ~(1 << (/*ARB_DYN_FRIC*/0));
        this._invalidate(true);
    },

    setStaticFrictionFromShapes : function setStaticFrictionFromShapesFn()
    {
        if (this.sensor)
        {
            return;
        }

        this._userdef &= ~(1 << (/*ARB_STAT_FRIC*/1));
        this._invalidate(true);
    },

    setRollingFrictionFromShapes : function setRollingFrictionFromShapesFn()
    {
        if (this.sensor)
        {
            return;
        }

        this._userdef &= ~(1 << (/*ARB_ROLLING_FRIC*/3));
        this._invalidate(true);
    },
    /*jshint bitwise: true*/

    // =========================================================

    /*jshint bitwise: false*/
    isStateAccepted : function acceptedFn()
    {
        if (this.sensor)
        {
            return undefined;
        }
        else
        {
            return ((this._state & (/*STATE_ACCEPT*/1)) !== 0);
        }
    },

    isStatePersistent : function persistentFn()
    {
        if (this.sensor)
        {
            return undefined;
        }
        else
        {
            return ((this._state & (/*STATE_ALWAYS*/2)) !== 0);
        }
    },

    setAcceptedState : function acceptingStateFn(accepted)
    {
        if (this.sensor)
        {
            return;
        }

        if (accepted)
        {
            this._state |= (/*STATE_ACCEPT*/1);
        }
        else
        {
            this._state &= ~(/*STATE_ACCEPT*/1);
        }
        this._invalidate(true);
    },

    setPersistentState : function persistentStateFn(persistent)
    {
        if (this.sensor)
        {
            return;
        }

        if (persistent)
        {
            this._state |= (/*STATE_ALWAYS*/2);
        }
        else
        {
            this._state &= ~(/*STATE_ALWAYS*/2);
        }
        this._invalidate(true);
    },
    /*jshint bitwise: true*/

    // =========================================================

    // Called when arbiter is destroyed by removal of a shape
    // Or change in body type signialling end of an interaction.
    // In either case, arbiter was woken and sleeping is false.
    //
    // Effect is that in following step, arbiter is permitted
    // to persist one additional frame (for any end events)
    // and then in the next step retired fully and reused.
    _lazyRetire : function _lazyRetireFn(ignoreShape)
    {
        this._lazyRetired = true;
        this._retired = true;
        this.active = false;

        var arbiters;
        var index;
        if (this.shapeA !== ignoreShape)
        {
            arbiters = this.shapeA.arbiters;
            index = arbiters.indexOf(this);
            arbiters[index] = arbiters[arbiters.length - 1];
            arbiters.pop();
        }
        if (this.shapeB !== ignoreShape)
        {
            arbiters = this.shapeB.arbiters;
            index = arbiters.indexOf(this);
            arbiters[index] = arbiters[arbiters.length - 1];
            arbiters.pop();
        }
    },

    _assign : function _assignFn(s1, s2)
    {
        this.bodyA = s1.body;
        this.bodyB = s2.body;
        this.shapeA = s1;
        this.shapeB = s2;

        s1.arbiters.push(this);
        s2.arbiters.push(this);

        this._retired = false;
        this.sleeping = false;

        this._invalidate();
    },

    _retire : function _retireFn()
    {
        this.shapeA = this.shapeB = null;
        this.bodyA = this.bodyB = null;
        this._retired = true;
        this._lazyRetired = false;
        this.active = false;
        this._data[(/*ARB_PREDT*/6)] = 0;

        var contacts = this.contacts;
        while (contacts.length > 0)
        {
            var contact = contacts.pop();
            Physics2DContact.deallocate(contact);
        }
        this._contact1 = this._contact2 = null;
    },

    // =====================================================================

    _invalidate : function _invalidateFn(dontSkip)
    {
        this._invalidated = true;
        if (dontSkip && !this._midStep)
        {
            this.shapeA.body.wake();
            this.shapeB.body.wake();
        }
    },

    _validate : function _validateFn()
    {
        this._invalidated = false;

        var data = this._data;
        var mA = this.shapeA._material._data;
        var mB = this.shapeB._material._data;
        var userdef = this._userdef;

        /*jshint bitwise: false*/
        if ((userdef & (1 << (/*ARB_ELASTICITY*/2))) === 0)
        {
            var elasticity;
            var elasticA = mA[(/*MAT_ELASTICITY*/0)];
            var elasticB = mB[(/*MAT_ELASTICITY*/0)];
            if (elasticA <= Number.NEGATIVE_INFINITY || elasticB <= Number.NEGATIVE_INFINITY)
            {
                elasticity = 0;
            }
            else if (elasticA >= Number.POSITIVE_INFINITY || elasticB >= Number.POSITIVE_INFINITY)
            {
                elasticity = 1;
            }
            else
            {
                elasticity = (elasticA + elasticB) * 0.5;
                if (elasticity < 0)
                {
                    elasticity = 0;
                }
                else if (elasticity > 1)
                {
                    elasticity = 1;
                }
            }
            data[(/*ARB_ELASTICITY*/2)]   = elasticity;
        }

        var sqrt = Math.sqrt;
        if ((userdef & (1 << (/*ARB_DYN_FRIC*/0))) === 0)
        {
            data[(/*ARB_DYN_FRIC*/0)] = sqrt(mA[(/*MAT_DYNAMIC*/2)] * mB[(/*MAT_DYNAMIC*/2)]);
        }
        if ((userdef & (1 << (/*ARB_STATIC_FRIC*/1))) === 0)
        {
            data[(/*ARB_STATIC_FRIC*/1)] = sqrt(mA[(/*MAT_STATIC*/1)]  * mB[(/*MAT_STATIC*/1)]);
        }
        if ((userdef & (1 << (/*ARB_ROLLING_FRIC*/3))) === 0)
        {
            data[(/*ARB_ROLLING_FRIC*/3)] = sqrt(mA[(/*MAT_ROLLING*/3)] * mB[(/*MAT_ROLLING*/3)]);
        }
        /*jshint bitwise: true*/
    },

    // =====================================================================

    _injectContact : function _injectContactFn(px, py, nx, ny, dist, hash, virtual)
    {
        var contact;
        var contacts = this.contacts;
        var limit = contacts.length;
        if (limit !== 0)
        {
            contact = contacts[0];
            if (contact._hash !== hash)
            {
                if (limit !== 1)
                {
                    contact = contacts[1];
                    if (contact._hash !== hash)
                    {
                        contact = null;
                    }
                }
                else
                {
                    contact = null;
                }
            }
        }

        if (virtual === undefined)
        {
            virtual = false;
        }

        var data;
        if (!contact)
        {
            contact = Physics2DContact.allocate();
            data = contact._data;
            data[(/*CON_JNACC*/11)] = data[(/*CON_JTACC*/12)] = 0;
            contact._hash = hash;
            contact.fresh = (!virtual);
            contacts.push(contact);

            if (hash === (/*HASH_CIRCLE*/0))
            {
                this._data[(/*ARB_JRACC*/16)] = 0;
            }
        }
        else
        {
            contact.fresh = (!virtual && contact.virtual);
            data = contact._data;
        }

        data[(/*CON_POS*/0)]     = px;
        data[(/*CON_POS*/0) + 1] = py;
        data[(/*CON_DIST*/2)] = dist;
        contact._timeStamp = this._timeStamp;
        contact.virtual = virtual;

        data = this._data;
        data[(/*ARB_NORMAL*/4)]     = nx;
        data[(/*ARB_NORMAL*/4) + 1] = ny;

        return contact;
    },

    _cleanContacts : function _cleanContactsFn(timeStamp)
    {
        var fst = true;
        this._position2Contact = false;
        this._contact2 = null;
        var contacts = this.contacts;
        var limit = contacts.length;
        var i;
        for (i = 0; i < limit;)
        {
            var c = contacts[i];
            if (c._timeStamp + Physics2DConfig.DELAYED_DEATH < timeStamp)
            {
                limit -= 1;
                contacts[i] = contacts[limit];
                contacts.pop();
                Physics2DContact.deallocate(c);
                continue;
            }

            c.active = (c._timeStamp === timeStamp);
            if (c.active)
            {
                if (fst)
                {
                    this._contact1 = c;
                    fst = false;
                }
                else
                {
                    this._contact2 = c;
                    this._position2Contact = true;
                }
            }

            i += 1;
        }

        if (this._position2Contact)
        {
            if (this._contact1.virtual)
            {
                var tmp = this._contact1;
                this._contact1 = this._contact2;
                this._contact2 = tmp;
            }
            this._velocity2Contact = !(this._contact2.virtual);
        }
        else
        {
            this._velocity2Contact = false;
        }

        return !fst;
    },

    // =====================================================================

    _preStep : function _preStepFn(deltaTime, timeStamp, continuous)
    {
        if (!this._cleanContacts(timeStamp))
        {
            return false;
        }

        if (this._invalidated)
        {
            this._validate();
        }

        var adata = this._data;
        var predt = adata[(/*ARB_PREDT*/6)];
        var dtRatio = (predt === 0) ? 1 : (deltaTime / predt);
        adata[(/*ARB_PREDT*/6)] = deltaTime;

        var data1 = this.bodyA._data;
        var data2 = this.bodyB._data;

        var px1 = data1[(/*BODY_POS*/2)];
        var py1 = data1[(/*BODY_POS*/2) + 1];
        var px2 = data2[(/*BODY_POS*/2)];
        var py2 = data2[(/*BODY_POS*/2) + 1];

        var vx1 = data1[(/*BODY_VEL*/7)];
        var vy1 = data1[(/*BODY_VEL*/7) + 1];
        var vw1 = data1[(/*BODY_VEL*/7) + 2];
        var vx2 = data2[(/*BODY_VEL*/7)];
        var vy2 = data2[(/*BODY_VEL*/7) + 1];
        var vw2 = data2[(/*BODY_VEL*/7) + 2];

        var nx = adata[(/*ARB_NORMAL*/4)];
        var ny = adata[(/*ARB_NORMAL*/4) + 1];

        var massSum = data1[(/*BODY_IMASS*/0)] + data2[(/*BODY_IMASS*/0)];

        var ii1 = data1[(/*BODY_IINERTIA*/1)];
        var ii2 = data2[(/*BODY_IINERTIA*/1)];

        var EPS = Physics2DConfig.EFF_MASS_EPSILON;
        var BIAS = (continuous   ? (this._static ? Physics2DConfig.CONT_STATIC_BIAS_COEF :
                                                   Physics2DConfig.CONT_BIAS_COEF) :
                    this._static ? Physics2DConfig.STATIC_BIAS_COEF :
                                   Physics2DConfig.BIAS_COEF);
        adata[(/*ARB_BIAS*/15)] = BIAS;

        var c = this._contact1;
        var data;
        var rx1, ry1, rx2, ry2;
        while (true)
        {
            data = c._data;

            var px = data[(/*CON_POS*/0)];
            var py = data[(/*CON_POS*/0) + 1];

            // Contact point relative vectors.
            rx1 = data[(/*CON_REL1*/7)]      = (px - px1);
            ry1 = data[(/*CON_REL1*/7) + 1]  = (py - py1);
            rx2 = data[(/*CON_REL2*/9)]     = (px - px2);
            ry2 = data[(/*CON_REL2*/9) + 1] = (py - py2);

            // Tangent effective mass.
            var v1 = (rx1 * nx) + (ry1 * ny);
            var v2 = (rx2 * nx) + (ry2 * ny);
            var kt = massSum + (ii2 * v2 * v2) + (ii1 * v1 * v1);
            data[(/*CON_TMASS*/6)] = (kt < EPS) ? 0 : (1 / kt);

            // Normal effective mass.
            v1 = (rx1 * ny) - (ry1 * nx);
            v2 = (rx2 * ny) - (ry2 * nx);
            var kn = massSum + (ii2 * v2 * v2) + (ii1 * v1 * v1);
            data[(/*CON_NMASS*/5)] = (kn < EPS) ? 0 : (1 / kn);

            // Relative velocity at contact point.
            var vrx = (vx2 - (ry2 * vw2)) - (vx1 - (ry1 * vw1));
            var vry = (vy2 + (rx2 * vw2)) - (vy1 + (rx1 * vw1));

            // Compute bounce error
            var vdot = (nx * vrx) + (ny * vry);
            var bounce = (vdot * adata[(/*ARB_ELASTICITY*/2)]);
            if (bounce > -Physics2DConfig.BOUNCE_VELOCITY_THRESHOLD)
            {
                bounce = 0;
            }
            data[(/*CON_BOUNCE*/3)] = bounce;

            // Compute friction coef.
            vdot = (nx * vry) - (ny * vrx);
            if ((vdot * vdot) > Physics2DConfig.STATIC_FRIC_SQ_EPSILON)
            {
                data[(/*CON_FRICTION*/4)] = adata[(/*ARB_DYN_FRIC*/0)];
            }
            else
            {
                data[(/*CON_FRICTION*/4)] = adata[(/*ARB_STATIC_FRIC*/1)];
            }

            // Scale impulses from change in time step
            data[(/*CON_JNACC*/11)] *= dtRatio;
            data[(/*CON_JTACC*/12)] *= dtRatio;

            // Advance to next contact.
            if (this._velocity2Contact)
            {
                if (c === this._contact2)
                {
                    break;
                }
                c = this._contact2;
            }
            else
            {
                break;
            }
        }

        data = this._contact1._data;
        rx1 = data[(/*CON_REL1*/7)];
        ry1 = data[(/*CON_REL1*/7) + 1];
        rx2 = data[(/*CON_REL2*/9)];
        ry2 = data[(/*CON_REL2*/9) + 1];
        var rn1a = adata[(/*ARB_RN1A*/7)] = (rx1 * ny) - (ry1 * nx);
        var rn1b = adata[(/*ARB_RN1B*/8)] = (rx2 * ny) - (ry2 * nx);
        adata[(/*ARB_RT1A*/9)]  = (rx1 * nx) + (ry1 * ny);
        adata[(/*ARB_RT1B*/10)] = (rx2 * nx) + (ry2 * ny);

        if (!this._velocity2Contact && this._contact1._hash === (/*HASH_CIRCLE*/0))
        {
            adata[(/*ARB_JRACC*/16)] *= dtRatio;
            var sum = ii1 + ii2;
            adata[(/*ARB_RMASS*/17)] = (sum < EPS) ? 0 : (1 / sum);
        }
        else if (this._velocity2Contact)
        {
            data = this._contact2._data;
            var r2x1 = data[(/*CON_REL1*/7)];
            var r2y1 = data[(/*CON_REL1*/7) + 1];
            var r2x2 = data[(/*CON_REL2*/9)];
            var r2y2 = data[(/*CON_REL2*/9) + 1];
            var rn2a = adata[(/*ARB_RN2A*/16)] = (r2x1 * ny) - (r2y1 * nx);
            var rn2b = adata[(/*ARB_RN2B*/17)] = (r2x2 * ny) - (r2y2 * nx);
            adata[(/*ARB_RT2A*/18)] = (r2x1 * nx) + (r2y1 * ny);
            adata[(/*ARB_RT2B*/19)] = (r2x2 * nx) + (r2y2 * ny);

            var Ka = adata[(/*ARB_K*/20)]     = massSum + (ii1 * rn1a * rn1a) + (ii2 * rn1b * rn1b);
            var Kb = adata[(/*ARB_K*/20) + 1] = massSum + (ii1 * rn1a * rn2a) + (ii2 * rn1b * rn2b);
            var Kc = adata[(/*ARB_K*/20) + 2] = massSum + (ii1 * rn2a * rn2a) + (ii2 * rn2b * rn2b);

            // Degenerate case! eek.
            var det = ((Ka * Kc) - (Kb * Kb));
            if ((Ka * Ka) > (Physics2DConfig.ILL_THRESHOLD * det))
            {
                if (this._contact2._data[(/*CON_DIST*/2)] < this._contact1._data[(/*CON_DIST*/2)])
                {
                    this._contact1 = this._contact2;
                    adata[(/*ARB_RN1A*/7)]  = rn2a;
                    adata[(/*ARB_RN1B*/8)]  = rn2b;
                    adata[(/*ARB_RT1A*/9)]  = adata[(/*ARB_RT2A*/18)];
                    adata[(/*ARB_RT1B*/10)] = adata[(/*ARB_RT2B*/19)];
                }
                this._velocity2Contact = false;
                this._position2Contact = false;
                this._contact2 = null;
            }
            else
            {
                adata[(/*ARB_KMASS*/23)] = (1 / det);
            }
        }

        return true;
    },

    // =====================================================================

    _iterateVelocity : function _iterateVelocity()
    {
        var data1 = this.bodyA._data;
        var data2 = this.bodyB._data;
        var im1 = data1[(/*BODY_IMASS*/0)];
        var ii1 = data1[(/*BODY_IINERTIA*/1)];
        var im2 = data2[(/*BODY_IMASS*/0)];
        var ii2 = data2[(/*BODY_IINERTIA*/1)];
        var vx1 = data1[(/*BODY_VEL*/7)];
        var vy1 = data1[(/*BODY_VEL*/7) + 1];
        var vw1 = data1[(/*BODY_VEL*/7) + 2];
        var vx2 = data2[(/*BODY_VEL*/7)];
        var vy2 = data2[(/*BODY_VEL*/7) + 1];
        var vw2 = data2[(/*BODY_VEL*/7) + 2];

        var adata = this._data;
        var nx = adata[(/*ARB_NORMAL*/4)];
        var ny = adata[(/*ARB_NORMAL*/4) + 1];
        var rn1a = adata[(/*ARB_RN1A*/7)];
        var rn1b = adata[(/*ARB_RN1B*/8)];
        var rt1a = adata[(/*ARB_RT1A*/9)];
        var rt1b = adata[(/*ARB_RT1B*/10)];

        var cdata1 = this._contact1._data;
        var rx1 = cdata1[(/*CON_REL1*/7)];
        var ry1 = cdata1[(/*CON_REL1*/7) + 1];
        var rx2 = cdata1[(/*CON_REL2*/9)];
        var ry2 = cdata1[(/*CON_REL2*/9) + 1];

        var surfaceX = (data2[(/*BODY_SURFACE_VEL*/13)]     - data1[(/*BODY_SURFACE_VEL*/13)]);
        var surfaceY = (data2[(/*BODY_SURFACE_VEL*/13) + 1] - data1[(/*BODY_SURFACE_VEL*/13) + 1]);

        // Relative velocity first contact
        var vrx1 = (vx2 - (ry2 * vw2)) - (vx1 - (ry1 * vw1));
        var vry1 = (vy2 + (rx2 * vw2)) - (vy1 + (rx1 * vw1));

        var j, jOld, cjAcc, jx, jy, jMax;

        // First contact friction
        j = (((nx * vry1) - (ny * vrx1)) + surfaceX) * cdata1[(/*CON_TMASS*/6)];
        jMax = (cdata1[(/*CON_FRICTION*/4)] * cdata1[(/*CON_JNACC*/11)]);
        jOld = cdata1[(/*CON_JTACC*/12)];
        cjAcc = (jOld - j);
        if (cjAcc > jMax)
        {
            cjAcc = jMax;
        }
        else if (cjAcc < -jMax)
        {
            cjAcc = -jMax;
        }
        j = (cjAcc - jOld);
        cdata1[(/*CON_JTACC*/12)] = cjAcc;

        jx = (-ny * j);
        jy = (nx * j);
        vx1 -= (jx * im1);
        vy1 -= (jy * im1);
        vw1 -= (rt1a * j * ii1);
        vx2 += (jx * im2);
        vy2 += (jy * im2);
        vw2 += (rt1b * j * ii2);

        if (this._velocity2Contact)
        {
            var cdata2 = this._contact2._data;
            var r2x1 = cdata2[(/*CON_REL1*/7)];
            var r2y1 = cdata2[(/*CON_REL1*/7) + 1];
            var r2x2 = cdata2[(/*CON_REL2*/9)];
            var r2y2 = cdata2[(/*CON_REL2*/9) + 1];

            var Ka = adata[(/*ARB_K*/20)];
            var Kb = adata[(/*ARB_K*/20) + 1];
            var Kc = adata[(/*ARB_K*/20) + 2];
            var idet = adata[(/*ARB_KMASS*/23)];

            var rn2a = adata[(/*ARB_RN2A*/16)];
            var rn2b = adata[(/*ARB_RN2B*/17)];
            var rt2a = adata[(/*ARB_RT2A*/18)];
            var rt2b = adata[(/*ARB_RT2B*/19)];

            // Second contact friction
            var vrx2 = (vx2 - (r2y2 * vw2)) - (vx1 - (r2y1 * vw1));
            var vry2 = (vy2 + (r2x2 * vw2)) - (vy1 + (r2x1 * vw1));

            j = (((nx * vry2) - (ny * vrx2)) + surfaceX) * cdata2[(/*CON_TMASS*/6)];
            jMax = (cdata2[(/*CON_FRICTION*/4)] * cdata2[(/*CON_JNACC*/11)]);
            jOld = cdata2[(/*CON_JTACC*/12)];
            cjAcc = (jOld - j);
            if (cjAcc > jMax)
            {
                cjAcc = jMax;
            }
            else if (cjAcc < -jMax)
            {
                cjAcc = -jMax;
            }
            j = (cjAcc - jOld);
            cdata2[(/*CON_JTACC*/12)] = cjAcc;

            jx = (-ny * j);
            jy = (nx * j);
            vx1 -= (jx * im1);
            vy1 -= (jy * im1);
            vw1 -= (rt2a * j * ii1);
            vx2 += (jx * im2);
            vy2 += (jy * im2);
            vw2 += (rt2b * j * ii2);

            // Normal impulses.
            vrx1 = (vx2 - (ry2 * vw2)) - (vx1 - (ry1 * vw1));
            vry1 = (vy2 + (rx2 * vw2)) - (vy1 + (rx1 * vw1));
            vrx2 = (vx2 - (r2y2 * vw2)) - (vx1 - (r2y1 * vw1));
            vry2 = (vy2 + (r2x2 * vw2)) - (vy1 + (r2x1 * vw1));

            var ax = cdata1[(/*CON_JNACC*/11)];
            var ay = cdata2[(/*CON_JNACC*/11)];

            // Block solver for both normal impulses together.
            var jnx = ((vrx1 * nx) + (vry1 * ny)) + surfaceY + cdata1[(/*CON_BOUNCE*/3)] - ((Ka * ax) + (Kb * ay));
            var jny = ((vrx2 * nx) + (vry2 * ny)) + surfaceY + cdata2[(/*CON_BOUNCE*/3)] - ((Kb * ax) + (Kc * ay));

            var xx = idet * ((Kb * jny) - (Kc * jnx));
            var xy = idet * ((Kb * jnx) - (Ka * jny));

            if (xx >= 0 && xy >= 0)
            {
                jnx = (xx - ax);
                jny = (xy - ay);
                cdata1[(/*CON_JNACC*/11)] = xx;
                cdata2[(/*CON_JNACC*/11)] = xy;
            }
            else
            {
                xx = -(cdata1[(/*CON_NMASS*/5)] * jnx);
                if (xx >= 0 && ((Kb * xx) + jny) >= 0)
                {
                    jnx = (xx - ax);
                    jny = -ay;
                    cdata1[(/*CON_JNACC*/11)] = xx;
                    cdata2[(/*CON_JNACC*/11)] = 0;
                }
                else
                {
                    xy = -(cdata2[(/*CON_NMASS*/5)] * jny);
                    if (xy >= 0 && ((Kb * xy) + jnx) >= 0)
                    {
                        jnx = -ax;
                        jny = (xy - ay);
                        cdata1[(/*CON_JNACC*/11)] = 0;
                        cdata2[(/*CON_JNACC*/11)] = xy;
                    }
                    else if (jnx >= 0 && jny >= 0)
                    {
                        jnx = -ax;
                        jny = -ay;
                        cdata1[(/*CON_JNACC*/11)] = cdata2[(/*CON_JNACC*/11)] = 0;
                    }
                    else
                    {
                        jnx = 0;
                        jny = 0;
                    }
                }
            }

            // Apply impulses
            j = (jnx + jny);
            jx = (nx * j);
            jy = (ny * j);

            vx1 -= (jx * im1);
            vy1 -= (jy * im1);
            vw1 -= ((rn1a * jnx) + (rn2a * jny)) * ii1;
            vx2 += (jx * im2);
            vy2 += (jy * im2);
            vw2 += ((rn1b * jnx) + (rn2b * jny)) * ii2;
        }
        else
        {
            if (this._contact1._hash === (/*HASH_CIRCLE*/0))
            {
                // rolling impulse.
                var dw = (vw2 - vw1);
                j = (dw * adata[(/*ARB_RMASS*/17)]);
                jMax = (adata[(/*ARB_ROLLING_FRIC*/3)] * cdata1[(/*CON_JNACC*/11)]);
                jOld = adata[(/*ARB_JRACC*/16)];
                cjAcc = (jOld - j);
                if (cjAcc > jMax)
                {
                    cjAcc = jMax;
                }
                else if (cjAcc < -jMax)
                {
                    cjAcc = -jMax;
                }
                j = (cjAcc - jOld);
                adata[(/*ARB_JRACC*/16)] = cjAcc;

                vw1 -= (j * ii1);
                vw2 += (j * ii2);
            }

            // normal impulse.
            vrx1 = (vx2 - (ry2 * vw2)) - (vx1 - (ry1 * vw1));
            vry1 = (vy2 + (rx2 * vw2)) - (vy1 + (rx1 * vw1));

            j = (cdata1[(/*CON_BOUNCE*/3)] + surfaceY + ((nx * vrx1) + (ny * vry1))) * cdata1[(/*CON_NMASS*/5)];
            jOld = cdata1[(/*CON_JNACC*/11)];
            cjAcc = (jOld - j);
            if (cjAcc < 0)
            {
                cjAcc = 0;
            }
            j = (cjAcc - jOld);
            cdata1[(/*CON_JNACC*/11)] = cjAcc;

            jx = (nx * j);
            jy = (ny * j);
            vx1 -= (jx * im1);
            vy1 -= (jy * im1);
            vw1 -= (rn1a * j * ii1);
            vx2 += (jx * im2);
            vy2 += (jy * im2);
            vw2 += (rn1b * j * ii2);

        }

        data1[(/*BODY_VEL*/7)]     = vx1;
        data1[(/*BODY_VEL*/7) + 1] = vy1;
        data1[(/*BODY_VEL*/7) + 2] = vw1;
        data2[(/*BODY_VEL*/7)]     = vx2;
        data2[(/*BODY_VEL*/7) + 1] = vy2;
        data2[(/*BODY_VEL*/7) + 2] = vw2;
    },

    // =====================================================================

    _refreshContactData : function _refreshContactDataFn()
    {
        var data1 = this.bodyA._data;
        var data2 = this.bodyB._data;
        var cos1 = data1[(/*BODY_AXIS*/5)];
        var sin1 = data1[(/*BODY_AXIS*/5) + 1];
        var cos2 = data2[(/*BODY_AXIS*/5)];
        var sin2 = data2[(/*BODY_AXIS*/5) + 1];
        var px1 = data1[(/*BODY_POS*/2)];
        var py1 = data1[(/*BODY_POS*/2) + 1];
        var px2 = data2[(/*BODY_POS*/2)];
        var py2 = data2[(/*BODY_POS*/2) + 1];

        var err, nx, ny;
        var adata = this._data;
        var rad = adata[(/*ARB_RADIUS*/14)];
        var cdata1 = this._contact1._data;
        if (this._faceType === (/*FACE_CIRCLE*/0))
        {
            var x = cdata1[(/*CON_LREL1*/13)];
            var y = cdata1[(/*CON_LREL1*/13) + 1];
            var rx1 = ((cos1 * x) - (sin1 * y) + px1);
            var ry1 = ((sin1 * x) + (cos1 * y) + py1);

            x = cdata1[(/*CON_LREL2*/15)];
            y = cdata1[(/*CON_LREL2*/15) + 1];
            var rx2 = ((cos2 * x) - (sin2 * y) + px2);
            var ry2 = ((sin2 * x) + (cos2 * y) + py2);

            var dx = (rx2 - rx1);
            var dy = (ry2 - ry1);
            var dl = Math.sqrt((dx * dx) + (dy * dy));

            nx = adata[(/*ARB_NORMAL*/4)];
            ny = adata[(/*ARB_NORMAL*/4) + 1];
            if (dl < Physics2DConfig.NORMALIZE_EPSILON)
            {
                dx = nx;
                dy = ny;
            }
            else
            {
                var rec = (1 / dl);
                dx *= rec;
                dy *= rec;
            }

            err = (dl - rad);
            if (((dx * nx) + (dy * ny)) < 0)
            {
                err -= rad;
                dx = -dx;
                dy = -dy;
            }

            adata[(/*ARB_NORMAL*/4)]     = dx;
            adata[(/*ARB_NORMAL*/4) + 1] = dy;
            var px, py, r1;
            if (this.shapeA._type === (/*TYPE_CIRCLE*/0))
            {
                r1 = this.shapeA._data[(/*CIRCLE_RADIUS*/6)] + (err * 0.5);
                px = cdata1[(/*CON_POS*/0)]     = (rx1 + (dx * r1));
                py = cdata1[(/*CON_POS*/0) + 1] = (ry1 + (dy * r1));
            }
            else
            {
                r1 = this.shapeB._data[(/*CIRCLE_RADIUS*/6)] + (err * 0.5);
                px = cdata1[(/*CON_POS*/0)]     = (rx2 - (dx * r1));
                py = cdata1[(/*CON_POS*/0) + 1] = (ry2 - (dy * r1));
            }
            cdata1[(/*CON_DIST*/2)] = err;
        }
        else
        {
            var cdata2 = (this._position2Contact ? this._contact2._data : null);
            var proj;
            var cx1, cx2, cy1, cy2;

            var lx = adata[(/*ARB_LNORM*/11)];
            var ly = adata[(/*ARB_LNORM*/11) + 1];
            var rx = cdata1[(/*CON_LREL1*/13)];
            var ry = cdata1[(/*CON_LREL1*/13) + 1];
            if (this._faceType === (/*FACE_1*/1))
            {
                nx = (lx * cos1) - (ly * sin1);
                ny = (lx * sin1) + (ly * cos1);
                proj = adata[(/*ARB_LPROJ*/13)] + ((nx * px1) + (ny * py1));
                cx1 = (px2 + (rx * cos2) - (ry * sin2));
                cy1 = (py2 + (rx * sin2) + (ry * cos2));
                if (cdata2)
                {
                    rx = cdata2[(/*CON_LREL1*/13)];
                    ry = cdata2[(/*CON_LREL1*/13) + 1];
                    cx2 = (px2 + (rx * cos2) - (ry * sin2));
                    cy2 = (py2 + (rx * sin2) + (ry * cos2));
                }
            }
            else
            {
                nx = (lx * cos2) - (ly * sin2);
                ny = (lx * sin2) + (ly * cos2);
                proj = adata[(/*ARB_LPROJ*/13)] + ((nx * px2) + (ny * py2));
                cx1 = (px1 + (rx * cos1) - (ry * sin1));
                cy1 = (py1 + (rx * sin1) + (ry * cos1));
                if (cdata2)
                {
                    rx = cdata2[(/*CON_LREL1*/13)];
                    ry = cdata2[(/*CON_LREL1*/13) + 1];
                    cx2 = (px1 + (rx * cos1) - (ry * sin1));
                    cy2 = (py1 + (rx * sin1) + (ry * cos1));
                }
            }

            var flip = (this._reverse ? -1 : 1);
            adata[(/*ARB_NORMAL*/4)]     = (flip * nx);
            adata[(/*ARB_NORMAL*/4) + 1] = (flip * ny);

            var bias = -proj - rad;

            err = ((cx1 * nx) + (cy1 * ny)) + bias;
            var df = ((err * 0.5) + rad);
            cdata1[(/*CON_POS*/0)]     = (cx1 - (nx * df));
            cdata1[(/*CON_POS*/0) + 1] = (cy1 - (ny * df));
            cdata1[(/*CON_DIST*/2)]    = err;

            if (cdata2)
            {
                err = ((cx2 * nx) + (cy2 * ny)) + bias;
                df = ((err * 0.5) + rad);
                cdata2[(/*CON_POS*/0)]     = (cx2 - (nx * df));
                cdata2[(/*CON_POS*/0) + 1] = (cy2 - (ny * df));
                cdata2[(/*CON_DIST*/2)]    = err;
            }
        }
    },

    _iteratePosition : function _iteratePositionFn()
    {
        this._refreshContactData();

        var b1 = this.bodyA;
        var b2 = this.bodyB;
        var data1 = b1._data;
        var data2 = b2._data;
        var im1 = data1[(/*BODY_IMASS*/0)];
        var ii1 = data1[(/*BODY_IINERTIA*/1)];
        var im2 = data2[(/*BODY_IMASS*/0)];
        var ii2 = data2[(/*BODY_IINERTIA*/1)];
        var px1 = data1[(/*BODY_POS*/2)];
        var py1 = data1[(/*BODY_POS*/2) + 1];
        var px2 = data2[(/*BODY_POS*/2)];
        var py2 = data2[(/*BODY_POS*/2) + 1];

        var px, py, nx, ny, Jx, Jy, jn, dr, Ka, bc;
        var c1r1x, c1r1y, c1r2x, c1r2y, rn1a, rn1b;

        var adata = this._data;
        var cdata1 = this._contact1._data;
        var err1 = cdata1[(/*CON_DIST*/2)] + Physics2DConfig.CONTACT_SLOP;
        if (this._position2Contact)
        {
            var cdata2 = this._contact2._data;
            var err2 = cdata2[(/*CON_DIST*/2)] + Physics2DConfig.CONTACT_SLOP;
            if (err1 < 0 || err2 < 0)
            {
                px = cdata1[(/*CON_POS*/0)];
                py = cdata1[(/*CON_POS*/0) + 1];
                c1r1x = (px - px1);
                c1r1y = (py - py1);
                c1r2x = (px - px2);
                c1r2y = (py - py2);

                px = cdata2[(/*CON_POS*/0)];
                py = cdata2[(/*CON_POS*/0) + 1];
                var c2r1x = (px - px1);
                var c2r1y = (py - py1);
                var c2r2x = (px - px2);
                var c2r2y = (py - py2);

                nx = adata[(/*ARB_NORMAL*/4)];
                ny = adata[(/*ARB_NORMAL*/4) + 1];

                rn1a = (c1r1x * ny) - (c1r1y * nx);
                rn1b = (c1r2x * ny) - (c1r2y * nx);
                var rn2a = (c2r1x * ny) - (c2r1y * nx);
                var rn2b = (c2r2x * ny) - (c2r2y * nx);

                // Non-inverted block effective-mass.
                var massSum = (im1 + im2);
                Ka = massSum + (ii1 * rn1a * rn1a) + (ii2 * rn1b * rn1b);
                var Kb = massSum + (ii1 * rn1a * rn2a) + (ii2 * rn1b * rn2b);
                var Kc = massSum + (ii1 * rn2a * rn2a) + (ii2 * rn2b * rn2b);

                bc = adata[(/*ARB_BIAS*/15)];
                var bx = (err1 * bc);
                var by = (err2 * bc);

                // Block solver.
                var det = ((Ka * Kc) - (Kb * Kb));
                var xx, xy;
                if (det === 0)
                {
                    xx = (Ka === 0) ? 0 : (-bx / Ka);
                    xy = (Kc === 0) ? 0 : (-by / Kc);
                }
                else
                {
                    det = (1 / det);
                    xx = (det * (Kb * by - Kc * bx));
                    xy = (det * (Kb * bx - Ka * by));
                }

                if (xx < 0 || xy < 0)
                {
                    xx = (-bx / Ka);
                    xy = 0;
                    if (xx < 0 || ((Kb * xx) + by) < 0)
                    {
                        xx = 0;
                        xy = (-by / Kc);
                        if (xy < 0 || ((Kb * xy) + bx) < 0)
                        {
                            xx = xy = 0;
                        }
                    }
                }

                // Apply impulses.
                jn = xx + xy;
                Jx = (nx * jn);
                Jy = (ny * jn);

                px1 -= (Jx * im1);
                py1 -= (Jy * im1);
                dr = -((rn1a * xx) + (rn2a * xy)) * ii1;
                if (dr !== 0)
                {
                    b1._deltaRotation(dr);
                }
                px2 += (Jx * im2);
                py2 += (Jy * im2);
                dr = ((rn1b * xx) + (rn2b * xy)) * ii2;
                if (dr !== 0)
                {
                    b2._deltaRotation(dr);
                }
            }
        }
        else
        {
            if (err1 < 0)
            {
                px = cdata1[(/*CON_POS*/0)];
                py = cdata1[(/*CON_POS*/0) + 1];

                c1r1x = (px - px1);
                c1r1y = (py - py1);
                c1r2x = (px - px2);
                c1r2y = (py - py2);

                nx = adata[(/*ARB_NORMAL*/4)];
                ny = adata[(/*ARB_NORMAL*/4) + 1];

                // jac
                rn1a = (c1r1x * ny) - (c1r1y * nx);
                rn1b = (c1r2x * ny) - (c1r2y * nx);

                // eff-mass
                Ka = im2 + (rn1b * rn1b * ii2) + im1 + (rn1a * rn1a * ii1);
                if (Ka !== 0)
                {
                    bc = adata[(/*ARB_BIAS*/15)];
                    jn = -(bc * err1 / Ka);
                    Jx = (nx * jn);
                    Jy = (ny * jn);

                    px1 -= (Jx * im1);
                    py1 -= (Jy * im1);
                    dr = -(rn1a * ii1 * jn);
                    if (dr !== 0)
                    {
                        b1._deltaRotation(dr);
                    }
                    px2 += (Jx * im2);
                    py2 += (Jy * im2);
                    dr = (rn1b * ii2 * jn);
                    if (dr !== 0)
                    {
                        b2._deltaRotation(dr);
                    }
                }
            }
        }

        data1[(/*BODY_POS*/2)]     = px1;
        data1[(/*BODY_POS*/2) + 1] = py1;
        data2[(/*BODY_POS*/2)]     = px2;
        data2[(/*BODY_POS*/2) + 1] = py2;
    },

    // =====================================================================

    _warmStart : function _warmStartFn()
    {
        var data1 = this.bodyA._data;
        var data2 = this.bodyB._data;
        var im1 = data1[(/*BODY_IMASS*/0)];
        var ii1 = data1[(/*BODY_IINERTIA*/1)];
        var im2 = data2[(/*BODY_IMASS*/0)];
        var ii2 = data2[(/*BODY_IINERTIA*/1)];

        var adata = this._data;
        var nx = adata[(/*ARB_NORMAL*/4)];
        var ny = adata[(/*ARB_NORMAL*/4) + 1];

        var cdata = this._contact1._data;
        var jn = cdata[(/*CON_JNACC*/11)];
        var jt = cdata[(/*CON_JTACC*/12)];

        var jx = (nx * jn) - (ny * jt);
        var jy = (ny * jn) + (nx * jt);
        data1[(/*BODY_VEL*/7)]     -= (jx * im1);
        data1[(/*BODY_VEL*/7) + 1] -= (jy * im1);
        data1[(/*BODY_VEL*/7) + 2] -= ((cdata[(/*CON_REL1*/7)] * jy) - (cdata[(/*CON_REL1*/7) + 1] * jx)) * ii1;
        data2[(/*BODY_VEL*/7)]     += (jx * im2);
        data2[(/*BODY_VEL*/7) + 1] += (jy * im2);
        data2[(/*BODY_VEL*/7) + 2] += ((cdata[(/*CON_REL2*/9)] * jy) - (cdata[(/*CON_REL2*/9) + 1] * jx)) * ii2;

        if (this._velocity2Contact)
        {
            cdata = this._contact2._data;
            jn = cdata[(/*CON_JNACC*/11)];
            jt = cdata[(/*CON_JTACC*/12)];

            jx = (nx * jn) - (ny * jt);
            jy = (ny * jn) + (nx * jt);
            data1[(/*BODY_VEL*/7)]     -= (jx * im1);
            data1[(/*BODY_VEL*/7) + 1] -= (jy * im1);
            data1[(/*BODY_VEL*/7) + 2] -= ((cdata[(/*CON_REL1*/7)] * jy) - (cdata[(/*CON_REL1*/7) + 1] * jx)) * ii1;
            data2[(/*BODY_VEL*/7)]     += (jx * im2);
            data2[(/*BODY_VEL*/7) + 1] += (jy * im2);
            data2[(/*BODY_VEL*/7) + 2] += ((cdata[(/*CON_REL2*/9)] * jy) - (cdata[(/*CON_REL2*/9) + 1] * jx)) * ii2;
        }
        else if (this._contact1._hash === (/*HASH_CIRCLE*/0))
        {
            jn = adata[(/*ARB_JRACC*/16)];

            data1[(/*BODY_VEL*/7) + 2] -= (jn * ii1);
            data2[(/*BODY_VEL*/7) + 2] += (jn * ii2);
        }
    },

    getImpulseForBody : function getImpulseForBodyFn(body, dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(3);
        }

        var adata = this._data;
        var nx = adata[(/*ARB_NORMAL*/4)];
        var ny = adata[(/*ARB_NORMAL*/4) + 1];

        var cdata = this._contact1._data;
        var jn = cdata[(/*CON_JNACC*/11)];
        var jt = cdata[(/*CON_JTACC*/12)];

        var jx = (nx * jn) - (ny * jt);
        var jy = (ny * jn) + (nx * jt);

        var sumX = 0;
        var sumY = 0;
        var sumW = 0;
        if (body === this.bodyA)
        {
            sumX -= jx;
            sumY -= jy;
            sumW -= ((cdata[(/*CON_REL1*/7)] * jy) - (cdata[(/*CON_REL1*/7) + 1] * jx));
        }
        else if (body === this.bodyB)
        {
            sumX += jx;
            sumY += jy;
            sumW += ((cdata[(/*CON_REL2*/9)] * jy) - (cdata[(/*CON_REL2*/9) + 1] * jx));
        }

        if (this._velocity2Contact)
        {
            cdata = this._contact2._data;
            jn = cdata[(/*CON_JNACC*/11)];
            jt = cdata[(/*CON_JTACC*/12)];

            jx = (nx * jn) - (ny * jt);
            jy = (ny * jn) + (nx * jt);
            if (body === this.bodyA)
            {
                sumX -= jx;
                sumY -= jy;
                sumW -= ((cdata[(/*CON_REL1*/7)] * jy) - (cdata[(/*CON_REL1*/7) + 1] * jx));
            }
            else if (body === this.bodyB)
            {
                sumX += jx;
                sumY += jy;
                sumW += ((cdata[(/*CON_REL2*/9)] * jy) - (cdata[(/*CON_REL2*/9) + 1] * jx));
            }
        }
        else if (this._contact1._hash === (/*HASH_CIRCLE*/0))
        {
            jn = adata[(/*ARB_JRACC*/16)];
            sumW += (body === this.bodyA ? -1 : (body === this.bodyB ? 1 : 0)) * jn;
        }

        dst[0] = sumX;
        dst[1] = sumY;
        dst[2] = sumW;
        return dst;
    }
};


Physics2DArbiter.pool = null;
Physics2DArbiter.allocate = function allocateArbiterFn()
{
    if (!this.pool)
    {
        return new Physics2DArbiter();
    }
    else
    {
        var arb = this.pool;
        this.pool = arb._next;
        arb._next = null;
        return arb;
    }
};

Physics2DArbiter.deallocate = function deallocateArbiterFn(arb)
{
    arb._next = this.pool;
    this.pool = arb;

    arb._userdef = 0;
};

// =========================================================================

//
// Physics2D World
//
function Physics2DWorld() {}
Physics2DWorld.prototype = {

    version : 1,

    getGravity : function getGravityFn(dst)
    {
        if (dst === undefined)
        {
            dst = new Physics2DDevice.prototype.floatArray(2);
        }

        dst[0] = this._gravityX;
        dst[1] = this._gravityY;
        return dst;
    },

    setGravity : function setGravityFn(gravity)
    {
        var newX = gravity[0];
        var newY = gravity[1];
        if (newX !== this._gravityX || newY !== this._gravityY)
        {
            this._gravityX = newX;
            this._gravityY = newY;

            var bodies = this.rigidBodies;
            var limit = bodies.length;
            var i;
            for (i = 0; i < limit; i += 1)
            {
                this._wakeBody(bodies[i]);
            }
        }
    },

    // =====================================================================

    _addShape : function _addShapeFn(shape)
    {
        var body = shape.body;
        body._update();

        var isStaticHandle = ((body._type === (/*TYPE_STATIC*/2)) || body.sleeping);
        shape._bphaseHandle = this.broadphase.insert(shape, shape._data, isStaticHandle);
    },

    // precon: body was woken before calling this method.
    //         therefore all arbiters are in the world as
    //         non-sleeping.
    _removeShape : function _removeShapeFn(shape, noCallbacks)
    {
        var body = shape.body;
        this.broadphase.remove(shape._bphaseHandle);
        shape._bphaseHandle = null;

        var arbiters = shape.arbiters;
        while (arbiters.length !== 0)
        {
            var arb = arbiters.pop();
            if (arb._retired)
            {
                continue;
            }

            if (arb.bodyA !== body && arb.bodyA._type === (/*TYPE_DYNAMIC*/0))
            {
                this._wakeBody(arb.bodyA);
            }
            if (arb.bodyB !== body && arb.bodyB._type === (/*TYPE_DYNAMIC*/0))
            {
                this._wakeBody(arb.bodyB);
            }

            arb._lazyRetire(shape);
            if (!noCallbacks)
            {
                this._pushInteractionEvents((/*EVENT_END*/3), arb);
            }
        }
    },

    // Call on constraint when:
    //  A)  active (outside world), and then added to world
    //  B)  in world (inactive), and then enabled
    _enabledConstraint : function _enabledConstraintFn(constraint)
    {
        // prepare constraint for disjoint set forest.
        constraint._islandRoot = constraint;
        constraint._islandRank = 0;

        if (!constraint.sleeping)
        {
            constraint.sleeping = true; // force wake.
            this._wakeConstraint(constraint, true);
        }
    },

    // Call on constraint when:
    //  A)  active (in world), and then removed from world
    //  B)  in world (active), and then disabled.
    _disabledConstraint : function _disabledConstraintFn(constraint)
    {
        this._wakeConstraint(constraint);

        var constraints = this.liveConstraints;
        var index = constraints.indexOf(constraint);
        constraints[index] = constraints[constraints.length - 1];
        constraints.pop();
    },

    addConstraint : function addConstraintFn(constraint)
    {
        if (constraint.world)
        {
            return false;
        }

        constraint.world = this;
        this.constraints.push(constraint);

        constraint._inWorld();

        if (constraint._active)
        {
            this._enabledConstraint(constraint);
        }

        return true;
    },

    removeConstraint : function removeConstraintFn(constraint)
    {
        if (constraint.world !== this)
        {
            return false;
        }

        var constraints = this.constraints;
        var index = constraints.indexOf(constraint);
        constraints[index] = constraints[constraints.length - 1];
        constraints.pop();

        if (constraint._active)
        {
            this._disabledConstraint(constraint);
        }

        constraint.world = null;
        constraint._outWorld();

        return true;
    },

    addRigidBody : function addRigidBodyFn(body)
    {
        if (body.world)
        {
            return false;
        }

        body.world = this;
        this.rigidBodies.push(body);

        body._update();

        var i;
        var shapes = body.shapes;
        var limit = shapes.length;
        for (i = 0; i < limit; i += 1)
        {
            this._addShape(shapes[i]);
        }

        if (body._type === (/*TYPE_STATIC*/2))
        {
            body.sleeping = true;
            return true;
        }

        // prepare body for disjoint set forest.
        body._islandRoot = body;
        body._islandRank = 0;

        if (!body.sleeping)
        {
            body.sleeping = true; //force wake.
            this._wakeBody(body, true);
        }

        return true;
    },

    removeRigidBody : function removeRigidBodyFn(body, noCallbacks)
    {
        if (body.world !== this)
        {
            return false;
        }

        this._wakeBody(body);

        body.world = null;
        var rigidBodies = this.rigidBodies;
        var index = rigidBodies.indexOf(body);
        rigidBodies[index] = rigidBodies[rigidBodies.length - 1];
        rigidBodies.pop();

        if (!body.sleeping && (body._type !== (/*TYPE_STATIC*/2)))
        {
            if (body._type === (/*TYPE_DYNAMIC*/0))
            {
                rigidBodies = this.liveDynamics;
            }
            else
            {
                rigidBodies = this.liveKinematics;
            }

            index = rigidBodies.indexOf(body);
            rigidBodies[index] = rigidBodies[rigidBodies.length - 1];
            rigidBodies.pop();
        }

        var i;
        var shapes = body.shapes;
        var limit = shapes.length;
        for (i = 0; i < limit; i += 1)
        {
            this._removeShape(shapes[i], noCallbacks);
        }

        // Remove constraints!
        var constraints = body.constraints;
        while (constraints.length > 0)
        {
            this.removeConstraint(constraints[0]);
        }

        return true;
    },

    // =====================================================================

    clear : function clearFn()
    {
        // Clean up rigidBodies, liveDynamics, liveKinematics
        var bodies = this.rigidBodies;
        var limit = bodies.length;
        while (limit > 0)
        {
            limit -= 1;
            this.removeRigidBody(bodies[limit], true);
        }

        // Clean up constraints, liveConstraints
        var constraints = this.constraints;
        limit = constraints.length;
        while (limit > 0)
        {
            limit -= 1;
            this.removeConstraint(constraints[limit]);
        }

        // Clean up dynamicArbiters, staticArbiters
        this._clearArbiters(this.staticArbiters);
        this._clearArbiters(this.dynamicArbiters);

        // Clean up any deferred callbacks generated
        // outside of world::step()
        // (Waking a constraint/body indirectly)
        // (Removing a shape)
        var callbacks = this._callbacks;
        limit = callbacks.length;
        while (limit > 0)
        {
            limit -= 1;
            Physics2DCallback.deallocate(callbacks.pop());
        }

        // _island, _toiEvents already empty
        // broadphase already clear by removal of shapes.
    },

    _clearArbiters : function _clearArbitersFn(arbiters)
    {
        var limit = arbiters.length;
        while (limit > 0)
        {
            var arb = arbiters.pop();
            limit -= 1;

            arb._retire();
            Physics2DArbiter.deallocate(arb);
        }
    },

    // =====================================================================

    shapePointQuery : function shapePointQueryFn(point, store)
    {
        return this._pointQuery(this._shapePointCallback, point, store);
    },

    bodyPointQuery : function bodyPointQueryFn(point, store)
    {
        return this._pointQuery(this._bodyPointCallback, point, store);
    },

    _pointQuery : function _pointQueryFn(callback, point, store)
    {
        var rect = this._sampleRectangle;
        rect[0] = rect[2] = point[0];
        rect[1] = rect[3] = point[1];

        callback.store = store;
        callback.count = 0;
        this.broadphase.sample(rect, callback.sample, callback);
        return callback.count;
    },

    // -------------------------------------

    shapeCircleQuery : function shapeCircleQueryFn(center, radius, store)
    {
        return this._circleQuery(this._shapeCircleCallback, center, radius, store);
    },

    bodyCircleQuery : function bodyCircleQueryFn(center, radius, store)
    {
        return this._circleQuery(this._bodyCircleCallback, center, radius, store);
    },

    _circleQuery : function _circleQueryFn(callback, center, radius, store)
    {
        var circle = this._circleQueryShape;
        circle.setRadius(radius);

        var posX = center[0];
        var posY = center[1];
        circle._update(posX, posY, 1, 0);

        var rect = this._sampleRectangle;
        rect[0] = (posX - radius);
        rect[1] = (posY - radius);
        rect[2] = (posX + radius);
        rect[3] = (posY + radius);

        callback.store = store;
        callback.count = 0;
        this.broadphase.sample(rect, callback.sample, callback);
        return callback.count;
    },

    // -------------------------------------

    shapeRectangleQuery : function shapeRectangleQueryFn(point, store)
    {
        return this._rectangleQuery(this._shapeRectangleCallback, point, store);
    },

    bodyRectangleQuery : function bodyRectangleQueryFn(point, store)
    {
        return this._rectangleQuery(this._bodyRectangleCallback, point, store);
    },

    _rectangleQuery : function _rectangleQueryFn(callback, aabb, store)
    {
        var vertices = this._rectangleQueryVertices;

        var x1 = aabb[0];
        var y1 = aabb[1];
        var x2 = aabb[2];
        var y2 = aabb[3];
        vertices[0][0] = vertices[3][0] = (x1 < x2 ? x1 : x2);
        vertices[0][1] = vertices[1][1] = (y1 < y2 ? y1 : y2);
        vertices[1][0] = vertices[2][0] = (x1 < x2 ? x2 : x1);
        vertices[2][1] = vertices[3][1] = (y1 < y2 ? y2 : y1);

        var poly = this._rectangleQueryShape;
        poly.setVertices(vertices);
        poly._update(0, 0, 1, 0);

        callback.store = store;
        callback.count = 0;
        this.broadphase.sample(aabb, callback.sample, callback);
        return callback.count;
    },

    // =====================================================================

    rayCast : function rayCastFn(ray, noInnerSurfaces, customCallback, thisObject)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var maxFactor = ray.maxFactor;
        var x1 = origin[0];
        var y1 = origin[1];
        var x2 = x1 + (direction[0] * maxFactor);
        var y2 = y1 + (direction[1] * maxFactor);

        var rect = this._sampleRectangle;
        rect[0] = (x1 < x2 ? x1 : x2);
        rect[1] = (y1 < y2 ? y1 : y2);
        rect[2] = (x1 < x2 ? x2 : x1);
        rect[3] = (y1 < y2 ? y2 : y1);

        var callback = this._rayCast;
        callback.ray = ray;
        callback.noInner = (noInnerSurfaces || false);
        callback.minFactor = ray.maxFactor;
        callback.userCallback = customCallback;
        callback.userThis = thisObject;
        this.broadphase.sample(rect, callback.sample, callback);

        if (callback.minShape)
        {
            var data = callback.minNormal;
            var hitNormal = new Physics2DDevice.prototype.floatArray(2);
            var hitPoint = new Physics2DDevice.prototype.floatArray(2);
            hitNormal[0] = data[0];
            hitNormal[1] = data[1];
            hitPoint[0] = (x1 + (direction[0] * callback.minFactor));
            hitPoint[1] = (y1 + (direction[1] * callback.minFactor));
            return {
                shape     : callback.minShape,
                hitNormal : hitNormal,
                hitPoint  : hitPoint,
                factor    : callback.minFactor
            };
        }
        else
        {
            return null;
        }
    },

    convexCast : function convexCastFn(shape, deltaTime, customCallback, thisObject)
    {
        var body = shape.body;
        var bdata = body._data;
        var preX = bdata[(/*BODY_POS*/2)];
        var preY = bdata[(/*BODY_POS*/2) + 1];
        body._sweepIntegrate(deltaTime);
        var curX = bdata[(/*BODY_POS*/2)];
        var curY = bdata[(/*BODY_POS*/2) + 1];

        var rect = this._sampleRectangle;
        var radius = shape._data[(/*SHAPE_SWEEP_RADIUS*/4)];
        rect[0] = ((preX < curX ? preX : curX) - radius);
        rect[1] = ((preY < curY ? preY : curY) - radius);
        rect[2] = ((preX < curX ? curX : preX) + radius);
        rect[3] = ((preY < curY ? curY : preY) + radius);

        body[(/*BODY_SWEEP_ANGVEL*/20)] = body[(/*BODY_VEL*/7) + 2];

        var callback = this._convexCast;
        callback.deltaTime = deltaTime;
        callback.minTOIAlpha = 1;
        callback.minShape = null;
        callback.toi.shapeA = shape;
        callback.userCallback = customCallback;
        callback.userThis = thisObject;
        this.broadphase.sample(rect, callback.sample, callback);

        // reset sweep body and shape.
        body._sweepIntegrate(0);
        shape._update(preX, preY, bdata[(/*BODY_AXIS*/5)], bdata[(/*BODY_AXIS*/5) + 1], true);

        if (callback.minShape)
        {
            var data = callback.minData;
            var hitNormal = new Physics2DDevice.prototype.floatArray(2);
            var hitPoint  = new Physics2DDevice.prototype.floatArray(2);
            hitNormal[0] = -data[0];
            hitNormal[1] = -data[1];
            hitPoint[0] = data[2];
            hitPoint[1] = data[3];
            return {
                shape     : callback.minShape,
                hitNormal : hitNormal,
                hitPoint  : hitPoint,
                factor    : (callback.minTOIAlpha * deltaTime)
            };
        }
        else
        {
            return null;
        }
    },

    // =====================================================================

    step : function stepFn(deltaTime)
    {
        this._midStep = true;
        this._eventTime = (/*EVENT_TIME_STANDARD*/0);
        this.timeStamp += 1;
        this._deltaTime = deltaTime;
        this.simulatedTime += deltaTime;

        // Update objects for current position/rotation
        // As well as preparing delayed WAKE callbacks.
        this._validate();

        // Perform discrete collision detection
        this._discreteCollisions();

        // Perform sleeping
        this._sleepComputations(deltaTime);

        // Pre-step arbiters
        this._preStep(deltaTime);

        // Sort arbiters
        this._sortArbiters();

        // Integrate velocities
        this._integrateVelocity(deltaTime);

        // Warm start arbiters
        this._warmStart();

        // Velocity iterators.
        this._iterateVelocity(this.velocityIterations);

        // Integrate positions and prepare for continuous collision detection.
        this._integratePosition(deltaTime);

        // Perform continous collision detection
        this._eventTime = (/*EVENT_TIME_CONTINUOUS*/1);
        this._continuousCollisions(deltaTime);

        // Sort arbiters (continuous may have inserted more).
        this._sortArbiters();

        // Positional iterationrs
        this._iteratePosition(this.positionIterations);

        // Finalize bodies, invalidating if necessary
        // Put kinematics that have not moved to sleep
        // Finalize contact positions, generate interaction callbacks.
        this._finalize();

        // Issue callbacks
        this._midStep = false;
        this._eventTime = (/*EVENT_TIME_PRE*/-1);
        this._doCallbacks();
    },

    // =========================================================================
    // =========================================================================

    _discreteCollisions : function _discreteCollisionsFn()
    {
        this.broadphase.perform(this._discreteNarrowPhase, this);
        this._doDeferredWake(false);
    },

    _doDeferredWake : function _deferredWakeFn(continuous)
    {
        // Waking of bodies by collision must be deferred,
        // Broadphase must not be modified during 'perform' call.
        var wakes = this._deferredWake;
        var limit = wakes.length;
        while (limit > 0)
        {
            var body = wakes.pop();
            body._deferred = false;

            // In the case of waking bodies after continuous collisions.
            // We must prestep the arbiters both for correct physics
            // and for callbacks to be properly generated (progress on sleeping arbiters).
            //
            // This is given by the continuous argument.
            this._wakeBody(body, false, continuous);
            limit -= 1;
        }
    },

    _collisionType : function _collisionTypeFn(s1, s2, b1, b2)
    {
        if (b1 === b2)
        {
            return undefined;
        }

        var constraints = ((b1.constraints.length < b2.constraints.length) ? b1.constraints : b2.constraints);
        var limit = constraints.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var con = constraints[i];
            if (con._active && con._ignoreInteractions && con._pairExists(b1, b2))
            {
                return undefined;
            }
        }

        /*jshint bitwise: false*/
        if ((s1._group & s2._mask) === 0 ||
            (s2._group & s1._mask) === 0)
        /*jshint bitwise: true*/
        {
            return undefined;
        }

        var collisionType = !(s1.sensor || s2.sensor);
        // Interaction between two static/kinematics cannot be
        // a collision type.
        if (b1._type !== (/*TYPE_DYNAMIC*/0) && b2._type !== (/*TYPE_DYNAMIC*/0) && collisionType)
        {
            return undefined;
        }

        return collisionType;
    },

    _discreteNarrowPhase : function _discreteNarrowPhase(handleA, handleB, continuous)
    {
        var s1 = handleA.data;
        var s2 = handleB.data;

        var b1 = s1.body;
        var b2 = s2.body;

        var ctype = this._collisionType(s1, s2, b1, b2);
        if (ctype === undefined)
        {
            // No interaction wanted.
            return null;
        }

        var staticType = (b1._type !== (/*TYPE_DYNAMIC*/0) || b2._type !== (/*TYPE_DYNAMIC*/0));
        // Order shapes by id for consistent Arbiter lookup without two-way check.
        var sa, sb;
        if (s1.id < s2.id)
        {
            sa = s1;
            sb = s2;
        }
        else
        {
            sa = s2;
            sb = s1;
        }

        // Search for existing Arbiter using smallest of shapes' arbiters lists.
        var arbiters = (sa.arbiters.length < sb.arbiters.length ? sa : sb).arbiters;
        var limit = arbiters.length;
        var i;
        var arb;
        for (i = 0; i < limit; i += 1)
        {
            var sarb = arbiters[i];
            if (sarb.shapeA === sa && sarb.shapeB === sb)
            {
                arb = sarb;
                break;
            }
        }

        var first = (!arb);
        if (first)
        {
            arb = Physics2DArbiter.allocate();
        }

        // Ensure we do not check collisions again in the same time step
        // Unless we are performing continuous collisions.
        if (first || arb._timeStamp !== this.timeStamp || continuous)
        {
            arb._timeStamp = this.timeStamp;
            if ((ctype && this._collisions._collide(sa, sb, arb)) ||
                (!ctype && this._collisions._test(sa, sb)))
            {
                if (first)
                {
                    arb.sensor = (!ctype);
                    arb._assign(sa, sb);
                    arb._static = staticType;
                    if (staticType)
                    {
                        this.staticArbiters.push(arb);
                    }
                    else
                    {
                        this.dynamicArbiters.push(arb);
                    }
                }

                // Expressions check the two cases where an arbiter is re-used
                // without a retirement inbetween, and which correspond to a
                // 'fresh' collision.
                if (first ||
                    (arb._endGenerated === this.timeStamp && continuous) ||
                    (arb._updateStamp < (this.timeStamp - 1)))
                {
                    arb._createContinuous = continuous;
                    arb._createStamp = this.timeStamp;

                    // Sensor type interaction takes no presolve events.
                    // so we immediately set state to ACCEPT|ALWAYS
                    /*jshint bitwise: false*/
                    arb._state = (ctype ? 0 : ((/*STATE_ACCEPT*/1) | (/*STATE_ALWAYS*/2)));
                    /*jshint bitwise: true*/
                }

                arb._updateStamp = this.timeStamp;

                var anyIndeterminate = false;
                // Check pre solve events in collision interactino type case.
                /*jshint bitwise: false*/
                if (ctype && (arb._state & (/*STATE_ALWAYS*/2)) === 0)
                /*jshint bitwise: true*/
                {
                    // Reset to default of ACCEPT, but not ALWAYS
                    // so that if no events are yet added, and one is then added
                    // it will be called.
                    arb._state = (/*STATE_ACCEPT*/1);
                    arb._midStep = true;

                    var events = sa._onPreSolve;
                    limit = events.length;
                    var eventObject;
                    for (i = 0; i < limit; i += 1)
                    {
                        eventObject = events[i];
                        eventObject.callback.call(eventObject.thisObject, arb, sb);
                        if (!eventObject.deterministic)
                        {
                            anyIndeterminate = true;
                        }
                    }

                    events = sb._onPreSolve;
                    limit = events.length;
                    for (i = 0; i < limit; i += 1)
                    {
                        eventObject = events[i];
                        eventObject.callback.call(eventObject.thisObject, arb, sa);
                        if (!eventObject.deterministic)
                        {
                            anyIndeterminate = true;
                        }
                    }

                    arb._midStep = false;
                    arb._indeterminate = anyIndeterminate;
                    // Imdeterministic, arbiter state must prevent objects
                    // from being put to sleep!
                    /*jshint bitwise: false*/
                    if (anyIndeterminate && (arb._state & (/*STATE_ALWAYS*/2)) === 0)
                    /*jshint bitwise: true*/
                    {
                        // we do not check they are sleeping before waking
                        // so that they may never sleep (wake time will be updated).
                        // Otherwise they could sleep if both were to be put to sleep at same
                        // time, or if it is a dynamic-static pair etc.
                        if (b1._type === (/*TYPE_DYNAMIC*/0) && !b1._deferred)
                        {
                            b1._deferred = true;
                            this._deferredWake.push(b1);
                        }
                        if (b2._type === (/*TYPE_DYNAMIC*/0) && !b1._deferred)
                        {
                            b2._deferred = true;
                            this._deferredWake.push(b2);
                        }
                    }
                }

                /*jshint bitwise: false*/
                if (ctype && (arb._state & (/*STATE_ACCEPT*/1) !== 0))
                /*jshint bitwise: true*/
                {
                    if (b1._type === (/*TYPE_DYNAMIC*/0) && b1.sleeping && !b1._deferred)
                    {
                        b1._deferred = true;
                        this._deferredWake.push(b1);
                    }
                    if (b2._type === (/*TYPE_DYNAMIC*/0) && b2.sleeping && !b2._deferred)
                    {
                        b2._deferred = true;
                        this._deferredWake.push(b2);
                    }
                }

                if (arb.sleeping)
                {
                    this._wakeArbiter(arb);
                }
            }
            else if (first)
            {
                Physics2DArbiter.deallocate(arb);
                arb = null;
            }
        }

        return arb;
    },

    // =====================================================================

    _continuousCollisions : function _continuousCollisionsFn(deltaTime)
    {
        this.broadphase.perform(this._continuousNarrowPhase, this);

        var curTimeAlpha = 0.0;
        var toiEvents = this._toiEvents;
        var limit = toiEvents.length;
        var toi, i;
        while (curTimeAlpha < 1.0 && limit !== 0)
        {
            var minTOIAlpha = Number.POSITIVE_INFINITY;
            var minKinematic = false;
            var min = -1;

            var b1, b2;
            for (i = 0; i < limit;)
            {
                toi = toiEvents[i];
                b1 = toi.shapeA.body;
                b2 = toi.shapeB.body;

                // TOI invalid.
                if (b1._sweepFrozen && b2._sweepFrozen)
                {
                    limit -= 1;
                    toiEvents[i] = toiEvents[limit];
                    toiEvents.pop();
                    Physics2DTOIEvent.deallocate(toi);
                    continue;
                }

                // TOI invalidated.
                if (toi.frozenA !== b1._sweepFrozen ||
                    toi.frozenB !== b2._sweepFrozen)
                {
                    // Recompute TOI
                    toi.frozenA = b1._sweepFrozen;
                    toi.frozenB = b2._sweepFrozen;

                    // Check if order of objects in event need swapped
                    // (_staticSweep restrictions on order)
                    if (toi.frozenA)
                    {
                        var tmp = toi.shapeA;
                        toi.shapeA = toi.shapeB;
                        toi.shapeB = tmp;
                        toi.frozenA = false;
                        toi.frozenB = true;
                    }

                    this._collisions._staticSweep(toi, deltaTime, Physics2DConfig.SWEEP_SLOP);
                    if (toi._data[(/*TOI_TOI_ALPHA*/6)] < 0)
                    {
                        limit -= 1;
                        toiEvents[i] = toiEvents[limit];
                        toiEvents.pop();
                        Physics2DTOIEvent.deallocate(toi);
                        continue;
                    }
                }

                var curTOIAlpha = toi._data[(/*TOI_TOI_ALPHA*/6)];
                if (curTOIAlpha >= 0 && (curTOIAlpha < minTOIAlpha || (!minKinematic && toi.kinematic)))
                {
                    minTOIAlpha = curTOIAlpha;
                    minKinematic = toi.kinematic;
                    min = i;
                }

                i += 1;
            }

            if (min === -1)
            {
                break;
            }

            // Remove TOI event from list
            toi = toiEvents[min];
            limit -= 1;
            toiEvents[min] = toiEvents[limit];
            toiEvents.pop();

            // Advance time alpha
            curTimeAlpha = minTOIAlpha;

            var s1 = toi.shapeA;
            var s2 = toi.shapeB;
            b1 = s1.body;
            b2 = s2.body;
            var data1 = b1._data;
            var data2 = b2._data;

            // Update body (and collided shapes) to TOI.
            if (!b1._sweepFrozen || toi.kinematic)
            {
                b1._sweepIntegrate(curTimeAlpha * deltaTime);
                s1._update(data1[(/*BODY_POS*/2)],  data1[(/*BODY_POS*/2) + 1],
                           data1[(/*BODY_AXIS*/5)], data1[(/*BODY_AXIS*/5) + 1], true);
            }
            if (!b2._sweepFrozen || toi.kinematic)
            {
                b2._sweepIntegrate(curTimeAlpha * deltaTime);
                s2._update(data2[(/*BODY_POS*/2)],  data2[(/*BODY_POS*/2) + 1],
                           data2[(/*BODY_AXIS*/5)], data2[(/*BODY_AXIS*/5) + 1], true);
            }

            var arb = this._discreteNarrowPhase(s1._bphaseHandle, s2._bphaseHandle, true);
            if (arb)
            {
                // Discrete collision detected, pre-step for position iterations
                // (For sensors, issue begin callbacks if appropriate)
                this._continuousArbiterPrepare(arb, deltaTime);
            }

            /*jshint bitwise: false*/
            if (arb && !arb.sensor && (arb._state & (/*STATE_ACCEPT*/1)) !== 0)
            /*jshint bitwise: true*/
            {
                // Freeze objects
                if (!b1._sweepFrozen && b1._type === (/*TYPE_DYNAMIC*/0))
                {
                    b1._sweepFrozen = true;
                    if (toi.failed)
                    {
                        data1[(/*BODY_SWEEP_ANGVEL*/20)] = 0;
                    }
                    else if (toi.slipped)
                    {
                        data1[(/*BODY_SWEEP_ANGVEL*/20)] *= Physics2DConfig.TOI_SLIP_SCALE;
                    }
                    data1[(/*BODY_VEL*/7) + 2] = data1[(/*BODY_SWEEP_ANGVEL*/20)];
                }
                if (!b2._sweepFrozen && b2._type === (/*TYPE_DYNAMIC*/0))
                {
                    b2._sweepFrozen = true;
                    if (toi.failed)
                    {
                        data2[(/*BODY_SWEEP_ANGVEL*/20)] = 0;
                    }
                    else if (toi.slipped)
                    {
                        data2[(/*BODY_SWEEP_ANGVEL*/20)] *= Physics2DConfig.TOI_SLIP_SCALE;
                    }
                    data2[(/*BODY_VEL*/7) + 2] = data2[(/*BODY_SWEEP_ANGVEL*/20)];
                }
            }

            Physics2DTOIEvent.deallocate(toi);
        }

        while (limit > 0)
        {
            toi = toiEvents.pop();
            Physics2DTOIEvent.deallocate(toi);
            limit -= 1;
        }

        // Advance remaining, unfrozen objects to end of time step.
        var bodies = this.liveDynamics;
        limit = bodies.length;
        for (i = 0; i < limit; i += 1)
        {
            var body = bodies[i];
            if (!body._sweepFrozen)
            {
                body._sweepIntegrate(deltaTime);
            }
        }

        // Advance all kinematics to end of time step.
        bodies = this.liveKinematics;
        limit = bodies.length;
        for (i = 0; i < limit; i += 1)
        {
            bodies[i]._sweepIntegrate(deltaTime);
        }

        // We do not need to do any more work with sleeping arbiters
        // here like pre-stepping before position iterations
        //
        // Arbiters were sleeping -> objects were sleeping -> data
        // is the same.
        this._doDeferredWake(true);
    },

    _continuousNarrowPhase : function _continuousNarrowPhase(handleA, handleB)
    {
        var s1 = handleA.data;
        var s2 = handleB.data;
        var b1 = s1.body;
        var b2 = s2.body;
        if (b1._sweepFrozen && b2._sweepFrozen)
        {
            return;
        }

        var staticType = (b1._type !== (/*TYPE_DYNAMIC*/0) || b2._type !== (/*TYPE_DYNAMIC*/0));
        if (staticType || (b1._bullet || b2._bullet))
        {
            var toi = Physics2DTOIEvent.allocate();
            var kin = (b1._type === (/*TYPE_KINEMATIC*/1) || b2._type === (/*TYPE_KINEMATIC*/1));
            if (staticType && !kin)
            {
                if (b1._type !== (/*TYPE_DYNAMIC*/0))
                {
                    toi.shapeB = s1;
                    toi.shapeA = s2;
                }
                else
                {
                    toi.shapeA = s1;
                    toi.shapeB = s2;
                }
                this._collisions._staticSweep(toi, this._deltaTime, Physics2DConfig.SWEEP_SLOP);
            }
            else
            {
                toi.shapeA = s1;
                toi.shapeB = s2;
                this._collisions._dynamicSweep(toi, this._deltaTime, Physics2DConfig.SWEEP_SLOP);
            }

            // Permit dynamic-dynamic events that represent missed collisions
            // to persist as freezing of one of the two objects may cause
            // event to change and we miss too many dynamic-dynamic collisions
            // by not allowing the event to persist.
            if ((staticType && toi._data[(/*TOI_TOI_ALPHA*/6)] < 0) || toi.failed)
            {
                Physics2DTOIEvent.deallocate(toi);
            }
            else
            {
                this._toiEvents.push(toi);
                toi.frozenA = toi.shapeA.body._sweepFrozen;
                toi.frozenB = toi.shapeB.body._sweepFrozen;
                toi.staticType = staticType;
                toi.kinematic = kin;
            }
        }
    },

    // =====================================================================

    __union : function __unionFn(x, y)
    {
        var stack, next;
        // x = __find(x)
        while (x !== x._islandRoot)
        {
            next = x._islandRoot;
            x._islandRoot = stack;
            stack = x;
            x = next;
        }
        while (stack)
        {
            next = stack._islandRoot;
            stack._islandRoot = x;
            stack = next;
        }

        // y = __find(y)
        while (y !== y._islandRoot)
        {
            next = y._islandRoot;
            y._islandRoot = stack;
            stack = y;
            y = next;
        }
        while (stack)
        {
            next = stack._islandRoot;
            stack._islandRoot = y;
            stack = next;
        }

        if (x !== y)
        {
            if (x._islandRank < y._islandRank)
            {
                x._islandRoot = y;
            }
            else if (y._islandRank < x._islandRank)
            {
                y._islandRoot = x;
            }
            else
            {
                y._islandRoot = x;
                x._islandRank += 1;
            }
        }
    },

    __find : function __findFn(x)
    {
        if (x === x._islandRoot)
        {
            return x;
        }

        var stack = null;
        var next;
        while (x !== x._islandRoot)
        {
            next = x._islandRoot;
            x._islandRoot = stack;
            stack = x;
            x = next;
        }
        while (stack)
        {
            next = stack._islandRoot;
            stack._islandRoot = x;
            stack = next;
        }
        return x;
    },

    // =====================================================================

    _sleepComputations : function _sleepComputationsFn(deltaTime)
    {
        // Build disjoint set forest.
        //
        // arb.active not yet computed, so base it on currently available info.
        var arbiters = this.dynamicArbiters;
        var arb;
        var limit = arbiters.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            arb = arbiters[i];
            /*jshint bitwise: false*/
            if (!arb.sensor && !arb._retired &&
                arb._updateStamp === this.timeStamp &&
                (arb._state & (/*STATE_ACCEPT*/1)) !== 0)
            {
            /*jshint bitwise: true*/
                var b1 = arb.bodyA;
                var b2 = arb.bodyB;
                if (b1._type === (/*TYPE_DYNAMIC*/0) && b2._type === (/*TYPE_DYNAMIC*/0))
                {
                    this.__union(b1, b2);
                }
            }
        }

        var constraints = this.liveConstraints;
        limit = constraints.length;
        for (i = 0; i < limit; i += 1)
        {
            constraints[i]._sleepComputation(this.__union);
        }

        // Build islands.
        var islands = this._islands;
        var island, root;
        var bodies = this.liveDynamics;
        limit = bodies.length;
        while (limit > 0)
        {
            limit -= 1;
            var body = bodies.pop();

            root = this.__find(body);
            island = root._island;
            if (island === null)
            {
                root._island = island = Physics2DIsland.allocate();
                islands.push(island);
                island.sleeping = true;
                island.wakeTime = 0;
            }
            body._island = island;
            island.components.push(body);

            var atRest = body._atRest(deltaTime, this.timeStamp);
            island.sleeping = (island.sleeping && atRest);
            if (body._wakeTime > island.wakeTime)
            {
                island.wakeTime = body._wakeTime;
            }
        }

        limit = constraints.length;
        while (limit > 0)
        {
            limit -= 1;
            var con = constraints.pop();

            root = this.__find(con);
            island = root._island;
            if (island === null)
            {
                root._island = island = Physics2DIsland.allocate();
                islands.push(island);
                island.sleeping = true;
                island.wakeTime = 0;
            }

            con._island = island;
            island.components.push(con);
            if (con._wakeTime > island.wakeTime)
            {
                island.wakeTime = con._wakeTime;
            }
        }

        // Build new live lists of bodies and constraints.
        // live lists of arbiters is deferred to preStep.
        // And destroy waking islands.
        limit = islands.length;
        var limit2;
        var bphase = this.broadphase;
        while (limit > 0)
        {
            limit -= 1;
            island = islands[limit];
            islands.pop();

            var comp, comps;
            if (island.sleeping)
            {
                comps = island.components;
                limit2 = comps.length;
                var j;
                for (j = 0; j < limit2; j += 1)
                {
                    comp = comps[j];
                    comp.sleeping = true;

                    if (comp._isBody)
                    {
                        var shapes = comp.shapes;
                        var limit3 = shapes.length;
                        var k;
                        for (k = 0; k < limit3; k += 1)
                        {
                            var shape = shapes[k];
                            bphase.update(shape._bphaseHandle, shape._data, true);
                        }
                        var data = comp._data;
                        data[(/*BODY_VEL*/7)]     = 0;
                        data[(/*BODY_VEL*/7) + 1] = 0;
                        data[(/*BODY_VEL*/7) + 2] = 0;

                    }

                    // Body + Constraint
                    if (comp._onSleep.length > 0)
                    {
                        this._pushCallbacks(comp, comp._onSleep);
                    }
                }
            }
            else
            {
                comps = island.components;
                limit2 = comps.length;
                while (limit2 > 0)
                {
                    limit2 -= 1;
                    comp = comps.pop();

                    comp._wakeTime = island.wakeTime;
                    if (comp._isBody)
                    {
                        bodies.push(comp);
                    }
                    else
                    {
                        constraints.push(comp);
                    }

                    // Reset island properties
                    comp._island = null;
                    comp._islandRoot = comp;
                    comp._islandRank = 0;
                }

                Physics2DIsland.deallocate(island);
            }
        }
    },

    // =====================================================================

    _sortArbiters : function _sortArbitersFn()
    {
        this._subSortArbiters(this.dynamicArbiters);
        this._subSortArbiters(this.staticArbiters);
    },

    _subSortArbiters : function _subSortArbitersFn(arbiters)
    {
        // Insertion sort of arbiters list using shape id's as
        // lexicographical keys.
        //
        // Insertion sort is suitable here, as arbiter list will be
        // SUBSTANTIALLY sorted already.
        //
        // We perform this sort so that broadphase has no effect
        // on physics behaviour.
        var i;
        var limit = arbiters.length - 1;
        for (i = 1; i < limit; i += 1)
        {
            var item = arbiters[i];
            var idA = item.shapeA.id;
            var idB = item.shapeB.id;

            var hole = i;
            while (hole > 0)
            {
                var cur = arbiters[hole - 1];
                var curIDA = cur.shapeA.id;
                if (curIDA < idA || (curIDA === idA && cur.shapeB.id < idB))
                {
                    break;
                }

                arbiters[hole] = cur;
                hole -= 1;
            }

            arbiters[hole] = item;
        }
    },

    // =====================================================================

    _onWakeCallbacks : function _onWakeCallbacks(component)
    {
        if (this._midStep)
        {
            if (component._onWake.length > 0)
            {
                this._pushCallbacks(component, component._onWake);
            }
        }
        else
        {
            component._woken = true;
        }
    },

    _pushCallbacks : function _pushCallbacksFn(thisObject, callbacks)
    {
        var cbs = this._callbacks;
        var limit = callbacks.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var cb = Physics2DCallback.allocate();
            cb.thisObject = thisObject;
            cb.callback = callbacks[i];
            cb.time = this._eventTime;
            cb.index = i;
            cbs.push(cb);
        }
    },

    _pushInteractionEvents : function _pushInteractionEventsFn(eventType, arb)
    {
        var cbs = this._callbacks;

        var shapeA = arb.shapeA;
        var shapeB = arb.shapeB;

        var groupA = shapeA._group;
        var groupB = shapeB._group;

        // Event listeners on shapeA
        var events = shapeA._events;
        var limit = events.length;
        var i, eventObject, cb;
        for (i = 0; i < limit; i += 1)
        {
            eventObject = events[i];
            /*jshint bitwise: false*/
            if (eventObject.type === eventType &&
                (eventObject.mask === undefined || ((eventObject.mask & groupB) !== 0)))
            /*jshint bitwise: true*/
            {
                cb = Physics2DCallback.allocate();
                cb.thisObject = shapeA;
                cb.callback = eventObject.callback;
                cb.time = this._eventTime;
                cb.index = i;
                cb.arbiter = arb;
                cbs.push(cb);
            }
        }

        // Event listeners on shapeB
        events = shapeB._events;
        limit = events.length;
        for (i = 0; i < limit; i += 1)
        {
            eventObject = events[i];
            /*jshint bitwise: false*/
            if (eventObject.type === eventType &&
                (eventObject.mask === undefined || ((eventObject.mask & groupA) !== 0)))
            /*jshint bitwise: true*/
            {
                cb = Physics2DCallback.allocate();
                cb.thisObject = shapeA;
                cb.callback = eventObject.callback;
                cb.time = this._eventTime;
                cb.index = i;
                cb.arbiter = arb;
                cbs.push(cb);
            }
        }
    },

    // =====================================================================

    // precon: constraint was removed from live list.
    _brokenConstraint : function _brokenConstraint(con)
    {
        if (con._onBreak.length > 0)
        {
            this._pushCallbacks(con, con._onBreak);
        }

        if (con._removeOnBreak)
        {
            con.world = null;

            var constraints = this.constraints;
            var index = constraints.indexOf(con);
            constraints[index] = constraints[constraints.length - 1];
            constraints.pop();

            con._outWorld();
        }
        else
        {
            con._active = false;
        }

        con._clearCache();
    },

    _preStep : function _preStepFn(deltaTime)
    {
        var constraints = this.liveConstraints;
        var limit = constraints.length;
        var i;
        for (i = 0; i < limit;)
        {
            var con = constraints[i];
            if (con._preStep(deltaTime))
            {
                limit -= 1;
                constraints[i] = constraints[limit];
                constraints.pop();
                this._brokenConstraint(con);
                continue;
            }

            i += 1;
        }

        this._preStepArbiters(this.dynamicArbiters, deltaTime);
        this._preStepArbiters(this.staticArbiters, deltaTime);
    },

    // Used in continuous collisions, only want to pre-step a single arbiter.
    _preStepArbiter : function _preStepArbiterFn(arb, deltaTime, progressEvents)
    {
        var timeStamp = this.timeStamp;

        // Should never be the case that arbiter needs to be put to sleep
        // Or needs to be retired, or to issue an end.

        arb.active = (arb._updateStamp === timeStamp);

        // Will however, require a begin callback to be issued in certain
        // cases (Continuous collision). and a progress callback (continuous
        // collision causing objects to be woken).
        if (arb._createContinuous && arb._createStamp === timeStamp)
        {
            this._pushInteractionEvents((/*EVENT_BEGIN*/1), arb);
        }
        else if (progressEvents && arb.active)
        {
            this._pushInteractionEvents((/*EVENT_PROGRESS*/2), arb);
        }

        if (arb.active)
        {
            /*jshint bitwise: false*/
            if ((arb._state & (/*STATE_ACCEPT*/1)) !== 0)
            /*jshint bitwise: true*/
            {
                if (!arb._preStep(deltaTime, timeStamp, true))
                {
                    arb.active = false;
                }
            }
            else if (!arb.sensor && !arb._cleanContacts(timeStamp))
            {
                arb.active = false;
            }
        }
    },

    // Used in usual case, pre stepping whole list of arbiters.
    _preStepArbiters : function _preStepArbitersFn(arbiters, deltaTime)
    {
        var timeStamp = this.timeStamp;
        var limit = arbiters.length;
        var i;
        for (i = 0; i < limit;)
        {
            var arb = arbiters[i];
            if (!arb._retired && (arb.bodyA.sleeping && arb.bodyB.sleeping))
            {
                arb._sleepStamp = timeStamp;
                arb.sleeping = true;
                arb.active = false;

                // Issue progress callback for first update that arbiter sleeps!
                this._pushInteractionEvents((/*EVENT_PROGRESS*/2), arb);

                limit -= 1;
                arbiters[i] = arbiters[limit];
                arbiters.pop();
                continue;
            }

            // Permit arbiter to exist for 1 further update.
            // So that we can issue end callbacks.
            if (!arb._lazyRetired)
            {
                if (arb._retired ||
                    arb._updateStamp + (arb.sensor ? 1 : Physics2DConfig.DELAYED_DEATH) < timeStamp)
                {
                    arb._retire();
                    limit -= 1;
                    arbiters[i] = arbiters[limit];
                    arbiters.pop();
                    Physics2DArbiter.deallocate(arb);
                    continue;
                }
            }
            else
            {
                arb._lazyRetired = false;
                i += 1;
                continue;
            }

            arb.active = (arb._updateStamp === timeStamp);

            // Set up callbacks.
            if (arb._createStamp === timeStamp)
            {
                this._pushInteractionEvents((/*EVENT_BEGIN*/1), arb);
            }
            else if (arb.active)
            {
                this._pushInteractionEvents((/*EVENT_PROGRESS*/2), arb);
            }
            else if (arb._updateStamp === (timeStamp - 1))
            {
                this._pushInteractionEvents((/*EVENT_END*/3), arb);
                arb._endGenerated = this.timeStamp;
            }

            if (arb.active)
            {
                /*jshint bitwise: false*/
                if ((arb._state & (/*STATE_ACCEPT*/1)) !== 0)
                /*jshint bitwise: true*/
                {
                    if (!arb._preStep(deltaTime, timeStamp))
                    {
                        arb.active = false;
                    }
                }
                else if (!arb.sensor && !arb._cleanContacts(timeStamp))
                {
                    arb.active = false;
                }
            }

            i += 1;
        }
    },

    // =====================================================================

    _iterateVelocity : function _iterateVelocityFn(count)
    {
        var constraints = this.liveConstraints;
        while (count > 0)
        {
            var limit = constraints.length;
            var i;
            for (i = 0; i < limit;)
            {
                var con = constraints[i];
                if (con._iterateVel())
                {
                    limit -= 1;
                    constraints[i] = constraints[limit];
                    constraints.pop();
                    this._brokenConstraint(con);
                    continue;
                }

                i += 1;
            }

            this._iterateVelocityArbiters(this.dynamicArbiters);
            this._iterateVelocityArbiters(this.staticArbiters);
            count -= 1;
        }
    },

    _iterateVelocityArbiters : function _iterateVelocityArbitersFn(arbiters)
    {
        var limit = arbiters.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var arb = arbiters[i];
            /*jshint bitwise: false*/
            if (arb.active && !arb.sensor &&
                (arb._state & (/*STATE_ACCEPT*/1)) !== 0)
            /*jshint bitwise: true*/
            {
                arb._iterateVelocity();
            }
        }
    },

    // =====================================================================

    _iteratePosition : function _iteratePositionFn(count)
    {
        var constraints = this.liveConstraints;
        while (count > 0)
        {
            var limit = constraints.length;
            var i;
            for (i = 0; i < limit;)
            {
                var con = constraints[i];
                if (con._stiff && con._iteratePos())
                {
                    limit -= 1;
                    constraints[i] = constraints[limit];
                    constraints.pop();
                    this._brokenConstraint(con);
                    continue;
                }

                i += 1;
            }

            this._iteratePositionArbiters(this.dynamicArbiters);
            this._iteratePositionArbiters(this.staticArbiters);
            count -= 1;
        }
    },

    _iteratePositionArbiters : function _iteratePositionArbitersFn(arbiters)
    {
        var limit = arbiters.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var arb = arbiters[i];
            /*jshint bitwise: false*/
            if (arb.active && !arb.sensor &&
                (arb._state & (/*STATE_ACCEPT*/1)) !== 0)
            /*jshint bitwise: true*/
            {
                arb._iteratePosition();
            }
        }
    },

    // =====================================================================

    _integrateVelocity : function _integrateVelocityFn(deltaTime)
    {
        var gravityX = this._gravityX;
        var gravityY = this._gravityY;

        var bodies = this.liveDynamics;
        var limit = bodies.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var body = bodies[i];
            var data = body._data;

            var imass = data[(/*BODY_IMASS*/0)];
            var drag;
            if (imass !== 0)
            {
                data[(/*BODY_VEL*/7)]     += ((data[(/*BODY_FORCE*/10)]     * imass) + gravityX) * deltaTime;
                data[(/*BODY_VEL*/7) + 1] += ((data[(/*BODY_FORCE*/10) + 1] * imass) + gravityY) * deltaTime;

                drag = Math.exp(deltaTime * data[(/*BODY_LIN_DRAG*/21)]);
                data[(/*BODY_VEL*/7)]     *= drag;
                data[(/*BODY_VEL*/7) + 1] *= drag;
            }

            var iinertia = data[(/*BODY_IINERTIA*/1)];
            if (iinertia !== 0)
            {
                data[(/*BODY_VEL*/7) + 2] += (data[(/*BODY_FORCE*/10) + 2] * iinertia) * deltaTime;
                data[(/*BODY_VEL*/7) + 2] *= Math.exp(deltaTime * data[(/*BODY_ANG_DRAG*/22)]);
            }
        }
    },

    // =====================================================================

    _integratePosition : function _integratePositionFn(deltaTime)
    {
        this._integratePositionBodies(this.liveDynamics, deltaTime);
        this._integratePositionBodies(this.liveKinematics, deltaTime);
    },

    _integratePositionBodies : function _integratePositionBodiesFn(bodies, deltaTime)
    {
        var MAX_VEL = (2 * Math.PI / deltaTime);
        var idt2 = (1 / (deltaTime * deltaTime));

        var linThreshold = Physics2DConfig.MIN_LINEAR_STATIC_SWEEP;
        var angThreshold = Physics2DConfig.MIN_ANGULAR_STATIC_SWEEP;
        linThreshold *= linThreshold * idt2;
        angThreshold *= angThreshold * idt2;

        var bulletLinThreshold = Physics2DConfig.MIN_LINEAR_BULLET_SWEEP;
        var bulletAngThreshold = Physics2DConfig.MIN_ANGULAR_BULLET_SWEEP;
        bulletLinThreshold *= bulletLinThreshold * idt2;
        bulletAngThreshold *= bulletAngThreshold * idt2;

        var bphase = this.broadphase;

        var limit = bodies.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var body = bodies[i];
            var data = body._data;
            var preX = data[(/*BODY_PRE_POS*/15)]     = data[(/*BODY_POS*/2)];
            var preY = data[(/*BODY_PRE_POS*/15) + 1] = data[(/*BODY_POS*/2) + 1];
            data[(/*BODY_PRE_POS*/15) + 2] = data[(/*BODY_POS*/2) + 2];

            var curX = data[(/*BODY_POS*/2)]     += (data[(/*BODY_VEL*/7)]     * deltaTime);
            var curY = data[(/*BODY_POS*/2) + 1] += (data[(/*BODY_VEL*/7) + 1] * deltaTime);
            var angVel = data[(/*BODY_VEL*/7) + 2];
            body._deltaRotation(angVel * deltaTime);

            data[(/*BODY_SWEEP_TIME*/18)] = deltaTime;

            // If moving very slowly, treat as static freezing object at t = deltaTime
            var vx = data[(/*BODY_VEL*/7)];
            var vy = data[(/*BODY_VEL*/7) + 1];
            var vw = data[(/*BODY_SWEEP_ANGVEL*/20)] = (angVel % MAX_VEL);

            var rad = data[(/*BODY_RADIUS*/19)];
            var lin = (linThreshold * rad * rad);
            var vmag = ((vx * vx) + (vy * vy));
            if (vmag > lin || (vw * vw) > angThreshold)
            {
                // Compute swept AABB
                var minX = (preX < curX ? preX : curX);
                var minY = (preY < curY ? preY : curY);
                var maxX = (preX < curX ? curX : preX);
                var maxY = (preY < curY ? curY : preY);

                var shapes = body.shapes;
                var limit2 = shapes.length;
                var j;
                for (j = 0; j < limit2; j += 1)
                {
                    var shape = shapes[j];
                    var sdata = shape._data;
                    rad = sdata[(/*SHAPE_SWEEP_RADIUS*/4)];
                    sdata[(/*SHAPE_AABB*/0)]     = (minX - rad);
                    sdata[(/*SHAPE_AABB*/0) + 1] = (minY - rad);
                    sdata[(/*SHAPE_AABB*/0) + 2] = (maxX + rad);
                    sdata[(/*SHAPE_AABB*/0) + 3] = (maxY + rad);

                    bphase.update(shape._bphaseHandle, sdata);
                }

                body._sweepFrozen = false;

                if (body._type === (/*TYPE_DYNAMIC*/0))
                {
                    body._bullet = (body.bullet &&
                                    (vmag > (bulletLinThreshold * rad * rad) || (vw * vw) > bulletAngThreshold));
                }
            }
            else
            {
                body._sweepFrozen = true;
                body._bullet = false;
            }
        }
    },

    // =====================================================================

    _finalize : function _finalizeFn()
    {
        this._finalizeBodies(this.liveDynamics);
        this._finalizeBodies(this.liveKinematics);

        // Finalize contact positions for API to be correct at end of step() in queries
        this._finalizeArbiters(this.dynamicArbiters);
        this._finalizeArbiters(this.staticArbiters);
    },

    _finalizeArbiters : function _iteratePositionArbitersFn(arbiters)
    {
        var limit = arbiters.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var arb = arbiters[i];
            if (arb.active && !arb.sensor)
            {
                arb._refreshContactData();
            }
        }
    },

    _finalizeBodies : function _finalizeBodies(bodies)
    {
        var bphase = this.broadphase;
        var limit = bodies.length;
        var i;
        for (i = 0; i < limit;)
        {
            var body = bodies[i];
            var data = body._data;

            var shapes = body.shapes;
            var limit2 = shapes.length;
            var j, shape;

            if (data[(/*BODY_PRE_POS*/15)]     !== data[(/*BODY_POS*/2)] ||
                data[(/*BODY_PRE_POS*/15) + 1] !== data[(/*BODY_POS*/2) + 1] ||
                data[(/*BODY_PRE_POS*/15) + 2] !== data[(/*BODY_POS*/2) + 2])
            {
                body._invalidated = true;
            }
            else if (body._type === (/*TYPE_KINEMATIC*/1))
            {
                limit -= 1;
                bodies[i] = bodies[limit];
                bodies.pop();

                body.sleeping = true;

                for (j = 0; j < limit2; j += 1)
                {
                    shape = shapes[j];
                    bphase.update(shape._bphaseHandle, shape._data, true);
                }
                continue;
            }

            i += 1;
        }
    },

    // =====================================================================

    _doCallbacks : function _doCallbacksFn()
    {
        // Order by event index so as to guarantee that event listeners
        // added first, are processed first.
        //
        // Inlined quick sort, builtin JS.sort was too slow with function comparator.
        var callbacks = this._callbacks;
        var i;
        var stack = [callbacks.length - 1, 0];
        do
        {
            var left = stack.pop();
            var right = stack.pop();
            if (left > right)
            {
                continue;
            }

            /*jshint bitwise: false*/
            var pivot = (left + right) >> 1;
            /*jshint bitwise: true*/

            // Partition about center
            var pivotValue = callbacks[pivot];
            var index = left;
            var pIndex = pivotValue.index;
            var pTime = pivotValue.time;

            callbacks[pivot] = callbacks[right];
            callbacks[right] = pivotValue;
            for (i = left; i < right; i += 1)
            {
                var cur = callbacks[i];
                if (cur.time < pTime ||
                    (cur.time === pTime && cur.index < pIndex))
                {
                    callbacks[i] = callbacks[index];
                    callbacks[index] = cur;
                    index += 1;
                }
            }
            callbacks[right] = callbacks[index];
            callbacks[index] = pivotValue;

            // index + 1 <-> right
            if (index + 1 < right)
            {
                stack.push(right);
                stack.push(index + 1);
            }

            // left <-> index - 1
            if (left < index - 1)
            {
                stack.push(index - 1);
                stack.push(left);
            }
        }
        while (stack.length > 0);

        // Issue callbacks
        var limit = callbacks.length;
        for (i = 0; i < limit; i += 1)
        {
            var cb = callbacks[i];
            if (cb.arbiter)
            {
                // BEGIN/PROGRESS/END
                var arb = cb.arbiter;
                var sa = arb.shapeA;
                var sb = arb.shapeB;
                var thisShape = cb.thisObject;
                cb.callback.call(thisShape, arb, (thisShape === sa ? sb : sa));
            }
            else
            {
                // WAKE/SLEEP/BREAK
                cb.callback.call(cb.thisObject);
            }
            Physics2DCallback.deallocate(cb);
        }
        callbacks.length = 0;
    },

    // =====================================================================

    _warmStart : function _warmStartFn()
    {
        var constraints = this.liveConstraints;
        var limit = constraints.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            constraints[i]._warmStart();
        }

        this._warmStartArbiters(this.dynamicArbiters);
        this._warmStartArbiters(this.staticArbiters);
    },

    _warmStartArbiters : function _warmStartArbitersFn(arbiters)
    {
        var limit = arbiters.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var arb = arbiters[i];
            /*jshint bitwise: false*/
            if (arb.active && !arb.sensor &&
                (arb._state & (/*STATE_ACCEPT*/1)) !== 0)
            /*jshint bitwise: true*/
            {
                arb._warmStart();
            }
        }
    },

    // =====================================================================

    _forceSleepBody : function _forceSleepBodyFn(body)
    {
        if (body.sleeping || body._type !== (/*TYPE_DYNAMIC*/0))
        {
            return;
        }

        body.sleeping = true;

        var bodies = this.liveDynamics;
        var index = bodies.indexOf(body);
        bodies[index] = bodies[bodies.length - 1];
        bodies.pop();

        var shapes = body.shapes;
        var limit = shapes.length;
        var i;
        var bphase = this.broadphase;
        for (i = 0; i < limit; i += 1)
        {
            var shape = shapes[i];
            bphase.update(shape._bphaseHandle, shape._data, true);

            // Force arbiters to go to sleep.
            var arbiters = shape.arbiters;
            var limit2 = arbiters.length;
            var j;
            for (j = 0; j < limit2; j += 1)
            {
                var arb = arbiters[j];
                if (arb._retired || arb.sleeping)
                {
                    continue;
                }

                arb.sleeping = true;
                arb._sleepStamp = this.timeStamp;
                var arbs;
                if (arb._static)
                {
                    arbs = this.staticArbiters;
                }
                else
                {
                    arbs = this.dynamicArbiters;
                }

                index = arbs.indexOf(arb);
                arbs[index] = arbs[arbs.length - 1];
                arbs.pop();
            }
        }
    },

    _forceSleepConstraint : function forceSleepConstraintFn(constraint)
    {
        if (constraint.sleeping)
        {
            return;
        }

        constraint.sleeping = true;

        if (constraint._active)
        {
            var constraints = this.liveConstraints;
            var index = constraints.indexOf(constraint);
            constraints[index] = constraints[constraints.length - 1];
            constraints.pop();
        }
    },

    _wakeConstraint : function _wakeConstraintFn(constraint, noCallback)
    {
        if (constraint.world !== this)
        {
            return;
        }

        if (constraint._active)
        {
            constraint._wakeTime = (this.timeStamp + (this._midStep ? 0 : 1));
            if (constraint.sleeping)
            {
                if (!constraint._island)
                {
                    constraint.sleeping = false;
                    this.liveConstraints.push(constraint);
                    constraint._wakeConnected();

                    if (!noCallback)
                    {
                        this._onWakeCallbacks(constraint);
                    }
                }
                else
                {
                    this._wakeIsland(constraint._island, (noCallback ? constraint : null));
                }
            }
        }
    },

    _wakeBody : function _wakeBodyFn(body, noCallback, continuousCallbacks)
    {
        if (body.world !== this)
        {
            return;
        }

        body._wakeTime = (this.timeStamp + (this._midStep ? 0 : 1));
        if (body.sleeping)
        {
            if (!body._island)
            {
                var bphase = this.broadphase;

                // new body, or forced wake, or kinematic
                if (body._type === (/*TYPE_DYNAMIC*/0))
                {
                    body.sleeping = false;
                    this.liveDynamics.push(body);
                }
                else if (body._type === (/*TYPE_KINEMATIC*/1))
                {
                    body.sleeping = false;
                    this.liveKinematics.push(body);
                }

                var constraints = body.constraints;
                var limit = constraints.length;
                var i;
                for (i = 0; i < limit; i += 1)
                {
                    this._wakeConstraint(constraints[i]);
                }

                var isStatic = (body._type === (/*TYPE_STATIC*/2));

                var shapes = body.shapes;
                limit = shapes.length;
                for (i = 0; i < limit; i += 1)
                {
                    var shape = shapes[i];
                    this._wakeArbiters(shape.arbiters, false, continuousCallbacks);
                    if (!isStatic)
                    {
                        bphase.update(shape._bphaseHandle, shape._data, false);
                    }
                }

                if (!noCallback && (body._type === (/*TYPE_DYNAMIC*/0)))
                {
                    this._onWakeCallbacks(body);
                }
            }
            else
            {
                this._wakeIsland(body._island, (noCallback ? body : null), continuousCallbacks);
            }
        }
    },

    _wakeArbiter : function _wakeArbiterFn(arb, continuousCallbacks)
    {
        arb.sleeping = false;

        var timeStamp = (this.timeStamp + (this._midStep ? 0 : 1));
        var tDelta = (timeStamp - arb._sleepStamp);
        arb._updateStamp += tDelta;
        var contacts = arb.contacts;
        var limit2 = contacts.length;
        var j;
        for (j = 0; j < limit2; j += 1)
        {
            contacts[j]._timeStamp += tDelta;
        }

        if (arb._static)
        {
            this.staticArbiters.push(arb);
        }
        else
        {
            this.dynamicArbiters.push(arb);
        }

        // Arbiter was woken as the result of a continuous collisions
        // And we must pre-step and generate callbacks.
        if (continuousCallbacks)
        {
            this._continuousArbiterPrepare(arb, this._deltaTime, true);
        }
    },

    _continuousArbiterPrepare : function continuousArbiterPrepareFn(arb, deltaTime, progressEvents)
    {
        this._preStepArbiter(arb, deltaTime, progressEvents);
        /*jshint bitwise: false*/
        if (arb.active && !arb.sensor &&
            (arb._state & (/*STATE_ACCEPT*/1)) !== 0)
        /*jshint bitwise: true*/
        {
            // Single velocity iteration of just this arbiter.
            // Helps objects to bounce immediately, any errors will be resolved
            // in following step anyhow.
            arb._iterateVelocity();
        }
    },

    _wakeArbiters : function _wakeArbiters(arbiters, skip, continuousCallbacks)
    {
        var limit = arbiters.length;
        var i;
        var timeStamp = (this.timeStamp + (this._midStep ? 0 : 1));
        for (i = 0; i < limit; i += 1)
        {
            var arb = arbiters[i];
            if (arb._retired)
            {
                continue;
            }

            if (arb.sleeping)
            {
                this._wakeArbiter(arb, continuousCallbacks);
            }

            if (!skip)
            {
                // arb.active is not yet computed.
                /*jshint bitwise: false*/
                if ((arb._updateStamp === timeStamp) && !arb.sensor &&
                    (arb._state & (/*STATE_ACCEPT*/1)) !== 0)
                /*jshint bitwise: true*/
                {
                    var b1 = arb.bodyA;
                    var b2 = arb.bodyB;
                    if (b1._type === (/*TYPE_DYNAMIC*/0) && b1.sleeping)
                    {
                        this._wakeBody(b1, false, continuousCallbacks);
                    }
                    if (b2._type === (/*TYPE_DYNAMIC*/0) && b2.sleeping)
                    {
                        this._wakeBody(b2, false, continuousCallbacks);
                    }
                }
            }
        }
    },

    _wakeIsland : function _wakeIslandFn(island, noCallbackObject, continuousCallbacks)
    {
        var bphase = this.broadphase;
        var bodies = this.liveDynamics;
        var constraints = this.liveConstraints;

        var timeStamp = (this.timeStamp + (this._midStep ? 0 : 1));
        var components = island.components;
        var limit = components.length;
        while (limit > 0)
        {
            limit -= 1;
            var c = components.pop();
            c._wakeTime = timeStamp;

            // Reset island properties.
            c._island = null;
            c._islandRoot = c;
            c._islandRank = 0;

            c.sleeping = false;

            if (c._isBody)
            {
                // only dynamic bodies are inserted to islands.
                bodies.push(c);

                var shapes = c.shapes;
                var limit2 = shapes.length;
                var i;
                for (i = 0; i < limit2; i += 1)
                {
                    var shape = shapes[i];
                    this._wakeArbiters(shape.arbiters, true, continuousCallbacks);
                    bphase.update(shape._bphaseHandle, shape._data, false);
                }
            }
            else
            {
                constraints.push(c);
            }

            // Body + Constraint
            if (noCallbackObject !== c)
            {
                this._onWakeCallbacks(c);
            }
        }

        Physics2DIsland.deallocate(island);
    },

    // =====================================================================

    _transmitBodyType : function _transmitBodyTypeFn(body, newType)
    {
        // Wake as old type.
        // Interactions that are presently active may
        // become ignored.
        this._wakeBody(body);

        // Just woke the body, so it's not sleeping
        var bodies;
        if (body._type === (/*TYPE_DYNAMIC*/0))
        {
            bodies = this.liveDynamics;
        }
        else if (body._type === (/*TYPE_KINEMATIC*/1))
        {
            bodies = this.liveKinematics;
        }

        var index;
        if (bodies)
        {
            index = bodies.indexOf(body);
            bodies[index] = bodies[bodies.length - 1];
            bodies.pop();
        }

        body._type = newType;

        var staticBody = (newType === (/*TYPE_STATIC*/2));
        if (staticBody)
        {
            // Ensure body is updated as run time validation
            // Does not occur for static types.
            body._update();
        }

        if (newType === (/*TYPE_DYNAMIC*/0))
        {
            // Set up ready for island computations
            body._islandRoot = body;
            body._islandRank = 0;
        }

        var bphase = this.broadphase;

        // Destroy redundant arbiters, and mutate arbiter static type.
        var shapes = body.shapes;
        var limit = shapes.length;
        var i;
        for (i = 0; i < limit; i += 1)
        {
            var shape = shapes[i];
            if (staticBody)
            {
                // Static bodies aren't synced by wakeBody
                bphase.update(shape._bphaseHandle, shape._data, true);
            }

            var arbiters = shape.arbiters;
            var limit2 = arbiters.length;
            var j;
            for (j = 0; j < limit2;)
            {
                var arb = arbiters[j];
                if (arb._retired)
                {
                    continue;
                }

                var bothStaticType = (arb.bodyA._type !== (/*TYPE_DYNAMIC*/0) && arb.bodyB._type !== (/*TYPE_DYNAMIC*/0));
                var atleastOneKinematic = (arb.bodyA._type === (/*TYPE_KINEMATIC*/1) || arb.bodyB._type === (/*TYPE_KINEMATIC*/1));
                if (bothStaticType && !(atleastOneKinematic && arb.sensor))
                {
                    limit2 -= 1;
                    arbiters[j] = arbiters[limit2];
                    arbiters.pop();
                    arb._lazyRetire(shape);
                    this._pushInteractionEvents((/*EVENT_END*/3), arb);
                    continue;
                }

                var staticType = (arb.bodyA._type !== (/*TYPE_DYNAMIC*/0) || arb.bodyB._type !== (/*TYPE_DYNAMIC*/0));
                if (staticType !== arb._static)
                {
                    var arbs = (arb._static ? this.staticArbiters : this.dynamicArbiters);
                    index = arbs.indexOf(arb);
                    arbs[index] = arbs[arbs.length - 1];
                    arbs.pop();

                    arb._static = staticType;
                    arbs = (staticType ? this.staticArbiters : this.dynamicArbiters);
                    arbs.push(arb);
                }

                j += 1;
            }
        }

        // Force wake as new type.
        // Interactions that may have been previously ignored
        // may now become active.
        body.sleeping = true;
        this._wakeBody(body);
    },

    // =====================================================================

    _validate : function _validateFn()
    {
        this._validateBodies(this.liveDynamics);
        this._validateBodies(this.liveKinematics);

        // Issue deferred wake callbacks to stack.
        var constraints = this.liveConstraints;
        var i;
        var limit = constraints.length;
        for (i = 0; i < limit; i += 1)
        {
            var con = constraints[i];
            if (con._woken && con._onWake.length > 0)
            {
                this._pushCallbacks(con, con._onWake);
            }
            con._woken = false;
        }
    },

    _validateBodies : function _validateBodiesFn(bodies)
    {
        var bphase = this.broadphase;
        var i;
        var limit = bodies.length;
        for (i = 0; i < limit; i += 1)
        {
            var body = bodies[i];

            // Prevent errors accumulating.
            var data = body._data;
            var rot = data[(/*BODY_POS*/2) + 2];
            data[(/*BODY_AXIS*/5)]     = Math.cos(rot);
            data[(/*BODY_AXIS*/5) + 1] = Math.sin(rot);

            // Update shape world-data.
            body._update();

            if (body._type === (/*TYPE_DYNAMIC*/0) && body._woken && body._onWake.length > 0)
            {
                this._pushCallbacks(body, body._onWake);
            }
            body._woken = false;

            var shapes = body.shapes;
            var limit2 = shapes.length;
            var j;
            for (j = 0; j < limit2; j += 1)
            {
                var shape = shapes[j];
                bphase.update(shape._bphaseHandle, shape._data);
            }
        }
    }
};

Physics2DWorld.create = function phys2DWorldFn(params)
{
    var w = new Physics2DWorld();
    w.simulatedTime = 0;

    // ALL such objects.
    w.rigidBodies = [];
    w.constraints = [];

    // Non-sleeping such objects.
    w.liveDynamics = [];
    w.liveKinematics = [];
    w.liveConstraints = [];

    // Non-sleeping only.
    w.dynamicArbiters = [];
    w.staticArbiters = [];

    w._islands = [];
    w._toiEvents = [];
    w._deferredWake = [];

    w._eventTime = (/*EVENT_TIME_PRE*/-1);
    w._callbacks = [];

    w.broadphase = (params.broadphase || Physics2DBoxTreeBroadphase.create());

    w.velocityIterations = (params.velocityIterations || 8);
    w.positionIterations = (params.positionIterations || 8);

    w._midStep = false;
    w.timeStamp = 0;

    var gravity = params.gravity;
    w._gravityX = (gravity ? gravity[0] : 0);
    w._gravityY = (gravity ? gravity[1] : 10);

    w._collisions = Physics2DCollisionUtils.create();

    // =====================================================================

    w._sampleRectangle = new Physics2DDevice.prototype.floatArray(4);

    function shapeSampler(lambda)
    {
        return {
            store : null,
            count : 0,
            collisions : w._collisions,
            sample : function (handle, bounds)
            {
                var shape = handle.data;
                if (lambda.call(this, shape, bounds))
                {
                    this.store[this.count] = shape;
                    this.count += 1;
                }
            }
        };
    }

    function bodySampler(lambda)
    {
        return {
            store : null,
            count : 0,
            collisions : w._collisions,
            sample : function (handle, bounds)
            {
                var shape = handle.data;
                if (lambda.call(this, shape, bounds))
                {
                    var found = false;
                    var body = shape.body;
                    var i;
                    var limit = this.count;
                    var bodies = this.store;
                    for (i = 0; i < limit; i += 1)
                    {
                        if (bodies[i] === body)
                        {
                            found = true;
                            break;
                        }
                    }

                    if (!found)
                    {
                        bodies[limit] = body;
                        this.count += 1;
                    }
                }
            }
        };
    }

    function pointSampler(shape, point)
    {
        return this.collisions._contains(shape, point[0], point[1]);
    }
    w._shapePointCallback = shapeSampler(pointSampler);
    w._bodyPointCallback  = bodySampler(pointSampler);


    function rectangleSampler(shape, unusedSampleBox)
    {
        return this.collisions._test(shape, this.rectangleShape);
    }
    w._shapeRectangleCallback = shapeSampler(rectangleSampler);
    w._bodyRectangleCallback  = bodySampler(rectangleSampler);

    w._rectangleQueryVertices = [
        new Physics2DDevice.prototype.floatArray(2),
        new Physics2DDevice.prototype.floatArray(2),
        new Physics2DDevice.prototype.floatArray(2),
        new Physics2DDevice.prototype.floatArray(2)
    ];
    w._rectangleQueryShape = Physics2DPolygon.create({ vertices : w._rectangleQueryVertices });
    w._shapeRectangleCallback.rectangleShape = w._rectangleQueryShape;
    w._bodyRectangleCallback.rectangleShape  = w._rectangleQueryShape;


    function circleSampler(shape, unusedSampleBox)
    {
        return this.collisions._test(shape, this.circleShape);
    }
    w._shapeCircleCallback = shapeSampler(circleSampler);
    w._bodyCircleCallback  = bodySampler(circleSampler);

    w._circleQueryShape = Physics2DCircle.create({ radius : 1 });
    w._shapeCircleCallback.circleShape = w._circleQueryShape;
    w._bodyCircleCallback.circleShape  = w._circleQueryShape;


    var tempCastResult = {
        shape : null,
        hitPoint  : new Physics2DDevice.prototype.floatArray(2),
        hitNormal : new Physics2DDevice.prototype.floatArray(2),
        factor : 0
    };

    w._rayCast = {
        minNormal : new Physics2DDevice.prototype.floatArray(2),
        minShape : null,
        minFactor : 0,

        userCallback : null,
        userThis : null,

        ray : null,
        noInner : false,
        normal : new Physics2DDevice.prototype.floatArray(2),
        sample : function sampleFn(handle, _)
        {
            var shape = handle.data;

            var ray = this.ray;
            var normal = this.normal;

            var oldFactor = ray.maxFactor;
            ray.maxFactor = this.minFactor;
            var factor = w._collisions.rayTest(shape, ray, normal, this.noInner);
            ray.maxFactor = oldFactor;

            if (this.userCallback)
            {
                var result = tempCastResult;
                var vector = result.hitNormal;
                vector[0] = normal[0];
                vector[1] = normal[1];

                vector = result.hitPoint;
                var origin = ray.origin;
                var direction = ray.direction;
                vector[0] = (origin[0] + (direction[0] * factor));
                vector[1] = (origin[1] + (direction[1] * factor));
                result.factor = factor;
                result.shape = shape;

                if (!this.userCallback.call(this.userThis, ray, result))
                {
                    return;
                }
            }

            if (factor !== undefined)
            {
                this.minFactor = factor;
                this.minShape = shape;

                var minNormal = this.minNormal;
                minNormal[0] = normal[0];
                minNormal[1] = normal[1];
            }
        }
    };

    w._convexCast = {
        toi : w._collisions._toi, // may as well re-use.

        minData : new Physics2DDevice.prototype.floatArray(4),
        minShape : null,
        minTOIAlpha : 0,

        userCallback : null,
        userThis : null,

        deltaTime : 0,
        sample : function sampleFn(handle, _)
        {
            var toi = this.toi;
            var shape = handle.data;
            // sweeping shape against itself!
            // can happen if input for sweep was a shape in the World.
            if (shape === toi.shapeA)
            {
                return;
            }

            toi.shapeB = shape;
            shape.body._update();
            var ret = w._collisions._staticSweep(toi, (this.minTOIAlpha * this.deltaTime), 0, true) * this.minTOIAlpha;

            if (ret <= 0)
            {
                return;
            }

            var tdata = toi._data;
            if (this.userCallback)
            {
                var result = tempCastResult;
                var vector = result.hitNormal;
                vector[0] = (-tdata[(/*TOI_AXIS*/0)]);
                vector[1] = (-tdata[(/*TOI_AXIS*/0) + 1]);
                vector = result.hitPoint;
                vector[0] = tdata[(/*TOI_WITNESS_B*/4)];
                vector[1] = tdata[(/*TOI_WITNESS_B*/4) + 1];
                result.factor = (ret * this.deltaTime);
                result.shape = shape;
                result.shape = shape;

                if (!this.userCallback.call(this.userThis, toi.shapeA, result))
                {
                    return;
                }
            }

            this.minTOIAlpha = ret;
            var data = this.minData;
            data[0] = tdata[(/*TOI_AXIS*/0)];
            data[1] = tdata[(/*TOI_AXIS*/0) + 1];
            data[2] = tdata[(/*TOI_WITNESS_B*/4)];
            data[3] = tdata[(/*TOI_WITNESS_B*/4) + 1];
            this.minShape = shape;
        }
    };

    return w;
};


// =========================================================================

//
// Physics2D internal collision detection routines.
//
function Physics2DCollisionUtils() {}
Physics2DCollisionUtils.prototype = {

    containsPoint : function containsPointFn(shape, point)
    {
        shape.body._update();
        return this._contains(shape, point[0], point[1]);
    },

    signedDistance : function signedDistanceFn(shapeA, shapeB, witnessA, witnessB, axis)
    {
        shapeA.body._update();
        if (shapeB.body !== shapeA.body)
        {
            shapeB.body._update();
        }

        var data = this._toi._data;
        var ret = this._distance(shapeA, shapeB, data);
        witnessA[0] = data[(/*TOI_WITNESS_A*/2)];
        witnessA[1] = data[(/*TOI_WITNESS_A*/2) + 1];
        witnessB[0] = data[(/*TOI_WITNESS_B*/4)];
        witnessB[1] = data[(/*TOI_WITNESS_B*/4) + 1];
        axis[0]     = data[(/*TOI_AXIS*/0)];
        axis[1]     = data[(/*TOI_AXIS*/0) + 1];

        return ret;
    },

    intersects : function intersectsFn(shapeA, shapeB)
    {
        shapeA.body._update();
        if (shapeB.body !== shapeA.body)
        {
            shapeB.body._update();
        }

        return this._test(shapeA, shapeB);
    },

    rayTest : function rayTestFn(shape, ray, normal, ignoreInnerSurfaces)
    {
        shape.body._update();
        return this._rayTest(shape, ray, normal, ignoreInnerSurfaces);
    },

    sweepTest : function sweepTestFn(shapeA, shapeB, deltaTime, point, normal)
    {
        var toi = this._toi;
        toi.shapeA = shapeA;
        toi.shapeB = shapeB;

        var bodyA = shapeA.body;
        var bodyB = shapeB.body;
        var dataA = bodyA._data;
        var dataB = bodyB._data;
        dataA[(/*BODY_SWEEP_TIME*/18)] = 0;
        dataB[(/*BODY_SWEEP_TIME*/18)] = 0;
        dataA[(/*BODY_SWEEP_ANGVEL*/20)] = (dataA[(/*BODY_VEL*/7) + 2]);
        dataB[(/*BODY_SWEEP_ANGVEL*/20)] = (dataB[(/*BODY_VEL*/7) + 2]);
        var ret = this._dynamicSweep(toi, deltaTime, 0, true);
        bodyA._sweepIntegrate(0);
        bodyB._sweepIntegrate(0);
        shapeA._update(
            dataA[(/*BODY_POS*/2)], dataA[(/*BODY_POS*/2) + 1],
            dataA[(/*BODY_AXIS*/5)], dataA[(/*BODY_AXIS*/5) + 1]
        );
        shapeB._update(
            dataB[(/*BODY_POS*/2)], dataB[(/*BODY_POS*/2) + 1],
            dataB[(/*BODY_AXIS*/5)], dataB[(/*BODY_AXIS*/5) + 1]
        );

        if (ret < 0)
        {
            return undefined;
        }

        var data = toi._data;
        point[0] = (0.5 * (data[(/*TOI_WITNESS_A*/2)]     + data[(/*TOI_WITNESS_B*/4)]));
        point[1] = (0.5 * (data[(/*TOI_WITNESS_A*/2) + 1] + data[(/*TOI_WITNESS_B*/4) + 1]));
        normal[0] = data[(/*TOI_AXIS*/0)];
        normal[1] = data[(/*TOI_AXIS*/0) + 1];
        return (ret * deltaTime);
    },


    //=======================================================================================
    //=======================================================================================
    // Private.

    // Test if (parametric) ray intersects
    // Shape between 0 and ray.maxFactor
    // Assume shape has been updated by a Body.
    // (need not be 'in' a body).
    _rayTest : function _rayTestFn(shape, ray, normal, noInner)
    {
        if (shape._type === (/*TYPE_CIRCLE*/0))
        {
            return this._rayTestCircle(shape, ray, normal, noInner);
        }
        else
        {
            return this._rayTestPolygon(shape, ray, normal, noInner);
        }
    },

    _rayTestPolygon : function _rayTestPolygonFn(poly, ray, normal, noInner)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var data = poly._data;

        var ox = origin[0];
        var oy = origin[1];
        var dx = direction[0];
        var dy = direction[1];

        var min = ray.maxFactor;
        var edge, inner;

        var index = (/*POLY_VERTICES*/6);
        var limit = data.length;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            var nx = data[index + (/*POLY_WNORMAL*/6)];
            var ny = data[index + (/*POLY_WNORMAL*/6) + 1];
            var den = (nx * dx) + (ny * dy);
            if ((den >= 0 && noInner) ||
                (den * den) < Physics2DConfig.COLLINEAR_SQ_EPSILON)
            {
                continue;
            }

            var t = (data[index + (/*POLY_WPROJ*/9)] - ((ox * nx) + (oy * ny))) / den;
            if (t < 0 || t >= min)
            {
                continue;
            }

            var hitX = ox + (dx * t);
            var hitY = oy + (dy * t);
            var dproj = (nx * hitY) - (ny * hitX);
            if (dproj < data[index + (/*POLY_CROSS1*/10)] ||
                dproj > data[index + (/*POLY_CROSS2*/11)])
            {
                continue;
            }

            min = t;
            edge = index;
            inner = (den >= 0);
        }

        if (edge === undefined)
        {
            return undefined;
        }
        else
        {
            var scale = (inner ? -1 : 1);
            normal[0] = (data[edge + (/*POLY_WNORMAL*/6)]     * scale);
            normal[1] = (data[edge + (/*POLY_WNORMAL*/6) + 1] * scale);
            return min;
        }
    },

    _rayTestCircle : function _rayTestCircleFn(circle, ray, normal, noInner)
    {
        var origin = ray.origin;
        var direction = ray.direction;
        var data = circle._data;

        var ox = origin[0];
        var oy = origin[1];
        var dx = direction[0];
        var dy = direction[1];
        var cx = data[(/*CIRCLE_WORLD*/9)];
        var cy = data[(/*CIRCLE_WORLD*/9) + 1];
        var radius = data[(/*CIRCLE_RADIUS*/6)];

        var ocX = (ox - cx);
        var ocY = (oy - cy);

        // Quadratic equation at^2 + bt + c = 0
        var a = ((dx * dx) + (dy * dy));
        var b = 2 * ((ocX * dx) + (ocY * dy));
        var c = (ocX * ocX) + (ocY * ocY) - (radius * radius);

        var determinant = ((b * b) - (4 * a * c));
        if (determinant < 0)
        {
            return undefined;
        }

        var normalScale = 1.0;
        var rec = (1 / (2 * a));
        var rootD = Math.sqrt(determinant);
        var distance = ((-b - rootD) * rec);
        if (distance < 0)
        {
            if (noInner)
            {
                return undefined;
            }
            distance += (rootD * 2 * rec);
            normalScale = -1.0;
        }

        if (0 <= distance && distance < ray.maxFactor)
        {
            var hitX = (ox + (dx * distance) - cx);
            var hitY = (oy + (dy * distance) - cy);
            var scale = (normalScale / radius);
            normal[0] = (hitX * scale);
            normal[1] = (hitY * scale);
            return distance;
        }
        else
        {
            return undefined;
        }
    },

    // =====================================================================

    // Test point containment in shape.
    // no AABB check is performed.
    // Assume shape has been updated by a Body.
    // (need not be 'in' a body).
    _contains : function containsFn(shape, x, y)
    {
        if (shape._type === (/*TYPE_CIRCLE*/0))
        {
            return this._containsCircle(shape, x, y);
        }
        else
        {
            return this._containsPolygon(shape, x, y);
        }
    },

    _containsCircle : function containsCircleFn(circle, x, y)
    {
        var data = circle._data;
        var dx = (data[(/*CIRCLE_WORLD*/9)]     - x);
        var dy = (data[(/*CIRCLE_WORLD*/9) + 1] - y);
        var rad = data[(/*CIRCLE_RADIUS*/6)];
        return ((dx * dx) + (dy * dy) - (rad * rad)) <= Physics2DConfig.CONTAINS_SQ_EPSILON;
    },

    _containsPolygon : function containsPolygonFn(poly, x, y)
    {
        var data = poly._data;
        var index = (/*POLY_VERTICES*/6);
        var limit = data.length;
        var EPS = Physics2DConfig.CONTAINS_EPSILON;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            var proj = ((data[index + (/*POLY_WNORMAL*/6)]     * x) +
                        (data[index + (/*POLY_WNORMAL*/6) + 1] * y)) -
                       data[index + (/*POLY_WPROJ*/9)];
            if (proj > EPS)
            {
                return false;
            }
        }
        return true;
    },

    // =====================================================================

    // slowSweep is true when method is invoked from public API.
    // Or in convexSweep to be more accurate and fail less easily.
    // This is also to disable slipping TOI's and terminate as soon
    // as objects intersect.
    _dynamicSweep : function _dynamicSweepFn(toi, timeStep, negRadius, slowSweep)
    {
        var s1 = toi.shapeA;
        var s2 = toi.shapeB;
        var b1 = s1.body;
        var b2 = s2.body;
        var data1 = b1._data;
        var data2 = b2._data;

        // relative linear velocity and angular bias for distance calculation.
        var deltaX = (data2[(/*BODY_VEL*/7)]     - data1[(/*BODY_VEL*/7)]);
        var deltaY = (data2[(/*BODY_VEL*/7) + 1] - data1[(/*BODY_VEL*/7) + 1]);
        var ang1 = data1[(/*BODY_SWEEP_ANGVEL*/20)];
        var ang2 = data2[(/*BODY_SWEEP_ANGVEL*/20)];
        var angBias = ((s1._data[(/*SHAPE_SWEEP_FACTOR*/5)] * (ang1 < 0 ? -ang1 : ang1)) +
                       (s2._data[(/*SHAPE_SWEEP_FACTOR*/5)] * (ang2 < 0 ? -ang2 : ang2)));

        // If relative linear velocity is near zero
        // and angular bias is near zero, ignore continuous pair.
        if (!slowSweep)
        {
            if (((deltaX * deltaX) + (deltaY * deltaY)) < Physics2DConfig.EQUAL_SQ_VEL &&
                angBias < Physics2DConfig.ZERO_ANG_BIAS)
            {
                toi._data[(/*TOI_TOI_ALPHA*/6)] = undefined;
                toi.failed = true;
                return;
            }
        }

        var curTOIAlpha = 0;
        var curIter = 0;
        var toiData = toi._data;

        var LIMIT = Physics2DConfig.SWEEP_LIMIT;
        var HALF_LIMIT = (LIMIT * 0.5);
        var MIN_ADVANCE = Physics2DConfig.MINIMUM_SWEEP_ADVANCE;
        var MAX_ITER = Physics2DConfig.MAX_SWEEP_ITER;

        while (true)
        {
            b1._sweepIntegrate(curTOIAlpha * timeStep);
            b2._sweepIntegrate(curTOIAlpha * timeStep);
            var posX = data1[(/*BODY_POS*/2)];
            var posY = data1[(/*BODY_POS*/2) + 1];
            s1._update(posX, posY, data1[(/*BODY_AXIS*/5)], data1[(/*BODY_AXIS*/5) + 1], true);
            posX = data2[(/*BODY_POS*/2)];
            posY = data2[(/*BODY_POS*/2) + 1];
            s2._update(posX, posY, data2[(/*BODY_AXIS*/5)], data2[(/*BODY_AXIS*/5) + 1], true);

            var sep = this._distance(s1, s2, toiData) + negRadius;
            var axisX = toiData[(/*TOI_AXIS*/0)];
            var axisY = toiData[(/*TOI_AXIS*/0) + 1];
            var dot = ((axisX * deltaX) + (axisY * deltaY));

            // Objects intersecting!
            if (sep < LIMIT)
            {
                if (slowSweep)
                {
                    break;
                }
                else
                {
                    var d1X = (toiData[(/*TOI_WITNESS_A*/2)]     - posX);
                    var d1Y = (toiData[(/*TOI_WITNESS_A*/2) + 1] - posY);
                    var proj = (dot - (ang1 * ((d1X * axisY) - (d1Y * axisX))));

                    // Terminate if velocity at witness indicates a non-seperating contact
                    // Or if the penetration is too deep.
                    //
                    // Otherwise we continue and try to get a better collision time
                    // To permit fast-rotation of a box about a vertex in collision.
                    // (#)
                    if (proj > 0)
                    {
                        toi.slipped = true;
                    }
                    if (proj <= 0 || sep < HALF_LIMIT)
                    {
                        break;
                    }
                }
            }

            // Lower bound on TOI advancement
            var denom = (angBias - dot) * timeStep;
            if (denom <= 0)
            {
                // fail.
                curTOIAlpha = -1;
                break;
            }

            var delta = (sep / denom);
            // Permit small advancement when objects are already intersecting (#)
            // As well as to avoid failing when a box is rotating with its face
            // parallel to the other collider so that delta is roughly 0.
            //
            // This also helps with performance.
            if (delta < MIN_ADVANCE)
            {
                delta = MIN_ADVANCE;
            }

            curTOIAlpha += delta;
            if (curTOIAlpha >= 1)
            {
                // fail
                curTOIAlpha = -1;
                break;
            }

            curIter += 1;
            if (curIter >= MAX_ITER)
            {
                // If presently intersecting (ignoring slop)
                // Then we mark objects to have their angular
                // velocity set to 0 and permit tunnelling even
                // though we failed to reach tolerance.
                if (sep > negRadius)
                {
                    toi.failed = true;
                }
                else if (slowSweep)
                {
                    // fail
                    curTOIAlpha = -1;
                }
                break;
            }
        }

        toiData[(/*TOI_TOI_ALPHA*/6)] = curTOIAlpha;
        return curTOIAlpha;
    },

    _staticSweep : function _staticSweepFn(toi, timeStep, negRadius)
    {
        var s1 = toi.shapeA; //dynamic
        var s2 = toi.shapeB; //static
        var b1 = s1.body;
        var data1 = b1._data;

        // relative linear velocity and angular bias for distance calculation.
        var deltaX = -data1[(/*BODY_VEL*/7)];
        var deltaY = -data1[(/*BODY_VEL*/7) + 1];
        var ang1 = data1[(/*BODY_SWEEP_ANGVEL*/20)];
        var angBias = (s1._data[(/*SHAPE_SWEEP_FACTOR*/5)] * (ang1 < 0 ? -ang1 : ang1));

        var curTOIAlpha = 0;
        var curIter = 0;
        var toiData = toi._data;

        var LIMIT = Physics2DConfig.SWEEP_LIMIT;
        var HALF_LIMIT = (LIMIT * 0.5);
        var MIN_ADVANCE = Physics2DConfig.MINIMUM_SWEEP_ADVANCE;
        var MAX_ITER = Physics2DConfig.MAX_SWEEP_ITER;

        while (true)
        {
            b1._sweepIntegrate(curTOIAlpha * timeStep);
            var posX = data1[(/*BODY_POS*/2)];
            var posY = data1[(/*BODY_POS*/2) + 1];
            s1._update(posX, posY, data1[(/*BODY_AXIS*/5)], data1[(/*BODY_AXIS*/5) + 1], true);

            var sep = this._distance(s1, s2, toiData) + negRadius;
            var axisX = toiData[(/*TOI_AXIS*/0)];
            var axisY = toiData[(/*TOI_AXIS*/0) + 1];
            var dot = ((axisX * deltaX) + (axisY * deltaY));

            // Objects intersecting!
            if (sep < LIMIT)
            {
                var d1X = (toiData[(/*TOI_WITNESS_A*/2)]     - posX);
                var d1Y = (toiData[(/*TOI_WITNESS_A*/2) + 1] - posY);
                var proj = (dot - (ang1 * ((d1X * axisY) - (d1Y * axisX))));

                // Terminate if velocity at witness indicates a non-seperating contact
                // Or if the penetration is too deep.
                //
                // Otherwise we continue and try to get a better collision time
                // To permit fast-rotation of a box about a vertex in collision.
                // (#)
                if (proj > 0)
                {
                    toi.slipped = true;
                }
                if (proj <= 0 || sep < HALF_LIMIT)
                {
                    break;
                }
            }

            // Lower bound on TOI advancement
            var denom = (angBias - dot) * timeStep;
            if (denom <= 0)
            {
                // fail.
                curTOIAlpha = -1;
                break;
            }

            var delta = (sep / denom);
            // Permit small advancement when objects are already intersecting (#)
            // As well as to avoid failing when a box is rotating with its face
            // parallel to the other collider so that delta is roughly 0.
            //
            // This also helps with performance.
            if (delta < MIN_ADVANCE)
            {
                delta = MIN_ADVANCE;
            }

            curTOIAlpha += delta;
            if (curTOIAlpha >= 1)
            {
                // fail
                curTOIAlpha = -1;
                break;
            }

            curIter += 1;
            if (curIter >= MAX_ITER)
            {
                // If presently intersecting (ignoring slop)
                // Then we mark objects to have their angular
                // velocity set to 0 and permit tunnelling even
                // though we failed to reach tolerance.
                if (sep > negRadius)
                {
                    toi.failed = true;
                }
                break;
            }
        }

        toiData[(/*TOI_TOI_ALPHA*/6)] = curTOIAlpha;
        return curTOIAlpha;
    },

    // =====================================================================

    // Assumption, shapes have been updated by body.
    // need not be IN a body.
    _distance : function distanceFn(shapeA, shapeB, toiData)
    {
        if (shapeA._type === (/*TYPE_CIRCLE*/0))
        {
            if (shapeB._type === (/*TYPE_CIRCLE*/0))
            {
                return this._distanceCircle2Circle(shapeA, shapeB, toiData);
            }
            else
            {
                return this._distanceCircle2Polygon(shapeA, shapeB, toiData);
            }
        }
        else
        {
            if (shapeB._type === (/*TYPE_CIRCLE*/0))
            {
                var ret = this._distanceCircle2Polygon(shapeB, shapeA, toiData);
                // Reverse axis.
                toiData[(/*TOI_AXIS*/0)]     = -toiData[(/*TOI_AXIS*/0)];
                toiData[(/*TOI_AXIS*/0) + 1] = -toiData[(/*TOI_AXIS*/0) + 1];

                // Swap witness points.
                var tmp = toiData[(/*TOI_WITNESS_A*/2)];
                toiData[(/*TOI_WITNESS_A*/2)] = toiData[(/*TOI_WITNESS_B*/4)];
                toiData[(/*TOI_WITNESS_B*/4)] = tmp;

                tmp = toiData[(/*TOI_WITNESS_A*/2) + 1];
                toiData[(/*TOI_WITNESS_A*/2) + 1] = toiData[(/*TOI_WITNESS_B*/4) + 1];
                toiData[(/*TOI_WITNESS_B*/4) + 1] = tmp;
                return ret;
            }
            else
            {
                return this._distancePolygon2Polygon(shapeA, shapeB, toiData);
            }
        }
    },

    _distanceCircle2Circle : function distanceCircle2CircleFn(circleA, circleB, toiData)
    {
        var dataA = circleA._data;
        var dataB = circleB._data;

        var cAX = dataA[(/*CIRCLE_WORLD*/9)];
        var cAY = dataA[(/*CIRCLE_WORLD*/9) + 1];
        var cBX = dataB[(/*CIRCLE_WORLD*/9)];
        var cBY = dataB[(/*CIRCLE_WORLD*/9) + 1];
        var radA = dataA[(/*CIRCLE_RADIUS*/6)];
        var radB = dataB[(/*CIRCLE_RADIUS*/6)];

        var dx = (cBX - cAX);
        var dy = (cBY - cAY);
        var rSum = (radA + radB);

        var len = Math.sqrt((dx * dx) + (dy * dy));
        if (len === 0)
        {
            toiData[(/*TOI_AXIS*/0)]    = dx = 1;
            toiData[(/*TOI_AXIS*/0) + 1] = dy = 0;
        }
        else
        {
            var rec = (1 / len);
            toiData[(/*TOI_AXIS*/0)]     = (dx *= rec);
            toiData[(/*TOI_AXIS*/0) + 1] = (dy *= rec);
        }
        toiData[(/*TOI_WITNESS_A*/2)]     = cAX + (dx * radA);
        toiData[(/*TOI_WITNESS_A*/2) + 1] = cAY + (dy * radA);
        toiData[(/*TOI_WITNESS_B*/4)]     = cBX - (dx * radB);
        toiData[(/*TOI_WITNESS_B*/4) + 1] = cBY - (dy * radB);

        return (len - rSum);
    },

    _distanceCircle2Polygon : function distanceCircle2PolygonFn(circle, polygon, toiData)
    {
        var dataC = circle._data;
        var dataP = polygon._data;

        var cx = dataC[(/*CIRCLE_WORLD*/9)];
        var cy = dataC[(/*CIRCLE_WORLD*/9) + 1];
        var radius = dataC[(/*CIRCLE_RADIUS*/6)];

        var max = Number.NEGATIVE_INFINITY;
        var edge, proj;

        var index = (/*POLY_VERTICES*/6);
        var limit = dataP.length;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            // proj = world-normal dot position
            proj = ((dataP[index + (/*POLY_WNORMAL*/6)]     * cx) +
                    (dataP[index + (/*POLY_WNORMAL*/6) + 1] * cy));
            var dist = proj - (radius + dataP[index + (/*POLY_WPROJ*/9)]);
            if (dist > max)
            {
                max = dist;
                edge = index;
            }
        }

        var nx = dataP[edge + (/*POLY_WNORMAL*/6)];
        var ny = dataP[edge + (/*POLY_WNORMAL*/6) + 1];
        proj = ((nx * cy) - (ny * cx));
        if (proj >= dataP[edge + (/*POLY_CROSS1*/10)])
        {
            if (proj <= dataP[edge + (/*POLY_CROSS2*/11)])
            {
                // circle center is within voronoi region of edge.
                toiData[(/*TOI_AXIS*/0)]     = -nx;
                toiData[(/*TOI_AXIS*/0) + 1] = -ny;
                toiData[(/*TOI_WITNESS_A*/2)]     = (cx -= (nx * radius));
                toiData[(/*TOI_WITNESS_A*/2) + 1] = (cy -= (ny * radius));
                toiData[(/*TOI_WITNESS_B*/4)]     = (cx - (nx * max));
                toiData[(/*TOI_WITNESS_B*/4) + 1] = (cy - (ny * max));
                return max;
            }
            else
            {
                // skip to next edge.
                edge += (/*POLY_STRIDE*/13);
                if (edge === limit)
                {
                    edge = (/*POLY_VERTICES*/6);
                }
            }
        }

        // Perform circle-vertex check.
        var vX = dataP[edge + (/*POLY_WORLD*/2)];
        var vY = dataP[edge + (/*POLY_WORLD*/2) + 1];
        var dx = (vX - cx);
        var dy = (vY - cy);

        var len = Math.sqrt((dx * dx) + (dy * dy));
        if (len === 0)
        {
            toiData[(/*TOI_AXIS*/0)]     = dx = -nx;
            toiData[(/*TOI_AXIS*/0) + 1] = dy = -ny;
        }
        else
        {
            var rec = (1 / len);
            toiData[(/*TOI_AXIS*/0)]     = (dx *= rec);
            toiData[(/*TOI_AXIS*/0) + 1] = (dy *= rec);
        }
        toiData[(/*TOI_WITNESS_A*/2)]     = (cx + (dx * radius));
        toiData[(/*TOI_WITNESS_A*/2) + 1] = (cy + (dy * radius));
        toiData[(/*TOI_WITNESS_B*/4)]     = vX;
        toiData[(/*TOI_WITNESS_B*/4) + 1] = vY;
        return (len - radius);
    },

    _distancePolygon2Polygon : function distancePoly2PolyFn(polyA, polyB, toiData)
    {
        var inf = Number.POSITIVE_INFINITY;
        var dataA = polyA._data;
        var dataB = polyB._data;

        var limitA = dataA.length;
        var limitB = dataB.length;

        var i, j;
        var min, k, nx, ny;

        var max = -inf;
        var first, edge;

        for (i = (/*POLY_VERTICES*/6); i < limitA; i += (/*POLY_STRIDE*/13))
        {
            min = inf;
            nx = dataA[i + (/*POLY_WNORMAL*/6)];
            ny = dataA[i + (/*POLY_WNORMAL*/6) + 1];
            for (j = (/*POLY_VERTICES*/6); j < limitB; j += (/*POLY_STRIDE*/13))
            {
                k = (nx * dataB[j + (/*POLY_WORLD*/2)]) +
                    (ny * dataB[j + (/*POLY_WORLD*/2) + 1]);
                if (k < min)
                {
                    min = k;
                }
            }
            min -= dataA[i + (/*POLY_WPROJ*/9)];

            if (min > max)
            {
                max = min;
                edge = i;
                first = true;
            }
        }

        for (j = (/*POLY_VERTICES*/6); j < limitB; j += (/*POLY_STRIDE*/13))
        {
            min = inf;
            nx = dataB[j + (/*POLY_WNORMAL*/6)];
            ny = dataB[j + (/*POLY_WNORMAL*/6) + 1];
            for (i = (/*POLY_VERTICES*/6); i < limitA; i += (/*POLY_STRIDE*/13))
            {
                k = (nx * dataA[i + (/*POLY_WORLD*/2)]) +
                    (ny * dataA[i + (/*POLY_WORLD*/2) + 1]);
                if (k < min)
                {
                    min = k;
                }
            }
            min -= dataB[j + (/*POLY_WPROJ*/9)];

            if (min > max)
            {
                max = min;
                edge = j;
                first = false;
            }
        }

        // swap data so first polygon owns seperating axis.
        var flip = (first ? 1 : -1);
        var indA, indB;
        if (!first)
        {
            dataA = polyB._data;
            dataB = polyA._data;
            limitA = dataA.length;
            limitB = dataB.length;
            indA = (/*TOI_WITNESS_B*/4);
            indB = (/*TOI_WITNESS_A*/2);
        }
        else
        {
            indA = (/*TOI_WITNESS_A*/2);
            indB = (/*TOI_WITNESS_B*/4);
        }

        nx = dataA[edge + (/*POLY_WNORMAL*/6)];
        ny = dataA[edge + (/*POLY_WNORMAL*/6) + 1];

        // Find witness edge on dataB (not necessarigly polyB)
        min = inf;
        var witness;
        for (j = (/*POLY_VERTICES*/6); j < limitB; j += (/*POLY_STRIDE*/13))
        {
            k = (nx * dataB[j + (/*POLY_WNORMAL*/6)]) +
                (ny * dataB[j + (/*POLY_WNORMAL*/6) + 1]);
            if (k < min)
            {
                min = k;
                witness = j;
            }
        }

        var next = witness + (/*POLY_STRIDE*/13);
        if (next === limitB)
        {
            next = (/*POLY_VERTICES*/6);
        }

        var kX, kY;
        var k1, k2;
        var x3, y3;
        var x4, y4;
        var dL;

        var x1 = dataB[witness + (/*POLY_WORLD*/2)];
        var y1 = dataB[witness + (/*POLY_WORLD*/2) + 1];
        var x2 = dataB[next    + (/*POLY_WORLD*/2)];
        var y2 = dataB[next    + (/*POLY_WORLD*/2) + 1];

        // Special case for parallel, intersecting edges.
        var parallel = (min < (Physics2DConfig.COLLINEAR_EPSILON - 1));
        if (max < 0 && parallel)
        {
            toiData[(/*TOI_AXIS*/0)]     = (nx * flip);
            toiData[(/*TOI_AXIS*/0) + 1] = (ny * flip);

            // Clip (x1,y1), (x2,y2) to edge.
            // Projections relative to edge start.
            kX = dataA[edge + (/*POLY_WORLD*/2)];
            kY = dataA[edge + (/*POLY_WORLD*/2) + 1];
            dL = dataA[edge + (/*POLY_LENGTH*/12)];

            k1 = (nx * (y1 - kY)) - (ny * (x1 - kX));
            if (k1 >= 0 && k1 <= dL)
            {
                toiData[indB]     = kX = x1;
                toiData[indB + 1] = kY = y1;
            }
            else
            {
                k2 = (nx * (y2 - kY)) - (ny * (x1 - kX));
                if (k2 >= 0 && k2 <= dL)
                {
                    toiData[indB]     = kX = x2;
                    toiData[indB + 1] = kY = y2;
                }
                else
                {
                    //clip one of the vertices (x1,y1) to the edge.
                    if (k1 < 0)
                    {
                        k1 = -k1;
                    }
                    else if (k1 > dL)
                    {
                        k1 = (dL - k1);
                    }

                    toiData[indB]     = kX = x1 - (ny * k1);
                    toiData[indB + 1] = kY = y1 + (nx * k1);
                }
            }

            // Witness on toiDataA is the projection.
            toiData[indA]     = kX - (nx * max);
            toiData[indA + 1] = kY - (ny * max);

            return max;
        }
        else
        {
            // Special case for intersection.
            if (max <= 0)
            {
                toiData[(/*TOI_AXIS*/0)]     = (nx * flip);
                toiData[(/*TOI_AXIS*/0) + 1] = (ny * flip);

                // Find vertex on toiDataB that is 'deepest' This is a vertex of witness edge.
                k1 = (nx * x1) + (ny * y1);
                k2 = (nx * x2) + (ny * y2);
                if (k2 < k1)
                {
                    witness = next;
                }

                // Witness on toiDataB is the deep vertex.
                toiData[indB]     = kX = dataB[witness + (/*POLY_WORLD*/2)];
                toiData[indB + 1] = kY = dataB[witness + (/*POLY_WORLD*/2) + 1];

                // Witness on toiDataA is the projection.
                toiData[indA]     = kX - (nx * max);
                toiData[indA + 1] = kY - (ny * max);
                return max;
            }
            else
            {
                // Find closest point on dataA edge to witness edge.
                // Witness on dataB is one of the witness vertices.
                // Witness on dataA is the closest point (projection of witness on dataB)
                dL = dataA[edge + (/*POLY_LENGTH*/12)];

                // !! Special case parallel edges.
                if (parallel)
                {
                    // Need to swap if dataB is 'longer' edge than on dataA.
                    var dL2 = dataB[witness + (/*POLY_LENGTH*/12)];
                    if (dL2 > dL)
                    {
                        dL = dL2;

                        // swap edge/witness
                        next = edge;
                        edge = witness;
                        witness = next;

                        next = (witness + (/*POLY_STRIDE*/13));
                        if (next === limitA)
                        {
                            next = (/*POLY_VERTICES*/6);
                        }

                        x1 = dataA[witness + (/*POLY_WORLD*/2)];
                        y1 = dataA[witness + (/*POLY_WORLD*/2) + 1];
                        x2 = dataA[next    + (/*POLY_WORLD*/2)];
                        y2 = dataA[next    + (/*POLY_WORLD*/2) + 1];

                        // Change to dataB for (kX, kY) below.
                        dataA = dataB;

                        // flip everyyyyything.
                        nx *= -1;
                        ny *= -1;
                        flip *= -1;

                        var tmp = indA;
                        indA = indB;
                        indB = tmp;
                    }
                }

                kX = dataA[edge + (/*POLY_WORLD*/2)];
                kY = dataA[edge + (/*POLY_WORLD*/2) + 1];

                // 'time' of point w1 along edge.
                k1 = -((nx * (kY - y1)) - (ny * (kX - x1)));
                var in1 = true;
                if (k1 < 0)
                {
                    k1 = 0;
                    in1 = false;
                }
                else if (k1 > dL)
                {
                    k1 = dL;
                    in1 = false;
                }

                // 'time' of point w2 along edge.
                k2 = -((nx * (kY - y2)) - (ny * (kX - x2)));
                var in2 = true;
                if (k2 < 0)
                {
                    k2 = 0;
                    in2 = false;
                }
                else if (k2 > dL)
                {
                    k2 = dL;
                    in2 = false;
                }

                // point on edge closest to w1/w2, relative to closest points for axis.
                x3 = x1 - (kX - (ny * k1));
                y3 = y1 - (kY + (nx * k1));
                x4 = x2 - (kX - (ny * k2));
                y4 = y2 - (kY + (nx * k2));

                k1 = ((x3 * x3) + (y3 * y3));
                k2 = ((x4 * x4) + (y4 * y4));
                var rec;
                if (k1 < k2)
                {
                    // point closest to w1 is shorter distance.
                    toiData[indB]     = kX = x1;
                    toiData[indB + 1] = kY = y1;
                    max = Math.sqrt(k1);
                    if (in1 || max < Physics2DConfig.NORMALIZE_EPSILON)
                    {
                        toiData[(/*TOI_AXIS*/0)]     = (nx *= flip);
                        toiData[(/*TOI_AXIS*/0) + 1] = (ny *= flip);
                    }
                    else
                    {
                        rec = flip / max;
                        toiData[(/*TOI_AXIS*/0)]     = nx = (x3 * rec);
                        toiData[(/*TOI_AXIS*/0) + 1] = ny = (y3 * rec);
                    }
                }
                else
                {
                    // point closest to w2 is shorter distance.
                    toiData[indB]     = kX = x2;
                    toiData[indB + 1] = kY = y2;
                    max = Math.sqrt(k2);
                    if (in2 || max < Physics2DConfig.NORMALIZE_EPSILON)
                    {
                        toiData[(/*TOI_AXIS*/0)]     = (nx *= flip);
                        toiData[(/*TOI_AXIS*/0) + 1] = (ny *= flip);
                    }
                    else
                    {
                        rec = flip / max;
                        toiData[(/*TOI_AXIS*/0)]     = nx = (x4 * rec);
                        toiData[(/*TOI_AXIS*/0) + 1] = ny = (y4 * rec);
                    }
                }

                toiData[indA]     = kX - (nx * max * flip);
                toiData[indA + 1] = kY - (ny * max * flip);
                return max;
            }
        }
    },

    // =====================================================================

    // Assumption, shapes have been updated by body.
    //   shapes must also be 'in' a Body for special contact data.
    // This method is not quite modular as test/distance
    // due to the complicated values required for contacts etc.
    // no AABB test performed here.
    _collide : function collideFn(shapeA, shapeB, arb)
    {
        if (shapeA._type === (/*TYPE_CIRCLE*/0))
        {
            if (shapeB._type === (/*TYPE_CIRCLE*/0))
            {
                return this._collideCircle2Circle(shapeA, shapeB, arb);
            }
            else
            {
                return this._collideCircle2Polygon(shapeA, shapeB, arb, false);
            }
        }
        else
        {
            if (shapeB._type === (/*TYPE_CIRCLE*/0))
            {
                return this._collideCircle2Polygon(shapeB, shapeA, arb, true);
            }
            else
            {
                return this._collidePolygon2Polygon(shapeA, shapeB, arb);
            }
        }
    },

    _collideCircle2Polygon : function collideCircle2PolygonFn(circle, polygon, arb, reverse)
    {
        var dataC = circle._data;
        var dataP = polygon._data;

        var cx = dataC[(/*CIRCLE_WORLD*/9)];
        var cy = dataC[(/*CIRCLE_WORLD*/9) + 1];
        var radius = dataC[(/*CIRCLE_RADIUS*/6)];

        var max = Number.NEGATIVE_INFINITY;

        var edge, proj;
        var index = (/*POLY_VERTICES*/6);
        var limit = dataP.length;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            proj = ((dataP[index + (/*POLY_WNORMAL*/6)]     * cx) +
                    (dataP[index + (/*POLY_WNORMAL*/6) + 1] * cy)) -
                   (dataP[index + (/*POLY_WPROJ*/9)] + radius);
            if (proj > 0)
            {
                return false;
            }
            if (proj > max)
            {
                max = proj;
                edge = index;
            }
        }

        var adata = arb._data;
        var con, cdata;

        var nx = dataP[edge + (/*POLY_WNORMAL*/6)];
        var ny = dataP[edge + (/*POLY_WNORMAL*/6) + 1];
        var vX, vY, lvX, lvY;
        var dx, dy;
        proj = ((nx * cy) - (ny * cx));
        if (proj >= dataP[edge + (/*POLY_CROSS1*/10)])
        {
            if (proj <= dataP[edge + (/*POLY_CROSS2*/11)])
            {
                // circle center within voronoi region of edge.

                // Take contact point to be consistently halfway into the overlap.
                proj = (radius + (max * 0.5));
                dx = (nx * proj);
                dy = (ny * proj);

                con = arb._injectContact(cx - dx, cy - dy,
                                         (reverse ? nx : -nx), (reverse ? ny : -ny),
                                         max, (/*HASH_CIRCLE*/0));

                arb._faceType = (reverse ? (/*FACE_1*/1) : (/*FACE_2*/2));
                arb._reverse = !reverse;
                adata[(/*ARB_LNORM*/11)]     = dataP[edge + (/*POLY_LNORMAL*/4)];
                adata[(/*ARB_LNORM*/11) + 1] = dataP[edge + (/*POLY_LNORMAL*/4) + 1];
                adata[(/*ARB_LPROJ*/13)]     = dataP[edge + (/*POLY_LPROJ*/8)];
                adata[(/*ARB_RADIUS*/14)]    = radius;

                cdata = con._data;
                cdata[(/*CON_LREL1*/13)]     = dataC[(/*CIRCLE_LOCAL*/7)];
                cdata[(/*CON_LREL1*/13) + 1] = dataC[(/*CIRCLE_LOCAL*/7) + 1];
                return true;
            }
            else
            {
                var next = edge + (/*POLY_STRIDE*/13);
                if (next === limit)
                {
                    next = (/*POLY_VERTICES*/6);
                }
                vX = dataP[next + (/*POLY_WORLD*/2)];
                vY = dataP[next + (/*POLY_WORLD*/2) + 1];
                lvX = dataP[next + (/*POLY_LOCAL*/0)];
                lvY = dataP[next + (/*POLY_LOCAL*/0) + 1];
            }
        }
        else
        {
            vX = dataP[edge + (/*POLY_WORLD*/2)];
            vY = dataP[edge + (/*POLY_WORLD*/2) + 1];
            lvX = dataP[edge + (/*POLY_LOCAL*/0)];
            lvY = dataP[edge + (/*POLY_LOCAL*/0) + 1];
        }

        // Circle - Vertex
        dx = (cx - vX);
        dy = (cy - vY);
        var dsq = ((dx * dx) + (dy * dy));
        if (dsq > (radius * radius))
        {
            return false;
        }

        if (dsq < Physics2DConfig.NORMALIZE_SQ_EPSILON)
        {
            // Take contact point to be consistently halfway into the overlap.
            con = arb._injectContact(cx, cy,
                                     (reverse ? nx : -nx), (reverse ? ny : -ny),
                                     0, (/*HASH_CIRCLE*/0));
        }
        else
        {
            var dist = Math.sqrt(dsq);
            var invDist = (1 / dist);
            var df = 0.5 + (radius * invDist * 0.5);
            if (!reverse)
            {
                invDist = -invDist;
            }

            // Take contact point to be consistently halfway into the overlap.
            con = arb._injectContact(cx - (dx * df), cy - (dy * df),
                                     dx * invDist, dy * invDist,
                                     dist - radius, (/*HASH_CIRCLE*/0));
        }

        cdata = con._data;
        if (reverse)
        {
            cdata[(/*CON_LREL1*/13)]     = lvX;
            cdata[(/*CON_LREL1*/13) + 1] = lvY;
            cdata[(/*CON_LREL2*/15)]     = dataC[(/*CIRCLE_LOCAL*/7)];
            cdata[(/*CON_LREL2*/15) + 1] = dataC[(/*CIRCLE_LOCAL*/7) + 1];
        }
        else
        {
            cdata[(/*CON_LREL1*/13)]     = dataC[(/*CIRCLE_LOCAL*/7)];
            cdata[(/*CON_LREL1*/13) + 1] = dataC[(/*CIRCLE_LOCAL*/7) + 1];
            cdata[(/*CON_LREL2*/15)]     = lvX;
            cdata[(/*CON_LREL2*/15) + 1] = lvY;
        }

        adata[(/*ARB_RADIUS*/14)] = radius;
        arb._faceType = (/*FACE_CIRCLE*/0);
        arb._reverse = false;

        return true;
    },

    _collidePolygon2Polygon : function collidePolygon2Polygon(polyA, polyB, arb)
    {
        var inf = Number.POSITIVE_INFINITY;
        var dataA = polyA._data;
        var dataB = polyB._data;

        var limitA = dataA.length;
        var limitB = dataB.length;

        var i, j;
        var min, k, nx, ny;

        var max = -inf;
        var first, edge, proj;

        for (i = (/*POLY_VERTICES*/6); i < limitA; i += (/*POLY_STRIDE*/13))
        {
            min = inf;
            nx = dataA[i + (/*POLY_WNORMAL*/6)];
            ny = dataA[i + (/*POLY_WNORMAL*/6) + 1];
            proj = dataA[i + (/*POLY_WPROJ*/9)];
            for (j = (/*POLY_VERTICES*/6); j < limitB; j += (/*POLY_STRIDE*/13))
            {
                k = (nx * dataB[j + (/*POLY_WORLD*/2)]) +
                    (ny * dataB[j + (/*POLY_WORLD*/2) + 1]);
                if (k < min)
                {
                    min = k;
                }
                if ((min - proj) <= max)
                {
                    break;
                }
            }
            min -= proj;
            if (min >= 0)
            {
                return false;
            }
            if (min > max)
            {
                max = min;
                edge = i;
                first = true;
            }
        }

        for (j = (/*POLY_VERTICES*/6); j < limitB; j += (/*POLY_STRIDE*/13))
        {
            min = inf;
            nx = dataB[j + (/*POLY_WNORMAL*/6)];
            ny = dataB[j + (/*POLY_WNORMAL*/6) + 1];
            proj = dataB[j + (/*POLY_WPROJ*/9)];
            for (i = (/*POLY_VERTICES*/6); i < limitA; i += (/*POLY_STRIDE*/13))
            {
                k = (nx * dataA[i + (/*POLY_WORLD*/2)]) +
                    (ny * dataA[i + (/*POLY_WORLD*/2) + 1]);
                if (k < min)
                {
                    min = k;
                }
                if ((min - proj) <= max)
                {
                    break;
                }
            }
            min -= proj;
            if (min >= 0)
            {
                return false;
            }
            if (min > max)
            {
                max = min;
                edge = j;
                first = false;
            }
        }

        // swap data so first polygon owns seperating axis.
        var flip = (first ? 1 : -1);
        var bdata;
        if (!first)
        {
            dataA = polyB._data;
            dataB = polyA._data;
            limitA = dataA.length;
            limitB = dataB.length;
            bdata = polyA.body._data;
        }
        else
        {
            bdata = polyB.body._data;
        }

        nx = dataA[edge + (/*POLY_WNORMAL*/6)];
        ny = dataA[edge + (/*POLY_WNORMAL*/6) + 1];

        // Find witness edge on dataB (not necessarigly polyB)
        min = inf;
        var witness;
        for (j = (/*POLY_VERTICES*/6); j < limitB; j += (/*POLY_STRIDE*/13))
        {
            k = (nx * dataB[j + (/*POLY_WNORMAL*/6)]) +
                (ny * dataB[j + (/*POLY_WNORMAL*/6) + 1]);
            if (k < min)
            {
                min = k;
                witness = j;
            }
        }

        var next = witness + (/*POLY_STRIDE*/13);
        if (next === limitB)
        {
            next = (/*POLY_VERTICES*/6);
        }

        var c1X = dataB[witness + (/*POLY_WORLD*/2)];
        var c1Y = dataB[witness + (/*POLY_WORLD*/2) + 1];
        var c2X = dataB[next    + (/*POLY_WORLD*/2)];
        var c2Y = dataB[next    + (/*POLY_WORLD*/2) + 1];

        var dvX = (c2X - c1X);
        var dvY = (c2Y - c1Y);
        var d1 = (c1X * ny) - (c1Y * nx);
        var d2 = (c2X * ny) - (c2Y * nx);
        var den = (1 / (d2 - d1));

        // clip c1
        var t = (-dataA[edge + (/*POLY_CROSS2*/11)] - d1) * den;
        if (t > Physics2DConfig.CLIP_EPSILON)
        {
            c1X += (dvX * t);
            c1Y += (dvY * t);
        }

        // clip c2
        t = (-dataA[edge + (/*POLY_CROSS1*/10)] - d2) * den;
        if (t < -Physics2DConfig.CLIP_EPSILON)
        {
            c2X += (dvX * t);
            c2Y += (dvY * t);
        }

        var adata = arb._data;
        adata[(/*ARB_LNORM*/11)]     = dataA[edge + (/*POLY_LNORMAL*/4)];
        adata[(/*ARB_LNORM*/11) + 1] = dataA[edge + (/*POLY_LNORMAL*/4) + 1];
        adata[(/*ARB_LPROJ*/13)]     = dataA[edge + (/*POLY_LPROJ*/8)];
        adata[(/*ARB_RADIUS*/14)]    = 0.0;
        arb._faceType = (first ? (/*FACE_1*/1) : (/*FACE_2*/2));

        // Per contact distance
        proj = dataA[edge + (/*POLY_WPROJ*/9)];
        var c1d = ((c1X * nx) + (c1Y * ny)) - proj;
        var c2d = ((c2X * nx) + (c2Y * ny)) - proj;

        var p1x = bdata[(/*BODY_POS*/2)];
        var p1y = bdata[(/*BODY_POS*/2) + 1];
        var cos = bdata[(/*BODY_AXIS*/5)];
        var sin = bdata[(/*BODY_AXIS*/5) + 1];

        if (c1d > 0 && c2d > 0)
        {
            return false;
        }

        var rx = (c1X - p1x);
        var ry = (c1Y - p1y);
        c1X -= (nx * c1d * 0.5);
        c1Y -= (ny * c1d * 0.5);
        var con = arb._injectContact(c1X, c1Y, nx * flip, ny * flip, c1d, (first ? (/*HASH_LEFT*/1) : (/*HASH_RIGHT*/2)), c1d > 0)._data;
        con[(/*CON_LREL1*/13)]     = ((cos * rx) + (sin * ry));
        con[(/*CON_LREL1*/13) + 1] = ((cos * ry) - (sin * rx));

        rx = (c2X - p1x);
        ry = (c2Y - p1y);
        c2X -= (nx * c2d * 0.5);
        c2Y -= (ny * c2d * 0.5);
        con = arb._injectContact(c2X, c2Y, nx * flip, ny * flip, c2d, (first ? (/*HASH_RIGHT*/2) : (/*HASH_LEFT*/1)), c2d > 0)._data;
        con[(/*CON_LREL1*/13)]     = ((cos * rx) + (sin * ry));
        con[(/*CON_LREL1*/13) + 1] = ((cos * ry) - (sin * rx));

        arb._reverse = (!first);

        return true;
    },

    _collideCircle2Circle : function collideCircle2CircleFn(circleA, circleB, arb)
    {
        var dataA = circleA._data;
        var dataB = circleB._data;

        var x1 = dataA[(/*CIRCLE_WORLD*/9)];
        var y1 = dataA[(/*CIRCLE_WORLD*/9) + 1];
        var r1 = dataA[(/*CIRCLE_RADIUS*/6)];

        var dx = (dataB[(/*CIRCLE_WORLD*/9)]     - x1);
        var dy = (dataB[(/*CIRCLE_WORLD*/9) + 1] - y1);
        var rSum = r1 + dataB[(/*CIRCLE_RADIUS*/6)];

        var dsq = ((dx * dx) + (dy * dy));
        if (dsq > (rSum * rSum))
        {
            return false;
        }

        var con;
        if (dsq < Physics2DConfig.NORMALIZE_SQ_EPSILON)
        {
            // Take contact point to be consistently halfway into the overlap.
            con = arb._injectContact(x1 + (dx * 0.5), y1 + (dy * 0.5), 1, 0,
                                    -rSum, (/*HASH_CIRCLE*/0));
        }
        else
        {
            var dist = Math.sqrt(dsq);
            var invDist = (1 / dist);
            var df = (0.5 + ((r1 - (0.5 * rSum)) * invDist));

            // Take contact point to be consistently halfway into the overlap.
            con = arb._injectContact(x1 + (dx * df), y1 + (dy * df),
                                     dx * invDist, dy * invDist,
                                     dist - rSum, (/*HASH_CIRCLE*/0));
        }

        var data = con._data;
        data[(/*CON_LREL1*/13)]     = dataA[(/*CIRCLE_LOCAL*/7)];
        data[(/*CON_LREL1*/13) + 1] = dataA[(/*CIRCLE_LOCAL*/7) + 1];
        data[(/*CON_LREL2*/15)]     = dataB[(/*CIRCLE_LOCAL*/7)];
        data[(/*CON_LREL2*/15) + 1] = dataB[(/*CIRCLE_LOCAL*/7) + 1];

        data = arb._data;
        data[(/*ARB_RADIUS*/14)] = rSum;
        arb._faceType = (/*FACE_CIRCLE*/0);

        return true;
    },

    // =====================================================================

    // Assumption, shapes have been updated by body.
    // need not be 'in' a body.
    // No AABB test performed here.
    _test : function testFn(shapeA, shapeB)
    {
        if (shapeA._type === (/*TYPE_CIRCLE*/0))
        {
            if (shapeB._type === (/*TYPE_CIRCLE*/0))
            {
                return this._testCircle2Circle(shapeA, shapeB);
            }
            else
            {
                return this._testCircle2Polygon(shapeA, shapeB);
            }
        }
        else
        {
            if (shapeB._type === (/*TYPE_CIRCLE*/0))
            {
                return this._testCircle2Polygon(shapeB, shapeA);
            }
            else
            {
                return this._testPolygon2Polygon(shapeA, shapeB);
            }
        }
    },

    _testCircle2Circle : function testCircle2CircleFn(circleA, circleB)
    {
        var dataA = circleA._data;
        var dataB = circleB._data;

        var dx = (dataA[(/*CIRCLE_WORLD*/9)]     - dataB[(/*CIRCLE_WORLD*/9)]);
        var dy = (dataA[(/*CIRCLE_WORLD*/9) + 1] - dataB[(/*CIRCLE_WORLD*/9) + 1]);
        var rSum = dataA[(/*CIRCLE_RADIUS*/6)] + dataB[(/*CIRCLE_RADIUS*/6)];

        return (((dx * dx) + (dy * dy)) <= (rSum * rSum));
    },

    _testCircle2Polygon : function testCircle2PolygonFn(circle, polygon)
    {
        var dataC = circle._data;
        var dataP = polygon._data;

        var cx = dataC[(/*CIRCLE_WORLD*/9)];
        var cy = dataC[(/*CIRCLE_WORLD*/9) + 1];
        var radius = dataC[(/*CIRCLE_RADIUS*/6)];

        var max = Number.NEGATIVE_INFINITY;
        var edge, proj;

        var index = (/*POLY_VERTICES*/6);
        var limit = dataP.length;
        for (; index < limit; index += (/*POLY_STRIDE*/13))
        {
            // proj = world-normal dot position
            proj = ((dataP[index + (/*POLY_WNORMAL*/6)]     * cx) +
                    (dataP[index + (/*POLY_WNORMAL*/6) + 1] * cy));
            var dist = proj - (radius + dataP[index + (/*POLY_WPROJ*/9)]);
            if (dist > 0)
            {
                return false;
            }

            if (dist > max)
            {
                max = dist;
                edge = index;
            }
        }

        // proj = world-normal perpdot position
        proj = ((dataP[edge + (/*POLY_WNORMAL*/6)]     * cy) -
                (dataP[edge + (/*POLY_WNORMAL*/6) + 1] * cx));
        if (proj >= dataP[edge + (/*POLY_CROSS1*/10)])
        {
            if (proj <= dataP[edge + (/*POLY_CROSS2*/11)])
            {
                // circle center is within voronoi region of edge.
                return true;
            }
            else
            {
                // skip to next edge.
                edge += (/*POLY_STRIDE*/13);
                if (edge === limit)
                {
                    edge = (/*POLY_VERTICES*/6);
                }
            }
        }

        // Perform circle-vertex check.
        // delta = position - vertex
        var dx = (cx - dataP[edge + (/*POLY_WORLD*/2)]);
        var dy = (cy - dataP[edge + (/*POLY_WORLD*/2) + 1]);
        return (((dx * dx) + (dy * dy)) <= (radius * radius));
    },

    _testPolygon2Polygon : function testPolygon2PolygonFn(polyA, polyB)
    {
        var inf = Number.POSITIVE_INFINITY;
        var dataA = polyA._data;
        var dataB = polyB._data;

        var limitA = dataA.length;
        var limitB = dataB.length;

        var i, j;
        var min, proj, nx, ny;

        for (i = (/*POLY_VERTICES*/6); i < limitA; i += (/*POLY_STRIDE*/13))
        {
            min = inf;
            nx = dataA[i + (/*POLY_WNORMAL*/6)];
            ny = dataA[i + (/*POLY_WNORMAL*/6) + 1];
            for (j = (/*POLY_VERTICES*/6); j < limitB; j += (/*POLY_STRIDE*/13))
            {
                proj = (nx * dataB[j + (/*POLY_WORLD*/2)]) +
                       (ny * dataB[j + (/*POLY_WORLD*/2) + 1]);
                if (proj < min)
                {
                    min = proj;
                }
            }
            if (min > dataA[i + (/*POLY_WPROJ*/9)])
            {
                return false;
            }
        }

        for (j = (/*POLY_VERTICES*/6); j < limitB; j += (/*POLY_STRIDE*/13))
        {
            min = inf;
            nx = dataB[j + (/*POLY_WNORMAL*/6)];
            ny = dataB[j + (/*POLY_WNORMAL*/6) + 1];
            for (i = (/*POLY_VERTICES*/6); i < limitA; i += (/*POLY_STRIDE*/13))
            {
                proj = (nx * dataA[i + (/*POLY_WORLD*/2)]) +
                       (ny * dataA[i + (/*POLY_WORLD*/2) + 1]);
                if (proj < min)
                {
                    min = proj;
                }
            }
            if (min > dataB[j + (/*POLY_WPROJ*/9)])
            {
                return false;
            }
        }

        return true;
    }

};

Physics2DCollisionUtils.create = function phys2DCollideFn()
{
    var c = new Physics2DCollisionUtils();
    c._toi = Physics2DTOIEvent.allocate();
    return c;
};

// =========================================================================

//
// Physics2D Device
//
function Physics2DDevice() {}
Physics2DDevice.prototype = {

    version : 1,
    vendor : "Turbulenz",

    getDefaultMaterial : function getDefaultMaterialFn()
    {
        return Physics2DMaterial.defaultMaterial;
    },

    createCircleShape : function createCircleShapeFn(params)
    {
        return Physics2DCircle.create(params);
    },

    createPolygonShape : function createPolygonShapeFn(params)
    {
        return Physics2DPolygon.create(params, null);
    },

    createRigidBody : function createRigidBodyFn(params)
    {
        return Physics2DRigidBody.create(params);
    },

    createWorld : function createWorldFn(params)
    {
        return Physics2DWorld.create(params);
    },

    createMaterial : function createMaterialFn(params)
    {
        return Physics2DMaterial.create(params);
    },

    createSweepAndPruneBroadphase : function createSAPBPhaseFn()
    {
        return Physics2DSweepAndPrune.create();
    },

    createBoxTreeBroadphase : function createBoxBPhaseFn()
    {
        return Physics2DBoxTreeBroadphase.create();
    },

    createCollisionUtils : function createCollisionUtilsFn()
    {
        return Physics2DCollisionUtils.create();
    },

    createPointConstraint : function createPointConstraintFn(params)
    {
        return Physics2DPointConstraint.create(params);
    },

    createWeldConstraint : function createWeldConstraintFn(params)
    {
        return Physics2DWeldConstraint.create(params);
    },

    createAngleConstraint : function createAngleConstraintFn(params)
    {
        return Physics2DAngleConstraint.create(params);
    },

    createDistanceConstraint : function createDistanceConstraintFn(params)
    {
        return Physics2DDistanceConstraint.create(params);
    },

    createLineConstraint : function createLineConstraintFn(params)
    {
        return Physics2DLineConstraint.create(params);
    },

    createMotorConstraint : function createMotorConstraintFn(params)
    {
        return Physics2DMotorConstraint.create(params);
    },

    createPulleyConstraint : function createPulleyConstraintFn(params)
    {
        return Physics2DPulleyConstraint.create(params);
    },

    createCustomConstraint : function createCustomConstraintFn(params)
    {
        return Physics2DCustomConstraint.create(params);
    },

    createRectangleVertices : function createRectangleVerticesFn(minX, minY, maxX, maxY)
    {
        var tmp;
        if (maxX < minX)
        {
            tmp = minX;
            minX = maxX;
            maxX = tmp;
        }
        if (maxY < minY)
        {
            tmp = minY;
            minY = maxY;
            maxY = tmp;
        }

        var v0 = new Physics2DDevice.prototype.floatArray(2);
        v0[0] = minX;
        v0[1] = minY;
        var v1 = new Physics2DDevice.prototype.floatArray(2);
        v1[0] = maxX;
        v1[1] = minY;
        var v2 = new Physics2DDevice.prototype.floatArray(2);
        v2[0] = maxX;
        v2[1] = maxY;
        var v3 = new Physics2DDevice.prototype.floatArray(2);
        v3[0] = minX;
        v3[1] = maxY;

        return [v0, v1, v2, v3];
    },

    createBoxVertices : function createBoxVerticesFn(width, height)
    {
        var w = (width * 0.5);
        var h = (height * 0.5);

        var v0 = new Physics2DDevice.prototype.floatArray(2);
        v0[0] = -w;
        v0[1] = -h;
        var v1 = new Physics2DDevice.prototype.floatArray(2);
        v1[0] = w;
        v1[1] = -h;
        var v2 = new Physics2DDevice.prototype.floatArray(2);
        v2[0] = w;
        v2[1] = h;
        var v3 = new Physics2DDevice.prototype.floatArray(2);
        v3[0] = -w;
        v3[1] = h;

        return [v0, v1, v2, v3];
    },

    createRegularPolygonVertices : function createRegulariVerticesFn(diameterX, diameterY, numVertices)
    {
        var rX = (diameterX  * 0.5);
        var rY = (diameterY * 0.5);
        var vertices = [];

        var num = numVertices;
        var angInc = (Math.PI * 2 / num);

        var i;
        for (i = 0; i < num; i += 1)
        {
            var ang = (angInc * i);
            var vec = vertices[vertices.length] = new Physics2DDevice.prototype.floatArray(2);
            vec[0] = (rX * Math.cos(ang));
            vec[1] = (rY * Math.sin(ang));
        }

        return vertices;
    }
};

Physics2DDevice.create = function Physics2DDeviceFn()
{
    var pd = new Physics2DDevice();
    return pd;
};


// =========================================================================

// Detect correct typed arrays
(function () {
    Physics2DDevice.prototype.floatArray = function (arg) {
        if (arguments.length === 0)
        {
            return [];
        }

        var i, ret;
        if (typeof arg === "number")
        {
            ret = new Array(arg);
        }
        else
        {
            ret = [];
            for (i = 0; i < arg.length; i += 1)
            {
                ret[i] = arg[i];
            }
        }
        return ret;
    };

    Physics2DDevice.prototype.uint16Array = Physics2DDevice.prototype.floatArray;

    var testArray, textDescriptor;
    if (typeof Float32Array !== "undefined")
    {
        testArray = new Float32Array(4);
        textDescriptor = Object.prototype.toString.call(testArray);
        if (textDescriptor === '[object Float32Array]')
        {
            Physics2DDevice.prototype.floatArray = Float32Array;
        }
    }

    if (typeof Uint16Array !== "undefined")
    {
        testArray = new Uint16Array(4);
        textDescriptor = Object.prototype.toString.call(testArray);
        if (textDescriptor === '[object Uint16Array]')
        {
            Physics2DDevice.prototype.uint16Array = Uint16Array;
        }
    }
}());

// Must defer so that floatArray on Physics2DDevice is defined.
Physics2DMaterial.defaultMaterial = Physics2DMaterial.create();

/*jshint white: true*/

// Copyright (c) 2012 Turbulenz Limited
/*global Float32Array: false*/

//
// BoxTreeNode
//
function BoxTreeNode() {}
BoxTreeNode.prototype =
{
    version : 1,

    isLeaf : function boxtreeNodeIsLeafFn()
    {
        return !!this.externalNode;
    },

    reset : function boxtreeNodeResetFn(minX, minY, maxX, maxY,
                                         escapeNodeOffset,
                                         externalNode)
    {
        this.escapeNodeOffset = escapeNodeOffset;
        this.externalNode = externalNode;
        var oldExtents = this.extents;
        oldExtents[0] = minX;
        oldExtents[1] = minY;
        oldExtents[2] = maxX;
        oldExtents[3] = maxY;
    },

    clear : function boxtreeNodeClearFn()
    {
        this.escapeNodeOffset = 1;
        this.externalNode = undefined;
        var oldExtents = this.extents;
        var maxNumber = Number.MAX_VALUE;
        oldExtents[0] = maxNumber;
        oldExtents[1] = maxNumber;
        oldExtents[2] = -maxNumber;
        oldExtents[3] = -maxNumber;
    }
};

// Constructor function
BoxTreeNode.create = function boxtreeNodeCreateFn(extents, escapeNodeOffset, externalNode)
{
    var n = new BoxTreeNode();
    n.escapeNodeOffset = escapeNodeOffset;
    n.externalNode = externalNode;
    n.extents = extents;
    return n;
};


//
// BoxTree
//
function BoxTree() {}
BoxTree.prototype =
{
    version : 1,
    numNodesLeaf : 4,

    add : function addFn(externalNode, extents)
    {
        var endNode = this.endNode;
        externalNode.boxTreeIndex = endNode;
        var copyExtents = new this.arrayConstructor(4);
        copyExtents[0] = extents[0];
        copyExtents[1] = extents[1];
        copyExtents[2] = extents[2];
        copyExtents[3] = extents[3];
        this.nodes[endNode] = BoxTreeNode.create(copyExtents, 1, externalNode);
        this.endNode = (endNode + 1);
        this.needsRebuild = true;
        this.numAdds += 1;
        this.numExternalNodes += 1;
    },

    remove : function removeFn(externalNode)
    {
        var index = externalNode.boxTreeIndex;
        if (index !== undefined)
        {
            if (this.numExternalNodes > 1)
            {
                var nodes = this.nodes;

                nodes[index].clear();

                var endNode = this.endNode;
                if ((index + 1) >= endNode)
                {
                    while (!nodes[endNode - 1].externalNode) // No leaf
                    {
                        endNode -= 1;
                    }
                    this.endNode = endNode;
                }
                else
                {
                    this.needsRebuild = true;
                }
                this.numExternalNodes -= 1;
            }
            else
            {
                this.clear();
            }

            delete externalNode.boxTreeIndex;
        }
    },

    findParent : function findParentFn(nodeIndex)
    {
        var nodes = this.nodes;
        var parentIndex = nodeIndex;
        var nodeDist = 0;
        var parent;
        do
        {
            parentIndex -= 1;
            nodeDist += 1;
            parent = nodes[parentIndex];
        }
        while (parent.escapeNodeOffset <= nodeDist);
        return parent;
    },

    update : function boxTreeUpdateFn(externalNode, extents)
    {
        var index = externalNode.boxTreeIndex;
        if (index !== undefined)
        {
            var min0 = extents[0];
            var min1 = extents[1];
            var max0 = extents[2];
            var max1 = extents[3];

            var needsRebuild = this.needsRebuild;
            var needsRebound = this.needsRebound;
            var nodes = this.nodes;
            var node = nodes[index];
            var nodeExtents = node.extents;

            var doUpdate = (needsRebuild ||
                            needsRebound ||
                            nodeExtents[0] > min0 ||
                            nodeExtents[1] > min1 ||
                            nodeExtents[2] < max0 ||
                            nodeExtents[3] < max1);

            nodeExtents[0] = min0;
            nodeExtents[1] = min1;
            nodeExtents[2] = max0;
            nodeExtents[3] = max1;

            if (doUpdate)
            {
                if (!needsRebuild && 1 < nodes.length)
                {
                    this.numUpdates += 1;
                    if (this.startUpdate > index)
                    {
                        this.startUpdate = index;
                    }
                    if (this.endUpdate < index)
                    {
                        this.endUpdate = index;
                    }
                    if (!needsRebound)
                    {
                        // force a rebound when things change too much
                        if ((2 * this.numUpdates) > this.numExternalNodes)
                        {
                            this.needsRebound = true;
                        }
                        else
                        {
                            var parent = this.findParent(index);
                            var parentExtents = parent.extents;
                            if (parentExtents[0] > min0 ||
                                parentExtents[1] > min1 ||
                                parentExtents[2] < max0 ||
                                parentExtents[3] < max1)
                            {
                                this.needsRebound = true;
                            }
                        }
                    }
                    else
                    {
                        // force a rebuild when things change too much
                        if (this.numUpdates > (3 * this.numExternalNodes))
                        {
                            this.needsRebuild = true;
                            this.numAdds = this.numUpdates;
                        }
                    }
                }
            }
        }
        else
        {
            this.add(externalNode, extents);
        }
    },

    needsFinalize : function needsFinalizeFn()
    {
        return (this.needsRebuild || this.needsRebound);
    },

    finalize : function finalizeFn()
    {
        if (this.needsRebuild)
        {
            this.rebuild();
        }
        else if (this.needsRebound)
        {
            this.rebound();
        }
    },

    rebound : function reboundFn()
    {
        var nodes = this.nodes;
        if (nodes.length > 1)
        {
            var startUpdateNodeIndex = this.startUpdate;
            var endUpdateNodeIndex   = this.endUpdate;

            var nodesStack = [];
            var numNodesStack = 0;
            var topNodeIndex = 0;
            for (;;)
            {
                var topNode = nodes[topNodeIndex];
                var currentNodeIndex = topNodeIndex;
                var currentEscapeNodeIndex = (topNodeIndex + topNode.escapeNodeOffset);
                var nodeIndex = (topNodeIndex + 1); // First child
                var node;
                do
                {
                    node = nodes[nodeIndex];
                    var escapeNodeIndex = (nodeIndex + node.escapeNodeOffset);
                    if (nodeIndex < endUpdateNodeIndex)
                    {
                        if (!node.externalNode) // No leaf
                        {
                            if (escapeNodeIndex > startUpdateNodeIndex)
                            {
                                nodesStack[numNodesStack] = topNodeIndex;
                                numNodesStack += 1;
                                topNodeIndex = nodeIndex;
                            }
                        }
                    }
                    else
                    {
                        break;
                    }
                    nodeIndex = escapeNodeIndex;
                }
                while (nodeIndex < currentEscapeNodeIndex);

                if (topNodeIndex === currentNodeIndex)
                {
                    nodeIndex = (topNodeIndex + 1); // First child
                    node = nodes[nodeIndex];

                    var extents = node.extents;
                    var minX = extents[0];
                    var minY = extents[1];
                    var maxX = extents[2];
                    var maxY = extents[3];

                    nodeIndex = (nodeIndex + node.escapeNodeOffset);
                    while (nodeIndex < currentEscapeNodeIndex)
                    {
                        node = nodes[nodeIndex];
                        extents = node.extents;
                        /*jshint white: false*/
                        if (minX > extents[0]) { minX = extents[0]; }
                        if (minY > extents[1]) { minY = extents[1]; }
                        if (maxX < extents[2]) { maxX = extents[2]; }
                        if (maxY < extents[3]) { maxY = extents[3]; }
                        /*jshint white: true*/
                        nodeIndex = (nodeIndex + node.escapeNodeOffset);
                    }

                    extents = topNode.extents;
                    extents[0] = minX;
                    extents[1] = minY;
                    extents[2] = maxX;
                    extents[3] = maxY;

                    endUpdateNodeIndex = topNodeIndex;

                    if (0 < numNodesStack)
                    {
                        numNodesStack -= 1;
                        topNodeIndex = nodesStack[numNodesStack];
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }

        this.needsRebuild = false;
        this.needsRebound = false;
        this.numAdds = 0;
        //this.numUpdates = 0;
        this.startUpdate = Number.MAX_VALUE;
        this.endUpdate = -Number.MAX_VALUE;
    },

    rebuild : function rebuildFn()
    {
        if (this.numExternalNodes > 0)
        {
            var nodes = this.nodes;

            var buildNodes, numBuildNodes, endNodeIndex;

            if (this.numExternalNodes === nodes.length)
            {
                buildNodes = nodes;
                numBuildNodes = nodes.length;
                nodes = [];
                this.nodes = nodes;
            }
            else
            {
                buildNodes = [];
                buildNodes.length = this.numExternalNodes;
                numBuildNodes = 0;
                endNodeIndex = this.endNode;
                for (var n = 0; n < endNodeIndex; n += 1)
                {
                    var currentNode = nodes[n];
                    if (currentNode.externalNode) // Is leaf
                    {
                        nodes[n] = undefined;
                        buildNodes[numBuildNodes] = currentNode;
                        numBuildNodes += 1;
                    }
                }
                if (buildNodes.length > numBuildNodes)
                {
                    buildNodes.length = numBuildNodes;
                }
            }

            if (numBuildNodes > 1)
            {
                if (numBuildNodes > this.numNodesLeaf &&
                    this.numAdds > 0)
                {
                    if (this.highQuality)
                    {
                        this.sortNodesHighQuality(buildNodes);
                    }
                    else
                    {
                        this.sortNodes(buildNodes);
                    }
                }

                this.recursiveBuild(buildNodes, 0, numBuildNodes, 0);

                endNodeIndex = nodes[0].escapeNodeOffset;
                if (nodes.length > endNodeIndex)
                {
                    nodes.length = endNodeIndex;
                }
                this.endNode = endNodeIndex;
            }
            else
            {
                var rootNode = buildNodes[0];
                rootNode.externalNode.boxTreeIndex = 0;
                nodes.length = 1;
                nodes[0] = rootNode;
                this.endNode = 1;
            }
            buildNodes = null;
        }

        this.needsRebuild = false;
        this.needsRebound = false;
        this.numAdds = 0;
        this.numUpdates = 0;
        this.startUpdate = Number.MAX_VALUE;
        this.endUpdate = -Number.MAX_VALUE;
    },

    sortNodes : function sortNodesFn(nodes)
    {
        var numNodesLeaf = this.numNodesLeaf;
        var numNodes = nodes.length;

        function getkeyXfn(node)
        {
            var extents = node.extents;
            return (extents[0] + extents[2]);
        }

        function getkeyYfn(node)
        {
            var extents = node.extents;
            return (extents[1] + extents[3]);
        }

        function getreversekeyXfn(node)
        {
            var extents = node.extents;
            return -(extents[0] + extents[2]);
        }

        function getreversekeyYfn(node)
        {
            var extents = node.extents;
            return -(extents[1] + extents[3]);
        }

        var nthElement = this.nthElement;
        var reverse = false;
        var axis = 0;

        function sortNodesRecursive(nodes, startIndex, endIndex)
        {
            /*jshint bitwise: false*/
            var splitNodeIndex = ((startIndex + endIndex) >> 1);
            /*jshint bitwise: true*/

            if (axis === 0)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyXfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXfn);
                }
            }
            else //if (axis === 1)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyYfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyYfn);
                }
            }

            if (axis === 0)
            {
                axis = 2;
            }
            else if (axis === 2)
            {
                axis = 1;
            }
            else //if (axis === 1)
            {
                axis = 0;
            }

            reverse = !reverse;

            if ((startIndex + numNodesLeaf) < splitNodeIndex)
            {
                sortNodesRecursive(nodes, startIndex, splitNodeIndex);
            }

            if ((splitNodeIndex + numNodesLeaf) < endIndex)
            {
                sortNodesRecursive(nodes, splitNodeIndex, endIndex);
            }
        }

        sortNodesRecursive(nodes, 0, numNodes);
    },

    sortNodesHighQuality : function sortNodesHighQualityFn(nodes)
    {
        var numNodesLeaf = this.numNodesLeaf;
        var numNodes = nodes.length;

        function getkeyXfn(node)
        {
            var extents = node.extents;
            return (extents[0] + extents[2]);
        }

        function getkeyYfn(node)
        {
            var extents = node.extents;
            return (extents[1] + extents[3]);
        }

        function getkeyXYfn(node)
        {
            var extents = node.extents;
            return (extents[0] + extents[1] + extents[2] + extents[3]);
        }

        function getkeyYXfn(node)
        {
            var extents = node.extents;
            return (extents[0] - extents[1] + extents[2] - extents[3]);
        }

        function getreversekeyXfn(node)
        {
            var extents = node.extents;
            return -(extents[0] + extents[2]);
        }

        function getreversekeyYfn(node)
        {
            var extents = node.extents;
            return -(extents[1] + extents[3]);
        }

        function getreversekeyXYfn(node)
        {
            var extents = node.extents;
            return -(extents[0] + extents[1] + extents[2] + extents[3]);
        }

        function getreversekeyYXfn(node)
        {
            var extents = node.extents;
            return -(extents[0] - extents[1] + extents[2] - extents[3]);
        }

        var nthElement = this.nthElement;
        var calculateSAH = this.calculateSAH;
        var reverse = false;

        function sortNodesHighQualityRecursive(nodes, startIndex, endIndex)
        {
            /*jshint bitwise: false*/
            var splitNodeIndex = ((startIndex + endIndex) >> 1);
            /*jshint bitwise: true*/

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXfn);
            var sahX = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyYfn);
            var sahY = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXYfn);
            var sahXY = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyYXfn);
            var sahYX = (calculateSAH(nodes, startIndex, splitNodeIndex) + calculateSAH(nodes, splitNodeIndex, endIndex));

            if (sahX <= sahY &&
                sahX <= sahXY &&
                sahX <= sahYX)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyXfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXfn);
                }
            }
            else if (sahY <= sahXY &&
                     sahY <= sahYX)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyYfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyYfn);
                }
            }
            else if (sahXY <= sahYX)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyXYfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyXYfn);
                }
            }
            else //if (sahYX <= sahXY)
            {
                if (reverse)
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getreversekeyYXfn);
                }
                else
                {
                    nthElement(nodes, startIndex, splitNodeIndex, endIndex, getkeyYXfn);
                }
            }

            reverse = !reverse;

            if ((startIndex + numNodesLeaf) < splitNodeIndex)
            {
                sortNodesHighQualityRecursive(nodes, startIndex, splitNodeIndex);
            }

            if ((splitNodeIndex + numNodesLeaf) < endIndex)
            {
                sortNodesHighQualityRecursive(nodes, splitNodeIndex, endIndex);
            }
        }

        sortNodesHighQualityRecursive(nodes, 0, numNodes);
    },

    calculateSAH : function calculateSAHFn(buildNodes, startIndex, endIndex)
    {
        var buildNode, extents, minX, minY, maxX, maxY;

        buildNode = buildNodes[startIndex];
        extents = buildNode.extents;
        minX = extents[0];
        minY = extents[1];
        maxX = extents[2];
        maxY = extents[3];

        for (var n = (startIndex + 1); n < endIndex; n += 1)
        {
            buildNode = buildNodes[n];
            extents = buildNode.extents;
            /*jshint white: false*/
            if (minX > extents[0]) { minX = extents[0]; }
            if (minY > extents[1]) { minY = extents[1]; }
            if (maxX < extents[2]) { maxX = extents[2]; }
            if (maxY < extents[3]) { maxY = extents[3]; }
            /*jshint white: true*/
        }

        return ((maxX - minX) + (maxY - minY));
    },

    nthElement : function nthElementFn(nodes, first, nth, last, getkey)
    {
        function medianFn(a, b, c)
        {
            if (a < b)
            {
                if (b < c)
                {
                    return b;
                }
                else if (a < c)
                {
                    return c;
                }
                else
                {
                    return a;
                }
            }
            else if (a < c)
            {
                return a;
            }
            else if (b < c)
            {
                return c;
            }
            return b;
        }

        function insertionSortFn(nodes, first, last, getkey)
        {
            var sorted = (first + 1);
            while (sorted !== last)
            {
                var tempNode = nodes[sorted];
                var tempKey = getkey(tempNode);

                var next = sorted;
                var current = (sorted - 1);

                while (next !== first && tempKey < getkey(nodes[current]))
                {
                    nodes[next] = nodes[current];
                    next -= 1;
                    current -= 1;
                }

                if (next !== sorted)
                {
                    nodes[next] = tempNode;
                }

                sorted += 1;
            }
        }

        while ((last - first) > 8)
        {
            /*jshint bitwise: false*/
            var midValue = medianFn(getkey(nodes[first]),
                                    getkey(nodes[first + ((last - first) >> 1)]),
                                    getkey(nodes[last - 1]));
            /*jshint bitwise: true*/

            var firstPos = first;
            var lastPos  = last;
            var midPos;
            for (; ; firstPos += 1)
            {
                while (getkey(nodes[firstPos]) < midValue)
                {
                    firstPos += 1;
                }

                do
                {
                    lastPos -= 1;
                }
                while (midValue < getkey(nodes[lastPos]));

                if (firstPos >= lastPos)
                {
                    midPos = firstPos;
                    break;
                }
                else
                {
                    var temp = nodes[firstPos];
                    nodes[firstPos] = nodes[lastPos];
                    nodes[lastPos]  = temp;
                }
            }

            if (midPos <= nth)
            {
                first = midPos;
            }
            else
            {
                last = midPos;
            }
        }

        insertionSortFn(nodes, first, last, getkey);
    },

    recursiveBuild : function recursiveBuildFn(buildNodes, startIndex, endIndex, lastNodeIndex)
    {
        var nodes = this.nodes;
        var nodeIndex = lastNodeIndex;
        lastNodeIndex += 1;

        var minX, minY, maxX, maxY, extents;
        var buildNode, lastNode;

        if ((startIndex + this.numNodesLeaf) >= endIndex)
        {
            buildNode = buildNodes[startIndex];
            extents = buildNode.extents;
            minX = extents[0];
            minY = extents[1];
            maxX = extents[2];
            maxY = extents[3];

            buildNode.externalNode.boxTreeIndex = lastNodeIndex;
            nodes[lastNodeIndex] = buildNode;

            for (var n = (startIndex + 1); n < endIndex; n += 1)
            {
                buildNode = buildNodes[n];
                extents = buildNode.extents;
                /*jshint white: false*/
                if (minX > extents[0]) { minX = extents[0]; }
                if (minY > extents[1]) { minY = extents[1]; }
                if (maxX < extents[2]) { maxX = extents[2]; }
                if (maxY < extents[3]) { maxY = extents[3]; }
                /*jshint white: true*/
                lastNodeIndex += 1;
                buildNode.externalNode.boxTreeIndex = lastNodeIndex;
                nodes[lastNodeIndex] = buildNode;
            }

            lastNode = nodes[lastNodeIndex];
        }
        else
        {
            /*jshint bitwise: false*/
            var splitPosIndex = ((startIndex + endIndex) >> 1);
            /*jshint bitwise: true*/

            if ((startIndex + 1) >= splitPosIndex)
            {
                buildNode = buildNodes[startIndex];
                buildNode.externalNode.boxTreeIndex = lastNodeIndex;
                nodes[lastNodeIndex] = buildNode;
            }
            else
            {
                this.recursiveBuild(buildNodes, startIndex, splitPosIndex, lastNodeIndex);
            }

            lastNode = nodes[lastNodeIndex];
            extents = lastNode.extents;
            minX = extents[0];
            minY = extents[1];
            maxX = extents[2];
            maxY = extents[3];

            lastNodeIndex = (lastNodeIndex + lastNode.escapeNodeOffset);

            if ((splitPosIndex + 1) >= endIndex)
            {
                buildNode = buildNodes[splitPosIndex];
                buildNode.externalNode.boxTreeIndex = lastNodeIndex;
                nodes[lastNodeIndex] = buildNode;
            }
            else
            {
                this.recursiveBuild(buildNodes, splitPosIndex, endIndex, lastNodeIndex);
            }

            lastNode = nodes[lastNodeIndex];
            extents = lastNode.extents;
            /*jshint white: false*/
            if (minX > extents[0]) { minX = extents[0]; }
            if (minY > extents[1]) { minY = extents[1]; }
            if (maxX < extents[2]) { maxX = extents[2]; }
            if (maxY < extents[3]) { maxY = extents[3]; }
            /*jshint white: true*/
        }

        var node = nodes[nodeIndex];
        if (node !== undefined)
        {
            node.reset(minX, minY, maxX, maxY,
                       (lastNodeIndex + lastNode.escapeNodeOffset - nodeIndex));
        }
        else
        {
            var parentExtents = new this.arrayConstructor(4);
            parentExtents[0] = minX;
            parentExtents[1] = minY;
            parentExtents[2] = maxX;
            parentExtents[3] = maxY;

            nodes[nodeIndex] = BoxTreeNode.create(parentExtents,
                                                  (lastNodeIndex + lastNode.escapeNodeOffset - nodeIndex));
        }
    },

    getVisibleNodes : function getVisibleNodesFn(planes, visibleNodes)
    {
        if (this.numExternalNodes > 0)
        {
            var nodes = this.nodes;
            var endNodeIndex = this.endNode;
            var numPlanes = planes.length;
            var numVisibleNodes = visibleNodes.length;
            var node, extents, endChildren;
            var n0, n1, p0, p1;
            var isInside, n, plane, d0, d1;
            var nodeIndex = 0;

            for (;;)
            {
                node = nodes[nodeIndex];
                extents = node.extents;
                n0 = extents[0];
                n1 = extents[1];
                p0 = extents[2];
                p1 = extents[3];
                //isInsidePlanesBox
                isInside = true;
                n = 0;
                do
                {
                    plane = planes[n];
                    d0 = plane[0];
                    d1 = plane[1];
                    if ((d0 * (d0 < 0 ? n0 : p0) + d1 * (d1 < 0 ? n1 : p1)) < plane[2])
                    {
                        isInside = false;
                        break;
                    }
                    n += 1;
                }
                while (n < numPlanes);
                if (isInside)
                {
                    if (node.externalNode) // Is leaf
                    {
                        visibleNodes[numVisibleNodes] = node.externalNode;
                        numVisibleNodes += 1;
                        nodeIndex += 1;
                        if (nodeIndex >= endNodeIndex)
                        {
                            break;
                        }
                    }
                    else
                    {
                        //isFullyInsidePlanesBox
                        isInside = true;
                        n = 0;
                        do
                        {
                            plane = planes[n];
                            d0 = plane[0];
                            d1 = plane[1];
                            if ((d0 * (d0 > 0 ? n0 : p0) + d1 * (d1 > 0 ? n1 : p1)) < plane[2])
                            {
                                isInside = false;
                                break;
                            }
                            n += 1;
                        }
                        while (n < numPlanes);
                        if (isInside)
                        {
                            endChildren = (nodeIndex + node.escapeNodeOffset);
                            nodeIndex += 1;
                            do
                            {
                                node = nodes[nodeIndex];
                                if (node.externalNode) // Is leaf
                                {
                                    visibleNodes[numVisibleNodes] = node.externalNode;
                                    numVisibleNodes += 1;
                                }
                                nodeIndex += 1;
                            }
                            while (nodeIndex < endChildren);
                            if (nodeIndex >= endNodeIndex)
                            {
                                break;
                            }
                        }
                        else
                        {
                            nodeIndex += 1;
                        }
                    }
                }
                else
                {
                    nodeIndex += node.escapeNodeOffset;
                    if (nodeIndex >= endNodeIndex)
                    {
                        break;
                    }
                }
            }
        }
    },

    getOverlappingNodes : function getOverlappingNodesFn(queryExtents, overlappingNodes, startIndex)
    {
        if (this.numExternalNodes > 0)
        {
            var queryMinX = queryExtents[0];
            var queryMinY = queryExtents[1];
            var queryMaxX = queryExtents[2];
            var queryMaxY = queryExtents[3];
            var nodes = this.nodes;
            var endNodeIndex = this.endNode;
            var node, extents, endChildren;
            var numOverlappingNodes = 0;
            var storageIndex = (startIndex === undefined) ? overlappingNodes.length : startIndex;
            var nodeIndex = 0;
            for (;;)
            {
                node = nodes[nodeIndex];
                extents = node.extents;
                var minX = extents[0];
                var minY = extents[1];
                var maxX = extents[2];
                var maxY = extents[3];
                if (queryMinX <= maxX &&
                    queryMinY <= maxY &&
                    queryMaxX >= minX &&
                    queryMaxY >= minY)
                {
                    if (node.externalNode) // Is leaf
                    {
                        overlappingNodes[storageIndex] = node.externalNode;
                        storageIndex += 1;
                        numOverlappingNodes += 1;
                        nodeIndex += 1;
                        if (nodeIndex >= endNodeIndex)
                        {
                            break;
                        }
                    }
                    else
                    {
                        if (queryMaxX >= maxX &&
                            queryMaxY >= maxY &&
                            queryMinX <= minX &&
                            queryMinY <= minY)
                        {
                            endChildren = (nodeIndex + node.escapeNodeOffset);
                            nodeIndex += 1;
                            do
                            {
                                node = nodes[nodeIndex];
                                if (node.externalNode) // Is leaf
                                {
                                    overlappingNodes[storageIndex] = node.externalNode;
                                    storageIndex += 1;
                                    numOverlappingNodes += 1;
                                }
                                nodeIndex += 1;
                            }
                            while (nodeIndex < endChildren);
                            if (nodeIndex >= endNodeIndex)
                            {
                                break;
                            }
                        }
                        else
                        {
                            nodeIndex += 1;
                        }
                    }
                }
                else
                {
                    nodeIndex += node.escapeNodeOffset;
                    if (nodeIndex >= endNodeIndex)
                    {
                        break;
                    }
                }
            }
            return numOverlappingNodes;
        }
        else
        {
            return 0;
        }
    },

    getCircleOverlappingNodes : function getCircleOverlappingNodesFn(center, radius, overlappingNodes)
    {
        if (this.numExternalNodes > 0)
        {
            var radiusSquared = (radius * radius);
            var centerX = center[0];
            var centerY = center[1];
            var nodes = this.nodes;
            var endNodeIndex = this.endNode;
            var node, extents;
            var numOverlappingNodes = overlappingNodes.length;
            var nodeIndex = 0;
            for (;;)
            {
                node = nodes[nodeIndex];
                extents = node.extents;
                var minX = extents[0];
                var minY = extents[1];
                var maxX = extents[2];
                var maxY = extents[3];
                var totalDistance = 0, sideDistance;
                if (centerX < minX)
                {
                    sideDistance = (minX - centerX);
                    totalDistance += (sideDistance * sideDistance);
                }
                else if (centerX > maxX)
                {
                    sideDistance = (centerX - maxX);
                    totalDistance += (sideDistance * sideDistance);
                }
                if (centerY < minY)
                {
                    sideDistance = (minY - centerY);
                    totalDistance += (sideDistance * sideDistance);
                }
                else if (centerY > maxY)
                {
                    sideDistance = (centerY - maxY);
                    totalDistance += (sideDistance * sideDistance);
                }
                if (totalDistance <= radiusSquared)
                {
                    nodeIndex += 1;
                    if (node.externalNode) // Is leaf
                    {
                        overlappingNodes[numOverlappingNodes] = node.externalNode;
                        numOverlappingNodes += 1;
                        if (nodeIndex >= endNodeIndex)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    nodeIndex += node.escapeNodeOffset;
                    if (nodeIndex >= endNodeIndex)
                    {
                        break;
                    }
                }
            }
        }
    },

    getOverlappingPairs : function getOverlappingPairsFn(overlappingPairs, startIndex)
    {
        if (this.numExternalNodes > 0)
        {
            var nodes = this.nodes;
            var endNodeIndex = this.endNode;
            var currentNode, currentExternalNode, node, extents;
            var numInsertions = 0;
            var storageIndex = (startIndex === undefined) ? overlappingPairs.length : startIndex;
            var currentNodeIndex = 0, nodeIndex;
            for (;;)
            {
                currentNode = nodes[currentNodeIndex];
                while (!currentNode.externalNode) // No leaf
                {
                    currentNodeIndex += 1;
                    currentNode = nodes[currentNodeIndex];
                }

                currentNodeIndex += 1;
                if (currentNodeIndex < endNodeIndex)
                {
                    currentExternalNode = currentNode.externalNode;
                    extents = currentNode.extents;
                    var minX = extents[0];
                    var minY = extents[1];
                    var maxX = extents[2];
                    var maxY = extents[3];

                    nodeIndex = currentNodeIndex;
                    for (;;)
                    {
                        node = nodes[nodeIndex];
                        extents = node.extents;
                        if (minX <= extents[2] &&
                            minY <= extents[3] &&
                            maxX >= extents[0] &&
                            maxY >= extents[1])
                        {
                            nodeIndex += 1;
                            if (node.externalNode) // Is leaf
                            {
                                overlappingPairs[storageIndex] = currentExternalNode;
                                overlappingPairs[storageIndex + 1] = node.externalNode;
                                storageIndex += 2;
                                numInsertions += 2;
                                if (nodeIndex >= endNodeIndex)
                                {
                                    break;
                                }
                            }
                        }
                        else
                        {
                            nodeIndex += node.escapeNodeOffset;
                            if (nodeIndex >= endNodeIndex)
                            {
                                break;
                            }
                        }
                    }
                }
                else
                {
                    break;
                }
            }
            return numInsertions;
        }
        else
        {
            return 0;
        }
    },

    getRootNode : function getRootNodeFn()
    {
        return this.nodes[0];
    },

    getNodes : function getNodesFn()
    {
        return this.nodes;
    },

    getEndNodeIndex : function getEndNodeIndexFn()
    {
        return this.endNode;
    },

    clear : function clearFn()
    {
        this.nodes = [];
        this.endNode = 0;
        this.needsRebuild = false;
        this.needsRebound = false;
        this.numAdds = 0;
        this.numUpdates = 0;
        this.numExternalNodes = 0;
        this.startUpdate = Number.MAX_VALUE;
        this.endUpdate = -Number.MAX_VALUE;
    }
};

BoxTree.rayTest = function boxtreeRayTestFn(trees, ray, callback)
{
    // convert ray to parametric form
    var origin = ray.origin;
    var direction = ray.direction;

    // values used throughout calculations.
    var o0 = origin[0];
    var o1 = origin[1];
    var d0 = direction[0];
    var d1 = direction[1];
    var id0 = 1 / d0;
    var id1 = 1 / d1;

    // evaluate distance factor to a node's extents from ray origin, along direction
    // use this to induce an ordering on which nodes to check.
    function distanceExtents(extents, upperBound)
    {
        var min0 = extents[0];
        var min1 = extents[1];
        var max0 = extents[2];
        var max1 = extents[3];

        // treat origin internal to extents as 0 distance.
        if (min0 <= o0 && o0 <= max0 &&
            min1 <= o1 && o1 <= max1)
        {
            return 0.0;
        }

        var tmin, tmax;
        var tymin, tymax;
        var del;
        if (d0 >= 0)
        {
            // Deal with cases where d0 == 0
            del = (min0 - o0);
            tmin = ((del === 0) ? 0 : (del * id0));
            del = (max0 - o0);
            tmax = ((del === 0) ? 0 : (del * id0));
        }
        else
        {
            tmin = ((max0 - o0) * id0);
            tmax = ((min0 - o0) * id0);
        }

        if (d1 >= 0)
        {
            // Deal with cases where d1 == 0
            del = (min1 - o1);
            tymin = ((del === 0) ? 0 : (del * id1));
            del = (max1 - o1);
            tymax = ((del === 0) ? 0 : (del * id1));
        }
        else
        {
            tymin = ((max1 - o1) * id1);
            tymax = ((min1 - o1) * id1);
        }

        if ((tmin > tymax) || (tymin > tmax))
        {
            return undefined;
        }

        if (tymin > tmin)
        {
            tmin = tymin;
        }

        if (tymax < tmax)
        {
            tmax = tymax;
        }

        if (tmin < 0)
        {
            tmin = tmax;
        }

        return (0 <= tmin && tmin < upperBound) ? tmin : undefined;
    }

    // we traverse both trees at once
    // keeping a priority list of nodes to check next.

    // TODO: possibly implement priority list more effeciently?
    //       binary heap probably too much overhead in typical case.
    var priorityList = [];
    //current upperBound on distance to first intersection
    //and current closest object properties
    var minimumResult = null;

    //if node is a leaf, intersect ray with shape
    // otherwise insert node into priority list.
    function processNode(tree, nodeIndex, upperBound)
    {
        var nodes = tree.getNodes();
        var node = nodes[nodeIndex];
        var distance = distanceExtents(node.extents, upperBound);
        if (distance === undefined)
        {
            return upperBound;
        }

        if (node.externalNode)
        {
            var result = callback(tree, node.externalNode, ray, distance, upperBound);
            if (result)
            {
                minimumResult = result;
                upperBound = result.factor;
            }
        }
        else
        {
            // TODO: change to binary search?
            var length = priorityList.length;
            var i;
            for (i = 0; i < length; i += 1)
            {
                var curObj = priorityList[i];
                if (distance > curObj.distance)
                {
                    break;
                }
            }

            //insert node at index i
            priorityList.splice(i - 1, 0, {
                    tree: tree,
                    nodeIndex: nodeIndex,
                    distance: distance
                });
        }

        return upperBound;
    }

    var upperBound = ray.maxFactor;

    var tree;
    var i;
    for (i = 0; i < trees.length; i += 1)
    {
        tree = trees[i];
        if (tree.endNode !== 0)
        {
            upperBound = processNode(tree, 0, upperBound);
        }
    }

    while (priorityList.length !== 0)
    {
        var nodeObj = priorityList.pop();
        // A node inserted into priority list after this one may have
        // moved the upper bound.
        if (nodeObj.distance >= upperBound)
        {
            continue;
        }

        var nodeIndex = nodeObj.nodeIndex;
        tree = nodeObj.tree;
        var nodes = tree.getNodes();

        var node = nodes[nodeIndex];
        var maxIndex = nodeIndex + node.escapeNodeOffset;

        var childIndex = nodeIndex + 1;
        do
        {
            upperBound = processNode(tree, childIndex, upperBound);
            childIndex += nodes[childIndex].escapeNodeOffset;
        }
        while (childIndex < maxIndex);
    }

    return minimumResult;
};

// Constructor function
BoxTree.create = function boxtreeCreateFn(highQuality)
{
    var t = new BoxTree();
    t.clear();
    if (highQuality)
    {
        t.highQuality = true;
    }
    return t;
};

// Detect correct typed arrays
(function () {
    BoxTree.prototype.arrayConstructor = Array;
    if (typeof Float32Array !== "undefined")
    {
        var testArray = new Float32Array(4);
        var textDescriptor = Object.prototype.toString.call(testArray);
        if (textDescriptor === '[object Float32Array]')
        {
            BoxTree.prototype.arrayConstructor = Float32Array;
        }
    }
}());


function Game(renderer) {
		
	var backgroundColour = [0.3,0.3,0.3,1];

	function update() {
		renderer.draw(backgroundColour, null);
	}	

	return { update : update };
}
function Rendering(drawing2d, graphicsDevice, spriteRendering) {
	

	function render(clearColour) {
		if (graphicsDevice.beginFrame()) {			
			drawing2d.setBackBuffer();
			drawing2d.clear(clearColour);
			drawing2d.begin('alpha');
			spriteRendering.render();
			drawing2d.end();
			graphicsDevice.endFrame();
		}
	}

	return { draw : render };
}
function SpriteRendering(drawing2d) {
	
	var spriteCollection = [];

	function render() {
		for (var spriteCount = 0, arrayLength = spriteCollection.length; spriteCount < arrayLength; spriteCount++) {
			drawing2d.drawSprite(spriteCollection[spriteCount]);
		}

		spriteCollection = [];
	}

	function addSprite(sprite) {
		spriteCollection.push(sprite);
	}

	return { render : render,
		addSprite : addSprite };
}
/*jslint browser: true*/
/*global TurbulenzEngine,TurbulenzServices,Canvas,Draw2D*/
(function() {
	TurbulenzEngine.onload = function onload() {
	    
	    var graphicsDevice = TurbulenzEngine.createGraphicsDevice({}),
	    	drawing2d = Draw2D.create({ graphicsDevice : graphicsDevice }),
	    	spriteRendering = new SpriteRendering(drawing2d, graphicsDevice),
	    	rendering = new Rendering(drawing2d, graphicsDevice, spriteRendering),
			requestHandler = RequestHandler.create({}),
			game = new Game(spriteRendering),
			backgroundColour = [0.3,0.3,0.3,1],
			background,
			taxi;

	    function update() {
	    	if(!!background && !!taxi) {
		    	spriteRendering.addSprite(background);
		    	spriteRendering.addSprite(taxi);
	    	}
	    	
	    	rendering.draw();	    	
	    }

	    TurbulenzEngine.onunload = function gameOnunload() {
			spriteDrawing = null;		
			requestHandler = null;
			sprite = null;	
			graphicsDevice = null;
			game = null;
		};

		function sessionCreated(gameSession) {
			TurbulenzServices.createMappingTable(requestHandler,
				gameSession,
				function (table) {
					graphicsDevice.createTexture({ src : table.getURL("textures/Sky512.jpg"),
						mipmaps : true,
						onload : function (texture) {
							background = Draw2DSprite.create({
							x : 512,
							y : 256,
							texture : texture						
							});							
						}
					});

					graphicsDevice.createTexture({ src : table.getURL("textures/taxi.png"),
						mipmaps : true,
						onload : function (texture) {
							taxi = Draw2DSprite.create({
							x : 50,
							y : 50,
							texture : texture						
							});
						}
					});
				});
		}

		TurbulenzServices.createGameSession(requestHandler, sessionCreated);
		TurbulenzEngine.setInterval(update, 1000 / 60);
	};
}());
window.TurbulenzEngine = TurbulenzEngine;}());